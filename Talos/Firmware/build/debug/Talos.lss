
build/debug/Talos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009474  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08009608  08009608  0000a608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009aac  08009aac  0000aaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ab4  08009ab4  0000aab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009ab8  08009ab8  0000aab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08009abc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
  8 .bss          00000330  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000504  20000504  0000b1d4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 11 .comment      00000045  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000272d3  00000000  00000000  0000b249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db8  00000000  00000000  0003251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010a3d  00000000  00000000  000352d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  00045d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131c  00000000  00000000  00047618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e87  00000000  00000000  00048934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009888  00000000  00000000  000617bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00006820  00000000  00000000  0006b044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000226  00000000  00000000  00071864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b80c 	b.w	8000c78 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f008 fb62 	bl	8009330 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_idiv0>:
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <deregister_tm_clones>:
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <deregister_tm_clones+0x10>)
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <deregister_tm_clones+0x14>)
 8000c80:	4283      	cmp	r3, r0
 8000c82:	d002      	beq.n	8000c8a <deregister_tm_clones+0xe>
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <deregister_tm_clones+0x18>)
 8000c86:	b103      	cbz	r3, 8000c8a <deregister_tm_clones+0xe>
 8000c88:	4718      	bx	r3
 8000c8a:	4770      	bx	lr
 8000c8c:	200001d4 	.word	0x200001d4
 8000c90:	200001d4 	.word	0x200001d4
 8000c94:	00000000 	.word	0x00000000

08000c98 <register_tm_clones>:
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <register_tm_clones+0x18>)
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <register_tm_clones+0x1c>)
 8000c9c:	1a1b      	subs	r3, r3, r0
 8000c9e:	0fd9      	lsrs	r1, r3, #31
 8000ca0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000ca4:	1049      	asrs	r1, r1, #1
 8000ca6:	d002      	beq.n	8000cae <register_tm_clones+0x16>
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <register_tm_clones+0x20>)
 8000caa:	b103      	cbz	r3, 8000cae <register_tm_clones+0x16>
 8000cac:	4718      	bx	r3
 8000cae:	4770      	bx	lr
 8000cb0:	200001d4 	.word	0x200001d4
 8000cb4:	200001d4 	.word	0x200001d4
 8000cb8:	00000000 	.word	0x00000000

08000cbc <__do_global_dtors_aux>:
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4c06      	ldr	r4, [pc, #24]	@ (8000cd8 <__do_global_dtors_aux+0x1c>)
 8000cc0:	7823      	ldrb	r3, [r4, #0]
 8000cc2:	b943      	cbnz	r3, 8000cd6 <__do_global_dtors_aux+0x1a>
 8000cc4:	f7ff ffda 	bl	8000c7c <deregister_tm_clones>
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <__do_global_dtors_aux+0x20>)
 8000cca:	b113      	cbz	r3, 8000cd2 <__do_global_dtors_aux+0x16>
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <__do_global_dtors_aux+0x24>)
 8000cce:	f3af 8000 	nop.w
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	7023      	strb	r3, [r4, #0]
 8000cd6:	bd10      	pop	{r4, pc}
 8000cd8:	200001d4 	.word	0x200001d4
 8000cdc:	00000000 	.word	0x00000000
 8000ce0:	080095ec 	.word	0x080095ec

08000ce4 <frame_dummy>:
 8000ce4:	b508      	push	{r3, lr}
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <frame_dummy+0x18>)
 8000ce8:	b11b      	cbz	r3, 8000cf2 <frame_dummy+0xe>
 8000cea:	4905      	ldr	r1, [pc, #20]	@ (8000d00 <frame_dummy+0x1c>)
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <frame_dummy+0x20>)
 8000cee:	f3af 8000 	nop.w
 8000cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000cf6:	f7ff bfcf 	b.w	8000c98 <register_tm_clones>
 8000cfa:	bf00      	nop
 8000cfc:	00000000 	.word	0x00000000
 8000d00:	200001d8 	.word	0x200001d8
 8000d04:	080095ec 	.word	0x080095ec

08000d08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000d08:	b500      	push	{lr}
 8000d0a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	460a      	mov	r2, r1
 8000d12:	4601      	mov	r1, r0
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <BSP_SD_ReadBlocks+0x1c>)
 8000d16:	f002 f9c5 	bl	80030a4 <HAL_SD_ReadBlocks>
 8000d1a:	b100      	cbz	r0, 8000d1e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8000d1c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8000d1e:	b003      	add	sp, #12
 8000d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d24:	200002d8 	.word	0x200002d8

08000d28 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000d28:	b500      	push	{lr}
 8000d2a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	460a      	mov	r2, r1
 8000d32:	4601      	mov	r1, r0
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <BSP_SD_WriteBlocks+0x1c>)
 8000d36:	f002 fadd 	bl	80032f4 <HAL_SD_WriteBlocks>
 8000d3a:	b100      	cbz	r0, 8000d3e <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8000d3c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8000d3e:	b003      	add	sp, #12
 8000d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d44:	200002d8 	.word	0x200002d8

08000d48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8000d48:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000d4a:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <BSP_SD_GetCardState+0x10>)
 8000d4c:	f002 fdb5 	bl	80038ba <HAL_SD_GetCardState>
}
 8000d50:	3804      	subs	r0, #4
 8000d52:	bf18      	it	ne
 8000d54:	2001      	movne	r0, #1
 8000d56:	bd08      	pop	{r3, pc}
 8000d58:	200002d8 	.word	0x200002d8

08000d5c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8000d5c:	b508      	push	{r3, lr}
 8000d5e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8000d60:	4801      	ldr	r0, [pc, #4]	@ (8000d68 <BSP_SD_GetCardInfo+0xc>)
 8000d62:	f002 fd98 	bl	8003896 <HAL_SD_GetCardInfo>
}
 8000d66:	bd08      	pop	{r3, pc}
 8000d68:	200002d8 	.word	0x200002d8

08000d6c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8000d6c:	b500      	push	{lr}
 8000d6e:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8000d76:	f000 f825 	bl	8000dc4 <BSP_PlatformIsDetected>
 8000d7a:	b910      	cbnz	r0, 8000d82 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8000d82:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000d86:	b003      	add	sp, #12
 8000d88:	f85d fb04 	ldr.w	pc, [sp], #4

08000d8c <BSP_SD_Init>:
{
 8000d8c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8000d8e:	f7ff ffed 	bl	8000d6c <BSP_SD_IsDetected>
 8000d92:	2801      	cmp	r0, #1
 8000d94:	d001      	beq.n	8000d9a <BSP_SD_Init+0xe>
    return MSD_ERROR;
 8000d96:	2001      	movs	r0, #1
}
 8000d98:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 8000d9a:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <BSP_SD_Init+0x18>)
 8000d9c:	f002 fd60 	bl	8003860 <HAL_SD_Init>
  return sd_state;
 8000da0:	e7fa      	b.n	8000d98 <BSP_SD_Init+0xc>
 8000da2:	bf00      	nop
 8000da4:	200002d8 	.word	0x200002d8

08000da8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000da8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8000daa:	4903      	ldr	r1, [pc, #12]	@ (8000db8 <MX_FATFS_Init+0x10>)
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <MX_FATFS_Init+0x14>)
 8000dae:	f000 f83f 	bl	8000e30 <FATFS_LinkDriver>
 8000db2:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <MX_FATFS_Init+0x18>)
 8000db4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000db6:	bd08      	pop	{r3, pc}
 8000db8:	200001f0 	.word	0x200001f0
 8000dbc:	08009654 	.word	0x08009654
 8000dc0:	200001f4 	.word	0x200001f4

08000dc4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8000dc4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <BSP_PlatformIsDetected+0x14>)
 8000dca:	f001 f8ad 	bl	8001f28 <HAL_GPIO_ReadPin>
 8000dce:	b908      	cbnz	r0, 8000dd4 <BSP_PlatformIsDetected+0x10>
    uint8_t status = SD_PRESENT;
 8000dd0:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8000dd2:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e7fc      	b.n	8000dd2 <BSP_PlatformIsDetected+0xe>
 8000dd8:	40020000 	.word	0x40020000

08000ddc <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <FATFS_LinkDriverEx+0x50>)
 8000dde:	7a5b      	ldrb	r3, [r3, #9]
 8000de0:	bb13      	cbnz	r3, 8000e28 <FATFS_LinkDriverEx+0x4c>
{
 8000de2:	b510      	push	{r4, lr}
 8000de4:	4604      	mov	r4, r0
 8000de6:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <FATFS_LinkDriverEx+0x50>)
 8000dec:	f893 c009 	ldrb.w	ip, [r3, #9]
 8000df0:	fa5f fc8c 	uxtb.w	ip, ip
 8000df4:	f04f 0e00 	mov.w	lr, #0
 8000df8:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8000dfc:	f893 c009 	ldrb.w	ip, [r3, #9]
 8000e00:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000e04:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8000e08:	7a5c      	ldrb	r4, [r3, #9]
 8000e0a:	441c      	add	r4, r3
 8000e0c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8000e0e:	7a5a      	ldrb	r2, [r3, #9]
 8000e10:	1c54      	adds	r4, r2, #1
 8000e12:	b2e4      	uxtb	r4, r4
 8000e14:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8000e16:	3230      	adds	r2, #48	@ 0x30
 8000e18:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8000e1a:	233a      	movs	r3, #58	@ 0x3a
 8000e1c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8000e1e:	232f      	movs	r3, #47	@ 0x2f
 8000e20:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8000e22:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8000e26:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8000e28:	2001      	movs	r0, #1
}
 8000e2a:	4770      	bx	lr
 8000e2c:	200001f8 	.word	0x200001f8

08000e30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8000e30:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f7ff ffd2 	bl	8000ddc <FATFS_LinkDriverEx>
}
 8000e38:	bd08      	pop	{r3, pc}

08000e3a <lsm6dsm_read_reg>:
                                uint8_t *data,
                                uint16_t len)
{
  int32_t ret;

  if (ctx == NULL)
 8000e3a:	b120      	cbz	r0, 8000e46 <lsm6dsm_read_reg+0xc>
{
 8000e3c:	b510      	push	{r4, lr}
  {
    return -1;
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000e3e:	6844      	ldr	r4, [r0, #4]
 8000e40:	68c0      	ldr	r0, [r0, #12]
 8000e42:	47a0      	blx	r4

  return ret;
}
 8000e44:	bd10      	pop	{r4, pc}
    return -1;
 8000e46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e4a:	4770      	bx	lr

08000e4c <lsm6dsm_write_reg>:
                                 uint8_t *data,
                                 uint16_t len)
{
  int32_t ret;

  if (ctx == NULL)
 8000e4c:	b120      	cbz	r0, 8000e58 <lsm6dsm_write_reg+0xc>
{
 8000e4e:	b510      	push	{r4, lr}
  {
    return -1;
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000e50:	6804      	ldr	r4, [r0, #0]
 8000e52:	68c0      	ldr	r0, [r0, #12]
 8000e54:	47a0      	blx	r4

  return ret;
}
 8000e56:	bd10      	pop	{r4, pc}
    return -1;
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e5c:	4770      	bx	lr
	...

08000e60 <lsm6dsm_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsm_from_fs2g_to_mg(int16_t lsb)
{
 8000e60:	ee07 0a90 	vmov	s15, r0
  return ((float_t)lsb * 0.061f);
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000e68:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8000e74 <lsm6dsm_from_fs2g_to_mg+0x14>
 8000e6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	3d79db23 	.word	0x3d79db23

08000e78 <lsm6dsm_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsm_from_fs2000dps_to_mdps(int16_t lsb)
{
 8000e78:	ee07 0a90 	vmov	s15, r0
  return ((float_t)lsb * 70.0f);
 8000e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000e80:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8000e8c <lsm6dsm_from_fs2000dps_to_mdps+0x14>
 8000e84:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	428c0000 	.word	0x428c0000

08000e90 <lsm6dsm_from_lsb_to_celsius>:

float_t lsm6dsm_from_lsb_to_celsius(int16_t lsb)
{
 8000e90:	ee07 0a90 	vmov	s15, r0
  return (((float_t)lsb / 256.0f) + 25.0f);
 8000e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e98:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000eac <lsm6dsm_from_lsb_to_celsius+0x1c>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ea0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8000ea4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	3b800000 	.word	0x3b800000

08000eb0 <lsm6dsm_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsm_fs_xl_t val)
{
 8000eb0:	b530      	push	{r4, r5, lr}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	460d      	mov	r5, r1
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000eb8:	2301      	movs	r3, #1
 8000eba:	aa01      	add	r2, sp, #4
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	f7ff ffbc 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 8000ec2:	b108      	cbz	r0, 8000ec8 <lsm6dsm_xl_full_scale_set+0x18>
    ctrl1_xl.fs_xl = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t) val;
 8000ec8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ecc:	f365 0383 	bfi	r3, r5, #2, #2
 8000ed0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	aa01      	add	r2, sp, #4
 8000ed8:	2110      	movs	r1, #16
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff ffb6 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 8000ee0:	e7f0      	b.n	8000ec4 <lsm6dsm_xl_full_scale_set+0x14>

08000ee2 <lsm6dsm_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsm_odr_xl_t val)
{
 8000ee2:	b530      	push	{r4, r5, lr}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	460d      	mov	r5, r1
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000eea:	2301      	movs	r3, #1
 8000eec:	aa01      	add	r2, sp, #4
 8000eee:	2110      	movs	r1, #16
 8000ef0:	f7ff ffa3 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 8000ef4:	b108      	cbz	r0, 8000efa <lsm6dsm_xl_data_rate_set+0x18>
    ctrl1_xl.odr_xl = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 8000ef6:	b003      	add	sp, #12
 8000ef8:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.odr_xl = (uint8_t) val;
 8000efa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000efe:	f365 1307 	bfi	r3, r5, #4, #4
 8000f02:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000f06:	2301      	movs	r3, #1
 8000f08:	aa01      	add	r2, sp, #4
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff ff9d 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 8000f12:	e7f0      	b.n	8000ef6 <lsm6dsm_xl_data_rate_set+0x14>

08000f14 <lsm6dsm_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsm_fs_g_t val)
{
 8000f14:	b530      	push	{r4, r5, lr}
 8000f16:	b083      	sub	sp, #12
 8000f18:	4604      	mov	r4, r0
 8000f1a:	460d      	mov	r5, r1
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	aa01      	add	r2, sp, #4
 8000f20:	2111      	movs	r1, #17
 8000f22:	f7ff ff8a 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 8000f26:	b108      	cbz	r0, 8000f2c <lsm6dsm_gy_full_scale_set+0x18>
    ctrl2_g.fs_g = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8000f28:	b003      	add	sp, #12
 8000f2a:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t) val;
 8000f2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f30:	f365 0343 	bfi	r3, r5, #1, #3
 8000f34:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000f38:	2301      	movs	r3, #1
 8000f3a:	aa01      	add	r2, sp, #4
 8000f3c:	2111      	movs	r1, #17
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff ff84 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 8000f44:	e7f0      	b.n	8000f28 <lsm6dsm_gy_full_scale_set+0x14>

08000f46 <lsm6dsm_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsm_odr_g_t val)
{
 8000f46:	b530      	push	{r4, r5, lr}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	460d      	mov	r5, r1
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000f4e:	2301      	movs	r3, #1
 8000f50:	aa01      	add	r2, sp, #4
 8000f52:	2111      	movs	r1, #17
 8000f54:	f7ff ff71 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 8000f58:	b108      	cbz	r0, 8000f5e <lsm6dsm_gy_data_rate_set+0x18>
    ctrl2_g.odr_g = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8000f5a:	b003      	add	sp, #12
 8000f5c:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.odr_g = (uint8_t) val;
 8000f5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f62:	f365 1307 	bfi	r3, r5, #4, #4
 8000f66:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	aa01      	add	r2, sp, #4
 8000f6e:	2111      	movs	r1, #17
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff ff6b 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 8000f76:	e7f0      	b.n	8000f5a <lsm6dsm_gy_data_rate_set+0x14>

08000f78 <lsm6dsm_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000f78:	b530      	push	{r4, r5, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	460d      	mov	r5, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000f80:	2301      	movs	r3, #1
 8000f82:	aa01      	add	r2, sp, #4
 8000f84:	2112      	movs	r1, #18
 8000f86:	f7ff ff58 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 8000f8a:	b108      	cbz	r0, 8000f90 <lsm6dsm_block_data_update_set+0x18>
    ctrl3_c.bdu = val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = val;
 8000f90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f94:	f365 1386 	bfi	r3, r5, #6, #1
 8000f98:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	aa01      	add	r2, sp, #4
 8000fa0:	2112      	movs	r1, #18
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f7ff ff52 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 8000fa8:	e7f0      	b.n	8000f8c <lsm6dsm_block_data_update_set+0x14>

08000faa <lsm6dsm_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_status_reg_get(const stmdev_ctx_t *ctx,
                               lsm6dsm_status_reg_t *val)
{
 8000faa:	b508      	push	{r3, lr}
 8000fac:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_STATUS_REG, (uint8_t *) val, 1);
 8000fae:	2301      	movs	r3, #1
 8000fb0:	211e      	movs	r1, #30
 8000fb2:	f7ff ff42 	bl	8000e3a <lsm6dsm_read_reg>

  return ret;
}
 8000fb6:	bd08      	pop	{r3, pc}

08000fb8 <lsm6dsm_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUT_TEMP_L, buff, 2);
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	aa01      	add	r2, sp, #4
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	f7ff ff39 	bl	8000e3a <lsm6dsm_read_reg>
  val[0] = (int16_t)buff[1];
 8000fc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000fcc:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000fce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000fd2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000fd6:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd10      	pop	{r4, pc}

08000fdc <lsm6dsm_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_G, buff, 6);
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	466a      	mov	r2, sp
 8000fe6:	2122      	movs	r1, #34	@ 0x22
 8000fe8:	f7ff ff27 	bl	8000e3a <lsm6dsm_read_reg>
  val[0] = (int16_t)buff[1];
 8000fec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000ff0:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000ff2:	f89d 3000 	ldrb.w	r3, [sp]
 8000ff6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000ffa:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8000ffc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001000:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001002:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001006:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800100a:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 800100c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001010:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001012:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001016:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800101a:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 800101c:	b002      	add	sp, #8
 800101e:	bd10      	pop	{r4, pc}

08001020 <lsm6dsm_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001020:	b510      	push	{r4, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_XL, buff, 6);
 8001026:	2306      	movs	r3, #6
 8001028:	466a      	mov	r2, sp
 800102a:	2128      	movs	r1, #40	@ 0x28
 800102c:	f7ff ff05 	bl	8000e3a <lsm6dsm_read_reg>
  val[0] = (int16_t)buff[1];
 8001030:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001034:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001036:	f89d 3000 	ldrb.w	r3, [sp]
 800103a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800103e:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8001040:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001044:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001046:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800104a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800104e:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8001050:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001054:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001056:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800105a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800105e:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8001060:	b002      	add	sp, #8
 8001062:	bd10      	pop	{r4, pc}

08001064 <lsm6dsm_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001064:	b508      	push	{r3, lr}
 8001066:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_WHO_AM_I, buff, 1);
 8001068:	2301      	movs	r3, #1
 800106a:	210f      	movs	r1, #15
 800106c:	f7ff fee5 	bl	8000e3a <lsm6dsm_read_reg>

  return ret;
}
 8001070:	bd08      	pop	{r3, pc}

08001072 <lsm6dsm_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001072:	b510      	push	{r4, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	460c      	mov	r4, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001078:	2301      	movs	r3, #1
 800107a:	aa01      	add	r2, sp, #4
 800107c:	2112      	movs	r1, #18
 800107e:	f7ff fedc 	bl	8000e3a <lsm6dsm_read_reg>
  *val = ctrl3_c.sw_reset;
 8001082:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001086:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800108a:	7023      	strb	r3, [r4, #0]

  return ret;
}
 800108c:	b002      	add	sp, #8
 800108e:	bd10      	pop	{r4, pc}

08001090 <lsm6dsm_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001090:	b530      	push	{r4, r5, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	4604      	mov	r4, r0
 8001096:	460d      	mov	r5, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001098:	2301      	movs	r3, #1
 800109a:	aa01      	add	r2, sp, #4
 800109c:	2112      	movs	r1, #18
 800109e:	f7ff fecc 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 80010a2:	b108      	cbz	r0, 80010a8 <lsm6dsm_auto_increment_set+0x18>
    ctrl3_c.if_inc = val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80010a4:	b003      	add	sp, #12
 80010a6:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = val;
 80010a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010ac:	f365 0382 	bfi	r3, r5, #2, #1
 80010b0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80010b4:	2301      	movs	r3, #1
 80010b6:	aa01      	add	r2, sp, #4
 80010b8:	2112      	movs	r1, #18
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff fec6 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 80010c0:	e7f0      	b.n	80010a4 <lsm6dsm_auto_increment_set+0x14>

080010c2 <lsm6dsm_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_filter_analog_set(const stmdev_ctx_t *ctx,
                                     lsm6dsm_bw0_xl_t val)
{
 80010c2:	b530      	push	{r4, r5, lr}
 80010c4:	b083      	sub	sp, #12
 80010c6:	4604      	mov	r4, r0
 80010c8:	460d      	mov	r5, r1
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010ca:	2301      	movs	r3, #1
 80010cc:	aa01      	add	r2, sp, #4
 80010ce:	2110      	movs	r1, #16
 80010d0:	f7ff feb3 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 80010d4:	b108      	cbz	r0, 80010da <lsm6dsm_xl_filter_analog_set+0x18>
    ctrl1_xl.bw0_xl = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80010d6:	b003      	add	sp, #12
 80010d8:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80010da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010de:	f365 0300 	bfi	r3, r5, #0, #1
 80010e2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010e6:	2301      	movs	r3, #1
 80010e8:	aa01      	add	r2, sp, #4
 80010ea:	2110      	movs	r1, #16
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff fead 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 80010f2:	e7f0      	b.n	80010d6 <lsm6dsm_xl_filter_analog_set+0x14>

080010f4 <lsm6dsm_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_lp2_bandwidth_set(const stmdev_ctx_t *ctx,
                                     lsm6dsm_input_composite_t val)
{
 80010f4:	b530      	push	{r4, r5, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	4605      	mov	r5, r0
 80010fa:	460c      	mov	r4, r1
  lsm6dsm_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80010fc:	2301      	movs	r3, #1
 80010fe:	aa01      	add	r2, sp, #4
 8001100:	2117      	movs	r1, #23
 8001102:	f7ff fe9a 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 8001106:	b108      	cbz	r0, 800110c <lsm6dsm_xl_lp2_bandwidth_set+0x18>
    ctrl8_xl.hp_slope_xl_en = 0;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
}
 8001108:	b003      	add	sp, #12
 800110a:	bd30      	pop	{r4, r5, pc}
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800110c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001110:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001114:	f362 03c3 	bfi	r3, r2, #3, #1
 8001118:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f364 1346 	bfi	r3, r4, #5, #2
 8001122:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl8_xl.lpf2_xl_en = 1;
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800112c:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f023 0304 	bic.w	r3, r3, #4
 8001136:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800113a:	2301      	movs	r3, #1
 800113c:	aa01      	add	r2, sp, #4
 800113e:	2117      	movs	r1, #23
 8001140:	4628      	mov	r0, r5
 8001142:	f7ff fe83 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 8001146:	e7df      	b.n	8001108 <lsm6dsm_xl_lp2_bandwidth_set+0x14>

08001148 <lsm6dsm_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_band_pass_set(const stmdev_ctx_t *ctx,
                                 lsm6dsm_lpf1_sel_g_t val)
{
 8001148:	b530      	push	{r4, r5, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	4605      	mov	r5, r0
 800114e:	460c      	mov	r4, r1
  lsm6dsm_ctrl4_c_t ctrl4_c;
  lsm6dsm_ctrl6_c_t ctrl6_c;
  lsm6dsm_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001150:	2301      	movs	r3, #1
 8001152:	aa01      	add	r2, sp, #4
 8001154:	2116      	movs	r1, #22
 8001156:	f7ff fe70 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 800115a:	b108      	cbz	r0, 8001160 <lsm6dsm_gy_band_pass_set+0x18>
      }
    }
  }

  return ret;
}
 800115c:	b005      	add	sp, #20
 800115e:	bd30      	pop	{r4, r5, pc}
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001160:	f3c4 1301 	ubfx	r3, r4, #4, #2
 8001164:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001168:	f363 1205 	bfi	r2, r3, #4, #2
 800116c:	f88d 2004 	strb.w	r2, [sp, #4]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001170:	09e3      	lsrs	r3, r4, #7
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	f363 1286 	bfi	r2, r3, #6, #1
 8001178:	f88d 2004 	strb.w	r2, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800117c:	2301      	movs	r3, #1
 800117e:	aa01      	add	r2, sp, #4
 8001180:	2116      	movs	r1, #22
 8001182:	4628      	mov	r0, r5
 8001184:	f7ff fe62 	bl	8000e4c <lsm6dsm_write_reg>
    if (ret == 0)
 8001188:	2800      	cmp	r0, #0
 800118a:	d1e7      	bne.n	800115c <lsm6dsm_gy_band_pass_set+0x14>
      ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800118c:	2301      	movs	r3, #1
 800118e:	aa02      	add	r2, sp, #8
 8001190:	2115      	movs	r1, #21
 8001192:	4628      	mov	r0, r5
 8001194:	f7ff fe51 	bl	8000e3a <lsm6dsm_read_reg>
      if (ret == 0)
 8001198:	2800      	cmp	r0, #0
 800119a:	d1df      	bne.n	800115c <lsm6dsm_gy_band_pass_set+0x14>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800119c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80011a0:	f364 0301 	bfi	r3, r4, #0, #2
 80011a4:	f88d 3008 	strb.w	r3, [sp, #8]
        ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80011a8:	2301      	movs	r3, #1
 80011aa:	aa02      	add	r2, sp, #8
 80011ac:	2115      	movs	r1, #21
 80011ae:	4628      	mov	r0, r5
 80011b0:	f7ff fe4c 	bl	8000e4c <lsm6dsm_write_reg>
        if (ret == 0)
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d1d1      	bne.n	800115c <lsm6dsm_gy_band_pass_set+0x14>
          ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL4_C,
 80011b8:	2301      	movs	r3, #1
 80011ba:	aa03      	add	r2, sp, #12
 80011bc:	2113      	movs	r1, #19
 80011be:	4628      	mov	r0, r5
 80011c0:	f7ff fe3b 	bl	8000e3a <lsm6dsm_read_reg>
          if (ret == 0)
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d1c9      	bne.n	800115c <lsm6dsm_gy_band_pass_set+0x14>
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80011c8:	f3c4 01c0 	ubfx	r1, r4, #3, #1
 80011cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80011d0:	f361 0341 	bfi	r3, r1, #1, #1
 80011d4:	f88d 300c 	strb.w	r3, [sp, #12]
            ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL4_C,
 80011d8:	2301      	movs	r3, #1
 80011da:	aa03      	add	r2, sp, #12
 80011dc:	2113      	movs	r1, #19
 80011de:	4628      	mov	r0, r5
 80011e0:	f7ff fe34 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 80011e4:	e7ba      	b.n	800115c <lsm6dsm_gy_band_pass_set+0x14>

080011e6 <lsm6dsm_spi_mode_set>:
  * @param  val    Change the values of sim in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_spi_mode_set(const stmdev_ctx_t *ctx, lsm6dsm_sim_t val)
{
 80011e6:	b530      	push	{r4, r5, lr}
 80011e8:	b083      	sub	sp, #12
 80011ea:	4604      	mov	r4, r0
 80011ec:	460d      	mov	r5, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80011ee:	2301      	movs	r3, #1
 80011f0:	aa01      	add	r2, sp, #4
 80011f2:	2112      	movs	r1, #18
 80011f4:	f7ff fe21 	bl	8000e3a <lsm6dsm_read_reg>

  if (ret == 0)
 80011f8:	b108      	cbz	r0, 80011fe <lsm6dsm_spi_mode_set+0x18>
    ctrl3_c.sim = (uint8_t)val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80011fa:	b003      	add	sp, #12
 80011fc:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.sim = (uint8_t)val;
 80011fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001202:	f365 03c3 	bfi	r3, r5, #3, #1
 8001206:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800120a:	2301      	movs	r3, #1
 800120c:	aa01      	add	r2, sp, #4
 800120e:	2112      	movs	r1, #18
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff fe1b 	bl	8000e4c <lsm6dsm_write_reg>
  return ret;
 8001216:	e7f0      	b.n	80011fa <lsm6dsm_spi_mode_set+0x14>

08001218 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <MX_SDIO_SD_Init+0x18>)
 800121a:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <MX_SDIO_SD_Init+0x1c>)
 800121c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001222:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001224:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001226:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001228:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800122a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200002d8 	.word	0x200002d8
 8001234:	40012c00 	.word	0x40012c00

08001238 <llcc68_platform_reset>:
	  HAL_SPI_Receive(handle, bufp, len, 1000);
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
  return 0;
}

static int32_t llcc68_platform_reset(void *handle) {
 8001238:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(RF_RESET_GPIO_Port, RF_RESET_Pin, GPIO_PIN_RESET);
 800123a:	4c09      	ldr	r4, [pc, #36]	@ (8001260 <llcc68_platform_reset+0x28>)
 800123c:	2200      	movs	r2, #0
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	4620      	mov	r0, r4
 8001242:	f000 fe78 	bl	8001f36 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fcfa 	bl	8001c40 <HAL_Delay>
  HAL_GPIO_WritePin(RF_RESET_GPIO_Port, RF_RESET_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	4620      	mov	r0, r4
 8001252:	f000 fe70 	bl	8001f36 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 fcf2 	bl	8001c40 <HAL_Delay>
  return 0;
}
 800125c:	2000      	movs	r0, #0
 800125e:	bd10      	pop	{r4, pc}
 8001260:	40020800 	.word	0x40020800

08001264 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001264:	b508      	push	{r3, lr}
  HAL_Delay(ms);
 8001266:	f000 fceb 	bl	8001c40 <HAL_Delay>
}
 800126a:	bd08      	pop	{r3, pc}

0800126c <llcc68_platform_write>:
	  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_SET);
  return 0;
}

static int32_t llcc68_platform_write(void *handle, const uint8_t* command, const uint16_t command_length,
                                     const uint8_t* data, const uint16_t data_length ) {
 800126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001270:	460d      	mov	r5, r1
 8001272:	4616      	mov	r6, r2
 8001274:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_RESET);
 8001276:	4f0f      	ldr	r7, [pc, #60]	@ (80012b4 <llcc68_platform_write+0x48>)
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	4638      	mov	r0, r7
 800127e:	f000 fe5a 	bl	8001f36 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, command, command_length, 1000);
 8001282:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 80012b8 <llcc68_platform_write+0x4c>
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	4632      	mov	r2, r6
 800128c:	4629      	mov	r1, r5
 800128e:	4640      	mov	r0, r8
 8001290:	f002 fc6d 	bl	8003b6e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, data, data_length, 1000);
 8001294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001298:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800129c:	4621      	mov	r1, r4
 800129e:	4640      	mov	r0, r8
 80012a0:	f002 fc65 	bl	8003b6e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2110      	movs	r1, #16
 80012a8:	4638      	mov	r0, r7
 80012aa:	f000 fe44 	bl	8001f36 <HAL_GPIO_WritePin>
  return 0;
}
 80012ae:	2000      	movs	r0, #0
 80012b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b4:	40020000 	.word	0x40020000
 80012b8:	20000280 	.word	0x20000280

080012bc <lsm6dsm_platform_write>:
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	4604      	mov	r4, r0
 80012c2:	4615      	mov	r5, r2
 80012c4:	461e      	mov	r6, r3
 80012c6:	f88d 1007 	strb.w	r1, [sp, #7]
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_RESET);
 80012ca:	4f0e      	ldr	r7, [pc, #56]	@ (8001304 <lsm6dsm_platform_write+0x48>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	2108      	movs	r1, #8
 80012d0:	4638      	mov	r0, r7
 80012d2:	f000 fe30 	bl	8001f36 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80012d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012da:	2201      	movs	r2, #1
 80012dc:	f10d 0107 	add.w	r1, sp, #7
 80012e0:	4620      	mov	r0, r4
 80012e2:	f002 fc44 	bl	8003b6e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	4632      	mov	r2, r6
 80012ec:	4629      	mov	r1, r5
 80012ee:	4620      	mov	r0, r4
 80012f0:	f002 fc3d 	bl	8003b6e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2108      	movs	r1, #8
 80012f8:	4638      	mov	r0, r7
 80012fa:	f000 fe1c 	bl	8001f36 <HAL_GPIO_WritePin>
}
 80012fe:	2000      	movs	r0, #0
 8001300:	b003      	add	sp, #12
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001304:	40020000 	.word	0x40020000

08001308 <llcc68_platform_read>:
                                     uint8_t* data, const uint16_t data_length ) {
 8001308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800130c:	460d      	mov	r5, r1
 800130e:	4616      	mov	r6, r2
 8001310:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_RESET);
 8001312:	4f0f      	ldr	r7, [pc, #60]	@ (8001350 <llcc68_platform_read+0x48>)
 8001314:	2200      	movs	r2, #0
 8001316:	2110      	movs	r1, #16
 8001318:	4638      	mov	r0, r7
 800131a:	f000 fe0c 	bl	8001f36 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, command, command_length, 1000);
 800131e:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 8001354 <llcc68_platform_read+0x4c>
 8001322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001326:	4632      	mov	r2, r6
 8001328:	4629      	mov	r1, r5
 800132a:	4640      	mov	r0, r8
 800132c:	f002 fc1f 	bl	8003b6e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, data, data_length, 1000);
 8001330:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001334:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001338:	4621      	mov	r1, r4
 800133a:	4640      	mov	r0, r8
 800133c:	f002 fe23 	bl	8003f86 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2110      	movs	r1, #16
 8001344:	4638      	mov	r0, r7
 8001346:	f000 fdf6 	bl	8001f36 <HAL_GPIO_WritePin>
}
 800134a:	2000      	movs	r0, #0
 800134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001350:	40020000 	.word	0x40020000
 8001354:	20000280 	.word	0x20000280

08001358 <lsm6dsm_platform_read>:
{
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	b083      	sub	sp, #12
 800135c:	4604      	mov	r4, r0
 800135e:	4615      	mov	r5, r2
 8001360:	461e      	mov	r6, r3
 8001362:	f88d 1007 	strb.w	r1, [sp, #7]
	  reg |= 0x80;
 8001366:	b2cb      	uxtb	r3, r1
 8001368:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800136c:	f88d 3007 	strb.w	r3, [sp, #7]
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_RESET);
 8001370:	4f0e      	ldr	r7, [pc, #56]	@ (80013ac <lsm6dsm_platform_read+0x54>)
 8001372:	2200      	movs	r2, #0
 8001374:	2108      	movs	r1, #8
 8001376:	4638      	mov	r0, r7
 8001378:	f000 fddd 	bl	8001f36 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	2201      	movs	r2, #1
 8001382:	f10d 0107 	add.w	r1, sp, #7
 8001386:	4620      	mov	r0, r4
 8001388:	f002 fbf1 	bl	8003b6e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(handle, bufp, len, 1000);
 800138c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001390:	4632      	mov	r2, r6
 8001392:	4629      	mov	r1, r5
 8001394:	4620      	mov	r0, r4
 8001396:	f002 fdf6 	bl	8003f86 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2108      	movs	r1, #8
 800139e:	4638      	mov	r0, r7
 80013a0:	f000 fdc9 	bl	8001f36 <HAL_GPIO_WritePin>
}
 80013a4:	2000      	movs	r0, #0
 80013a6:	b003      	add	sp, #12
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020000 	.word	0x40020000

080013b0 <MX_GPIO_Init>:
{
 80013b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b4:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	2400      	movs	r4, #0
 80013b8:	9405      	str	r4, [sp, #20]
 80013ba:	9406      	str	r4, [sp, #24]
 80013bc:	9407      	str	r4, [sp, #28]
 80013be:	9408      	str	r4, [sp, #32]
 80013c0:	9409      	str	r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c2:	9400      	str	r4, [sp, #0]
 80013c4:	4b3d      	ldr	r3, [pc, #244]	@ (80014bc <MX_GPIO_Init+0x10c>)
 80013c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80013ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80013d4:	9200      	str	r2, [sp, #0]
 80013d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	9401      	str	r4, [sp, #4]
 80013da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013dc:	f042 0204 	orr.w	r2, r2, #4
 80013e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013e4:	f002 0204 	and.w	r2, r2, #4
 80013e8:	9201      	str	r2, [sp, #4]
 80013ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	9402      	str	r4, [sp, #8]
 80013ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f8:	f002 0201 	and.w	r2, r2, #1
 80013fc:	9202      	str	r2, [sp, #8]
 80013fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	9403      	str	r4, [sp, #12]
 8001402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001404:	f042 0208 	orr.w	r2, r2, #8
 8001408:	631a      	str	r2, [r3, #48]	@ 0x30
 800140a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800140c:	f002 0208 	and.w	r2, r2, #8
 8001410:	9203      	str	r2, [sp, #12]
 8001412:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	9404      	str	r4, [sp, #16]
 8001416:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001418:	f042 0202 	orr.w	r2, r2, #2
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	9304      	str	r3, [sp, #16]
 8001426:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin, GPIO_PIN_RESET);
 8001428:	4d25      	ldr	r5, [pc, #148]	@ (80014c0 <MX_GPIO_Init+0x110>)
 800142a:	4622      	mov	r2, r4
 800142c:	2187      	movs	r1, #135	@ 0x87
 800142e:	4628      	mov	r0, r5
 8001430:	f000 fd81 	bl	8001f36 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin, GPIO_PIN_RESET);
 8001434:	4e23      	ldr	r6, [pc, #140]	@ (80014c4 <MX_GPIO_Init+0x114>)
 8001436:	4622      	mov	r2, r4
 8001438:	211c      	movs	r1, #28
 800143a:	4630      	mov	r0, r6
 800143c:	f000 fd7b 	bl	8001f36 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin;
 8001440:	2387      	movs	r3, #135	@ 0x87
 8001442:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2701      	movs	r7, #1
 8001446:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	a905      	add	r1, sp, #20
 800144e:	4628      	mov	r0, r5
 8001450:	f000 fc74 	bl	8001d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_INT_Pin|PRESSURE_INT_Pin;
 8001454:	2348      	movs	r3, #72	@ 0x48
 8001456:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	f04f 0802 	mov.w	r8, #2
 800145c:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8001464:	230f      	movs	r3, #15
 8001466:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	a905      	add	r1, sp, #20
 800146a:	4628      	mov	r0, r5
 800146c:	f000 fc66 	bl	8001d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001470:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001478:	a905      	add	r1, sp, #20
 800147a:	4630      	mov	r0, r6
 800147c:	f000 fc5e 	bl	8001d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin;
 8001480:	231c      	movs	r3, #28
 8001482:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	a905      	add	r1, sp, #20
 800148c:	4630      	mov	r0, r6
 800148e:	f000 fc55 	bl	8001d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUSY_Pin;
 8001492:	2310      	movs	r3, #16
 8001494:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800149a:	a905      	add	r1, sp, #20
 800149c:	4628      	mov	r0, r5
 800149e:	f000 fc4d 	bl	8001d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ANTENNA_IRQ_Pin;
 80014a2:	2320      	movs	r3, #32
 80014a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014aa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ANTENNA_IRQ_GPIO_Port, &GPIO_InitStruct);
 80014ae:	a905      	add	r1, sp, #20
 80014b0:	4628      	mov	r0, r5
 80014b2:	f000 fc43 	bl	8001d3c <HAL_GPIO_Init>
}
 80014b6:	b00a      	add	sp, #40	@ 0x28
 80014b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020000 	.word	0x40020000

080014c8 <_write>:
int _write(int fd, char* ptr, int len) {
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 0xffffff);
 80014cc:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80014d0:	b292      	uxth	r2, r2
 80014d2:	4802      	ldr	r0, [pc, #8]	@ (80014dc <_write+0x14>)
 80014d4:	f002 ff45 	bl	8004362 <HAL_UART_Transmit>
}
 80014d8:	4620      	mov	r0, r4
 80014da:	bd10      	pop	{r4, pc}
 80014dc:	20000238 	.word	0x20000238

080014e0 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <Error_Handler+0x2>

080014e4 <MX_USART1_UART_Init>:
{
 80014e4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80014e6:	480a      	ldr	r0, [pc, #40]	@ (8001510 <MX_USART1_UART_Init+0x2c>)
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <MX_USART1_UART_Init+0x30>)
 80014ea:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80014ec:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80014f0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	2300      	movs	r3, #0
 80014f4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fa:	220c      	movs	r2, #12
 80014fc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001502:	f002 fefe 	bl	8004302 <HAL_UART_Init>
 8001506:	b900      	cbnz	r0, 800150a <MX_USART1_UART_Init+0x26>
}
 8001508:	bd08      	pop	{r3, pc}
    Error_Handler();
 800150a:	f7ff ffe9 	bl	80014e0 <Error_Handler>
 800150e:	bf00      	nop
 8001510:	20000238 	.word	0x20000238
 8001514:	40011000 	.word	0x40011000

08001518 <MX_I2C1_Init>:
{
 8001518:	b500      	push	{lr}
 800151a:	b085      	sub	sp, #20
  hi2c1.Instance = I2C1;
 800151c:	4819      	ldr	r0, [pc, #100]	@ (8001584 <MX_I2C1_Init+0x6c>)
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <MX_I2C1_Init+0x70>)
 8001520:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_I2C1_Init+0x74>)
 8001524:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001526:	2300      	movs	r3, #0
 8001528:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 130;
 800152a:	2282      	movs	r2, #130	@ 0x82
 800152c:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001532:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001538:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153c:	f000 fea6 	bl	800228c <HAL_I2C_Init>
 8001540:	b988      	cbnz	r0, 8001566 <MX_I2C1_Init+0x4e>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x41 << 1, 2, 1000) != HAL_OK) {
 8001542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001546:	2202      	movs	r2, #2
 8001548:	2182      	movs	r1, #130	@ 0x82
 800154a:	480e      	ldr	r0, [pc, #56]	@ (8001584 <MX_I2C1_Init+0x6c>)
 800154c:	f001 f82e 	bl	80025ac <HAL_I2C_IsDeviceReady>
 8001550:	b158      	cbz	r0, 800156a <MX_I2C1_Init+0x52>
      HAL_UART_Transmit(&huart1, (uint8_t*)"Temperature not ready\r\n", 32, 1000);
 8001552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001556:	2220      	movs	r2, #32
 8001558:	490d      	ldr	r1, [pc, #52]	@ (8001590 <MX_I2C1_Init+0x78>)
 800155a:	480e      	ldr	r0, [pc, #56]	@ (8001594 <MX_I2C1_Init+0x7c>)
 800155c:	f002 ff01 	bl	8004362 <HAL_UART_Transmit>
}
 8001560:	b005      	add	sp, #20
 8001562:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001566:	f7ff ffbb 	bl	80014e0 <Error_Handler>
      HAL_I2C_Mem_Write(&hi2c1, 0x41 << 1, 0x04, 1, (uint8_t*)0x00, 1, 1000);
 800156a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	9200      	str	r2, [sp, #0]
 8001578:	2204      	movs	r2, #4
 800157a:	2182      	movs	r1, #130	@ 0x82
 800157c:	4801      	ldr	r0, [pc, #4]	@ (8001584 <MX_I2C1_Init+0x6c>)
 800157e:	f000 ff63 	bl	8002448 <HAL_I2C_Mem_Write>
}
 8001582:	e7ed      	b.n	8001560 <MX_I2C1_Init+0x48>
 8001584:	2000035c 	.word	0x2000035c
 8001588:	40005400 	.word	0x40005400
 800158c:	000186a0 	.word	0x000186a0
 8001590:	08009608 	.word	0x08009608
 8001594:	20000238 	.word	0x20000238

08001598 <MX_SPI1_Init>:
{
 8001598:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800159a:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <MX_SPI1_Init+0x38>)
 800159c:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <MX_SPI1_Init+0x3c>)
 800159e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80015a4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	2300      	movs	r3, #0
 80015a8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015aa:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ac:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ae:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b6:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ba:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015bc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015be:	230a      	movs	r3, #10
 80015c0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c2:	f002 fa75 	bl	8003ab0 <HAL_SPI_Init>
 80015c6:	b900      	cbnz	r0, 80015ca <MX_SPI1_Init+0x32>
}
 80015c8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015ca:	f7ff ff89 	bl	80014e0 <Error_Handler>
 80015ce:	bf00      	nop
 80015d0:	20000280 	.word	0x20000280
 80015d4:	40013000 	.word	0x40013000

080015d8 <SystemClock_Config>:
{
 80015d8:	b500      	push	{lr}
 80015da:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015dc:	2230      	movs	r2, #48	@ 0x30
 80015de:	2100      	movs	r1, #0
 80015e0:	a808      	add	r0, sp, #32
 80015e2:	f004 faa4 	bl	8005b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e6:	2300      	movs	r3, #0
 80015e8:	9303      	str	r3, [sp, #12]
 80015ea:	9304      	str	r3, [sp, #16]
 80015ec:	9305      	str	r3, [sp, #20]
 80015ee:	9306      	str	r3, [sp, #24]
 80015f0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001674 <SystemClock_Config+0x9c>)
 80015f6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80015f8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80015fc:	6411      	str	r1, [r2, #64]	@ 0x40
 80015fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001600:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001604:	9201      	str	r2, [sp, #4]
 8001606:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <SystemClock_Config+0xa0>)
 800160c:	6811      	ldr	r1, [r2, #0]
 800160e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001612:	6011      	str	r1, [r2, #0]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800161a:	9202      	str	r2, [sp, #8]
 800161c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161e:	2202      	movs	r2, #2
 8001620:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	2101      	movs	r1, #1
 8001624:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001626:	2110      	movs	r1, #16
 8001628:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800162e:	2308      	movs	r3, #8
 8001630:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001632:	2380      	movs	r3, #128	@ 0x80
 8001634:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001636:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001638:	2306      	movs	r3, #6
 800163a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	a808      	add	r0, sp, #32
 800163e:	f001 f995 	bl	800296c <HAL_RCC_OscConfig>
 8001642:	b998      	cbnz	r0, 800166c <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001648:	2302      	movs	r3, #2
 800164a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001650:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001654:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800165c:	2104      	movs	r1, #4
 800165e:	a803      	add	r0, sp, #12
 8001660:	f001 fbd4 	bl	8002e0c <HAL_RCC_ClockConfig>
 8001664:	b920      	cbnz	r0, 8001670 <SystemClock_Config+0x98>
}
 8001666:	b015      	add	sp, #84	@ 0x54
 8001668:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800166c:	f7ff ff38 	bl	80014e0 <Error_Handler>
    Error_Handler();
 8001670:	f7ff ff36 	bl	80014e0 <Error_Handler>
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <main>:
{
 800167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001680:	b09a      	sub	sp, #104	@ 0x68
  HAL_Init();
 8001682:	f000 fab1 	bl	8001be8 <HAL_Init>
  SystemClock_Config();
 8001686:	f7ff ffa7 	bl	80015d8 <SystemClock_Config>
  MX_GPIO_Init();
 800168a:	f7ff fe91 	bl	80013b0 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800168e:	f7ff fdc3 	bl	8001218 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8001692:	f7ff ff27 	bl	80014e4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001696:	f7ff ff3f 	bl	8001518 <MX_I2C1_Init>
  MX_FATFS_Init();
 800169a:	f7ff fb85 	bl	8000da8 <MX_FATFS_Init>
  MX_SPI1_Init();
 800169e:	f7ff ff7b 	bl	8001598 <MX_SPI1_Init>
  dev_ctx.write_reg = lsm6dsm_platform_write;
 80016a2:	4bc1      	ldr	r3, [pc, #772]	@ (80019a8 <main+0x32c>)
 80016a4:	9316      	str	r3, [sp, #88]	@ 0x58
  dev_ctx.read_reg = lsm6dsm_platform_read;
 80016a6:	4bc1      	ldr	r3, [pc, #772]	@ (80019ac <main+0x330>)
 80016a8:	9317      	str	r3, [sp, #92]	@ 0x5c
  dev_ctx.handle = &hspi1;
 80016aa:	4bc1      	ldr	r3, [pc, #772]	@ (80019b0 <main+0x334>)
 80016ac:	9319      	str	r3, [sp, #100]	@ 0x64
  radio_ctx.write_reg = llcc68_platform_write;
 80016ae:	4ac1      	ldr	r2, [pc, #772]	@ (80019b4 <main+0x338>)
 80016b0:	9211      	str	r2, [sp, #68]	@ 0x44
  radio_ctx.read_reg = llcc68_platform_read;
 80016b2:	4ac1      	ldr	r2, [pc, #772]	@ (80019b8 <main+0x33c>)
 80016b4:	9212      	str	r2, [sp, #72]	@ 0x48
  radio_ctx.reset = llcc68_platform_reset;
 80016b6:	4ac1      	ldr	r2, [pc, #772]	@ (80019bc <main+0x340>)
 80016b8:	9213      	str	r2, [sp, #76]	@ 0x4c
  radio_ctx.handle = &hspi1;
 80016ba:	9315      	str	r3, [sp, #84]	@ 0x54
  radio_ctx.gpio = CS_WIRELESS_GPIO_Port;
 80016bc:	4bc0      	ldr	r3, [pc, #768]	@ (80019c0 <main+0x344>)
 80016be:	9314      	str	r3, [sp, #80]	@ 0x50
  platform_delay(1000);
 80016c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c4:	f7ff fdce 	bl	8001264 <platform_delay>
  lsm6dsm_spi_mode_set(&dev_ctx,LSM6DSM_SPI_3_WIRE);
 80016c8:	2101      	movs	r1, #1
 80016ca:	a816      	add	r0, sp, #88	@ 0x58
 80016cc:	f7ff fd8b 	bl	80011e6 <lsm6dsm_spi_mode_set>
  lsm6dsm_auto_increment_set(&dev_ctx, 1);
 80016d0:	2101      	movs	r1, #1
 80016d2:	a816      	add	r0, sp, #88	@ 0x58
 80016d4:	f7ff fcdc 	bl	8001090 <lsm6dsm_auto_increment_set>
  lsm6dsm_device_id_get(&dev_ctx, &whoamI);
 80016d8:	4cba      	ldr	r4, [pc, #744]	@ (80019c4 <main+0x348>)
 80016da:	4621      	mov	r1, r4
 80016dc:	a816      	add	r0, sp, #88	@ 0x58
 80016de:	f7ff fcc1 	bl	8001064 <lsm6dsm_device_id_get>
  if (whoamI != LSM6DSM_ID)
 80016e2:	7823      	ldrb	r3, [r4, #0]
 80016e4:	2b6a      	cmp	r3, #106	@ 0x6a
 80016e6:	d000      	beq.n	80016ea <main+0x6e>
    while (1) {
 80016e8:	e7fe      	b.n	80016e8 <main+0x6c>
    lsm6dsm_reset_get(&dev_ctx, &rst);
 80016ea:	4cb7      	ldr	r4, [pc, #732]	@ (80019c8 <main+0x34c>)
 80016ec:	4621      	mov	r1, r4
 80016ee:	a816      	add	r0, sp, #88	@ 0x58
 80016f0:	f7ff fcbf 	bl	8001072 <lsm6dsm_reset_get>
  } while (rst);
 80016f4:	7823      	ldrb	r3, [r4, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f7      	bne.n	80016ea <main+0x6e>
  lsm6dsm_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80016fa:	2101      	movs	r1, #1
 80016fc:	a816      	add	r0, sp, #88	@ 0x58
 80016fe:	f7ff fc3b 	bl	8000f78 <lsm6dsm_block_data_update_set>
  lsm6dsm_xl_data_rate_set(&dev_ctx, LSM6DSM_XL_ODR_6k66Hz);
 8001702:	210a      	movs	r1, #10
 8001704:	a816      	add	r0, sp, #88	@ 0x58
 8001706:	f7ff fbec 	bl	8000ee2 <lsm6dsm_xl_data_rate_set>
  lsm6dsm_gy_data_rate_set(&dev_ctx, LSM6DSM_XL_ODR_6k66Hz);
 800170a:	210a      	movs	r1, #10
 800170c:	a816      	add	r0, sp, #88	@ 0x58
 800170e:	f7ff fc1a 	bl	8000f46 <lsm6dsm_gy_data_rate_set>
  lsm6dsm_xl_full_scale_set(&dev_ctx, LSM6DSM_2g);
 8001712:	2100      	movs	r1, #0
 8001714:	a816      	add	r0, sp, #88	@ 0x58
 8001716:	f7ff fbcb 	bl	8000eb0 <lsm6dsm_xl_full_scale_set>
  lsm6dsm_gy_full_scale_set(&dev_ctx, LSM6DSM_2000dps);
 800171a:	2106      	movs	r1, #6
 800171c:	a816      	add	r0, sp, #88	@ 0x58
 800171e:	f7ff fbf9 	bl	8000f14 <lsm6dsm_gy_full_scale_set>
  lsm6dsm_xl_filter_analog_set(&dev_ctx, LSM6DSM_XL_ANA_BW_400Hz);
 8001722:	2101      	movs	r1, #1
 8001724:	a816      	add	r0, sp, #88	@ 0x58
 8001726:	f7ff fccc 	bl	80010c2 <lsm6dsm_xl_filter_analog_set>
  lsm6dsm_xl_lp2_bandwidth_set(&dev_ctx,
 800172a:	2103      	movs	r1, #3
 800172c:	a816      	add	r0, sp, #88	@ 0x58
 800172e:	f7ff fce1 	bl	80010f4 <lsm6dsm_xl_lp2_bandwidth_set>
  lsm6dsm_gy_band_pass_set(&dev_ctx, LSM6DSM_HP_DISABLE_LP1_AGGRESSIVE);
 8001732:	210b      	movs	r1, #11
 8001734:	a816      	add	r0, sp, #88	@ 0x58
 8001736:	f7ff fd07 	bl	8001148 <lsm6dsm_gy_band_pass_set>
  platform_delay(2000);
 800173a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800173e:	f7ff fd91 	bl	8001264 <platform_delay>
  int16_t acc_bias[3] = {0, 0, 0};
 8001742:	2400      	movs	r4, #0
 8001744:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
 8001748:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
 800174c:	f8ad 4040 	strh.w	r4, [sp, #64]	@ 0x40
  int i = 0;
 8001750:	e002      	b.n	8001758 <main+0xdc>
  } while (i < SAMPLE_SIZE);
 8001752:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8001756:	da48      	bge.n	80017ea <main+0x16e>
      lsm6dsm_status_reg_get(&dev_ctx, &reg.status_reg);
 8001758:	a90c      	add	r1, sp, #48	@ 0x30
 800175a:	a816      	add	r0, sp, #88	@ 0x58
 800175c:	f7ff fc25 	bl	8000faa <lsm6dsm_status_reg_get>
      if (reg.status_reg.xlda) {
 8001760:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001764:	f013 0f01 	tst.w	r3, #1
 8001768:	d0f3      	beq.n	8001752 <main+0xd6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800176a:	4d98      	ldr	r5, [pc, #608]	@ (80019cc <main+0x350>)
 800176c:	2300      	movs	r3, #0
 800176e:	602b      	str	r3, [r5, #0]
 8001770:	80ab      	strh	r3, [r5, #4]
        lsm6dsm_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001772:	4629      	mov	r1, r5
 8001774:	a816      	add	r0, sp, #88	@ 0x58
 8001776:	f7ff fc53 	bl	8001020 <lsm6dsm_acceleration_raw_get>
        acc_bias[0] += lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[0]);
 800177a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800177e:	f7ff fb6f 	bl	8000e60 <lsm6dsm_from_fs2g_to_mg>
 8001782:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001796:	ee17 3a90 	vmov	r3, s15
 800179a:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
        acc_bias[1] += lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[1]);
 800179e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 80017a2:	f7ff fb5d 	bl	8000e60 <lsm6dsm_from_fs2g_to_mg>
 80017a6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80017b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ba:	ee17 3a90 	vmov	r3, s15
 80017be:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
        acc_bias[2] += lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[2]);
 80017c2:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80017c6:	f7ff fb4b 	bl	8000e60 <lsm6dsm_from_fs2g_to_mg>
 80017ca:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80017da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017de:	ee17 3a90 	vmov	r3, s15
 80017e2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        i++;
 80017e6:	3401      	adds	r4, #1
 80017e8:	e7b3      	b.n	8001752 <main+0xd6>
  acc_bias[0] /= SAMPLE_SIZE;
 80017ea:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80017ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80017f6:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  acc_bias[1] /= SAMPLE_SIZE;
 80017fa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80017fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8001802:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
  acc_bias[2] /= SAMPLE_SIZE;
 8001806:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800180a:	fb93 f3f2 	sdiv	r3, r3, r2
 800180e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
  int16_t gyro_bias[3] = {0, 0, 0};
 8001812:	2400      	movs	r4, #0
 8001814:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
 8001818:	f8ad 4036 	strh.w	r4, [sp, #54]	@ 0x36
 800181c:	f8ad 4038 	strh.w	r4, [sp, #56]	@ 0x38
  i = 0;
 8001820:	e002      	b.n	8001828 <main+0x1ac>
  } while (i < SAMPLE_SIZE);
 8001822:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8001826:	da48      	bge.n	80018ba <main+0x23e>
	    lsm6dsm_status_reg_get(&dev_ctx, &reg.status_reg);
 8001828:	a90c      	add	r1, sp, #48	@ 0x30
 800182a:	a816      	add	r0, sp, #88	@ 0x58
 800182c:	f7ff fbbd 	bl	8000faa <lsm6dsm_status_reg_get>
      if (reg.status_reg.gda) {
 8001830:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001834:	f013 0f02 	tst.w	r3, #2
 8001838:	d0f3      	beq.n	8001822 <main+0x1a6>
        memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800183a:	4d65      	ldr	r5, [pc, #404]	@ (80019d0 <main+0x354>)
 800183c:	2300      	movs	r3, #0
 800183e:	602b      	str	r3, [r5, #0]
 8001840:	80ab      	strh	r3, [r5, #4]
        lsm6dsm_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001842:	4629      	mov	r1, r5
 8001844:	a816      	add	r0, sp, #88	@ 0x58
 8001846:	f7ff fbc9 	bl	8000fdc <lsm6dsm_angular_rate_raw_get>
        gyro_bias[0] += lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 800184a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800184e:	f7ff fb13 	bl	8000e78 <lsm6dsm_from_fs2000dps_to_mdps>
 8001852:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001866:	ee17 3a90 	vmov	r3, s15
 800186a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
        gyro_bias[1] += lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800186e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001872:	f7ff fb01 	bl	8000e78 <lsm6dsm_from_fs2000dps_to_mdps>
 8001876:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
        gyro_bias[2] += lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001892:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8001896:	f7ff faef 	bl	8000e78 <lsm6dsm_from_fs2000dps_to_mdps>
 800189a:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80018aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ae:	ee17 3a90 	vmov	r3, s15
 80018b2:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
        i++;
 80018b6:	3401      	adds	r4, #1
 80018b8:	e7b3      	b.n	8001822 <main+0x1a6>
  gyro_bias[0] /= SAMPLE_SIZE;
 80018ba:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80018be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80018c6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  gyro_bias[1] /= SAMPLE_SIZE;
 80018ca:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 80018ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80018d2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
  gyro_bias[2] /= SAMPLE_SIZE;
 80018d6:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 80018da:	fb93 f3f2 	sdiv	r3, r3, r2
 80018de:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
  gyro_bias[0] = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  gyro_bias[1] = 0;
 80018e8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
  gyro_bias[2] = 0;
 80018ec:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80018f0:	e0ab      	b.n	8001a4a <main+0x3ce>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80018f2:	4936      	ldr	r1, [pc, #216]	@ (80019cc <main+0x350>)
 80018f4:	2400      	movs	r4, #0
 80018f6:	600c      	str	r4, [r1, #0]
 80018f8:	808c      	strh	r4, [r1, #4]
        lsm6dsm_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80018fa:	a816      	add	r0, sp, #88	@ 0x58
 80018fc:	f7ff fb90 	bl	8001020 <lsm6dsm_acceleration_raw_get>
        for (int j = 0; j < 3; j++) {
 8001900:	e021      	b.n	8001946 <main+0x2ca>
            float raw = lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[j]) - acc_bias[j];
 8001902:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <main+0x350>)
 8001904:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 8001908:	f7ff faaa 	bl	8000e60 <lsm6dsm_from_fs2g_to_mg>
 800190c:	ab1a      	add	r3, sp, #104	@ 0x68
 800190e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001912:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191e:	ee70 7a67 	vsub.f32	s15, s0, s15
            filtered_acc[j] = alpha * raw + (1.0f - alpha) * filtered_acc[j];
 8001922:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80019d4 <main+0x358>
 8001926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192a:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <main+0x35c>)
 800192c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80019dc <main+0x360>
 8001938:	ee27 7a26 	vmul.f32	s14, s14, s13
 800193c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001940:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8001944:	3401      	adds	r4, #1
 8001946:	2c02      	cmp	r4, #2
 8001948:	dddb      	ble.n	8001902 <main+0x286>
 800194a:	e088      	b.n	8001a5e <main+0x3e2>
        memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800194c:	4920      	ldr	r1, [pc, #128]	@ (80019d0 <main+0x354>)
 800194e:	2400      	movs	r4, #0
 8001950:	600c      	str	r4, [r1, #0]
 8001952:	808c      	strh	r4, [r1, #4]
        lsm6dsm_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001954:	a816      	add	r0, sp, #88	@ 0x58
 8001956:	f7ff fb41 	bl	8000fdc <lsm6dsm_angular_rate_raw_get>
        for (int j = 0; j < 3; j++) {
 800195a:	e021      	b.n	80019a0 <main+0x324>
            float raw = lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[j]) - gyro_bias[j];
 800195c:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <main+0x354>)
 800195e:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 8001962:	f7ff fa89 	bl	8000e78 <lsm6dsm_from_fs2000dps_to_mdps>
 8001966:	ab1a      	add	r3, sp, #104	@ 0x68
 8001968:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800196c:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001978:	ee70 7a67 	vsub.f32	s15, s0, s15
            filtered_gyro[j] = alpha * raw + (1.0f - alpha) * filtered_gyro[j];
 800197c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80019d4 <main+0x358>
 8001980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <main+0x364>)
 8001986:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019dc <main+0x360>
 8001992:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800199a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800199e:	3401      	adds	r4, #1
 80019a0:	2c02      	cmp	r4, #2
 80019a2:	dddb      	ble.n	800195c <main+0x2e0>
 80019a4:	e061      	b.n	8001a6a <main+0x3ee>
 80019a6:	bf00      	nop
 80019a8:	080012bd 	.word	0x080012bd
 80019ac:	08001359 	.word	0x08001359
 80019b0:	20000280 	.word	0x20000280
 80019b4:	0800126d 	.word	0x0800126d
 80019b8:	08001309 	.word	0x08001309
 80019bc:	08001239 	.word	0x08001239
 80019c0:	40020000 	.word	0x40020000
 80019c4:	2000021d 	.word	0x2000021d
 80019c8:	2000021c 	.word	0x2000021c
 80019cc:	20000230 	.word	0x20000230
 80019d0:	20000228 	.word	0x20000228
 80019d4:	3dcccccd 	.word	0x3dcccccd
 80019d8:	20000210 	.word	0x20000210
 80019dc:	3f666666 	.word	0x3f666666
 80019e0:	20000204 	.word	0x20000204
      printf("%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%.2f,101.325\r\n", filtered_acc[0], filtered_acc[1], filtered_acc[2], filtered_gyro[0], filtered_gyro[1], filtered_gyro[2], temperature_degC);
 80019e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <main+0x418>)
 80019e6:	685e      	ldr	r6, [r3, #4]
 80019e8:	689f      	ldr	r7, [r3, #8]
 80019ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001a98 <main+0x41c>)
 80019ec:	f8d2 8000 	ldr.w	r8, [r2]
 80019f0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80019f4:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	f7fe fd85 	bl	8000508 <__aeabi_f2d>
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
 8001a02:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <main+0x420>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	f7fe fd7f 	bl	8000508 <__aeabi_f2d>
 8001a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8001a0e:	4650      	mov	r0, sl
 8001a10:	f7fe fd7a 	bl	8000508 <__aeabi_f2d>
 8001a14:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001a18:	4648      	mov	r0, r9
 8001a1a:	f7fe fd75 	bl	8000508 <__aeabi_f2d>
 8001a1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001a22:	4640      	mov	r0, r8
 8001a24:	f7fe fd70 	bl	8000508 <__aeabi_f2d>
 8001a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	f7fe fd6b 	bl	8000508 <__aeabi_f2d>
 8001a32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a36:	4630      	mov	r0, r6
 8001a38:	f7fe fd66 	bl	8000508 <__aeabi_f2d>
 8001a3c:	e9cd 0100 	strd	r0, r1, [sp]
 8001a40:	4622      	mov	r2, r4
 8001a42:	462b      	mov	r3, r5
 8001a44:	4816      	ldr	r0, [pc, #88]	@ (8001aa0 <main+0x424>)
 8001a46:	f003 fffb 	bl	8005a40 <iprintf>
	    lsm6dsm_status_reg_get(&dev_ctx, &reg.status_reg);
 8001a4a:	a90c      	add	r1, sp, #48	@ 0x30
 8001a4c:	a816      	add	r0, sp, #88	@ 0x58
 8001a4e:	f7ff faac 	bl	8000faa <lsm6dsm_status_reg_get>
	    if (reg.status_reg.xlda) {
 8001a52:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001a56:	f013 0f01 	tst.w	r3, #1
 8001a5a:	f47f af4a 	bne.w	80018f2 <main+0x276>
    if (reg.status_reg.gda) {
 8001a5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001a62:	f013 0f02 	tst.w	r3, #2
 8001a66:	f47f af71 	bne.w	800194c <main+0x2d0>
	    if (reg.status_reg.tda) {
 8001a6a:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001a6e:	f013 0f04 	tst.w	r3, #4
 8001a72:	d0b7      	beq.n	80019e4 <main+0x368>
	      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001a74:	4c0b      	ldr	r4, [pc, #44]	@ (8001aa4 <main+0x428>)
 8001a76:	2300      	movs	r3, #0
 8001a78:	8023      	strh	r3, [r4, #0]
	      lsm6dsm_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	a816      	add	r0, sp, #88	@ 0x58
 8001a7e:	f7ff fa9b 	bl	8000fb8 <lsm6dsm_temperature_raw_get>
	      temperature_degC = lsm6dsm_from_lsb_to_celsius(
 8001a82:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001a86:	f7ff fa03 	bl	8000e90 <lsm6dsm_from_lsb_to_celsius>
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <main+0x420>)
 8001a8c:	ed83 0a00 	vstr	s0, [r3]
 8001a90:	e7a8      	b.n	80019e4 <main+0x368>
 8001a92:	bf00      	nop
 8001a94:	20000210 	.word	0x20000210
 8001a98:	20000204 	.word	0x20000204
 8001a9c:	20000220 	.word	0x20000220
 8001aa0:	08009620 	.word	0x08009620
 8001aa4:	20000224 	.word	0x20000224

08001aa8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001aa8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <SD_CheckStatus+0x20>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8001ab0:	f7ff f94a 	bl	8000d48 <BSP_SD_GetCardState>
 8001ab4:	b920      	cbnz	r0, 8001ac0 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <SD_CheckStatus+0x20>)
 8001ab8:	7813      	ldrb	r3, [r2, #0]
 8001aba:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001abe:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8001ac0:	4b01      	ldr	r3, [pc, #4]	@ (8001ac8 <SD_CheckStatus+0x20>)
 8001ac2:	7818      	ldrb	r0, [r3, #0]
}
 8001ac4:	bd08      	pop	{r3, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000

08001acc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <SD_initialize+0x24>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8001ad6:	f7ff f959 	bl	8000d8c <BSP_SD_Init>
 8001ada:	b110      	cbz	r0, 8001ae2 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8001adc:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <SD_initialize+0x24>)
 8001ade:	7818      	ldrb	r0, [r3, #0]
}
 8001ae0:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff ffe0 	bl	8001aa8 <SD_CheckStatus>
 8001ae8:	4b01      	ldr	r3, [pc, #4]	@ (8001af0 <SD_initialize+0x24>)
 8001aea:	7018      	strb	r0, [r3, #0]
 8001aec:	e7f6      	b.n	8001adc <SD_initialize+0x10>
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000

08001af4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001af4:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8001af6:	f7ff ffd7 	bl	8001aa8 <SD_CheckStatus>
}
 8001afa:	bd08      	pop	{r3, pc}

08001afc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001afc:	b508      	push	{r3, lr}
 8001afe:	4608      	mov	r0, r1
 8001b00:	4611      	mov	r1, r2
 8001b02:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	f7ff f8fe 	bl	8000d08 <BSP_SD_ReadBlocks>
 8001b0c:	b930      	cbnz	r0, 8001b1c <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8001b0e:	f7ff f91b 	bl	8000d48 <BSP_SD_GetCardState>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d1fa      	bne.n	8001b0e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e7fb      	b.n	8001b18 <SD_read+0x1c>

08001b20 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001b20:	b508      	push	{r3, lr}
 8001b22:	4608      	mov	r0, r1
 8001b24:	4611      	mov	r1, r2
 8001b26:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	f7ff f8fc 	bl	8000d28 <BSP_SD_WriteBlocks>
 8001b30:	b930      	cbnz	r0, 8001b40 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8001b32:	f7ff f909 	bl	8000d48 <BSP_SD_GetCardState>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d1fa      	bne.n	8001b32 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e7fb      	b.n	8001b3c <SD_write+0x1c>

08001b44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001b44:	b530      	push	{r4, r5, lr}
 8001b46:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <SD_ioctl+0x54>)
 8001b4a:	7818      	ldrb	r0, [r3, #0]
 8001b4c:	f010 0401 	ands.w	r4, r0, #1
 8001b50:	d11b      	bne.n	8001b8a <SD_ioctl+0x46>
 8001b52:	4615      	mov	r5, r2

  switch (cmd)
 8001b54:	2903      	cmp	r1, #3
 8001b56:	d81c      	bhi.n	8001b92 <SD_ioctl+0x4e>
 8001b58:	e8df f001 	tbb	[pc, r1]
 8001b5c:	100a0402 	.word	0x100a0402
 8001b60:	460c      	mov	r4, r1
 8001b62:	e013      	b.n	8001b8c <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001b64:	4668      	mov	r0, sp
 8001b66:	f7ff f8f9 	bl	8000d5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001b6a:	9b06      	ldr	r3, [sp, #24]
 8001b6c:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8001b6e:	e00d      	b.n	8001b8c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001b70:	4668      	mov	r0, sp
 8001b72:	f7ff f8f3 	bl	8000d5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001b76:	9b07      	ldr	r3, [sp, #28]
 8001b78:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8001b7a:	e007      	b.n	8001b8c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001b7c:	4668      	mov	r0, sp
 8001b7e:	f7ff f8ed 	bl	8000d5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8001b82:	9b07      	ldr	r3, [sp, #28]
 8001b84:	0a5b      	lsrs	r3, r3, #9
 8001b86:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8001b88:	e000      	b.n	8001b8c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b8a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	b009      	add	sp, #36	@ 0x24
 8001b90:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8001b92:	2404      	movs	r4, #4
 8001b94:	e7fa      	b.n	8001b8c <SD_ioctl+0x48>
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b510      	push	{r4, lr}
 8001b9e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_InitTick+0x40>)
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bac:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <HAL_InitTick+0x44>)
 8001bae:	6810      	ldr	r0, [r2, #0]
 8001bb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bb4:	f000 f8ae 	bl	8001d14 <HAL_SYSTICK_Config>
 8001bb8:	b968      	cbnz	r0, 8001bd6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	2c0f      	cmp	r4, #15
 8001bbc:	d901      	bls.n	8001bc2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	e00a      	b.n	8001bd8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bca:	f000 f893 	bl	8001cf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_InitTick+0x48>)
 8001bd0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001bd6:	2001      	movs	r0, #1
}
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000001 	.word	0x20000001
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_Init>:
{
 8001be8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_Init+0x30>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bfa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f863 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f7ff ffc6 	bl	8001b9c <HAL_InitTick>
  HAL_MspInit();
 8001c10:	f000 fd96 	bl	8002740 <HAL_MspInit>
}
 8001c14:	2000      	movs	r0, #0
 8001c16:	bd08      	pop	{r3, pc}
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c1c:	4a03      	ldr	r2, [pc, #12]	@ (8001c2c <HAL_IncTick+0x10>)
 8001c1e:	6811      	ldr	r1, [r2, #0]
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_IncTick+0x14>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	440b      	add	r3, r1
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200003b0 	.word	0x200003b0
 8001c30:	20000001 	.word	0x20000001

08001c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c34:	4b01      	ldr	r3, [pc, #4]	@ (8001c3c <HAL_GetTick+0x8>)
 8001c36:	6818      	ldr	r0, [r3, #0]
}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200003b0 	.word	0x200003b0

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fff6 	bl	8001c34 <HAL_GetTick>
 8001c48:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001c4e:	d002      	beq.n	8001c56 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <HAL_Delay+0x24>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c56:	f7ff ffed 	bl	8001c34 <HAL_GetTick>
 8001c5a:	1b40      	subs	r0, r0, r5
 8001c5c:	42a0      	cmp	r0, r4
 8001c5e:	d3fa      	bcc.n	8001c56 <HAL_Delay+0x16>
  {
  }
}
 8001c60:	bd38      	pop	{r3, r4, r5, pc}
 8001c62:	bf00      	nop
 8001c64:	20000001 	.word	0x20000001

08001c68 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	db08      	blt.n	8001c7e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	0109      	lsls	r1, r1, #4
 8001c6e:	b2c9      	uxtb	r1, r1
 8001c70:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001c74:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001c78:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001c7c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	f000 000f 	and.w	r0, r0, #15
 8001c82:	0109      	lsls	r1, r1, #4
 8001c84:	b2c9      	uxtb	r1, r1
 8001c86:	4b01      	ldr	r3, [pc, #4]	@ (8001c8c <__NVIC_SetPriority+0x24>)
 8001c88:	5419      	strb	r1, [r3, r0]
  }
}
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed14 	.word	0xe000ed14

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c92:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c96:	f1c0 0c07 	rsb	ip, r0, #7
 8001c9a:	f1bc 0f04 	cmp.w	ip, #4
 8001c9e:	bf28      	it	cs
 8001ca0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca4:	1d03      	adds	r3, r0, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d90f      	bls.n	8001cca <NVIC_EncodePriority+0x3a>
 8001caa:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 3eff 	mov.w	lr, #4294967295
 8001cb0:	fa0e f00c 	lsl.w	r0, lr, ip
 8001cb4:	ea21 0100 	bic.w	r1, r1, r0
 8001cb8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cba:	fa0e fe03 	lsl.w	lr, lr, r3
 8001cbe:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001cc2:	ea41 0002 	orr.w	r0, r1, r2
 8001cc6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e7ee      	b.n	8001cac <NVIC_EncodePriority+0x1c>
	...

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001cd2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	0200      	lsls	r0, r0, #8
 8001cde:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001cec:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_NVIC_SetPriority+0x1c>)
 8001cfa:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001d00:	f7ff ffc6 	bl	8001c90 <NVIC_EncodePriority>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff ffae 	bl	8001c68 <__NVIC_SetPriority>
}
 8001d0c:	bd10      	pop	{r4, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	3801      	subs	r0, #1
 8001d16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001d1a:	d20b      	bcs.n	8001d34 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d20:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <HAL_SYSTICK_Config+0x24>)
 8001d24:	21f0      	movs	r1, #240	@ 0xf0
 8001d26:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	2207      	movs	r2, #7
 8001d30:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d32:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f200 80e9 	bhi.w	8001f16 <HAL_GPIO_Init+0x1da>
{
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	e065      	b.n	8001e16 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001d50:	2403      	movs	r4, #3
 8001d52:	fa04 f40e 	lsl.w	r4, r4, lr
 8001d56:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	68cc      	ldr	r4, [r1, #12]
 8001d5c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001d60:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001d62:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d64:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d66:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6a:	684a      	ldr	r2, [r1, #4]
 8001d6c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001d74:	6042      	str	r2, [r0, #4]
 8001d76:	e05c      	b.n	8001e32 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	08dc      	lsrs	r4, r3, #3
 8001d7a:	3408      	adds	r4, #8
 8001d7c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d80:	f003 0507 	and.w	r5, r3, #7
 8001d84:	00ad      	lsls	r5, r5, #2
 8001d86:	f04f 0e0f 	mov.w	lr, #15
 8001d8a:	fa0e fe05 	lsl.w	lr, lr, r5
 8001d8e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d92:	690a      	ldr	r2, [r1, #16]
 8001d94:	40aa      	lsls	r2, r5
 8001d96:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d9a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001d9e:	e05c      	b.n	8001e5a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da0:	2207      	movs	r2, #7
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
 8001da4:	2200      	movs	r2, #0
 8001da6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001daa:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	3402      	adds	r4, #2
 8001dae:	4d5a      	ldr	r5, [pc, #360]	@ (8001f18 <HAL_GPIO_Init+0x1dc>)
 8001db0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db4:	4a59      	ldr	r2, [pc, #356]	@ (8001f1c <HAL_GPIO_Init+0x1e0>)
 8001db6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	ea6f 020c 	mvn.w	r2, ip
 8001dbc:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc0:	684e      	ldr	r6, [r1, #4]
 8001dc2:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001dc6:	d001      	beq.n	8001dcc <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001dc8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001dcc:	4c53      	ldr	r4, [pc, #332]	@ (8001f1c <HAL_GPIO_Init+0x1e0>)
 8001dce:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001dd0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd6:	684e      	ldr	r6, [r1, #4]
 8001dd8:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001ddc:	d001      	beq.n	8001de2 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001dde:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001de2:	4c4e      	ldr	r4, [pc, #312]	@ (8001f1c <HAL_GPIO_Init+0x1e0>)
 8001de4:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001de6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dec:	684e      	ldr	r6, [r1, #4]
 8001dee:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001df2:	d001      	beq.n	8001df8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001df4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001df8:	4c48      	ldr	r4, [pc, #288]	@ (8001f1c <HAL_GPIO_Init+0x1e0>)
 8001dfa:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e00:	684d      	ldr	r5, [r1, #4]
 8001e02:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001e06:	d001      	beq.n	8001e0c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001e08:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001e0c:	4c43      	ldr	r4, [pc, #268]	@ (8001f1c <HAL_GPIO_Init+0x1e0>)
 8001e0e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e10:	3301      	adds	r3, #1
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	d87d      	bhi.n	8001f12 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001e16:	2201      	movs	r2, #1
 8001e18:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	680c      	ldr	r4, [r1, #0]
 8001e1c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001e20:	ea32 0404 	bics.w	r4, r2, r4
 8001e24:	d1f4      	bne.n	8001e10 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e26:	684c      	ldr	r4, [r1, #4]
 8001e28:	f004 0403 	and.w	r4, r4, #3
 8001e2c:	3c01      	subs	r4, #1
 8001e2e:	2c01      	cmp	r4, #1
 8001e30:	d98b      	bls.n	8001d4a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e32:	684a      	ldr	r2, [r1, #4]
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	2a03      	cmp	r2, #3
 8001e3a:	d009      	beq.n	8001e50 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001e3c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3e:	005d      	lsls	r5, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	40aa      	lsls	r2, r5
 8001e44:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e48:	688a      	ldr	r2, [r1, #8]
 8001e4a:	40aa      	lsls	r2, r5
 8001e4c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001e4e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e50:	684a      	ldr	r2, [r1, #4]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	2a02      	cmp	r2, #2
 8001e58:	d08e      	beq.n	8001d78 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001e5a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e66:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	684a      	ldr	r2, [r1, #4]
 8001e6c:	f002 0203 	and.w	r2, r2, #3
 8001e70:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e74:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001e76:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e78:	684a      	ldr	r2, [r1, #4]
 8001e7a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001e7e:	d0c7      	beq.n	8001e10 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e80:	2200      	movs	r2, #0
 8001e82:	9201      	str	r2, [sp, #4]
 8001e84:	4a26      	ldr	r2, [pc, #152]	@ (8001f20 <HAL_GPIO_Init+0x1e4>)
 8001e86:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001e88:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001e8c:	6454      	str	r4, [r2, #68]	@ 0x44
 8001e8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e90:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001e94:	9201      	str	r2, [sp, #4]
 8001e96:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e98:	089c      	lsrs	r4, r3, #2
 8001e9a:	1ca5      	adds	r5, r4, #2
 8001e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f18 <HAL_GPIO_Init+0x1dc>)
 8001e9e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea2:	f003 0e03 	and.w	lr, r3, #3
 8001ea6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f20e 	lsl.w	r2, r2, lr
 8001eb0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f24 <HAL_GPIO_Init+0x1e8>)
 8001eb6:	4290      	cmp	r0, r2
 8001eb8:	f43f af74 	beq.w	8001da4 <HAL_GPIO_Init+0x68>
 8001ebc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ec0:	4290      	cmp	r0, r2
 8001ec2:	d01a      	beq.n	8001efa <HAL_GPIO_Init+0x1be>
 8001ec4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ec8:	4290      	cmp	r0, r2
 8001eca:	d018      	beq.n	8001efe <HAL_GPIO_Init+0x1c2>
 8001ecc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	d016      	beq.n	8001f02 <HAL_GPIO_Init+0x1c6>
 8001ed4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ed8:	4290      	cmp	r0, r2
 8001eda:	d014      	beq.n	8001f06 <HAL_GPIO_Init+0x1ca>
 8001edc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ee0:	4290      	cmp	r0, r2
 8001ee2:	d012      	beq.n	8001f0a <HAL_GPIO_Init+0x1ce>
 8001ee4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ee8:	4290      	cmp	r0, r2
 8001eea:	d010      	beq.n	8001f0e <HAL_GPIO_Init+0x1d2>
 8001eec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ef0:	4290      	cmp	r0, r2
 8001ef2:	f43f af55 	beq.w	8001da0 <HAL_GPIO_Init+0x64>
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	e755      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
 8001efa:	2201      	movs	r2, #1
 8001efc:	e753      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
 8001efe:	2202      	movs	r2, #2
 8001f00:	e751      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
 8001f02:	2203      	movs	r2, #3
 8001f04:	e74f      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
 8001f06:	2204      	movs	r2, #4
 8001f08:	e74d      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
 8001f0a:	2205      	movs	r2, #5
 8001f0c:	e74b      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
 8001f0e:	2206      	movs	r2, #6
 8001f10:	e749      	b.n	8001da6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001f12:	b002      	add	sp, #8
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
 8001f16:	4770      	bx	lr
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40013c00 	.word	0x40013c00
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000

08001f28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f28:	6903      	ldr	r3, [r0, #16]
 8001f2a:	4219      	tst	r1, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f32:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001f34:	4770      	bx	lr

08001f36 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f36:	b10a      	cbz	r2, 8001f3c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f38:	6181      	str	r1, [r0, #24]
 8001f3a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3c:	0409      	lsls	r1, r1, #16
 8001f3e:	6181      	str	r1, [r0, #24]
  }
}
 8001f40:	4770      	bx	lr

08001f42 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f42:	6803      	ldr	r3, [r0, #0]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001f4a:	d101      	bne.n	8001f50 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001f4c:	2000      	movs	r0, #0
}
 8001f4e:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f54:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f60:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f64:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001f66:	f042 0204 	orr.w	r2, r2, #4
 8001f6a:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001f6c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
 8001f72:	4770      	bx	lr

08001f74 <I2C_WaitOnFlagUntilTimeout>:
{
 8001f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f78:	4606      	mov	r6, r0
 8001f7a:	460c      	mov	r4, r1
 8001f7c:	4617      	mov	r7, r2
 8001f7e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f80:	e03b      	b.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f82:	f7ff fe57 	bl	8001c34 <HAL_GetTick>
 8001f86:	9b06      	ldr	r3, [sp, #24]
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	4540      	cmp	r0, r8
 8001f8c:	d802      	bhi.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x20>
 8001f8e:	f1b8 0f00 	cmp.w	r8, #0
 8001f92:	d132      	bne.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f94:	2d01      	cmp	r5, #1
 8001f96:	d018      	beq.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f98:	6833      	ldr	r3, [r6, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	ea24 0303 	bic.w	r3, r4, r3
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	429f      	cmp	r7, r3
 8001faa:	d126      	bne.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fb6:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fba:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001fbc:	f042 0220 	orr.w	r2, r2, #32
 8001fc0:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001fc2:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	e027      	b.n	800201a <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fca:	6833      	ldr	r3, [r6, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	ea24 0303 	bic.w	r3, r4, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	e7e5      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fdc:	6833      	ldr	r3, [r6, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	ea24 0c03 	bic.w	ip, r4, r3
 8001fe4:	fa1f fc8c 	uxth.w	ip, ip
 8001fe8:	fabc fc8c 	clz	ip, ip
 8001fec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001ff0:	4567      	cmp	r7, ip
 8001ff2:	d111      	bne.n	8002018 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001ff8:	d1c3      	bne.n	8001f82 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ffa:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001ffe:	2d01      	cmp	r5, #1
 8002000:	d0ec      	beq.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0x68>
 8002002:	6833      	ldr	r3, [r6, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	ea24 0c03 	bic.w	ip, r4, r3
 800200a:	fa1f fc8c 	uxth.w	ip, ip
 800200e:	fabc fc8c 	clz	ip, ip
 8002012:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002016:	e7eb      	b.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8002018:	2000      	movs	r0, #0
}
 800201a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800201e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800201e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002022:	4605      	mov	r5, r0
 8002024:	460e      	mov	r6, r1
 8002026:	4690      	mov	r8, r2
 8002028:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800202a:	e053      	b.n	80020d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002032:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800203a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800203c:	2300      	movs	r3, #0
 800203e:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002040:	2220      	movs	r2, #32
 8002042:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002046:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800204a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800204c:	f042 0204 	orr.w	r2, r2, #4
 8002050:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002052:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
 8002058:	e04a      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205a:	f7ff fdeb 	bl	8001c34 <HAL_GetTick>
 800205e:	eba0 0009 	sub.w	r0, r0, r9
 8002062:	4540      	cmp	r0, r8
 8002064:	d802      	bhi.n	800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8002066:	f1b8 0f00 	cmp.w	r8, #0
 800206a:	d133      	bne.n	80020d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800206c:	2f01      	cmp	r7, #1
 800206e:	d017      	beq.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	ea26 0303 	bic.w	r3, r6, r3
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b00      	subs	r3, #0
 800207c:	bf18      	it	ne
 800207e:	2301      	movne	r3, #1
 8002080:	b343      	cbz	r3, 80020d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002082:	2300      	movs	r3, #0
 8002084:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002086:	2220      	movs	r2, #32
 8002088:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208c:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002090:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002098:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 800209c:	2001      	movs	r0, #1
 800209e:	e027      	b.n	80020f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	ea26 0303 	bic.w	r3, r6, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b00      	subs	r3, #0
 80020ac:	bf18      	it	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	e7e6      	b.n	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b2:	682b      	ldr	r3, [r5, #0]
 80020b4:	699c      	ldr	r4, [r3, #24]
 80020b6:	ea26 0404 	bic.w	r4, r6, r4
 80020ba:	b2a4      	uxth	r4, r4
 80020bc:	3c00      	subs	r4, #0
 80020be:	bf18      	it	ne
 80020c0:	2401      	movne	r4, #1
 80020c2:	b1a4      	cbz	r4, 80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80020cc:	d1ae      	bne.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80020ce:	f1b8 3fff 	cmp.w	r8, #4294967295
 80020d2:	d1c2      	bne.n	800205a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020d4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80020d8:	2f01      	cmp	r7, #1
 80020da:	d1ea      	bne.n	80020b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80020dc:	682b      	ldr	r3, [r5, #0]
 80020de:	695c      	ldr	r4, [r3, #20]
 80020e0:	ea26 0404 	bic.w	r4, r6, r4
 80020e4:	b2a4      	uxth	r4, r4
 80020e6:	3c00      	subs	r4, #0
 80020e8:	bf18      	it	ne
 80020ea:	2401      	movne	r4, #1
 80020ec:	e7e9      	b.n	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 80020ee:	2000      	movs	r0, #0
}
 80020f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020f4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	460d      	mov	r5, r1
 80020fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002104:	d121      	bne.n	800214a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff ff1b 	bl	8001f42 <I2C_IsAcknowledgeFailed>
 800210c:	b9f8      	cbnz	r0, 800214e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800210e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002112:	d0f3      	beq.n	80020fc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002114:	f7ff fd8e 	bl	8001c34 <HAL_GetTick>
 8002118:	1b80      	subs	r0, r0, r6
 800211a:	42a8      	cmp	r0, r5
 800211c:	d801      	bhi.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800211e:	2d00      	cmp	r5, #0
 8002120:	d1ec      	bne.n	80020fc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800212a:	d1e7      	bne.n	80020fc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800212c:	2300      	movs	r3, #0
 800212e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002130:	2220      	movs	r2, #32
 8002132:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002136:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002142:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	e000      	b.n	800214c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800214a:	2000      	movs	r0, #0
}
 800214c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800214e:	2001      	movs	r0, #1
 8002150:	e7fc      	b.n	800214c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08002154 <I2C_RequestMemoryWrite>:
{
 8002154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002158:	b085      	sub	sp, #20
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	4691      	mov	r9, r2
 8002160:	461f      	mov	r7, r3
 8002162:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8002166:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002168:	6803      	ldr	r3, [r0, #0]
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002170:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002172:	9600      	str	r6, [sp, #0]
 8002174:	4643      	mov	r3, r8
 8002176:	2200      	movs	r2, #0
 8002178:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800217c:	f7ff fefa 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 8002180:	b960      	cbnz	r0, 800219c <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002188:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800218a:	4633      	mov	r3, r6
 800218c:	4642      	mov	r2, r8
 800218e:	4926      	ldr	r1, [pc, #152]	@ (8002228 <I2C_RequestMemoryWrite+0xd4>)
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff ff44 	bl	800201e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002196:	b168      	cbz	r0, 80021b4 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002198:	2001      	movs	r0, #1
 800219a:	e008      	b.n	80021ae <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80021a4:	d002      	beq.n	80021ac <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021aa:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80021ac:	2003      	movs	r0, #3
}
 80021ae:	b005      	add	sp, #20
 80021b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b4:	2300      	movs	r3, #0
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	9203      	str	r2, [sp, #12]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	9303      	str	r3, [sp, #12]
 80021c2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c4:	4632      	mov	r2, r6
 80021c6:	4641      	mov	r1, r8
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff ff93 	bl	80020f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ce:	b930      	cbnz	r0, 80021de <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021d0:	2f01      	cmp	r7, #1
 80021d2:	d10f      	bne.n	80021f4 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	fa5f f689 	uxtb.w	r6, r9
 80021da:	611e      	str	r6, [r3, #16]
 80021dc:	e7e7      	b.n	80021ae <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d001      	beq.n	80021e8 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
 80021e6:	e7e2      	b.n	80021ae <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e7f7      	b.n	80021e4 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80021fa:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fc:	4632      	mov	r2, r6
 80021fe:	4641      	mov	r1, r8
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff ff77 	bl	80020f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002206:	b920      	cbnz	r0, 8002212 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	fa5f f689 	uxtb.w	r6, r9
 800220e:	611e      	str	r6, [r3, #16]
 8002210:	e7cd      	b.n	80021ae <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002212:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d001      	beq.n	800221c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8002218:	2001      	movs	r0, #1
 800221a:	e7c8      	b.n	80021ae <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e7f7      	b.n	8002218 <I2C_RequestMemoryWrite+0xc4>
 8002228:	00010002 	.word	0x00010002

0800222c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	4604      	mov	r4, r0
 8002230:	460d      	mov	r5, r1
 8002232:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f013 0f04 	tst.w	r3, #4
 800223c:	d121      	bne.n	8002282 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800223e:	4620      	mov	r0, r4
 8002240:	f7ff fe7f 	bl	8001f42 <I2C_IsAcknowledgeFailed>
 8002244:	b9f8      	cbnz	r0, 8002286 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002246:	f1b5 3fff 	cmp.w	r5, #4294967295
 800224a:	d0f3      	beq.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224c:	f7ff fcf2 	bl	8001c34 <HAL_GetTick>
 8002250:	1b80      	subs	r0, r0, r6
 8002252:	42a8      	cmp	r0, r5
 8002254:	d801      	bhi.n	800225a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002256:	2d00      	cmp	r5, #0
 8002258:	d1ec      	bne.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f013 0f04 	tst.w	r3, #4
 8002262:	d1e7      	bne.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002264:	2300      	movs	r3, #0
 8002266:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002268:	2220      	movs	r2, #32
 800226a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002272:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002274:	f042 0220 	orr.w	r2, r2, #32
 8002278:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800227a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
 8002280:	e000      	b.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8002282:	2000      	movs	r0, #0
}
 8002284:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002286:	2001      	movs	r0, #1
 8002288:	e7fc      	b.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
	...

0800228c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800228c:	2800      	cmp	r0, #0
 800228e:	f000 80cc 	beq.w	800242a <HAL_I2C_Init+0x19e>
{
 8002292:	b570      	push	{r4, r5, r6, lr}
 8002294:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002296:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800229a:	2b00      	cmp	r3, #0
 800229c:	d077      	beq.n	800238e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800229e:	2324      	movs	r3, #36	@ 0x24
 80022a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	6813      	ldr	r3, [r2, #0]
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	6813      	ldr	r3, [r2, #0]
 80022b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80022c0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c2:	f000 fe59 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c6:	6862      	ldr	r2, [r4, #4]
 80022c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002434 <HAL_I2C_Init+0x1a8>)
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d864      	bhi.n	8002398 <HAL_I2C_Init+0x10c>
 80022ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002438 <HAL_I2C_Init+0x1ac>)
 80022d0:	4298      	cmp	r0, r3
 80022d2:	bf8c      	ite	hi
 80022d4:	2300      	movhi	r3, #0
 80022d6:	2301      	movls	r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 80a8 	bne.w	800242e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80022de:	4957      	ldr	r1, [pc, #348]	@ (800243c <HAL_I2C_Init+0x1b0>)
 80022e0:	fba1 3100 	umull	r3, r1, r1, r0
 80022e4:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	6825      	ldr	r5, [r4, #0]
 80022e8:	686a      	ldr	r2, [r5, #4]
 80022ea:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80022ee:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80022f2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022f4:	6821      	ldr	r1, [r4, #0]
 80022f6:	6a0a      	ldr	r2, [r1, #32]
 80022f8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80022fc:	6866      	ldr	r6, [r4, #4]
 80022fe:	4d4d      	ldr	r5, [pc, #308]	@ (8002434 <HAL_I2C_Init+0x1a8>)
 8002300:	42ae      	cmp	r6, r5
 8002302:	d84f      	bhi.n	80023a4 <HAL_I2C_Init+0x118>
 8002304:	3301      	adds	r3, #1
 8002306:	4313      	orrs	r3, r2
 8002308:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800230a:	6821      	ldr	r1, [r4, #0]
 800230c:	69ca      	ldr	r2, [r1, #28]
 800230e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002312:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002316:	6865      	ldr	r5, [r4, #4]
 8002318:	4b46      	ldr	r3, [pc, #280]	@ (8002434 <HAL_I2C_Init+0x1a8>)
 800231a:	429d      	cmp	r5, r3
 800231c:	d84c      	bhi.n	80023b8 <HAL_I2C_Init+0x12c>
 800231e:	1e43      	subs	r3, r0, #1
 8002320:	006d      	lsls	r5, r5, #1
 8002322:	fbb3 f3f5 	udiv	r3, r3, r5
 8002326:	3301      	adds	r3, #1
 8002328:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800232c:	4203      	tst	r3, r0
 800232e:	d078      	beq.n	8002422 <HAL_I2C_Init+0x196>
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	431a      	orrs	r2, r3
 8002336:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002338:	6821      	ldr	r1, [r4, #0]
 800233a:	680b      	ldr	r3, [r1, #0]
 800233c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002340:	69e2      	ldr	r2, [r4, #28]
 8002342:	6a20      	ldr	r0, [r4, #32]
 8002344:	4302      	orrs	r2, r0
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800234a:	6821      	ldr	r1, [r4, #0]
 800234c:	688b      	ldr	r3, [r1, #8]
 800234e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002352:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002356:	6922      	ldr	r2, [r4, #16]
 8002358:	68e0      	ldr	r0, [r4, #12]
 800235a:	4302      	orrs	r2, r0
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002360:	6821      	ldr	r1, [r4, #0]
 8002362:	68cb      	ldr	r3, [r1, #12]
 8002364:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002368:	6962      	ldr	r2, [r4, #20]
 800236a:	69a0      	ldr	r0, [r4, #24]
 800236c:	4302      	orrs	r2, r0
 800236e:	4313      	orrs	r3, r2
 8002370:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002372:	6822      	ldr	r2, [r4, #0]
 8002374:	6813      	ldr	r3, [r2, #0]
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800237c:	2000      	movs	r0, #0
 800237e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002380:	2320      	movs	r3, #32
 8002382:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002386:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 800238c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800238e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002392:	f000 f9f1 	bl	8002778 <HAL_I2C_MspInit>
 8002396:	e782      	b.n	800229e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002398:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <HAL_I2C_Init+0x1b4>)
 800239a:	4298      	cmp	r0, r3
 800239c:	bf8c      	ite	hi
 800239e:	2300      	movhi	r3, #0
 80023a0:	2301      	movls	r3, #1
 80023a2:	e799      	b.n	80022d8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a4:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80023a8:	fb05 f303 	mul.w	r3, r5, r3
 80023ac:	4d25      	ldr	r5, [pc, #148]	@ (8002444 <HAL_I2C_Init+0x1b8>)
 80023ae:	fba5 5303 	umull	r5, r3, r5, r3
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	3301      	adds	r3, #1
 80023b6:	e7a6      	b.n	8002306 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023b8:	68a6      	ldr	r6, [r4, #8]
 80023ba:	b9be      	cbnz	r6, 80023ec <HAL_I2C_Init+0x160>
 80023bc:	1e43      	subs	r3, r0, #1
 80023be:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80023c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	bb43      	cbnz	r3, 8002426 <HAL_I2C_Init+0x19a>
 80023d4:	b9c6      	cbnz	r6, 8002408 <HAL_I2C_Init+0x17c>
 80023d6:	1e43      	subs	r3, r0, #1
 80023d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023dc:	fbb3 f3f5 	udiv	r3, r3, r5
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ea:	e7a3      	b.n	8002334 <HAL_I2C_Init+0xa8>
 80023ec:	1e43      	subs	r3, r0, #1
 80023ee:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80023f2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80023f6:	fbb3 f3fc 	udiv	r3, r3, ip
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	e7e4      	b.n	80023d2 <HAL_I2C_Init+0x146>
 8002408:	1e43      	subs	r3, r0, #1
 800240a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800240e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002412:	fbb3 f3f5 	udiv	r3, r3, r5
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002420:	e788      	b.n	8002334 <HAL_I2C_Init+0xa8>
 8002422:	2304      	movs	r3, #4
 8002424:	e786      	b.n	8002334 <HAL_I2C_Init+0xa8>
 8002426:	2301      	movs	r3, #1
 8002428:	e784      	b.n	8002334 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800242a:	2001      	movs	r0, #1
}
 800242c:	4770      	bx	lr
    return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
 8002430:	e7ac      	b.n	800238c <HAL_I2C_Init+0x100>
 8002432:	bf00      	nop
 8002434:	000186a0 	.word	0x000186a0
 8002438:	001e847f 	.word	0x001e847f
 800243c:	431bde83 	.word	0x431bde83
 8002440:	003d08ff 	.word	0x003d08ff
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_I2C_Mem_Write>:
{
 8002448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800244c:	b083      	sub	sp, #12
 800244e:	4604      	mov	r4, r0
 8002450:	460f      	mov	r7, r1
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff fbec 	bl	8001c34 <HAL_GetTick>
 800245c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800245e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002462:	b2c0      	uxtb	r0, r0
 8002464:	2820      	cmp	r0, #32
 8002466:	d003      	beq.n	8002470 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002468:	2002      	movs	r0, #2
}
 800246a:	b003      	add	sp, #12
 800246c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002470:	9500      	str	r5, [sp, #0]
 8002472:	2319      	movs	r3, #25
 8002474:	2201      	movs	r2, #1
 8002476:	494b      	ldr	r1, [pc, #300]	@ (80025a4 <HAL_I2C_Mem_Write+0x15c>)
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff fd7b 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 800247e:	2800      	cmp	r0, #0
 8002480:	f040 8089 	bne.w	8002596 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8002484:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002488:	2b01      	cmp	r3, #1
 800248a:	f000 8086 	beq.w	800259a <HAL_I2C_Mem_Write+0x152>
 800248e:	2301      	movs	r3, #1
 8002490:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	f012 0f01 	tst.w	r2, #1
 800249c:	d103      	bne.n	80024a6 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a6:	6822      	ldr	r2, [r4, #0]
 80024a8:	6813      	ldr	r3, [r2, #0]
 80024aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024ae:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b0:	2321      	movs	r3, #33	@ 0x21
 80024b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b6:	2340      	movs	r3, #64	@ 0x40
 80024b8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	2300      	movs	r3, #0
 80024be:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80024c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80024c2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024c4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80024c8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80024cc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <HAL_I2C_Mem_Write+0x160>)
 80024d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024d2:	9501      	str	r5, [sp, #4]
 80024d4:	9600      	str	r6, [sp, #0]
 80024d6:	464b      	mov	r3, r9
 80024d8:	4642      	mov	r2, r8
 80024da:	4639      	mov	r1, r7
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff fe39 	bl	8002154 <I2C_RequestMemoryWrite>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d15b      	bne.n	800259e <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80024e6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d035      	beq.n	8002558 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ec:	462a      	mov	r2, r5
 80024ee:	4631      	mov	r1, r6
 80024f0:	4620      	mov	r0, r4
 80024f2:	f7ff fdff 	bl	80020f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f6:	bb20      	cbnz	r0, 8002542 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002500:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002502:	1c53      	adds	r3, r2, #1
 8002504:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002506:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002508:	3901      	subs	r1, #1
 800250a:	b289      	uxth	r1, r1
 800250c:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800250e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29b      	uxth	r3, r3
 8002516:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	6958      	ldr	r0, [r3, #20]
 800251c:	f010 0f04 	tst.w	r0, #4
 8002520:	d0e1      	beq.n	80024e6 <HAL_I2C_Mem_Write+0x9e>
 8002522:	2900      	cmp	r1, #0
 8002524:	d0df      	beq.n	80024e6 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002526:	7852      	ldrb	r2, [r2, #1]
 8002528:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800252a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800252c:	3301      	adds	r3, #1
 800252e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002530:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002532:	3b01      	subs	r3, #1
 8002534:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002536:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002540:	e7d1      	b.n	80024e6 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002542:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002544:	2b04      	cmp	r3, #4
 8002546:	d001      	beq.n	800254c <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
 800254a:	e78e      	b.n	800246a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e7f7      	b.n	8002548 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	462a      	mov	r2, r5
 800255a:	4631      	mov	r1, r6
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fe65 	bl	800222c <I2C_WaitOnBTFFlagUntilTimeout>
 8002562:	b150      	cbz	r0, 800257a <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002566:	2b04      	cmp	r3, #4
 8002568:	d001      	beq.n	800256e <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
 800256c:	e77d      	b.n	800246a <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e7f7      	b.n	800256a <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	6822      	ldr	r2, [r4, #0]
 800257c:	6813      	ldr	r3, [r2, #0]
 800257e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002582:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	2320      	movs	r3, #32
 8002586:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800258a:	2300      	movs	r3, #0
 800258c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002590:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002594:	e769      	b.n	800246a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8002596:	2002      	movs	r0, #2
 8002598:	e767      	b.n	800246a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800259a:	2002      	movs	r0, #2
 800259c:	e765      	b.n	800246a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800259e:	2001      	movs	r0, #1
 80025a0:	e763      	b.n	800246a <HAL_I2C_Mem_Write+0x22>
 80025a2:	bf00      	nop
 80025a4:	00100002 	.word	0x00100002
 80025a8:	ffff0000 	.word	0xffff0000

080025ac <HAL_I2C_IsDeviceReady>:
{
 80025ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025b0:	b085      	sub	sp, #20
 80025b2:	4604      	mov	r4, r0
 80025b4:	4688      	mov	r8, r1
 80025b6:	4691      	mov	r9, r2
 80025b8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80025ba:	f7ff fb3b 	bl	8001c34 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d003      	beq.n	80025d0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80025c8:	2002      	movs	r0, #2
}
 80025ca:	b005      	add	sp, #20
 80025cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d2:	9000      	str	r0, [sp, #0]
 80025d4:	2319      	movs	r3, #25
 80025d6:	2201      	movs	r2, #1
 80025d8:	4957      	ldr	r1, [pc, #348]	@ (8002738 <HAL_I2C_IsDeviceReady+0x18c>)
 80025da:	4620      	mov	r0, r4
 80025dc:	f7ff fcca 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	f040 80a0 	bne.w	8002726 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80025e6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	f000 809d 	beq.w	800272a <HAL_I2C_IsDeviceReady+0x17e>
 80025f0:	2301      	movs	r3, #1
 80025f2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f012 0f01 	tst.w	r2, #1
 80025fe:	d103      	bne.n	8002608 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	6813      	ldr	r3, [r2, #0]
 800260c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002610:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002612:	2324      	movs	r3, #36	@ 0x24
 8002614:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	2700      	movs	r7, #0
 800261a:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800261c:	4b47      	ldr	r3, [pc, #284]	@ (800273c <HAL_I2C_IsDeviceReady+0x190>)
 800261e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002620:	e040      	b.n	80026a4 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800262a:	d002      	beq.n	8002632 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002630:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8002632:	2003      	movs	r0, #3
 8002634:	e7c9      	b.n	80025ca <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002636:	23a0      	movs	r3, #160	@ 0xa0
 8002638:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	6953      	ldr	r3, [r2, #20]
 8002640:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002644:	6952      	ldr	r2, [r2, #20]
 8002646:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800264a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 800264e:	fa5f fc8c 	uxtb.w	ip, ip
 8002652:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8002656:	d009      	beq.n	800266c <HAL_I2C_IsDeviceReady+0xc0>
 8002658:	b943      	cbnz	r3, 800266c <HAL_I2C_IsDeviceReady+0xc0>
 800265a:	b93a      	cbnz	r2, 800266c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7ff faea 	bl	8001c34 <HAL_GetTick>
 8002660:	1b80      	subs	r0, r0, r6
 8002662:	42a8      	cmp	r0, r5
 8002664:	d8e7      	bhi.n	8002636 <HAL_I2C_IsDeviceReady+0x8a>
 8002666:	2d00      	cmp	r5, #0
 8002668:	d1e8      	bne.n	800263c <HAL_I2C_IsDeviceReady+0x90>
 800266a:	e7e4      	b.n	8002636 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 800266c:	2320      	movs	r3, #32
 800266e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	f012 0f02 	tst.w	r2, #2
 800267a:	d131      	bne.n	80026e0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002682:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800268a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800268c:	9600      	str	r6, [sp, #0]
 800268e:	2319      	movs	r3, #25
 8002690:	2201      	movs	r2, #1
 8002692:	4929      	ldr	r1, [pc, #164]	@ (8002738 <HAL_I2C_IsDeviceReady+0x18c>)
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff fc6d 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 800269a:	2800      	cmp	r0, #0
 800269c:	d149      	bne.n	8002732 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 800269e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80026a0:	454f      	cmp	r7, r9
 80026a2:	d238      	bcs.n	8002716 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a4:	6822      	ldr	r2, [r4, #0]
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ac:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026ae:	9600      	str	r6, [sp, #0]
 80026b0:	462b      	mov	r3, r5
 80026b2:	2200      	movs	r2, #0
 80026b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff fc5b 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d1af      	bne.n	8002622 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 80026c8:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80026ca:	f7ff fab3 	bl	8001c34 <HAL_GetTick>
 80026ce:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	6953      	ldr	r3, [r2, #20]
 80026d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	6952      	ldr	r2, [r2, #20]
 80026da:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026de:	e7b4      	b.n	800264a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e8:	2300      	movs	r3, #0
 80026ea:	9303      	str	r3, [sp, #12]
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	9203      	str	r2, [sp, #12]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	9303      	str	r3, [sp, #12]
 80026f6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f8:	9600      	str	r6, [sp, #0]
 80026fa:	2319      	movs	r3, #25
 80026fc:	2201      	movs	r2, #1
 80026fe:	490e      	ldr	r1, [pc, #56]	@ (8002738 <HAL_I2C_IsDeviceReady+0x18c>)
 8002700:	4620      	mov	r0, r4
 8002702:	f7ff fc37 	bl	8001f74 <I2C_WaitOnFlagUntilTimeout>
 8002706:	b990      	cbnz	r0, 800272e <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8002708:	2320      	movs	r3, #32
 800270a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8002714:	e759      	b.n	80025ca <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002716:	2320      	movs	r3, #32
 8002718:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800271c:	2300      	movs	r3, #0
 800271e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	e751      	b.n	80025ca <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8002726:	2002      	movs	r0, #2
 8002728:	e74f      	b.n	80025ca <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800272a:	2002      	movs	r0, #2
 800272c:	e74d      	b.n	80025ca <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
 8002730:	e74b      	b.n	80025ca <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
 8002734:	e749      	b.n	80025ca <HAL_I2C_IsDeviceReady+0x1e>
 8002736:	bf00      	nop
 8002738:	00100002 	.word	0x00100002
 800273c:	ffff0000 	.word	0xffff0000

08002740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002740:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2100      	movs	r1, #0
 8002744:	9100      	str	r1, [sp, #0]
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_MspInit+0x34>)
 8002748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800274a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800274e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002752:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	9101      	str	r1, [sp, #4]
 800275c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800275e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002762:	641a      	str	r2, [r3, #64]	@ 0x40
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	b002      	add	sp, #8
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002778:	b530      	push	{r4, r5, lr}
 800277a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	2300      	movs	r3, #0
 800277e:	9303      	str	r3, [sp, #12]
 8002780:	9304      	str	r3, [sp, #16]
 8002782:	9305      	str	r3, [sp, #20]
 8002784:	9306      	str	r3, [sp, #24]
 8002786:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8002788:	6802      	ldr	r2, [r0, #0]
 800278a:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <HAL_I2C_MspInit+0x64>)
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002790:	b009      	add	sp, #36	@ 0x24
 8002792:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002794:	2500      	movs	r5, #0
 8002796:	9501      	str	r5, [sp, #4]
 8002798:	4c11      	ldr	r4, [pc, #68]	@ (80027e0 <HAL_I2C_MspInit+0x68>)
 800279a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80027a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80027ac:	23c0      	movs	r3, #192	@ 0xc0
 80027ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b0:	2312      	movs	r3, #18
 80027b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b8:	2304      	movs	r3, #4
 80027ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	a903      	add	r1, sp, #12
 80027be:	4809      	ldr	r0, [pc, #36]	@ (80027e4 <HAL_I2C_MspInit+0x6c>)
 80027c0:	f7ff fabc 	bl	8001d3c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c4:	9502      	str	r5, [sp, #8]
 80027c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027cc:	6423      	str	r3, [r4, #64]	@ 0x40
 80027ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	9b02      	ldr	r3, [sp, #8]
}
 80027d8:	e7da      	b.n	8002790 <HAL_I2C_MspInit+0x18>
 80027da:	bf00      	nop
 80027dc:	40005400 	.word	0x40005400
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020400 	.word	0x40020400

080027e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	2300      	movs	r3, #0
 80027ee:	9303      	str	r3, [sp, #12]
 80027f0:	9304      	str	r3, [sp, #16]
 80027f2:	9305      	str	r3, [sp, #20]
 80027f4:	9306      	str	r3, [sp, #24]
 80027f6:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 80027f8:	6802      	ldr	r2, [r0, #0]
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_SD_MspInit+0x94>)
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_SD_MspInit+0x1c>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002800:	b009      	add	sp, #36	@ 0x24
 8002802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002804:	2400      	movs	r4, #0
 8002806:	9400      	str	r4, [sp, #0]
 8002808:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800280c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800280e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44
 8002814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002816:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	9401      	str	r4, [sp, #4]
 8002820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002822:	f042 0204 	orr.w	r2, r2, #4
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
 8002828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282a:	f002 0204 	and.w	r2, r2, #4
 800282e:	9201      	str	r2, [sp, #4]
 8002830:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002832:	9402      	str	r4, [sp, #8]
 8002834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	9302      	str	r3, [sp, #8]
 8002844:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002846:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800284a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2702      	movs	r7, #2
 800284e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2603      	movs	r6, #3
 8002852:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002854:	250c      	movs	r5, #12
 8002856:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002858:	eb0d 0105 	add.w	r1, sp, r5
 800285c:	4808      	ldr	r0, [pc, #32]	@ (8002880 <HAL_SD_MspInit+0x98>)
 800285e:	f7ff fa6d 	bl	8001d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002862:	2304      	movs	r3, #4
 8002864:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800286c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286e:	eb0d 0105 	add.w	r1, sp, r5
 8002872:	4804      	ldr	r0, [pc, #16]	@ (8002884 <HAL_SD_MspInit+0x9c>)
 8002874:	f7ff fa62 	bl	8001d3c <HAL_GPIO_Init>
}
 8002878:	e7c2      	b.n	8002800 <HAL_SD_MspInit+0x18>
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00

08002888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002888:	b500      	push	{lr}
 800288a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	2300      	movs	r3, #0
 800288e:	9303      	str	r3, [sp, #12]
 8002890:	9304      	str	r3, [sp, #16]
 8002892:	9305      	str	r3, [sp, #20]
 8002894:	9306      	str	r3, [sp, #24]
 8002896:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8002898:	6802      	ldr	r2, [r0, #0]
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_SPI_MspInit+0x68>)
 800289c:	429a      	cmp	r2, r3
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_MspInit+0x1e>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028a0:	b009      	add	sp, #36	@ 0x24
 80028a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028a6:	2100      	movs	r1, #0
 80028a8:	9101      	str	r1, [sp, #4]
 80028aa:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80028ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80028b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80028bc:	9201      	str	r2, [sp, #4]
 80028be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c0:	9102      	str	r1, [sp, #8]
 80028c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	9302      	str	r3, [sp, #8]
 80028d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80028d4:	23e0      	movs	r3, #224	@ 0xe0
 80028d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028e0:	2305      	movs	r3, #5
 80028e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	a903      	add	r1, sp, #12
 80028e6:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <HAL_SPI_MspInit+0x6c>)
 80028e8:	f7ff fa28 	bl	8001d3c <HAL_GPIO_Init>
}
 80028ec:	e7d8      	b.n	80028a0 <HAL_SPI_MspInit+0x18>
 80028ee:	bf00      	nop
 80028f0:	40013000 	.word	0x40013000
 80028f4:	40020000 	.word	0x40020000

080028f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f8:	b500      	push	{lr}
 80028fa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	2300      	movs	r3, #0
 80028fe:	9303      	str	r3, [sp, #12]
 8002900:	9304      	str	r3, [sp, #16]
 8002902:	9305      	str	r3, [sp, #20]
 8002904:	9306      	str	r3, [sp, #24]
 8002906:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8002908:	6802      	ldr	r2, [r0, #0]
 800290a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800290e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8002912:	429a      	cmp	r2, r3
 8002914:	d002      	beq.n	800291c <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002916:	b009      	add	sp, #36	@ 0x24
 8002918:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800291c:	2100      	movs	r1, #0
 800291e:	9101      	str	r1, [sp, #4]
 8002920:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8002924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002926:	f042 0210 	orr.w	r2, r2, #16
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
 800292c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800292e:	f002 0210 	and.w	r2, r2, #16
 8002932:	9201      	str	r2, [sp, #4]
 8002934:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	9102      	str	r1, [sp, #8]
 8002938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TXD_Pin|RXD_Pin;
 800294a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800294e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002958:	2307      	movs	r3, #7
 800295a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	a903      	add	r1, sp, #12
 800295e:	4802      	ldr	r0, [pc, #8]	@ (8002968 <HAL_UART_MspInit+0x70>)
 8002960:	f7ff f9ec 	bl	8001d3c <HAL_GPIO_Init>
}
 8002964:	e7d7      	b.n	8002916 <HAL_UART_MspInit+0x1e>
 8002966:	bf00      	nop
 8002968:	40020000 	.word	0x40020000

0800296c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800296c:	2800      	cmp	r0, #0
 800296e:	f000 81e0 	beq.w	8002d32 <HAL_RCC_OscConfig+0x3c6>
{
 8002972:	b570      	push	{r4, r5, r6, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002978:	6803      	ldr	r3, [r0, #0]
 800297a:	f013 0f01 	tst.w	r3, #1
 800297e:	d03b      	beq.n	80029f8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002980:	4b9f      	ldr	r3, [pc, #636]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d02c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298c:	4b9c      	ldr	r3, [pc, #624]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002994:	2b08      	cmp	r3, #8
 8002996:	d021      	beq.n	80029dc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002998:	6863      	ldr	r3, [r4, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299e:	d04f      	beq.n	8002a40 <HAL_RCC_OscConfig+0xd4>
 80029a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a4:	d052      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe0>
 80029a6:	4b96      	ldr	r3, [pc, #600]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d050      	beq.n	8002a60 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7ff f939 	bl	8001c34 <HAL_GetTick>
 80029c2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80029cc:	d114      	bne.n	80029f8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ce:	f7ff f931 	bl	8001c34 <HAL_GetTick>
 80029d2:	1b40      	subs	r0, r0, r5
 80029d4:	2864      	cmp	r0, #100	@ 0x64
 80029d6:	d9f5      	bls.n	80029c4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80029d8:	2003      	movs	r0, #3
 80029da:	e1b1      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029dc:	4b88      	ldr	r3, [pc, #544]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80029e4:	d0d8      	beq.n	8002998 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e6:	4b86      	ldr	r3, [pc, #536]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80029ee:	d003      	beq.n	80029f8 <HAL_RCC_OscConfig+0x8c>
 80029f0:	6863      	ldr	r3, [r4, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 819f 	beq.w	8002d36 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	f013 0f02 	tst.w	r3, #2
 80029fe:	d054      	beq.n	8002aaa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a00:	4b7f      	ldr	r3, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f013 0f0c 	tst.w	r3, #12
 8002a08:	d03e      	beq.n	8002a88 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d033      	beq.n	8002a7e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a16:	68e3      	ldr	r3, [r4, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d068      	beq.n	8002aee <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1c:	4b79      	ldr	r3, [pc, #484]	@ (8002c04 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7ff f907 	bl	8001c34 <HAL_GetTick>
 8002a26:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b75      	ldr	r3, [pc, #468]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f013 0f02 	tst.w	r3, #2
 8002a30:	d154      	bne.n	8002adc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7ff f8ff 	bl	8001c34 <HAL_GetTick>
 8002a36:	1b40      	subs	r0, r0, r5
 8002a38:	2802      	cmp	r0, #2
 8002a3a:	d9f5      	bls.n	8002a28 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e17f      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a40:	4a6f      	ldr	r2, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e7b5      	b.n	80029b8 <HAL_RCC_OscConfig+0x4c>
 8002a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e7ab      	b.n	80029b8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002a60:	f7ff f8e8 	bl	8001c34 <HAL_GetTick>
 8002a64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002a6e:	d0c3      	beq.n	80029f8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff f8e0 	bl	8001c34 <HAL_GetTick>
 8002a74:	1b40      	subs	r0, r0, r5
 8002a76:	2864      	cmp	r0, #100	@ 0x64
 8002a78:	d9f5      	bls.n	8002a66 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002a7a:	2003      	movs	r0, #3
 8002a7c:	e160      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b60      	ldr	r3, [pc, #384]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002a86:	d1c6      	bne.n	8002a16 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a88:	4b5d      	ldr	r3, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f013 0f02 	tst.w	r3, #2
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_OscConfig+0x12e>
 8002a92:	68e3      	ldr	r3, [r4, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 8150 	bne.w	8002d3a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4a59      	ldr	r2, [pc, #356]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002a9c:	6813      	ldr	r3, [r2, #0]
 8002a9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002aa2:	6921      	ldr	r1, [r4, #16]
 8002aa4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002aa8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	f013 0f08 	tst.w	r3, #8
 8002ab0:	d042      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ab2:	6963      	ldr	r3, [r4, #20]
 8002ab4:	b36b      	cbz	r3, 8002b12 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab6:	4b53      	ldr	r3, [pc, #332]	@ (8002c04 <HAL_RCC_OscConfig+0x298>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7ff f8b9 	bl	8001c34 <HAL_GetTick>
 8002ac2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac8:	f013 0f02 	tst.w	r3, #2
 8002acc:	d134      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ace:	f7ff f8b1 	bl	8001c34 <HAL_GetTick>
 8002ad2:	1b40      	subs	r0, r0, r5
 8002ad4:	2802      	cmp	r0, #2
 8002ad6:	d9f5      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002ad8:	2003      	movs	r0, #3
 8002ada:	e131      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4a48      	ldr	r2, [pc, #288]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002ae4:	6921      	ldr	r1, [r4, #16]
 8002ae6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e7dd      	b.n	8002aaa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002aee:	4b45      	ldr	r3, [pc, #276]	@ (8002c04 <HAL_RCC_OscConfig+0x298>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002af4:	f7ff f89e 	bl	8001c34 <HAL_GetTick>
 8002af8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f013 0f02 	tst.w	r3, #2
 8002b02:	d0d2      	beq.n	8002aaa <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7ff f896 	bl	8001c34 <HAL_GetTick>
 8002b08:	1b40      	subs	r0, r0, r5
 8002b0a:	2802      	cmp	r0, #2
 8002b0c:	d9f5      	bls.n	8002afa <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002b0e:	2003      	movs	r0, #3
 8002b10:	e116      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b12:	4b3c      	ldr	r3, [pc, #240]	@ (8002c04 <HAL_RCC_OscConfig+0x298>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f88b 	bl	8001c34 <HAL_GetTick>
 8002b1e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	4b37      	ldr	r3, [pc, #220]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b24:	f013 0f02 	tst.w	r3, #2
 8002b28:	d006      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2a:	f7ff f883 	bl	8001c34 <HAL_GetTick>
 8002b2e:	1b40      	subs	r0, r0, r5
 8002b30:	2802      	cmp	r0, #2
 8002b32:	d9f5      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002b34:	2003      	movs	r0, #3
 8002b36:	e103      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	f013 0f04 	tst.w	r3, #4
 8002b3e:	d077      	beq.n	8002c30 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b40:	4b2f      	ldr	r3, [pc, #188]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002b48:	d133      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b62:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <HAL_RCC_OscConfig+0x29c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002b6c:	d023      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6e:	68a3      	ldr	r3, [r4, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d034      	beq.n	8002bde <HAL_RCC_OscConfig+0x272>
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d038      	beq.n	8002bea <HAL_RCC_OscConfig+0x27e>
 8002b78:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002b7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	671a      	str	r2, [r3, #112]	@ 0x70
 8002b82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b84:	f022 0204 	bic.w	r2, r2, #4
 8002b88:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8a:	68a3      	ldr	r3, [r4, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d03d      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7ff f850 	bl	8001c34 <HAL_GetTick>
 8002b94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	f013 0f02 	tst.w	r3, #2
 8002b9e:	d146      	bne.n	8002c2e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7ff f848 	bl	8001c34 <HAL_GetTick>
 8002ba4:	1b80      	subs	r0, r0, r6
 8002ba6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002baa:	4298      	cmp	r0, r3
 8002bac:	d9f3      	bls.n	8002b96 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002bae:	2003      	movs	r0, #3
 8002bb0:	e0c6      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	e7d6      	b.n	8002b64 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <HAL_RCC_OscConfig+0x29c>)
 8002bb8:	6813      	ldr	r3, [r2, #0]
 8002bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002bc0:	f7ff f838 	bl	8001c34 <HAL_GetTick>
 8002bc4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <HAL_RCC_OscConfig+0x29c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002bce:	d1ce      	bne.n	8002b6e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7ff f830 	bl	8001c34 <HAL_GetTick>
 8002bd4:	1b80      	subs	r0, r0, r6
 8002bd6:	2802      	cmp	r0, #2
 8002bd8:	d9f5      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002bda:	2003      	movs	r0, #3
 8002bdc:	e0b0      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bde:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002be0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be8:	e7cf      	b.n	8002b8a <HAL_RCC_OscConfig+0x21e>
 8002bea:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_RCC_OscConfig+0x294>)
 8002bec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002bee:	f042 0204 	orr.w	r2, r2, #4
 8002bf2:	671a      	str	r2, [r3, #112]	@ 0x70
 8002bf4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	671a      	str	r2, [r3, #112]	@ 0x70
 8002bfc:	e7c5      	b.n	8002b8a <HAL_RCC_OscConfig+0x21e>
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	42470000 	.word	0x42470000
 8002c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7ff f812 	bl	8001c34 <HAL_GetTick>
 8002c10:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c12:	4b52      	ldr	r3, [pc, #328]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f013 0f02 	tst.w	r3, #2
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7ff f80a 	bl	8001c34 <HAL_GetTick>
 8002c20:	1b80      	subs	r0, r0, r6
 8002c22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c26:	4298      	cmp	r0, r3
 8002c28:	d9f3      	bls.n	8002c12 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	e088      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c2e:	b9ed      	cbnz	r5, 8002c6c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c30:	69a3      	ldr	r3, [r4, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8083 	beq.w	8002d3e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c38:	4a48      	ldr	r2, [pc, #288]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	f002 020c 	and.w	r2, r2, #12
 8002c40:	2a08      	cmp	r2, #8
 8002c42:	d051      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d017      	beq.n	8002c78 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c48:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <HAL_RCC_OscConfig+0x3f4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fff1 	bl	8001c34 <HAL_GetTick>
 8002c52:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c54:	4b41      	ldr	r3, [pc, #260]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002c5c:	d042      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe ffe9 	bl	8001c34 <HAL_GetTick>
 8002c62:	1b00      	subs	r0, r0, r4
 8002c64:	2802      	cmp	r0, #2
 8002c66:	d9f5      	bls.n	8002c54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
 8002c6a:	e069      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002c6e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c76:	e7db      	b.n	8002c30 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002c78:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <HAL_RCC_OscConfig+0x3f4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002c7e:	f7fe ffd9 	bl	8001c34 <HAL_GetTick>
 8002c82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c84:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002c8c:	d006      	beq.n	8002c9c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe ffd1 	bl	8001c34 <HAL_GetTick>
 8002c92:	1b40      	subs	r0, r0, r5
 8002c94:	2802      	cmp	r0, #2
 8002c96:	d9f5      	bls.n	8002c84 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002c98:	2003      	movs	r0, #3
 8002c9a:	e051      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9c:	69e3      	ldr	r3, [r4, #28]
 8002c9e:	6a22      	ldr	r2, [r4, #32]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ca4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ca8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002caa:	0852      	lsrs	r2, r2, #1
 8002cac:	3a01      	subs	r2, #1
 8002cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002cb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cb8:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002cba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b28      	ldr	r3, [pc, #160]	@ (8002d60 <HAL_RCC_OscConfig+0x3f4>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002cc2:	f7fe ffb7 	bl	8001c34 <HAL_GetTick>
 8002cc6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc8:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe ffaf 	bl	8001c34 <HAL_GetTick>
 8002cd6:	1b00      	subs	r0, r0, r4
 8002cd8:	2802      	cmp	r0, #2
 8002cda:	d9f5      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002cdc:	2003      	movs	r0, #3
 8002cde:	e02f      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	e02d      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e02b      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d02b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCC_OscConfig+0x3f0>)
 8002cee:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002cf4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	4291      	cmp	r1, r2
 8002cf8:	d126      	bne.n	8002d48 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cfe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d00:	428a      	cmp	r2, r1
 8002d02:	d123      	bne.n	8002d4c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d06:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002d10:	d11e      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d12:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002d16:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002d18:	0852      	lsrs	r2, r2, #1
 8002d1a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002d20:	d118      	bne.n	8002d54 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d22:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002d26:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d28:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002d2c:	d114      	bne.n	8002d58 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002d2e:	2000      	movs	r0, #0
 8002d30:	e006      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002d32:	2001      	movs	r0, #1
}
 8002d34:	4770      	bx	lr
        return HAL_ERROR;
 8002d36:	2001      	movs	r0, #1
 8002d38:	e002      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002d3e:	2000      	movs	r0, #0
}
 8002d40:	b002      	add	sp, #8
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002d44:	2001      	movs	r0, #1
 8002d46:	e7fb      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002d48:	2001      	movs	r0, #1
 8002d4a:	e7f9      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	e7f7      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
 8002d50:	2001      	movs	r0, #1
 8002d52:	e7f5      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
 8002d54:	2001      	movs	r0, #1
 8002d56:	e7f3      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
 8002d58:	2001      	movs	r0, #1
 8002d5a:	e7f1      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d4>
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470000 	.word	0x42470000

08002d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d66:	4b26      	ldr	r3, [pc, #152]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d041      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x92>
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d141      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d76:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002d84:	d012      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d8e:	481d      	ldr	r0, [pc, #116]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d90:	2300      	movs	r3, #0
 8002d92:	fba1 0100 	umull	r0, r1, r1, r0
 8002d96:	f7fd ff57 	bl	8000c48 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d9a:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002da2:	3301      	adds	r3, #1
 8002da4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002da6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002daa:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dac:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dae:	6858      	ldr	r0, [r3, #4]
 8002db0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002db4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002db8:	ebbc 0c00 	subs.w	ip, ip, r0
 8002dbc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002dc0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002dc4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002dc8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002dcc:	ebb1 010c 	subs.w	r1, r1, ip
 8002dd0:	eb63 030e 	sbc.w	r3, r3, lr
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dda:	00c9      	lsls	r1, r1, #3
 8002ddc:	eb11 0c00 	adds.w	ip, r1, r0
 8002de0:	f143 0300 	adc.w	r3, r3, #0
 8002de4:	0299      	lsls	r1, r3, #10
 8002de6:	2300      	movs	r3, #0
 8002de8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002dec:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002df0:	f7fd ff2a 	bl	8000c48 <__aeabi_uldivmod>
 8002df4:	e7d1      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002df6:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002df8:	e7d7      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfa:	4803      	ldr	r0, [pc, #12]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002dfc:	e7d5      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x46>
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	017d7840 	.word	0x017d7840
 8002e08:	00f42400 	.word	0x00f42400

08002e0c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	f000 809b 	beq.w	8002f48 <HAL_RCC_ClockConfig+0x13c>
{
 8002e12:	b570      	push	{r4, r5, r6, lr}
 8002e14:	460d      	mov	r5, r1
 8002e16:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b4f      	ldr	r3, [pc, #316]	@ (8002f58 <HAL_RCC_ClockConfig+0x14c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	428b      	cmp	r3, r1
 8002e22:	d208      	bcs.n	8002e36 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e24:	b2cb      	uxtb	r3, r1
 8002e26:	4a4c      	ldr	r2, [pc, #304]	@ (8002f58 <HAL_RCC_ClockConfig+0x14c>)
 8002e28:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	428b      	cmp	r3, r1
 8002e32:	f040 808b 	bne.w	8002f4c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	f013 0f02 	tst.w	r3, #2
 8002e3c:	d017      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3e:	f013 0f04 	tst.w	r3, #4
 8002e42:	d004      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e44:	4a45      	ldr	r2, [pc, #276]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002e46:	6893      	ldr	r3, [r2, #8]
 8002e48:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e4c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f013 0f08 	tst.w	r3, #8
 8002e54:	d004      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e56:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002e58:	6893      	ldr	r3, [r2, #8]
 8002e5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e5e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4a3e      	ldr	r2, [pc, #248]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002e62:	6893      	ldr	r3, [r2, #8]
 8002e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e68:	68a1      	ldr	r1, [r4, #8]
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	f013 0f01 	tst.w	r3, #1
 8002e74:	d032      	beq.n	8002edc <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	6863      	ldr	r3, [r4, #4]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d021      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7c:	1e9a      	subs	r2, r3, #2
 8002e7e:	2a01      	cmp	r2, #1
 8002e80:	d925      	bls.n	8002ece <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	4a36      	ldr	r2, [pc, #216]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	f012 0f02 	tst.w	r2, #2
 8002e8a:	d061      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8c:	4933      	ldr	r1, [pc, #204]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002e8e:	688a      	ldr	r2, [r1, #8]
 8002e90:	f022 0203 	bic.w	r2, r2, #3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002e98:	f7fe fecc 	bl	8001c34 <HAL_GetTick>
 8002e9c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	6862      	ldr	r2, [r4, #4]
 8002ea8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eae:	f7fe fec1 	bl	8001c34 <HAL_GetTick>
 8002eb2:	1b80      	subs	r0, r0, r6
 8002eb4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002eb8:	4298      	cmp	r0, r3
 8002eba:	d9f0      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	e042      	b.n	8002f46 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec0:	4a26      	ldr	r2, [pc, #152]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002ec8:	d1e0      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002eca:	2001      	movs	r0, #1
 8002ecc:	e03b      	b.n	8002f46 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	4a23      	ldr	r2, [pc, #140]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002ed6:	d1d9      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
 8002eda:	e034      	b.n	8002f46 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002edc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <HAL_RCC_ClockConfig+0x14c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	42ab      	cmp	r3, r5
 8002ee6:	d907      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee8:	b2ea      	uxtb	r2, r5
 8002eea:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_RCC_ClockConfig+0x14c>)
 8002eec:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	42ab      	cmp	r3, r5
 8002ef6:	d12d      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	f013 0f04 	tst.w	r3, #4
 8002efe:	d006      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4a16      	ldr	r2, [pc, #88]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002f02:	6893      	ldr	r3, [r2, #8]
 8002f04:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002f08:	68e1      	ldr	r1, [r4, #12]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	f013 0f08 	tst.w	r3, #8
 8002f14:	d007      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f16:	4a11      	ldr	r2, [pc, #68]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002f18:	6893      	ldr	r3, [r2, #8]
 8002f1a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002f1e:	6921      	ldr	r1, [r4, #16]
 8002f20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f24:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f26:	f7ff ff1d 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <HAL_RCC_ClockConfig+0x150>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f32:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <HAL_RCC_ClockConfig+0x154>)
 8002f34:	5cd3      	ldrb	r3, [r2, r3]
 8002f36:	40d8      	lsrs	r0, r3
 8002f38:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_RCC_ClockConfig+0x158>)
 8002f3a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <HAL_RCC_ClockConfig+0x15c>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	f7fe fe2c 	bl	8001b9c <HAL_InitTick>
  return HAL_OK;
 8002f44:	2000      	movs	r0, #0
}
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	4770      	bx	lr
      return HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7fa      	b.n	8002f46 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002f50:	2001      	movs	r0, #1
 8002f52:	e7f8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e7f6      	b.n	8002f46 <HAL_RCC_ClockConfig+0x13a>
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08009670 	.word	0x08009670
 8002f64:	20000008 	.word	0x20000008
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002f6c:	4b01      	ldr	r3, [pc, #4]	@ (8002f74 <HAL_RCC_GetHCLKFreq+0x8>)
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000008 	.word	0x20000008

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f7a:	f7ff fff7 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f7e:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002f86:	4a03      	ldr	r2, [pc, #12]	@ (8002f94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
}
 8002f8a:	40d8      	lsrs	r0, r3
 8002f8c:	bd08      	pop	{r3, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08009668 	.word	0x08009668

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f9a:	f7ff ffe7 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f9e:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002fa6:	4a03      	ldr	r2, [pc, #12]	@ (8002fb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002faa:	40d8      	lsrs	r0, r3
 8002fac:	bd08      	pop	{r3, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	08009668 	.word	0x08009668

08002fb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	f001 faad 	bl	8004522 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fc8:	4605      	mov	r5, r0
 8002fca:	b110      	cbz	r0, 8002fd2 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8002fcc:	4628      	mov	r0, r5
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	f001 fd6e 	bl	8004ab4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fd8:	b938      	cbnz	r0, 8002fea <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002fde:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d00b      	beq.n	8002ffc <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002fe4:	462e      	mov	r6, r5
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	e014      	b.n	8003014 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002fea:	2300      	movs	r3, #0
 8002fec:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002fee:	6820      	ldr	r0, [r4, #0]
 8002ff0:	f001 fa97 	bl	8004522 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d0f2      	beq.n	8002fde <SD_PowerON+0x26>
      return errorstate;
 8002ff8:	4605      	mov	r5, r0
 8002ffa:	e7e7      	b.n	8002fcc <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	6820      	ldr	r0, [r4, #0]
 8003000:	f001 fbf6 	bl	80047f0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003004:	2800      	cmp	r0, #0
 8003006:	d0ed      	beq.n	8002fe4 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003008:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800300c:	e7de      	b.n	8002fcc <SD_PowerON+0x14>
    count++;
 800300e:	9b01      	ldr	r3, [sp, #4]
 8003010:	3301      	adds	r3, #1
 8003012:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003014:	9a01      	ldr	r2, [sp, #4]
 8003016:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800301a:	429a      	cmp	r2, r3
 800301c:	d813      	bhi.n	8003046 <SD_PowerON+0x8e>
 800301e:	b996      	cbnz	r6, 8003046 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003020:	2100      	movs	r1, #0
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	f001 fbe4 	bl	80047f0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003028:	b9e0      	cbnz	r0, 8003064 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800302a:	4912      	ldr	r1, [pc, #72]	@ (8003074 <SD_PowerON+0xbc>)
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	f001 fc8d 	bl	800494c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003032:	4606      	mov	r6, r0
 8003034:	b9c0      	cbnz	r0, 8003068 <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003036:	2100      	movs	r1, #0
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f001 fa5d 	bl	80044f8 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800303e:	0fc3      	lsrs	r3, r0, #31
 8003040:	d0e5      	beq.n	800300e <SD_PowerON+0x56>
 8003042:	461e      	mov	r6, r3
 8003044:	e7e3      	b.n	800300e <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003046:	9a01      	ldr	r2, [sp, #4]
 8003048:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800304c:	429a      	cmp	r2, r3
 800304e:	d80e      	bhi.n	800306e <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003050:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 8003054:	d002      	beq.n	800305c <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003056:	2301      	movs	r3, #1
 8003058:	6463      	str	r3, [r4, #68]	@ 0x44
 800305a:	e7b7      	b.n	8002fcc <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 800305c:	2200      	movs	r2, #0
 800305e:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 8003060:	461d      	mov	r5, r3
 8003062:	e7b3      	b.n	8002fcc <SD_PowerON+0x14>
      return errorstate;
 8003064:	4605      	mov	r5, r0
 8003066:	e7b1      	b.n	8002fcc <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003068:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800306c:	e7ae      	b.n	8002fcc <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800306e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8003072:	e7ab      	b.n	8002fcc <SD_PowerON+0x14>
 8003074:	c1100000 	.word	0xc1100000

08003078 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003078:	b570      	push	{r4, r5, r6, lr}
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800307a:	b181      	cbz	r1, 800309e <SD_SendStatus+0x26>
 800307c:	4604      	mov	r4, r0
 800307e:	460e      	mov	r6, r1
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003080:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003082:	0409      	lsls	r1, r1, #16
 8003084:	6800      	ldr	r0, [r0, #0]
 8003086:	f001 fbcb 	bl	8004820 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800308a:	4605      	mov	r5, r0
 800308c:	b108      	cbz	r0, 8003092 <SD_SendStatus+0x1a>

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);

  return HAL_SD_ERROR_NONE;
}
 800308e:	4628      	mov	r0, r5
 8003090:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003092:	2100      	movs	r1, #0
 8003094:	6820      	ldr	r0, [r4, #0]
 8003096:	f001 fa2f 	bl	80044f8 <SDIO_GetResponse>
 800309a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800309c:	e7f7      	b.n	800308e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800309e:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 80030a2:	e7f4      	b.n	800308e <SD_SendStatus+0x16>

080030a4 <HAL_SD_ReadBlocks>:
{
 80030a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a8:	b087      	sub	sp, #28
 80030aa:	4605      	mov	r5, r0
 80030ac:	460c      	mov	r4, r1
 80030ae:	4616      	mov	r6, r2
 80030b0:	469b      	mov	fp, r3
 80030b2:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80030b6:	f7fe fdbd 	bl	8001c34 <HAL_GetTick>
  if(NULL == pData)
 80030ba:	2c00      	cmp	r4, #0
 80030bc:	d036      	beq.n	800312c <HAL_SD_ReadBlocks+0x88>
 80030be:	4681      	mov	r9, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80030c0:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 80030c4:	b2ff      	uxtb	r7, r7
 80030c6:	2f01      	cmp	r7, #1
 80030c8:	f040 8109 	bne.w	80032de <HAL_SD_ReadBlocks+0x23a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030d0:	eb06 030b 	add.w	r3, r6, fp
 80030d4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d82e      	bhi.n	8003138 <HAL_SD_ReadBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 80030da:	2303      	movs	r3, #3
 80030dc:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030e6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d000      	beq.n	80030ee <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 80030ec:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80030f4:	ea4f 234b 	mov.w	r3, fp, lsl #9
 80030f8:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80030fa:	2390      	movs	r3, #144	@ 0x90
 80030fc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80030fe:	2302      	movs	r3, #2
 8003100:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003102:	2300      	movs	r3, #0
 8003104:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003106:	2301      	movs	r3, #1
 8003108:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800310a:	4669      	mov	r1, sp
 800310c:	6828      	ldr	r0, [r5, #0]
 800310e:	f001 f9f6 	bl	80044fe <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003112:	f1bb 0f01 	cmp.w	fp, #1
 8003116:	d914      	bls.n	8003142 <HAL_SD_ReadBlocks+0x9e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003118:	2302      	movs	r3, #2
 800311a:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800311c:	4631      	mov	r1, r6
 800311e:	6828      	ldr	r0, [r5, #0]
 8003120:	f001 faec 	bl	80046fc <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003124:	b9a0      	cbnz	r0, 8003150 <HAL_SD_ReadBlocks+0xac>
    dataremaining = config.DataLength;
 8003126:	f8dd 8004 	ldr.w	r8, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800312a:	e038      	b.n	800319e <HAL_SD_ReadBlocks+0xfa>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800312c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800312e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003132:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8003134:	2701      	movs	r7, #1
 8003136:	e0d7      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003138:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800313a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800313e:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 8003140:	e0d2      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003142:	2301      	movs	r3, #1
 8003144:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003146:	4631      	mov	r1, r6
 8003148:	6828      	ldr	r0, [r5, #0]
 800314a:	f001 fabf 	bl	80046cc <SDMMC_CmdReadSingleBlock>
 800314e:	e7e9      	b.n	8003124 <HAL_SD_ReadBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	4a67      	ldr	r2, [pc, #412]	@ (80032f0 <HAL_SD_ReadBlocks+0x24c>)
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003156:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003158:	4303      	orrs	r3, r0
 800315a:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800315c:	2301      	movs	r3, #1
 800315e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003162:	2300      	movs	r3, #0
 8003164:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8003166:	e0bf      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
          data = SDIO_ReadFIFO(hsd->Instance);
 8003168:	6828      	ldr	r0, [r5, #0]
 800316a:	f001 f9a2 	bl	80044b2 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800316e:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003170:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003174:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003176:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800317a:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800317c:	0e00      	lsrs	r0, r0, #24
 800317e:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8003180:	3404      	adds	r4, #4
          dataremaining--;
 8003182:	f1a8 0804 	sub.w	r8, r8, #4
        for(count = 0U; count < 8U; count++)
 8003186:	3601      	adds	r6, #1
 8003188:	2e07      	cmp	r6, #7
 800318a:	d9ed      	bls.n	8003168 <HAL_SD_ReadBlocks+0xc4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800318c:	f7fe fd52 	bl	8001c34 <HAL_GetTick>
 8003190:	eba0 0009 	sub.w	r0, r0, r9
 8003194:	4550      	cmp	r0, sl
 8003196:	d210      	bcs.n	80031ba <HAL_SD_ReadBlocks+0x116>
 8003198:	f1ba 0f00 	cmp.w	sl, #0
 800319c:	d00d      	beq.n	80031ba <HAL_SD_ReadBlocks+0x116>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800319e:	6828      	ldr	r0, [r5, #0]
 80031a0:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80031a2:	f240 332a 	movw	r3, #810	@ 0x32a
 80031a6:	401e      	ands	r6, r3
 80031a8:	d115      	bne.n	80031d6 <HAL_SD_ReadBlocks+0x132>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80031aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80031ac:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80031b0:	d0ec      	beq.n	800318c <HAL_SD_ReadBlocks+0xe8>
 80031b2:	f1b8 0f00 	cmp.w	r8, #0
 80031b6:	d0e9      	beq.n	800318c <HAL_SD_ReadBlocks+0xe8>
 80031b8:	e7e6      	b.n	8003188 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031ba:	682b      	ldr	r3, [r5, #0]
 80031bc:	4a4c      	ldr	r2, [pc, #304]	@ (80032f0 <HAL_SD_ReadBlocks+0x24c>)
 80031be:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031c0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80031c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031c6:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 80031d2:	2703      	movs	r7, #3
 80031d4:	e088      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80031d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80031d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80031dc:	d005      	beq.n	80031ea <HAL_SD_ReadBlocks+0x146>
 80031de:	f1bb 0f01 	cmp.w	fp, #1
 80031e2:	d902      	bls.n	80031ea <HAL_SD_ReadBlocks+0x146>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80031e4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d13c      	bne.n	8003264 <HAL_SD_ReadBlocks+0x1c0>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80031ea:	682b      	ldr	r3, [r5, #0]
 80031ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ee:	f012 0f08 	tst.w	r2, #8
 80031f2:	d148      	bne.n	8003286 <HAL_SD_ReadBlocks+0x1e2>
 80031f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f6:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80031fa:	d144      	bne.n	8003286 <HAL_SD_ReadBlocks+0x1e2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80031fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031fe:	f012 0f02 	tst.w	r2, #2
 8003202:	d14c      	bne.n	800329e <HAL_SD_ReadBlocks+0x1fa>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003206:	f012 0f20 	tst.w	r2, #32
 800320a:	d154      	bne.n	80032b6 <HAL_SD_ReadBlocks+0x212>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800320c:	6828      	ldr	r0, [r5, #0]
 800320e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003210:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8003214:	d05b      	beq.n	80032ce <HAL_SD_ReadBlocks+0x22a>
 8003216:	f1b8 0f00 	cmp.w	r8, #0
 800321a:	d058      	beq.n	80032ce <HAL_SD_ReadBlocks+0x22a>
      data = SDIO_ReadFIFO(hsd->Instance);
 800321c:	f001 f949 	bl	80044b2 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003220:	7020      	strb	r0, [r4, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003222:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003226:	7063      	strb	r3, [r4, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003228:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800322c:	70a3      	strb	r3, [r4, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800322e:	0e00      	lsrs	r0, r0, #24
 8003230:	70e0      	strb	r0, [r4, #3]
      tempbuff++;
 8003232:	3404      	adds	r4, #4
      dataremaining--;
 8003234:	f1a8 0804 	sub.w	r8, r8, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003238:	f7fe fcfc 	bl	8001c34 <HAL_GetTick>
 800323c:	eba0 0009 	sub.w	r0, r0, r9
 8003240:	4550      	cmp	r0, sl
 8003242:	d202      	bcs.n	800324a <HAL_SD_ReadBlocks+0x1a6>
 8003244:	f1ba 0f00 	cmp.w	sl, #0
 8003248:	d1e0      	bne.n	800320c <HAL_SD_ReadBlocks+0x168>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800324a:	682b      	ldr	r3, [r5, #0]
 800324c:	4a28      	ldr	r2, [pc, #160]	@ (80032f0 <HAL_SD_ReadBlocks+0x24c>)
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003250:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003252:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003256:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003258:	2301      	movs	r3, #1
 800325a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800325e:	2300      	movs	r3, #0
 8003260:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_ERROR;
 8003262:	e041      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003264:	f001 fa92 	bl	800478c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003268:	4603      	mov	r3, r0
 800326a:	2800      	cmp	r0, #0
 800326c:	d0bd      	beq.n	80031ea <HAL_SD_ReadBlocks+0x146>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800326e:	682a      	ldr	r2, [r5, #0]
 8003270:	491f      	ldr	r1, [pc, #124]	@ (80032f0 <HAL_SD_ReadBlocks+0x24c>)
 8003272:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003274:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003276:	4313      	orrs	r3, r2
 8003278:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800327a:	2301      	movs	r3, #1
 800327c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003280:	2300      	movs	r3, #0
 8003282:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 8003284:	e030      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003286:	4a1a      	ldr	r2, [pc, #104]	@ (80032f0 <HAL_SD_ReadBlocks+0x24c>)
 8003288:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800328a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003292:	2301      	movs	r3, #1
 8003294:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003298:	2300      	movs	r3, #0
 800329a:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800329c:	e024      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800329e:	4a14      	ldr	r2, [pc, #80]	@ (80032f0 <HAL_SD_ReadBlocks+0x24c>)
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80032a2:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80032b4:	e018      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032b6:	4a0e      	ldr	r2, [pc, #56]	@ (80032f0 <HAL_SD_ReadBlocks+0x24c>)
 80032b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032ba:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80032bc:	f043 0320 	orr.w	r3, r3, #32
 80032c0:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80032cc:	e00c      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032ce:	f240 533a 	movw	r3, #1338	@ 0x53a
 80032d2:	6383      	str	r3, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 80032da:	2700      	movs	r7, #0
 80032dc:	e004      	b.n	80032e8 <HAL_SD_ReadBlocks+0x244>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80032de:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80032e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032e4:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 80032e6:	2701      	movs	r7, #1
}
 80032e8:	4638      	mov	r0, r7
 80032ea:	b007      	add	sp, #28
 80032ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f0:	004005ff 	.word	0x004005ff

080032f4 <HAL_SD_WriteBlocks>:
{
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	b08b      	sub	sp, #44	@ 0x2c
 80032fa:	4605      	mov	r5, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	4616      	mov	r6, r2
 8003300:	469b      	mov	fp, r3
 8003302:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 8003306:	f7fe fc95 	bl	8001c34 <HAL_GetTick>
  if(NULL == pData)
 800330a:	2c00      	cmp	r4, #0
 800330c:	d037      	beq.n	800337e <HAL_SD_WriteBlocks+0x8a>
 800330e:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8003310:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 8003314:	b2ff      	uxtb	r7, r7
 8003316:	2f01      	cmp	r7, #1
 8003318:	f040 80e6 	bne.w	80034e8 <HAL_SD_WriteBlocks+0x1f4>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800331c:	2300      	movs	r3, #0
 800331e:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003320:	eb06 030b 	add.w	r3, r6, fp
 8003324:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003326:	4293      	cmp	r3, r2
 8003328:	d82f      	bhi.n	800338a <HAL_SD_WriteBlocks+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 800332a:	2303      	movs	r3, #3
 800332c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003336:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003338:	2b01      	cmp	r3, #1
 800333a:	d000      	beq.n	800333e <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 800333c:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003344:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8003348:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800334a:	2390      	movs	r3, #144	@ 0x90
 800334c:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800334e:	2300      	movs	r3, #0
 8003350:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003352:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003354:	2301      	movs	r3, #1
 8003356:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003358:	a904      	add	r1, sp, #16
 800335a:	6828      	ldr	r0, [r5, #0]
 800335c:	f001 f8cf 	bl	80044fe <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003360:	f1bb 0f01 	cmp.w	fp, #1
 8003364:	d916      	bls.n	8003394 <HAL_SD_WriteBlocks+0xa0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003366:	2320      	movs	r3, #32
 8003368:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800336a:	4631      	mov	r1, r6
 800336c:	6828      	ldr	r0, [r5, #0]
 800336e:	f001 f9f5 	bl	800475c <SDMMC_CmdWriteMultiBlock>
 8003372:	9001      	str	r0, [sp, #4]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003374:	9b01      	ldr	r3, [sp, #4]
 8003376:	b9ab      	cbnz	r3, 80033a4 <HAL_SD_WriteBlocks+0xb0>
    dataremaining = config.DataLength;
 8003378:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800337c:	e040      	b.n	8003400 <HAL_SD_WriteBlocks+0x10c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800337e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003380:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003384:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8003386:	2701      	movs	r7, #1
 8003388:	e0b3      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800338a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800338c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003390:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 8003392:	e0ae      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003394:	2310      	movs	r3, #16
 8003396:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003398:	4631      	mov	r1, r6
 800339a:	6828      	ldr	r0, [r5, #0]
 800339c:	f001 f9c6 	bl	800472c <SDMMC_CmdWriteSingleBlock>
 80033a0:	9001      	str	r0, [sp, #4]
 80033a2:	e7e7      	b.n	8003374 <HAL_SD_WriteBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	4a55      	ldr	r2, [pc, #340]	@ (80034fc <HAL_SD_WriteBlocks+0x208>)
 80033a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80033aa:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80033ac:	9a01      	ldr	r2, [sp, #4]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80033bc:	e099      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
          data = (uint32_t)(*tempbuff);
 80033be:	7823      	ldrb	r3, [r4, #0]
 80033c0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 80033c2:	7862      	ldrb	r2, [r4, #1]
 80033c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80033c8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 80033ca:	78a2      	ldrb	r2, [r4, #2]
 80033cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033d0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80033d2:	78e2      	ldrb	r2, [r4, #3]
 80033d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033d8:	9303      	str	r3, [sp, #12]
          tempbuff++;
 80033da:	3404      	adds	r4, #4
          dataremaining--;
 80033dc:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80033e0:	a903      	add	r1, sp, #12
 80033e2:	6828      	ldr	r0, [r5, #0]
 80033e4:	f001 f868 	bl	80044b8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033e8:	3601      	adds	r6, #1
 80033ea:	2e07      	cmp	r6, #7
 80033ec:	d9e7      	bls.n	80033be <HAL_SD_WriteBlocks+0xca>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80033ee:	f7fe fc21 	bl	8001c34 <HAL_GetTick>
 80033f2:	eba0 0008 	sub.w	r0, r0, r8
 80033f6:	4550      	cmp	r0, sl
 80033f8:	d210      	bcs.n	800341c <HAL_SD_WriteBlocks+0x128>
 80033fa:	f1ba 0f00 	cmp.w	sl, #0
 80033fe:	d00d      	beq.n	800341c <HAL_SD_WriteBlocks+0x128>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003400:	6828      	ldr	r0, [r5, #0]
 8003402:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8003404:	f240 331a 	movw	r3, #794	@ 0x31a
 8003408:	401e      	ands	r6, r3
 800340a:	d115      	bne.n	8003438 <HAL_SD_WriteBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800340c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800340e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003412:	d0ec      	beq.n	80033ee <HAL_SD_WriteBlocks+0xfa>
 8003414:	f1b9 0f00 	cmp.w	r9, #0
 8003418:	d0e9      	beq.n	80033ee <HAL_SD_WriteBlocks+0xfa>
 800341a:	e7e6      	b.n	80033ea <HAL_SD_WriteBlocks+0xf6>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	4a37      	ldr	r2, [pc, #220]	@ (80034fc <HAL_SD_WriteBlocks+0x208>)
 8003420:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003422:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003424:	9a01      	ldr	r2, [sp, #4]
 8003426:	4313      	orrs	r3, r2
 8003428:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800342a:	2301      	movs	r3, #1
 800342c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003430:	2300      	movs	r3, #0
 8003432:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003434:	2703      	movs	r7, #3
 8003436:	e05c      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003438:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800343a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800343e:	d005      	beq.n	800344c <HAL_SD_WriteBlocks+0x158>
 8003440:	f1bb 0f01 	cmp.w	fp, #1
 8003444:	d902      	bls.n	800344c <HAL_SD_WriteBlocks+0x158>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003446:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003448:	2b03      	cmp	r3, #3
 800344a:	d11c      	bne.n	8003486 <HAL_SD_WriteBlocks+0x192>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003450:	f012 0f08 	tst.w	r2, #8
 8003454:	d128      	bne.n	80034a8 <HAL_SD_WriteBlocks+0x1b4>
 8003456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003458:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800345c:	d124      	bne.n	80034a8 <HAL_SD_WriteBlocks+0x1b4>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800345e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003460:	f012 0f02 	tst.w	r2, #2
 8003464:	d12c      	bne.n	80034c0 <HAL_SD_WriteBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003468:	f012 0f10 	tst.w	r2, #16
 800346c:	d034      	beq.n	80034d8 <HAL_SD_WriteBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800346e:	4a23      	ldr	r2, [pc, #140]	@ (80034fc <HAL_SD_WriteBlocks+0x208>)
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003472:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003474:	f043 0310 	orr.w	r3, r3, #16
 8003478:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800347a:	2301      	movs	r3, #1
 800347c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003480:	2300      	movs	r3, #0
 8003482:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8003484:	e035      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003486:	f001 f981 	bl	800478c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800348a:	4603      	mov	r3, r0
 800348c:	2800      	cmp	r0, #0
 800348e:	d0dd      	beq.n	800344c <HAL_SD_WriteBlocks+0x158>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003490:	682a      	ldr	r2, [r5, #0]
 8003492:	491a      	ldr	r1, [pc, #104]	@ (80034fc <HAL_SD_WriteBlocks+0x208>)
 8003494:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003496:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003498:	4313      	orrs	r3, r2
 800349a:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800349c:	2301      	movs	r3, #1
 800349e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 80034a6:	e024      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034a8:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <HAL_SD_WriteBlocks+0x208>)
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034ac:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80034ae:	f043 0308 	orr.w	r3, r3, #8
 80034b2:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80034be:	e018      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034c0:	4a0e      	ldr	r2, [pc, #56]	@ (80034fc <HAL_SD_WriteBlocks+0x208>)
 80034c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034c4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80034d6:	e00c      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034d8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034de:	2301      	movs	r3, #1
 80034e0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 80034e4:	2700      	movs	r7, #0
 80034e6:	e004      	b.n	80034f2 <HAL_SD_WriteBlocks+0x1fe>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80034e8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80034ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034ee:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 80034f0:	2701      	movs	r7, #1
}
 80034f2:	4638      	mov	r0, r7
 80034f4:	b00b      	add	sp, #44	@ 0x2c
 80034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fa:	bf00      	nop
 80034fc:	004005ff 	.word	0x004005ff

08003500 <HAL_SD_GetCardCSD>:
{
 8003500:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003502:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8003504:	0f92      	lsrs	r2, r2, #30
 8003506:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003508:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800350a:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800350e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003510:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 8003514:	f002 0203 	and.w	r2, r2, #3
 8003518:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800351a:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 800351e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003520:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8003524:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003526:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 800352a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800352c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800352e:	0d12      	lsrs	r2, r2, #20
 8003530:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003532:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 8003536:	f002 020f 	and.w	r2, r2, #15
 800353a:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800353c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800353e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003542:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003544:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8003546:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800354a:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800354c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800354e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003552:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003554:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8003556:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800355a:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800355c:	2200      	movs	r2, #0
 800355e:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003560:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003562:	2a00      	cmp	r2, #0
 8003564:	f040 8086 	bne.w	8003674 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003568:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800356a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800356e:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8003572:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8003574:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8003578:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800357a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800357c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8003580:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003582:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8003586:	f002 0207 	and.w	r2, r2, #7
 800358a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800358c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800358e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8003592:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003594:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003596:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800359a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800359c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800359e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 80035a2:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80035a4:	690a      	ldr	r2, [r1, #16]
 80035a6:	3201      	adds	r2, #1
 80035a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80035aa:	7e08      	ldrb	r0, [r1, #24]
 80035ac:	f000 0007 	and.w	r0, r0, #7
 80035b0:	3002      	adds	r0, #2
 80035b2:	4082      	lsls	r2, r0
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035b6:	f891 c008 	ldrb.w	ip, [r1, #8]
 80035ba:	f00c 0c0f 	and.w	ip, ip, #15
 80035be:	2001      	movs	r0, #1
 80035c0:	fa00 f00c 	lsl.w	r0, r0, ip
 80035c4:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80035c6:	0a40      	lsrs	r0, r0, #9
 80035c8:	fb00 f202 	mul.w	r2, r0, r2
 80035cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80035ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d2:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80035d6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80035da:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80035de:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80035e2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80035e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035ea:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80035ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035ee:	0fd2      	lsrs	r2, r2, #31
 80035f0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80035f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035f4:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80035f8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80035fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035fc:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8003600:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003602:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003604:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8003608:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800360a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800360c:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8003610:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8003614:	2000      	movs	r0, #0
 8003616:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800361a:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800361e:	f002 0201 	and.w	r2, r2, #1
 8003622:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003626:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003628:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800362c:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003630:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003632:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8003636:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800363a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800363c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003640:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003644:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003646:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800364a:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800364e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003650:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8003654:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003658:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800365a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800365e:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003668:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800366c:	2301      	movs	r3, #1
 800366e:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8003672:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003674:	2a01      	cmp	r2, #1
 8003676:	d111      	bne.n	800369c <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003678:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800367a:	0412      	lsls	r2, r2, #16
 800367c:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8003680:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8003684:	4302      	orrs	r2, r0
 8003686:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003688:	690a      	ldr	r2, [r1, #16]
 800368a:	3201      	adds	r2, #1
 800368c:	0292      	lsls	r2, r2, #10
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003690:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003696:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003698:	661a      	str	r2, [r3, #96]	@ 0x60
 800369a:	e79b      	b.n	80035d4 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800369c:	6802      	ldr	r2, [r0, #0]
 800369e:	4905      	ldr	r1, [pc, #20]	@ (80036b4 <HAL_SD_GetCardCSD+0x1b4>)
 80036a0:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036a2:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80036a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80036a8:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036aa:	2001      	movs	r0, #1
 80036ac:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	004005ff 	.word	0x004005ff

080036b8 <SD_InitCard>:
{
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	b090      	sub	sp, #64	@ 0x40
 80036bc:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80036be:	2301      	movs	r3, #1
 80036c0:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80036c4:	6800      	ldr	r0, [r0, #0]
 80036c6:	f000 ff00 	bl	80044ca <SDIO_GetPowerState>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d06c      	beq.n	80037a8 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036ce:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d145      	bne.n	8003760 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036d4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d15d      	bne.n	8003796 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d01d      	beq.n	800371c <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80036e0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80036e4:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036e6:	0409      	lsls	r1, r1, #16
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	f001 f8f4 	bl	80048d6 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036ee:	4605      	mov	r5, r0
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d15b      	bne.n	80037ac <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036f4:	2100      	movs	r1, #0
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	f000 fefe 	bl	80044f8 <SDIO_GetResponse>
 80036fc:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036fe:	2104      	movs	r1, #4
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	f000 fef9 	bl	80044f8 <SDIO_GetResponse>
 8003706:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003708:	2108      	movs	r1, #8
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	f000 fef4 	bl	80044f8 <SDIO_GetResponse>
 8003710:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003712:	210c      	movs	r1, #12
 8003714:	6820      	ldr	r0, [r4, #0]
 8003716:	f000 feef 	bl	80044f8 <SDIO_GetResponse>
 800371a:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800371c:	2104      	movs	r1, #4
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	f000 feea 	bl	80044f8 <SDIO_GetResponse>
 8003724:	0d00      	lsrs	r0, r0, #20
 8003726:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003728:	a905      	add	r1, sp, #20
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff fee8 	bl	8003500 <HAL_SD_GetCardCSD>
 8003730:	2800      	cmp	r0, #0
 8003732:	d13e      	bne.n	80037b2 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003734:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003736:	0412      	lsls	r2, r2, #16
 8003738:	2300      	movs	r3, #0
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	f001 f840 	bl	80047c0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003740:	4605      	mov	r5, r0
 8003742:	bb98      	cbnz	r0, 80037ac <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003744:	4623      	mov	r3, r4
 8003746:	f853 6b10 	ldr.w	r6, [r3], #16
 800374a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800374e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003752:	3404      	adds	r4, #4
 8003754:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003758:	4630      	mov	r0, r6
 800375a:	f000 fe91 	bl	8004480 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 800375e:	e025      	b.n	80037ac <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	f001 f8a3 	bl	80048ac <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003766:	4605      	mov	r5, r0
 8003768:	bb00      	cbnz	r0, 80037ac <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800376a:	2100      	movs	r1, #0
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	f000 fec3 	bl	80044f8 <SDIO_GetResponse>
 8003772:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003774:	2104      	movs	r1, #4
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	f000 febe 	bl	80044f8 <SDIO_GetResponse>
 800377c:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800377e:	2108      	movs	r1, #8
 8003780:	6820      	ldr	r0, [r4, #0]
 8003782:	f000 feb9 	bl	80044f8 <SDIO_GetResponse>
 8003786:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003788:	210c      	movs	r1, #12
 800378a:	6820      	ldr	r0, [r4, #0]
 800378c:	f000 feb4 	bl	80044f8 <SDIO_GetResponse>
 8003790:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8003794:	e79e      	b.n	80036d4 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003796:	f10d 0112 	add.w	r1, sp, #18
 800379a:	6820      	ldr	r0, [r4, #0]
 800379c:	f001 f940 	bl	8004a20 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80037a0:	4605      	mov	r5, r0
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d099      	beq.n	80036da <SD_InitCard+0x22>
 80037a6:	e001      	b.n	80037ac <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037a8:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 80037ac:	4628      	mov	r0, r5
 80037ae:	b010      	add	sp, #64	@ 0x40
 80037b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037b2:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80037b6:	e7f9      	b.n	80037ac <SD_InitCard+0xf4>

080037b8 <HAL_SD_InitCard>:
{
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80037be:	2300      	movs	r3, #0
 80037c0:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80037c2:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80037c4:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80037c6:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80037c8:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80037ca:	2376      	movs	r3, #118	@ 0x76
 80037cc:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 80037ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80037d0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80037d4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80037d8:	ab04      	add	r3, sp, #16
 80037da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	f000 fe4f 	bl	8004480 <SDIO_Init>
  if(status != HAL_OK)
 80037e2:	b118      	cbz	r0, 80037ec <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80037e4:	2501      	movs	r5, #1
}
 80037e6:	4628      	mov	r0, r5
 80037e8:	b00a      	add	sp, #40	@ 0x28
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 80037ee:	4e1a      	ldr	r6, [pc, #104]	@ (8003858 <HAL_SD_InitCard+0xa0>)
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80037f6:	6820      	ldr	r0, [r4, #0]
 80037f8:	f000 fe63 	bl	80044c2 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80037fc:	2301      	movs	r3, #1
 80037fe:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 8003802:	2002      	movs	r0, #2
 8003804:	f7fe fa1c 	bl	8001c40 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8003808:	4620      	mov	r0, r4
 800380a:	f7ff fbd5 	bl	8002fb8 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 800380e:	b130      	cbz	r0, 800381e <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 8003810:	2501      	movs	r5, #1
 8003812:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003816:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003818:	4303      	orrs	r3, r0
 800381a:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 800381c:	e7e3      	b.n	80037e6 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff ff4a 	bl	80036b8 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003824:	b130      	cbz	r0, 8003834 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8003826:	2501      	movs	r5, #1
 8003828:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800382c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800382e:	4303      	orrs	r3, r0
 8003830:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8003832:	e7d8      	b.n	80037e6 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	f000 ff2f 	bl	800469c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800383e:	2800      	cmp	r0, #0
 8003840:	d0d1      	beq.n	80037e6 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	4905      	ldr	r1, [pc, #20]	@ (800385c <HAL_SD_InitCard+0xa4>)
 8003846:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003848:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800384a:	4303      	orrs	r3, r0
 800384c:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800384e:	2501      	movs	r5, #1
 8003850:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003854:	e7c7      	b.n	80037e6 <HAL_SD_InitCard+0x2e>
 8003856:	bf00      	nop
 8003858:	42258000 	.word	0x42258000
 800385c:	004005ff 	.word	0x004005ff

08003860 <HAL_SD_Init>:
  if(hsd == NULL)
 8003860:	b1a8      	cbz	r0, 800388e <HAL_SD_Init+0x2e>
{
 8003862:	b510      	push	{r4, lr}
 8003864:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003866:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800386a:	b163      	cbz	r3, 8003886 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 800386c:	2303      	movs	r3, #3
 800386e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff ffa0 	bl	80037b8 <HAL_SD_InitCard>
 8003878:	b958      	cbnz	r0, 8003892 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800387a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800387c:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800387e:	2301      	movs	r3, #1
 8003880:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003884:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003886:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003888:	f7fe ffae 	bl	80027e8 <HAL_SD_MspInit>
 800388c:	e7ee      	b.n	800386c <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800388e:	2001      	movs	r0, #1
}
 8003890:	4770      	bx	lr
    return HAL_ERROR;
 8003892:	2001      	movs	r0, #1
 8003894:	e7f6      	b.n	8003884 <HAL_SD_Init+0x24>

08003896 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003896:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003898:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800389a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800389c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800389e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80038a0:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038a2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80038a4:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038a6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80038a8:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80038aa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80038ac:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80038ae:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80038b0:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80038b2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80038b4:	61cb      	str	r3, [r1, #28]
}
 80038b6:	2000      	movs	r0, #0
 80038b8:	4770      	bx	lr

080038ba <HAL_SD_GetCardState>:
{
 80038ba:	b510      	push	{r4, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 80038c4:	a901      	add	r1, sp, #4
 80038c6:	f7ff fbd7 	bl	8003078 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ca:	b110      	cbz	r0, 80038d2 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 80038cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80038ce:	4303      	orrs	r3, r0
 80038d0:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80038d2:	9801      	ldr	r0, [sp, #4]
 80038d4:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80038d8:	b002      	add	sp, #8
 80038da:	bd10      	pop	{r4, pc}

080038dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	4605      	mov	r5, r0
 80038e4:	4688      	mov	r8, r1
 80038e6:	4617      	mov	r7, r2
 80038e8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038ea:	f7fe f9a3 	bl	8001c34 <HAL_GetTick>
 80038ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038f0:	1a1b      	subs	r3, r3, r0
 80038f2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80038f6:	f7fe f99d 	bl	8001c34 <HAL_GetTick>
 80038fa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038fc:	4b28      	ldr	r3, [pc, #160]	@ (80039a0 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003904:	fb09 f303 	mul.w	r3, r9, r3
 8003908:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800390a:	682b      	ldr	r3, [r5, #0]
 800390c:	689c      	ldr	r4, [r3, #8]
 800390e:	ea38 0404 	bics.w	r4, r8, r4
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	42bb      	cmp	r3, r7
 800391a:	d03d      	beq.n	8003998 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800391c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003920:	d0f3      	beq.n	800390a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003922:	f7fe f987 	bl	8001c34 <HAL_GetTick>
 8003926:	eba0 000a 	sub.w	r0, r0, sl
 800392a:	4548      	cmp	r0, r9
 800392c:	d207      	bcs.n	800393e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800392e:	9a01      	ldr	r2, [sp, #4]
 8003930:	b102      	cbz	r2, 8003934 <SPI_WaitFlagStateUntilTimeout+0x58>
 8003932:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003934:	9b01      	ldr	r3, [sp, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	4691      	mov	r9, r2
 800393c:	e7e5      	b.n	800390a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800393e:	682a      	ldr	r2, [r5, #0]
 8003940:	6853      	ldr	r3, [r2, #4]
 8003942:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003946:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003948:	686b      	ldr	r3, [r5, #4]
 800394a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800394e:	d00b      	beq.n	8003968 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003950:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003956:	d014      	beq.n	8003982 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8003958:	2301      	movs	r3, #1
 800395a:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800395e:	2300      	movs	r3, #0
 8003960:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
 8003966:	e018      	b.n	800399a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003968:	68ab      	ldr	r3, [r5, #8]
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396e:	d002      	beq.n	8003976 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003974:	d1ec      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8003976:	682a      	ldr	r2, [r5, #0]
 8003978:	6813      	ldr	r3, [r2, #0]
 800397a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	e7e6      	b.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003982:	682a      	ldr	r2, [r5, #0]
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	682a      	ldr	r2, [r5, #0]
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e7df      	b.n	8003958 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003998:	2000      	movs	r0, #0
}
 800399a:	b002      	add	sp, #8
 800399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a0:	20000008 	.word	0x20000008

080039a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	4604      	mov	r4, r0
 80039aa:	460d      	mov	r5, r1
 80039ac:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80039ae:	9200      	str	r2, [sp, #0]
 80039b0:	460b      	mov	r3, r1
 80039b2:	2201      	movs	r2, #1
 80039b4:	2102      	movs	r1, #2
 80039b6:	f7ff ff91 	bl	80038dc <SPI_WaitFlagStateUntilTimeout>
 80039ba:	b9d0      	cbnz	r0, 80039f2 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039bc:	4b17      	ldr	r3, [pc, #92]	@ (8003a1c <SPI_EndRxTxTransaction+0x78>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a17      	ldr	r2, [pc, #92]	@ (8003a20 <SPI_EndRxTxTransaction+0x7c>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0d5b      	lsrs	r3, r3, #21
 80039c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d2:	6863      	ldr	r3, [r4, #4]
 80039d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d8:	d011      	beq.n	80039fe <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	b13b      	cbz	r3, 80039ee <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039ec:	d1f5      	bne.n	80039da <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 80039ee:	b004      	add	sp, #16
 80039f0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039f4:	f043 0320 	orr.w	r3, r3, #32
 80039f8:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 80039fa:	2003      	movs	r0, #3
 80039fc:	e7f7      	b.n	80039ee <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039fe:	9600      	str	r6, [sp, #0]
 8003a00:	462b      	mov	r3, r5
 8003a02:	2200      	movs	r2, #0
 8003a04:	2180      	movs	r1, #128	@ 0x80
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff ff68 	bl	80038dc <SPI_WaitFlagStateUntilTimeout>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d0ee      	beq.n	80039ee <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a12:	f043 0320 	orr.w	r3, r3, #32
 8003a16:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a18:	2003      	movs	r0, #3
 8003a1a:	e7e8      	b.n	80039ee <SPI_EndRxTxTransaction+0x4a>
 8003a1c:	20000008 	.word	0x20000008
 8003a20:	165e9f81 	.word	0x165e9f81

08003a24 <SPI_EndRxTransaction>:
{
 8003a24:	b510      	push	{r4, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	4604      	mov	r4, r0
 8003a2a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2c:	6841      	ldr	r1, [r0, #4]
 8003a2e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8003a32:	d014      	beq.n	8003a5e <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a34:	6861      	ldr	r1, [r4, #4]
 8003a36:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8003a3a:	d12a      	bne.n	8003a92 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a3c:	68a1      	ldr	r1, [r4, #8]
 8003a3e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003a42:	d019      	beq.n	8003a78 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a44:	9200      	str	r2, [sp, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	@ 0x80
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7ff ff46 	bl	80038dc <SPI_WaitFlagStateUntilTimeout>
 8003a50:	b330      	cbz	r0, 8003aa0 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a54:	f043 0320 	orr.w	r3, r3, #32
 8003a58:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003a5a:	2003      	movs	r0, #3
 8003a5c:	e020      	b.n	8003aa0 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a5e:	6881      	ldr	r1, [r0, #8]
 8003a60:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003a64:	d002      	beq.n	8003a6c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a66:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003a6a:	d1e3      	bne.n	8003a34 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	6801      	ldr	r1, [r0, #0]
 8003a70:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8003a74:	6001      	str	r1, [r0, #0]
 8003a76:	e7dd      	b.n	8003a34 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a78:	9200      	str	r2, [sp, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff ff2c 	bl	80038dc <SPI_WaitFlagStateUntilTimeout>
 8003a84:	b160      	cbz	r0, 8003aa0 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a86:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a88:	f043 0320 	orr.w	r3, r3, #32
 8003a8c:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003a8e:	2003      	movs	r0, #3
 8003a90:	e006      	b.n	8003aa0 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2101      	movs	r1, #1
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff ff1f 	bl	80038dc <SPI_WaitFlagStateUntilTimeout>
 8003a9e:	b908      	cbnz	r0, 8003aa4 <SPI_EndRxTransaction+0x80>
}
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003aa6:	f043 0320 	orr.w	r3, r3, #32
 8003aaa:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003aac:	2003      	movs	r0, #3
 8003aae:	e7f7      	b.n	8003aa0 <SPI_EndRxTransaction+0x7c>

08003ab0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d05a      	beq.n	8003b6a <HAL_SPI_Init+0xba>
{
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003aba:	b933      	cbnz	r3, 8003aca <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003abc:	6843      	ldr	r3, [r0, #4]
 8003abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ac2:	d005      	beq.n	8003ad0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61c3      	str	r3, [r0, #28]
 8003ac8:	e002      	b.n	8003ad0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aca:	2300      	movs	r3, #0
 8003acc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ace:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ad4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d040      	beq.n	8003b5e <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003adc:	2302      	movs	r3, #2
 8003ade:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aea:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003af2:	68a2      	ldr	r2, [r4, #8]
 8003af4:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003af8:	4313      	orrs	r3, r2
 8003afa:	68e2      	ldr	r2, [r4, #12]
 8003afc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b00:	4313      	orrs	r3, r2
 8003b02:	6922      	ldr	r2, [r4, #16]
 8003b04:	f002 0202 	and.w	r2, r2, #2
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	6962      	ldr	r2, [r4, #20]
 8003b0c:	f002 0201 	and.w	r2, r2, #1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	69a2      	ldr	r2, [r4, #24]
 8003b14:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	69e2      	ldr	r2, [r4, #28]
 8003b1c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003b20:	4313      	orrs	r3, r2
 8003b22:	6a22      	ldr	r2, [r4, #32]
 8003b24:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003b2c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003b30:	6821      	ldr	r1, [r4, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b36:	8b63      	ldrh	r3, [r4, #26]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003b3e:	f002 0210 	and.w	r2, r2, #16
 8003b42:	6821      	ldr	r1, [r4, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	69d3      	ldr	r3, [r2, #28]
 8003b4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b50:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b52:	2000      	movs	r0, #0
 8003b54:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003b5c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003b5e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003b62:	4620      	mov	r0, r4
 8003b64:	f7fe fe90 	bl	8002888 <HAL_SPI_MspInit>
 8003b68:	e7b8      	b.n	8003adc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003b6a:	2001      	movs	r0, #1
}
 8003b6c:	4770      	bx	lr

08003b6e <HAL_SPI_Transmit>:
{
 8003b6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b72:	b083      	sub	sp, #12
 8003b74:	4604      	mov	r4, r0
 8003b76:	4689      	mov	r9, r1
 8003b78:	4690      	mov	r8, r2
 8003b7a:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8003b7c:	f7fe f85a 	bl	8001c34 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b80:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8003b84:	b2f6      	uxtb	r6, r6
 8003b86:	2e01      	cmp	r6, #1
 8003b88:	f040 80cc 	bne.w	8003d24 <HAL_SPI_Transmit+0x1b6>
 8003b8c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8003b8e:	f1b9 0f00 	cmp.w	r9, #0
 8003b92:	f000 80c8 	beq.w	8003d26 <HAL_SPI_Transmit+0x1b8>
 8003b96:	f1b8 0f00 	cmp.w	r8, #0
 8003b9a:	f000 80c4 	beq.w	8003d26 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8003b9e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	f000 80c3 	beq.w	8003d2e <HAL_SPI_Transmit+0x1c0>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003bb8:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003bbc:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003bc0:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bc4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003bc6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003bc8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003bca:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bcc:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bce:	68a3      	ldr	r3, [r4, #8]
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bd4:	d01e      	beq.n	8003c14 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003bde:	d103      	bne.n	8003be8 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003be6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003be8:	68e3      	ldr	r3, [r4, #12]
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bee:	d01c      	beq.n	8003c2a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	b113      	cbz	r3, 8003bfa <HAL_SPI_Transmit+0x8c>
 8003bf4:	f1b8 0f01 	cmp.w	r8, #1
 8003bf8:	d15f      	bne.n	8003cba <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bfa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	7812      	ldrb	r2, [r2, #0]
 8003c00:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c04:	3301      	adds	r3, #1
 8003c06:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c08:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003c12:	e052      	b.n	8003cba <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c1c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	e7d5      	b.n	8003bd6 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	b113      	cbz	r3, 8003c34 <HAL_SPI_Transmit+0xc6>
 8003c2e:	f1b8 0f01 	cmp.w	r8, #1
 8003c32:	d115      	bne.n	8003c60 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c34:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	8812      	ldrh	r2, [r2, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c3e:	3302      	adds	r3, #2
 8003c40:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c42:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003c4c:	e008      	b.n	8003c60 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c4e:	f7fd fff1 	bl	8001c34 <HAL_GetTick>
 8003c52:	1bc0      	subs	r0, r0, r7
 8003c54:	42a8      	cmp	r0, r5
 8003c56:	d302      	bcc.n	8003c5e <HAL_SPI_Transmit+0xf0>
 8003c58:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c5c:	d115      	bne.n	8003c8a <HAL_SPI_Transmit+0x11c>
 8003c5e:	b1a5      	cbz	r5, 8003c8a <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8003c60:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d042      	beq.n	8003cee <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	f012 0f02 	tst.w	r2, #2
 8003c70:	d0ed      	beq.n	8003c4e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c72:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003c74:	8812      	ldrh	r2, [r2, #0]
 8003c76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c7e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003c88:	e7ea      	b.n	8003c60 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c90:	2300      	movs	r3, #0
 8003c92:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c96:	2603      	movs	r6, #3
 8003c98:	e045      	b.n	8003d26 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c9a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ca0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ca6:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8003caa:	fa1f fc8c 	uxth.w	ip, ip
 8003cae:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003cb2:	fa1f fc8c 	uxth.w	ip, ip
 8003cb6:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003cba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	b1b3      	cbz	r3, 8003cee <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	f012 0f02 	tst.w	r2, #2
 8003cc8:	d1e7      	bne.n	8003c9a <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cca:	f7fd ffb3 	bl	8001c34 <HAL_GetTick>
 8003cce:	1bc0      	subs	r0, r0, r7
 8003cd0:	42a8      	cmp	r0, r5
 8003cd2:	d302      	bcc.n	8003cda <HAL_SPI_Transmit+0x16c>
 8003cd4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_Transmit+0x170>
 8003cda:	2d00      	cmp	r5, #0
 8003cdc:	d1ed      	bne.n	8003cba <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003cea:	2603      	movs	r6, #3
 8003cec:	e01b      	b.n	8003d26 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cee:	463a      	mov	r2, r7
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff fe56 	bl	80039a4 <SPI_EndRxTxTransaction>
 8003cf8:	b108      	cbz	r0, 8003cfe <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cfe:	68a3      	ldr	r3, [r4, #8]
 8003d00:	b933      	cbnz	r3, 8003d10 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	9201      	str	r2, [sp, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003d16:	2300      	movs	r3, #0
 8003d18:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d1e:	b913      	cbnz	r3, 8003d26 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8003d20:	2600      	movs	r6, #0
 8003d22:	e000      	b.n	8003d26 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8003d24:	2602      	movs	r6, #2
}
 8003d26:	4630      	mov	r0, r6
 8003d28:	b003      	add	sp, #12
 8003d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8003d2e:	2602      	movs	r6, #2
 8003d30:	e7f9      	b.n	8003d26 <HAL_SPI_Transmit+0x1b8>

08003d32 <HAL_SPI_TransmitReceive>:
{
 8003d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d36:	b083      	sub	sp, #12
 8003d38:	4604      	mov	r4, r0
 8003d3a:	4688      	mov	r8, r1
 8003d3c:	4691      	mov	r9, r2
 8003d3e:	461f      	mov	r7, r3
 8003d40:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003d42:	f7fd ff77 	bl	8001c34 <HAL_GetTick>
 8003d46:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003d48:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003d4c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003d4e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d00a      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x38>
 8003d54:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003d58:	f040 8105 	bne.w	8003f66 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d5c:	68a2      	ldr	r2, [r4, #8]
 8003d5e:	2a00      	cmp	r2, #0
 8003d60:	f040 8105 	bne.w	8003f6e <HAL_SPI_TransmitReceive+0x23c>
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	f040 8104 	bne.w	8003f72 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d6a:	f1b8 0f00 	cmp.w	r8, #0
 8003d6e:	f000 8102 	beq.w	8003f76 <HAL_SPI_TransmitReceive+0x244>
 8003d72:	f1b9 0f00 	cmp.w	r9, #0
 8003d76:	f000 8100 	beq.w	8003f7a <HAL_SPI_TransmitReceive+0x248>
 8003d7a:	2f00      	cmp	r7, #0
 8003d7c:	f000 80ff 	beq.w	8003f7e <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8003d80:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f000 80fc 	beq.w	8003f82 <HAL_SPI_TransmitReceive+0x250>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d90:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d002      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d9a:	2305      	movs	r3, #5
 8003d9c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003da4:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003da8:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003daa:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003dac:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003db0:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003db2:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8003db4:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003db6:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003dc0:	d103      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dc8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dca:	68e3      	ldr	r3, [r4, #12]
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd0:	d011      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd2:	6863      	ldr	r3, [r4, #4]
 8003dd4:	b10b      	cbz	r3, 8003dda <HAL_SPI_TransmitReceive+0xa8>
 8003dd6:	2f01      	cmp	r7, #1
 8003dd8:	d10b      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dda:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003de4:	3301      	adds	r3, #1
 8003de6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003de8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003df2:	2701      	movs	r7, #1
 8003df4:	e071      	b.n	8003eda <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df6:	6863      	ldr	r3, [r4, #4]
 8003df8:	b10b      	cbz	r3, 8003dfe <HAL_SPI_TransmitReceive+0xcc>
 8003dfa:	2f01      	cmp	r7, #1
 8003dfc:	d10b      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dfe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	8812      	ldrh	r2, [r2, #0]
 8003e04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e08:	3302      	adds	r3, #2
 8003e0a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e0c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003e16:	2701      	movs	r7, #1
 8003e18:	e01b      	b.n	8003e52 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	f012 0f01 	tst.w	r2, #1
 8003e22:	d00e      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x110>
 8003e24:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003e26:	b292      	uxth	r2, r2
 8003e28:	b15a      	cbz	r2, 8003e42 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e32:	3302      	adds	r3, #2
 8003e34:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e36:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003e40:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e42:	f7fd fef7 	bl	8001c34 <HAL_GetTick>
 8003e46:	1b80      	subs	r0, r0, r6
 8003e48:	42a8      	cmp	r0, r5
 8003e4a:	d302      	bcc.n	8003e52 <HAL_SPI_TransmitReceive+0x120>
 8003e4c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e50:	d11e      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e52:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	b91b      	cbnz	r3, 8003e60 <HAL_SPI_TransmitReceive+0x12e>
 8003e58:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d062      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	f012 0f02 	tst.w	r2, #2
 8003e68:	d0d7      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0xe8>
 8003e6a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003e6c:	b292      	uxth	r2, r2
 8003e6e:	2a00      	cmp	r2, #0
 8003e70:	d0d3      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0xe8>
 8003e72:	2f00      	cmp	r7, #0
 8003e74:	d0d1      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e76:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e78:	8812      	ldrh	r2, [r2, #0]
 8003e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e7e:	3302      	adds	r3, #2
 8003e80:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e82:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003e8c:	2700      	movs	r7, #0
 8003e8e:	e7c4      	b.n	8003e1a <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e96:	2300      	movs	r3, #0
 8003e98:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e9c:	2003      	movs	r0, #3
 8003e9e:	e063      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	f012 0f01 	tst.w	r2, #1
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x196>
 8003eaa:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003eac:	b292      	uxth	r2, r2
 8003eae:	b15a      	cbz	r2, 8003ec8 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003eb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003eb6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003eb8:	3301      	adds	r3, #1
 8003eba:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ebc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003ec6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ec8:	f7fd feb4 	bl	8001c34 <HAL_GetTick>
 8003ecc:	1b83      	subs	r3, r0, r6
 8003ece:	42ab      	cmp	r3, r5
 8003ed0:	d302      	bcc.n	8003ed8 <HAL_SPI_TransmitReceive+0x1a6>
 8003ed2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ed6:	d11e      	bne.n	8003f16 <HAL_SPI_TransmitReceive+0x1e4>
 8003ed8:	b1ed      	cbz	r5, 8003f16 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eda:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b913      	cbnz	r3, 8003ee6 <HAL_SPI_TransmitReceive+0x1b4>
 8003ee0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	b1fb      	cbz	r3, 8003f26 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	f012 0f02 	tst.w	r2, #2
 8003eee:	d0d7      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x16e>
 8003ef0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003ef2:	b292      	uxth	r2, r2
 8003ef4:	2a00      	cmp	r2, #0
 8003ef6:	d0d3      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x16e>
 8003ef8:	2f00      	cmp	r7, #0
 8003efa:	d0d1      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003efc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003efe:	7812      	ldrb	r2, [r2, #0]
 8003f00:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003f02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f04:	3301      	adds	r3, #1
 8003f06:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f08:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003f12:	2700      	movs	r7, #0
 8003f14:	e7c4      	b.n	8003ea0 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f22:	2003      	movs	r0, #3
 8003f24:	e020      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f26:	4632      	mov	r2, r6
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7ff fd3a 	bl	80039a4 <SPI_EndRxTxTransaction>
 8003f30:	b990      	cbnz	r0, 8003f58 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f32:	68a3      	ldr	r3, [r4, #8]
 8003f34:	b933      	cbnz	r3, 8003f44 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	9201      	str	r2, [sp, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f50:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003f52:	b14b      	cbz	r3, 8003f68 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8003f54:	2001      	movs	r0, #1
 8003f56:	e007      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f58:	2320      	movs	r3, #32
 8003f5a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8003f62:	2001      	movs	r0, #1
 8003f64:	e000      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8003f66:	2002      	movs	r0, #2
}
 8003f68:	b003      	add	sp, #12
 8003f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8003f6e:	2002      	movs	r0, #2
 8003f70:	e7fa      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
 8003f72:	2002      	movs	r0, #2
 8003f74:	e7f8      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8003f76:	2001      	movs	r0, #1
 8003f78:	e7f6      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	e7f4      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
 8003f7e:	2001      	movs	r0, #1
 8003f80:	e7f2      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8003f82:	2002      	movs	r0, #2
 8003f84:	e7f0      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x236>

08003f86 <HAL_SPI_Receive>:
{
 8003f86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f8a:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8c:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8003f90:	b2f6      	uxtb	r6, r6
 8003f92:	2e01      	cmp	r6, #1
 8003f94:	f040 80b4 	bne.w	8004100 <HAL_SPI_Receive+0x17a>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	4689      	mov	r9, r1
 8003f9c:	4690      	mov	r8, r2
 8003f9e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fa0:	6843      	ldr	r3, [r0, #4]
 8003fa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_Receive+0x26>
 8003fa8:	6883      	ldr	r3, [r0, #8]
 8003faa:	b393      	cbz	r3, 8004012 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8003fac:	f7fd fe42 	bl	8001c34 <HAL_GetTick>
 8003fb0:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8003fb2:	f1b9 0f00 	cmp.w	r9, #0
 8003fb6:	f000 80a4 	beq.w	8004102 <HAL_SPI_Receive+0x17c>
 8003fba:	f1b8 0f00 	cmp.w	r8, #0
 8003fbe:	f000 80a0 	beq.w	8004102 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 8003fc2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	f000 809f 	beq.w	800410a <HAL_SPI_Receive+0x184>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fdc:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003fe0:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003fe4:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fe8:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003fea:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003fec:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003fee:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ff0:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff2:	68a3      	ldr	r3, [r4, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff8:	d015      	beq.n	8004026 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004002:	d103      	bne.n	800400c <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800400a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800400c:	68e3      	ldr	r3, [r4, #12]
 800400e:	b1f3      	cbz	r3, 800404e <HAL_SPI_Receive+0xc8>
 8004010:	e043      	b.n	800409a <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004012:	2304      	movs	r3, #4
 8004014:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004018:	9500      	str	r5, [sp, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	460a      	mov	r2, r1
 800401e:	f7ff fe88 	bl	8003d32 <HAL_SPI_TransmitReceive>
 8004022:	4606      	mov	r6, r0
 8004024:	e06d      	b.n	8004102 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	6813      	ldr	r3, [r2, #0]
 800402a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e7de      	b.n	8003ffa <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403c:	f7fd fdfa 	bl	8001c34 <HAL_GetTick>
 8004040:	1bc0      	subs	r0, r0, r7
 8004042:	42a8      	cmp	r0, r5
 8004044:	d302      	bcc.n	800404c <HAL_SPI_Receive+0xc6>
 8004046:	f1b5 3fff 	cmp.w	r5, #4294967295
 800404a:	d115      	bne.n	8004078 <HAL_SPI_Receive+0xf2>
 800404c:	b1a5      	cbz	r5, 8004078 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 800404e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d042      	beq.n	80040dc <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	f012 0f01 	tst.w	r2, #1
 800405e:	d0ed      	beq.n	800403c <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004060:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004062:	7b1b      	ldrb	r3, [r3, #12]
 8004064:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004066:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004068:	3301      	adds	r3, #1
 800406a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800406c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004076:	e7ea      	b.n	800404e <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8004078:	2301      	movs	r3, #1
 800407a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800407e:	2300      	movs	r3, #0
 8004080:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004084:	2603      	movs	r6, #3
 8004086:	e03c      	b.n	8004102 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004088:	f7fd fdd4 	bl	8001c34 <HAL_GetTick>
 800408c:	1bc0      	subs	r0, r0, r7
 800408e:	42a8      	cmp	r0, r5
 8004090:	d302      	bcc.n	8004098 <HAL_SPI_Receive+0x112>
 8004092:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004096:	d119      	bne.n	80040cc <HAL_SPI_Receive+0x146>
 8004098:	b1c5      	cbz	r5, 80040cc <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 800409a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800409c:	b29b      	uxth	r3, r3
 800409e:	b1eb      	cbz	r3, 80040dc <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	f012 0f01 	tst.w	r2, #1
 80040a8:	d0ee      	beq.n	8004088 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80040ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80040b2:	3302      	adds	r3, #2
 80040b4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80040b6:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 80040ba:	fa1f fc8c 	uxth.w	ip, ip
 80040be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80040c2:	fa1f fc8c 	uxth.w	ip, ip
 80040c6:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80040ca:	e7e6      	b.n	800409a <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040d2:	2300      	movs	r3, #0
 80040d4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040d8:	2603      	movs	r6, #3
 80040da:	e012      	b.n	8004102 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040dc:	463a      	mov	r2, r7
 80040de:	4629      	mov	r1, r5
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff fc9f 	bl	8003a24 <SPI_EndRxTransaction>
 80040e6:	b108      	cbz	r0, 80040ec <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e8:	2320      	movs	r3, #32
 80040ea:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80040f2:	2300      	movs	r3, #0
 80040f4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040fa:	b913      	cbnz	r3, 8004102 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 80040fc:	2600      	movs	r6, #0
 80040fe:	e000      	b.n	8004102 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 8004100:	2602      	movs	r6, #2
}
 8004102:	4630      	mov	r0, r6
 8004104:	b003      	add	sp, #12
 8004106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800410a:	2602      	movs	r6, #2
 800410c:	e7f9      	b.n	8004102 <HAL_SPI_Receive+0x17c>

0800410e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f102 030c 	add.w	r3, r2, #12
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	320c      	adds	r2, #12
 800411e:	e842 3100 	strex	r1, r3, [r2]
 8004122:	2900      	cmp	r1, #0
 8004124:	d1f3      	bne.n	800410e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	f102 0314 	add.w	r3, r2, #20
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	3214      	adds	r2, #20
 8004136:	e842 3100 	strex	r1, r3, [r2]
 800413a:	2900      	cmp	r1, #0
 800413c:	d1f3      	bne.n	8004126 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	d005      	beq.n	8004150 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	2320      	movs	r3, #32
 8004146:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	2300      	movs	r3, #0
 800414c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800414e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	f102 030c 	add.w	r3, r2, #12
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	320c      	adds	r2, #12
 8004160:	e842 3100 	strex	r1, r3, [r2]
 8004164:	2900      	cmp	r1, #0
 8004166:	d1f3      	bne.n	8004150 <UART_EndRxTransfer+0x42>
 8004168:	e7ec      	b.n	8004144 <UART_EndRxTransfer+0x36>
	...

0800416c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	b510      	push	{r4, lr}
 800416e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004170:	6802      	ldr	r2, [r0, #0]
 8004172:	6913      	ldr	r3, [r2, #16]
 8004174:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004178:	68c1      	ldr	r1, [r0, #12]
 800417a:	430b      	orrs	r3, r1
 800417c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417e:	6883      	ldr	r3, [r0, #8]
 8004180:	6902      	ldr	r2, [r0, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	6943      	ldr	r3, [r0, #20]
 8004186:	431a      	orrs	r2, r3
 8004188:	69c3      	ldr	r3, [r0, #28]
 800418a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800418c:	6801      	ldr	r1, [r0, #0]
 800418e:	68cb      	ldr	r3, [r1, #12]
 8004190:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004194:	f023 030c 	bic.w	r3, r3, #12
 8004198:	4313      	orrs	r3, r2
 800419a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419c:	6802      	ldr	r2, [r0, #0]
 800419e:	6953      	ldr	r3, [r2, #20]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a4:	6981      	ldr	r1, [r0, #24]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041aa:	6803      	ldr	r3, [r0, #0]
 80041ac:	4a31      	ldr	r2, [pc, #196]	@ (8004274 <UART_SetConfig+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d006      	beq.n	80041c0 <UART_SetConfig+0x54>
 80041b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d002      	beq.n	80041c0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ba:	f7fe fedd 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80041be:	e001      	b.n	80041c4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c0:	f7fe feea 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c4:	69e3      	ldr	r3, [r4, #28]
 80041c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ca:	d029      	beq.n	8004220 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041cc:	2100      	movs	r1, #0
 80041ce:	1803      	adds	r3, r0, r0
 80041d0:	4149      	adcs	r1, r1
 80041d2:	181b      	adds	r3, r3, r0
 80041d4:	f141 0100 	adc.w	r1, r1, #0
 80041d8:	00c9      	lsls	r1, r1, #3
 80041da:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	1818      	adds	r0, r3, r0
 80041e2:	6863      	ldr	r3, [r4, #4]
 80041e4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80041e8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80041ec:	f141 0100 	adc.w	r1, r1, #0
 80041f0:	f7fc fd2a 	bl	8000c48 <__aeabi_uldivmod>
 80041f4:	4a20      	ldr	r2, [pc, #128]	@ (8004278 <UART_SetConfig+0x10c>)
 80041f6:	fba2 3100 	umull	r3, r1, r2, r0
 80041fa:	0949      	lsrs	r1, r1, #5
 80041fc:	2364      	movs	r3, #100	@ 0x64
 80041fe:	fb03 0311 	mls	r3, r3, r1, r0
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	@ 0x32
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004210:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	6821      	ldr	r1, [r4, #0]
 800421a:	4413      	add	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }
}
 800421e:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004220:	2300      	movs	r3, #0
 8004222:	1802      	adds	r2, r0, r0
 8004224:	eb43 0103 	adc.w	r1, r3, r3
 8004228:	1812      	adds	r2, r2, r0
 800422a:	f141 0100 	adc.w	r1, r1, #0
 800422e:	00c9      	lsls	r1, r1, #3
 8004230:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004234:	00d2      	lsls	r2, r2, #3
 8004236:	1810      	adds	r0, r2, r0
 8004238:	f141 0100 	adc.w	r1, r1, #0
 800423c:	6862      	ldr	r2, [r4, #4]
 800423e:	1892      	adds	r2, r2, r2
 8004240:	415b      	adcs	r3, r3
 8004242:	f7fc fd01 	bl	8000c48 <__aeabi_uldivmod>
 8004246:	4a0c      	ldr	r2, [pc, #48]	@ (8004278 <UART_SetConfig+0x10c>)
 8004248:	fba2 3100 	umull	r3, r1, r2, r0
 800424c:	0949      	lsrs	r1, r1, #5
 800424e:	2364      	movs	r3, #100	@ 0x64
 8004250:	fb03 0311 	mls	r3, r3, r1, r0
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	3332      	adds	r3, #50	@ 0x32
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	005a      	lsls	r2, r3, #1
 8004260:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8004264:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	6821      	ldr	r1, [r4, #0]
 800426e:	4413      	add	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
 8004272:	e7d4      	b.n	800421e <UART_SetConfig+0xb2>
 8004274:	40011000 	.word	0x40011000
 8004278:	51eb851f 	.word	0x51eb851f

0800427c <UART_WaitOnFlagUntilTimeout>:
{
 800427c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004280:	b083      	sub	sp, #12
 8004282:	4605      	mov	r5, r0
 8004284:	460e      	mov	r6, r1
 8004286:	4617      	mov	r7, r2
 8004288:	4699      	mov	r9, r3
 800428a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	681c      	ldr	r4, [r3, #0]
 8004292:	ea36 0404 	bics.w	r4, r6, r4
 8004296:	bf0c      	ite	eq
 8004298:	2401      	moveq	r4, #1
 800429a:	2400      	movne	r4, #0
 800429c:	42bc      	cmp	r4, r7
 800429e:	d128      	bne.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80042a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80042a4:	d0f3      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fd fcc5 	bl	8001c34 <HAL_GetTick>
 80042aa:	eba0 0009 	sub.w	r0, r0, r9
 80042ae:	4540      	cmp	r0, r8
 80042b0:	d823      	bhi.n	80042fa <UART_WaitOnFlagUntilTimeout+0x7e>
 80042b2:	f1b8 0f00 	cmp.w	r8, #0
 80042b6:	d022      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	f012 0f04 	tst.w	r2, #4
 80042c0:	d0e5      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
 80042c2:	2e80      	cmp	r6, #128	@ 0x80
 80042c4:	d0e3      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
 80042c6:	2e40      	cmp	r6, #64	@ 0x40
 80042c8:	d0e1      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	f012 0f08 	tst.w	r2, #8
 80042d0:	d0dd      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042d2:	2400      	movs	r4, #0
 80042d4:	9401      	str	r4, [sp, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	9201      	str	r2, [sp, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80042e0:	4628      	mov	r0, r5
 80042e2:	f7ff ff14 	bl	800410e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e6:	2308      	movs	r3, #8
 80042e8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80042ea:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80042ee:	2001      	movs	r0, #1
 80042f0:	e000      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80042f2:	2000      	movs	r0, #0
}
 80042f4:	b003      	add	sp, #12
 80042f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80042fa:	2003      	movs	r0, #3
 80042fc:	e7fa      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x78>
 80042fe:	2003      	movs	r0, #3
 8004300:	e7f8      	b.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x78>

08004302 <HAL_UART_Init>:
  if (huart == NULL)
 8004302:	b360      	cbz	r0, 800435e <HAL_UART_Init+0x5c>
{
 8004304:	b510      	push	{r4, lr}
 8004306:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004308:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800430c:	b313      	cbz	r3, 8004354 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800430e:	2324      	movs	r3, #36	@ 0x24
 8004310:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	68d3      	ldr	r3, [r2, #12]
 8004318:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800431c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800431e:	4620      	mov	r0, r4
 8004320:	f7ff ff24 	bl	800416c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	6913      	ldr	r3, [r2, #16]
 8004328:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800432c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	6953      	ldr	r3, [r2, #20]
 8004332:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004336:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	68d3      	ldr	r3, [r2, #12]
 800433c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004340:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	2000      	movs	r0, #0
 8004344:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004346:	2320      	movs	r3, #32
 8004348:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800434c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004350:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004352:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004354:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004358:	f7fe face 	bl	80028f8 <HAL_UART_MspInit>
 800435c:	e7d7      	b.n	800430e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800435e:	2001      	movs	r0, #1
}
 8004360:	4770      	bx	lr

08004362 <HAL_UART_Transmit>:
{
 8004362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800436a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b20      	cmp	r3, #32
 8004372:	d156      	bne.n	8004422 <HAL_UART_Transmit+0xc0>
 8004374:	4604      	mov	r4, r0
 8004376:	460d      	mov	r5, r1
 8004378:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800437a:	2900      	cmp	r1, #0
 800437c:	d055      	beq.n	800442a <HAL_UART_Transmit+0xc8>
 800437e:	b90a      	cbnz	r2, 8004384 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8004380:	2001      	movs	r0, #1
 8004382:	e04f      	b.n	8004424 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	2300      	movs	r3, #0
 8004386:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004388:	2321      	movs	r3, #33	@ 0x21
 800438a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800438e:	f7fd fc51 	bl	8001c34 <HAL_GetTick>
 8004392:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004394:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004398:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a2:	d002      	beq.n	80043aa <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80043a4:	f04f 0800 	mov.w	r8, #0
 80043a8:	e014      	b.n	80043d4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	b32b      	cbz	r3, 80043fa <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80043ae:	f04f 0800 	mov.w	r8, #0
 80043b2:	e00f      	b.n	80043d4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80043b4:	2320      	movs	r3, #32
 80043b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80043ba:	2003      	movs	r0, #3
 80043bc:	e032      	b.n	8004424 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043be:	f838 3b02 	ldrh.w	r3, [r8], #2
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80043ca:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80043cc:	b292      	uxth	r2, r2
 80043ce:	3a01      	subs	r2, #1
 80043d0:	b292      	uxth	r2, r2
 80043d2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043d4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	b193      	cbz	r3, 8004400 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043da:	9600      	str	r6, [sp, #0]
 80043dc:	463b      	mov	r3, r7
 80043de:	2200      	movs	r2, #0
 80043e0:	2180      	movs	r1, #128	@ 0x80
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7ff ff4a 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d1e3      	bne.n	80043b4 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	d0e6      	beq.n	80043be <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043f8:	e7e7      	b.n	80043ca <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80043fa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80043fc:	2500      	movs	r5, #0
 80043fe:	e7e9      	b.n	80043d4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004400:	9600      	str	r6, [sp, #0]
 8004402:	463b      	mov	r3, r7
 8004404:	2200      	movs	r2, #0
 8004406:	2140      	movs	r1, #64	@ 0x40
 8004408:	4620      	mov	r0, r4
 800440a:	f7ff ff37 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 800440e:	b918      	cbnz	r0, 8004418 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8004410:	2320      	movs	r3, #32
 8004412:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8004416:	e005      	b.n	8004424 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8004418:	2320      	movs	r3, #32
 800441a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800441e:	2003      	movs	r0, #3
 8004420:	e000      	b.n	8004424 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8004422:	2002      	movs	r0, #2
}
 8004424:	b002      	add	sp, #8
 8004426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800442a:	2001      	movs	r0, #1
 800442c:	e7fa      	b.n	8004424 <HAL_UART_Transmit+0xc2>

0800442e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800442e:	e7fe      	b.n	800442e <NMI_Handler>

08004430 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004430:	e7fe      	b.n	8004430 <HardFault_Handler>

08004432 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004432:	e7fe      	b.n	8004432 <MemManage_Handler>

08004434 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004434:	e7fe      	b.n	8004434 <BusFault_Handler>

08004436 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004436:	e7fe      	b.n	8004436 <UsageFault_Handler>

08004438 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004438:	4770      	bx	lr

0800443a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800443a:	4770      	bx	lr

0800443c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800443c:	4770      	bx	lr

0800443e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800443e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004440:	f7fd fbec 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004444:	bd08      	pop	{r3, pc}
	...

08004448 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004448:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <SDMMC_GetCmdError+0x30>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a0b      	ldr	r2, [pc, #44]	@ (800447c <SDMMC_GetCmdError+0x34>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	0a5b      	lsrs	r3, r3, #9
 8004454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004458:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 800445c:	461a      	mov	r2, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b13a      	cbz	r2, 8004472 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004462:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8004464:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004468:	d0f8      	beq.n	800445c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800446a:	23c5      	movs	r3, #197	@ 0xc5
 800446c:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800446e:	2000      	movs	r0, #0
 8004470:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004472:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004476:	4770      	bx	lr
 8004478:	20000008 	.word	0x20000008
 800447c:	10624dd3 	.word	0x10624dd3

08004480 <SDIO_Init>:
{
 8004480:	b084      	sub	sp, #16
 8004482:	f10d 0c04 	add.w	ip, sp, #4
 8004486:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800448e:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 8004490:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8004492:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8004494:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8004496:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8004498:	4313      	orrs	r3, r2
             Init.ClockDiv
 800449a:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 800449c:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800449e:	6842      	ldr	r2, [r0, #4]
 80044a0:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 80044a4:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80044a8:	4313      	orrs	r3, r2
 80044aa:	6043      	str	r3, [r0, #4]
}
 80044ac:	2000      	movs	r0, #0
 80044ae:	b004      	add	sp, #16
 80044b0:	4770      	bx	lr

080044b2 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80044b2:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 80044b6:	4770      	bx	lr

080044b8 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80044b8:	680b      	ldr	r3, [r1, #0]
 80044ba:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 80044be:	2000      	movs	r0, #0
 80044c0:	4770      	bx	lr

080044c2 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80044c2:	2303      	movs	r3, #3
 80044c4:	6003      	str	r3, [r0, #0]
}
 80044c6:	2000      	movs	r0, #0
 80044c8:	4770      	bx	lr

080044ca <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80044ca:	6800      	ldr	r0, [r0, #0]
}
 80044cc:	f000 0003 	and.w	r0, r0, #3
 80044d0:	4770      	bx	lr

080044d2 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80044d2:	680b      	ldr	r3, [r1, #0]
 80044d4:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044d6:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 80044d8:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044da:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80044dc:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80044de:	4313      	orrs	r3, r2
                       Command->CPSM);
 80044e0:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80044e2:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044e4:	68c2      	ldr	r2, [r0, #12]
 80044e6:	f36f 020b 	bfc	r2, #0, #12
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60c3      	str	r3, [r0, #12]
}
 80044ee:	2000      	movs	r0, #0
 80044f0:	4770      	bx	lr

080044f2 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 80044f2:	6900      	ldr	r0, [r0, #16]
}
 80044f4:	b2c0      	uxtb	r0, r0
 80044f6:	4770      	bx	lr

080044f8 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80044f8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80044fa:	5840      	ldr	r0, [r0, r1]
}  
 80044fc:	4770      	bx	lr

080044fe <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80044fe:	680b      	ldr	r3, [r1, #0]
 8004500:	6243      	str	r3, [r0, #36]	@ 0x24
  SDIOx->DLEN = Data->DataLength;
 8004502:	684b      	ldr	r3, [r1, #4]
 8004504:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004506:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8004508:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800450a:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800450c:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800450e:	4313      	orrs	r3, r2
                       Data->DPSM);
 8004510:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8004512:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004514:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8004516:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 800451a:	4313      	orrs	r3, r2
 800451c:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800451e:	2000      	movs	r0, #0
 8004520:	4770      	bx	lr

08004522 <SDMMC_CmdGoIdleState>:
{
 8004522:	b510      	push	{r4, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800452c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800452e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004530:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004536:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004538:	a901      	add	r1, sp, #4
 800453a:	f7ff ffca 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 800453e:	4620      	mov	r0, r4
 8004540:	f7ff ff82 	bl	8004448 <SDMMC_GetCmdError>
}
 8004544:	b006      	add	sp, #24
 8004546:	bd10      	pop	{r4, pc}

08004548 <SDMMC_GetCmdResp1>:
{
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4604      	mov	r4, r0
 800454c:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800454e:	4b50      	ldr	r3, [pc, #320]	@ (8004690 <SDMMC_GetCmdResp1+0x148>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4950      	ldr	r1, [pc, #320]	@ (8004694 <SDMMC_GetCmdResp1+0x14c>)
 8004554:	fba1 1303 	umull	r1, r3, r1, r3
 8004558:	0a5b      	lsrs	r3, r3, #9
 800455a:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800455e:	4613      	mov	r3, r2
 8004560:	3a01      	subs	r2, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d05d      	beq.n	8004622 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8004566:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004568:	f013 0f45 	tst.w	r3, #69	@ 0x45
 800456c:	d0f7      	beq.n	800455e <SDMMC_GetCmdResp1+0x16>
 800456e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004572:	d1f4      	bne.n	800455e <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004576:	f013 0f04 	tst.w	r3, #4
 800457a:	d106      	bne.n	800458a <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800457c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800457e:	f013 0f01 	tst.w	r3, #1
 8004582:	d005      	beq.n	8004590 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004584:	2001      	movs	r0, #1
 8004586:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004588:	e04d      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800458a:	2004      	movs	r0, #4
 800458c:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800458e:	e04a      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004590:	23c5      	movs	r3, #197	@ 0xc5
 8004592:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004594:	4620      	mov	r0, r4
 8004596:	f7ff ffac 	bl	80044f2 <SDIO_GetCommandResponse>
 800459a:	42a8      	cmp	r0, r5
 800459c:	d001      	beq.n	80045a2 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800459e:	2001      	movs	r0, #1
 80045a0:	e041      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80045a2:	2100      	movs	r1, #0
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff ffa7 	bl	80044f8 <SDIO_GetResponse>
 80045aa:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80045ac:	483a      	ldr	r0, [pc, #232]	@ (8004698 <SDMMC_GetCmdResp1+0x150>)
 80045ae:	4018      	ands	r0, r3
 80045b0:	b3c8      	cbz	r0, 8004626 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db38      	blt.n	8004628 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80045b6:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80045ba:	d138      	bne.n	800462e <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80045bc:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80045c0:	d137      	bne.n	8004632 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80045c2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80045c6:	d136      	bne.n	8004636 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80045c8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80045cc:	d136      	bne.n	800463c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80045ce:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80045d2:	d136      	bne.n	8004642 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80045d4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80045d8:	d136      	bne.n	8004648 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80045da:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80045de:	d136      	bne.n	800464e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80045e0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80045e4:	d136      	bne.n	8004654 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80045e6:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80045ea:	d136      	bne.n	800465a <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80045ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80045f0:	d136      	bne.n	8004660 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80045f2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80045f6:	d136      	bne.n	8004666 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80045f8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80045fc:	d136      	bne.n	800466c <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80045fe:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004602:	d136      	bne.n	8004672 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004604:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004608:	d136      	bne.n	8004678 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800460a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800460e:	d136      	bne.n	800467e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004610:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8004614:	d136      	bne.n	8004684 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004616:	f013 0f08 	tst.w	r3, #8
 800461a:	d036      	beq.n	800468a <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800461c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004620:	e001      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8004622:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004626:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004628:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800462c:	e7fb      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800462e:	2040      	movs	r0, #64	@ 0x40
 8004630:	e7f9      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004632:	2080      	movs	r0, #128	@ 0x80
 8004634:	e7f7      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004636:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800463a:	e7f4      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800463c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004640:	e7f1      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004642:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004646:	e7ee      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004648:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800464c:	e7eb      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800464e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004652:	e7e8      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004654:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004658:	e7e5      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800465a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800465e:	e7e2      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004660:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004664:	e7df      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004666:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800466a:	e7dc      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800466c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004670:	e7d9      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004672:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004676:	e7d6      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004678:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800467c:	e7d3      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800467e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004682:	e7d0      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8004684:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004688:	e7cd      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800468a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800468e:	e7ca      	b.n	8004626 <SDMMC_GetCmdResp1+0xde>
 8004690:	20000008 	.word	0x20000008
 8004694:	10624dd3 	.word	0x10624dd3
 8004698:	fdffe008 	.word	0xfdffe008

0800469c <SDMMC_CmdBlockLength>:
{
 800469c:	b530      	push	{r4, r5, lr}
 800469e:	b087      	sub	sp, #28
 80046a0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80046a2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80046a4:	2510      	movs	r5, #16
 80046a6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046a8:	2340      	movs	r3, #64	@ 0x40
 80046aa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046ac:	2300      	movs	r3, #0
 80046ae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046b4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046b6:	a901      	add	r1, sp, #4
 80046b8:	f7ff ff0b 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80046bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c0:	4629      	mov	r1, r5
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff ff40 	bl	8004548 <SDMMC_GetCmdResp1>
}
 80046c8:	b007      	add	sp, #28
 80046ca:	bd30      	pop	{r4, r5, pc}

080046cc <SDMMC_CmdReadSingleBlock>:
{
 80046cc:	b530      	push	{r4, r5, lr}
 80046ce:	b087      	sub	sp, #28
 80046d0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80046d4:	2511      	movs	r5, #17
 80046d6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046d8:	2340      	movs	r3, #64	@ 0x40
 80046da:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046dc:	2300      	movs	r3, #0
 80046de:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046e4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046e6:	a901      	add	r1, sp, #4
 80046e8:	f7ff fef3 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80046ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f0:	4629      	mov	r1, r5
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff ff28 	bl	8004548 <SDMMC_GetCmdResp1>
}
 80046f8:	b007      	add	sp, #28
 80046fa:	bd30      	pop	{r4, r5, pc}

080046fc <SDMMC_CmdReadMultiBlock>:
{
 80046fc:	b530      	push	{r4, r5, lr}
 80046fe:	b087      	sub	sp, #28
 8004700:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004702:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004704:	2512      	movs	r5, #18
 8004706:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004708:	2340      	movs	r3, #64	@ 0x40
 800470a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800470c:	2300      	movs	r3, #0
 800470e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004714:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004716:	a901      	add	r1, sp, #4
 8004718:	f7ff fedb 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800471c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004720:	4629      	mov	r1, r5
 8004722:	4620      	mov	r0, r4
 8004724:	f7ff ff10 	bl	8004548 <SDMMC_GetCmdResp1>
}
 8004728:	b007      	add	sp, #28
 800472a:	bd30      	pop	{r4, r5, pc}

0800472c <SDMMC_CmdWriteSingleBlock>:
{
 800472c:	b530      	push	{r4, r5, lr}
 800472e:	b087      	sub	sp, #28
 8004730:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004732:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004734:	2518      	movs	r5, #24
 8004736:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004738:	2340      	movs	r3, #64	@ 0x40
 800473a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800473c:	2300      	movs	r3, #0
 800473e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004744:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004746:	a901      	add	r1, sp, #4
 8004748:	f7ff fec3 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800474c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004750:	4629      	mov	r1, r5
 8004752:	4620      	mov	r0, r4
 8004754:	f7ff fef8 	bl	8004548 <SDMMC_GetCmdResp1>
}
 8004758:	b007      	add	sp, #28
 800475a:	bd30      	pop	{r4, r5, pc}

0800475c <SDMMC_CmdWriteMultiBlock>:
{
 800475c:	b530      	push	{r4, r5, lr}
 800475e:	b087      	sub	sp, #28
 8004760:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004762:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004764:	2519      	movs	r5, #25
 8004766:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004768:	2340      	movs	r3, #64	@ 0x40
 800476a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800476c:	2300      	movs	r3, #0
 800476e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004774:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004776:	a901      	add	r1, sp, #4
 8004778:	f7ff feab 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800477c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004780:	4629      	mov	r1, r5
 8004782:	4620      	mov	r0, r4
 8004784:	f7ff fee0 	bl	8004548 <SDMMC_GetCmdResp1>
}
 8004788:	b007      	add	sp, #28
 800478a:	bd30      	pop	{r4, r5, pc}

0800478c <SDMMC_CmdStopTransfer>:
{
 800478c:	b530      	push	{r4, r5, lr}
 800478e:	b087      	sub	sp, #28
 8004790:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004796:	250c      	movs	r5, #12
 8004798:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800479a:	2240      	movs	r2, #64	@ 0x40
 800479c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800479e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047a4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047a6:	a901      	add	r1, sp, #4
 80047a8:	f7ff fe93 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80047ac:	4a03      	ldr	r2, [pc, #12]	@ (80047bc <SDMMC_CmdStopTransfer+0x30>)
 80047ae:	4629      	mov	r1, r5
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7ff fec9 	bl	8004548 <SDMMC_GetCmdResp1>
}
 80047b6:	b007      	add	sp, #28
 80047b8:	bd30      	pop	{r4, r5, pc}
 80047ba:	bf00      	nop
 80047bc:	05f5e100 	.word	0x05f5e100

080047c0 <SDMMC_CmdSelDesel>:
{
 80047c0:	b530      	push	{r4, r5, lr}
 80047c2:	b087      	sub	sp, #28
 80047c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80047c6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80047c8:	2507      	movs	r5, #7
 80047ca:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047cc:	2340      	movs	r3, #64	@ 0x40
 80047ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047d0:	2300      	movs	r3, #0
 80047d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047d8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047da:	a901      	add	r1, sp, #4
 80047dc:	f7ff fe79 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80047e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e4:	4629      	mov	r1, r5
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7ff feae 	bl	8004548 <SDMMC_GetCmdResp1>
}
 80047ec:	b007      	add	sp, #28
 80047ee:	bd30      	pop	{r4, r5, pc}

080047f0 <SDMMC_CmdAppCommand>:
{
 80047f0:	b530      	push	{r4, r5, lr}
 80047f2:	b087      	sub	sp, #28
 80047f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80047f6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80047f8:	2537      	movs	r5, #55	@ 0x37
 80047fa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047fc:	2340      	movs	r3, #64	@ 0x40
 80047fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004800:	2300      	movs	r3, #0
 8004802:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004808:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800480a:	a901      	add	r1, sp, #4
 800480c:	f7ff fe61 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004814:	4629      	mov	r1, r5
 8004816:	4620      	mov	r0, r4
 8004818:	f7ff fe96 	bl	8004548 <SDMMC_GetCmdResp1>
}
 800481c:	b007      	add	sp, #28
 800481e:	bd30      	pop	{r4, r5, pc}

08004820 <SDMMC_CmdSendStatus>:
{
 8004820:	b530      	push	{r4, r5, lr}
 8004822:	b087      	sub	sp, #28
 8004824:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004826:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004828:	250d      	movs	r5, #13
 800482a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800482c:	2340      	movs	r3, #64	@ 0x40
 800482e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004830:	2300      	movs	r3, #0
 8004832:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004838:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800483a:	a901      	add	r1, sp, #4
 800483c:	f7ff fe49 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004844:	4629      	mov	r1, r5
 8004846:	4620      	mov	r0, r4
 8004848:	f7ff fe7e 	bl	8004548 <SDMMC_GetCmdResp1>
}
 800484c:	b007      	add	sp, #28
 800484e:	bd30      	pop	{r4, r5, pc}

08004850 <SDMMC_GetCmdResp2>:
{
 8004850:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004852:	4b14      	ldr	r3, [pc, #80]	@ (80048a4 <SDMMC_GetCmdResp2+0x54>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a14      	ldr	r2, [pc, #80]	@ (80048a8 <SDMMC_GetCmdResp2+0x58>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	0a5b      	lsrs	r3, r3, #9
 800485e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004862:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004866:	461a      	mov	r2, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b1ba      	cbz	r2, 800489c <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 800486c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800486e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8004872:	d0f8      	beq.n	8004866 <SDMMC_GetCmdResp2+0x16>
 8004874:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004878:	d1f5      	bne.n	8004866 <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800487a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800487c:	f013 0f04 	tst.w	r3, #4
 8004880:	d106      	bne.n	8004890 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004882:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004884:	f010 0001 	ands.w	r0, r0, #1
 8004888:	d105      	bne.n	8004896 <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800488a:	23c5      	movs	r3, #197	@ 0xc5
 800488c:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800488e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004890:	2004      	movs	r0, #4
 8004892:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004894:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004896:	2001      	movs	r0, #1
 8004898:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800489a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800489c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000008 	.word	0x20000008
 80048a8:	10624dd3 	.word	0x10624dd3

080048ac <SDMMC_CmdSendCID>:
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80048b6:	2202      	movs	r2, #2
 80048b8:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048ba:	22c0      	movs	r2, #192	@ 0xc0
 80048bc:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048c4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048c6:	a901      	add	r1, sp, #4
 80048c8:	f7ff fe03 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff ffbf 	bl	8004850 <SDMMC_GetCmdResp2>
}
 80048d2:	b006      	add	sp, #24
 80048d4:	bd10      	pop	{r4, pc}

080048d6 <SDMMC_CmdSendCSD>:
{
 80048d6:	b510      	push	{r4, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80048dc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80048de:	2309      	movs	r3, #9
 80048e0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048e2:	23c0      	movs	r3, #192	@ 0xc0
 80048e4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048e6:	2300      	movs	r3, #0
 80048e8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048ee:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048f0:	a901      	add	r1, sp, #4
 80048f2:	f7ff fdee 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff ffaa 	bl	8004850 <SDMMC_GetCmdResp2>
}
 80048fc:	b006      	add	sp, #24
 80048fe:	bd10      	pop	{r4, pc}

08004900 <SDMMC_GetCmdResp3>:
{
 8004900:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004902:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <SDMMC_GetCmdResp3+0x44>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a10      	ldr	r2, [pc, #64]	@ (8004948 <SDMMC_GetCmdResp3+0x48>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	0a5b      	lsrs	r3, r3, #9
 800490e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004912:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004916:	461a      	mov	r2, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b182      	cbz	r2, 800493e <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 800491c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800491e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8004922:	d0f8      	beq.n	8004916 <SDMMC_GetCmdResp3+0x16>
 8004924:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004928:	d1f5      	bne.n	8004916 <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800492a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800492c:	f010 0004 	ands.w	r0, r0, #4
 8004930:	d102      	bne.n	8004938 <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004932:	23c5      	movs	r3, #197	@ 0xc5
 8004934:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004936:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004938:	2004      	movs	r0, #4
 800493a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800493c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800493e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004942:	4770      	bx	lr
 8004944:	20000008 	.word	0x20000008
 8004948:	10624dd3 	.word	0x10624dd3

0800494c <SDMMC_CmdAppOperCommand>:
{
 800494c:	b510      	push	{r4, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004952:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8004956:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800495a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800495c:	2329      	movs	r3, #41	@ 0x29
 800495e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004960:	2340      	movs	r3, #64	@ 0x40
 8004962:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004964:	2300      	movs	r3, #0
 8004966:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800496c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800496e:	a901      	add	r1, sp, #4
 8004970:	f7ff fdaf 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004974:	4620      	mov	r0, r4
 8004976:	f7ff ffc3 	bl	8004900 <SDMMC_GetCmdResp3>
}
 800497a:	b006      	add	sp, #24
 800497c:	bd10      	pop	{r4, pc}
	...

08004980 <SDMMC_GetCmdResp6>:
{
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	4605      	mov	r5, r0
 8004984:	460e      	mov	r6, r1
 8004986:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004988:	4b23      	ldr	r3, [pc, #140]	@ (8004a18 <SDMMC_GetCmdResp6+0x98>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a23      	ldr	r2, [pc, #140]	@ (8004a1c <SDMMC_GetCmdResp6+0x9c>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004998:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800499c:	461a      	mov	r2, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b38a      	cbz	r2, 8004a06 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 80049a2:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049a4:	f014 0f45 	tst.w	r4, #69	@ 0x45
 80049a8:	d0f8      	beq.n	800499c <SDMMC_GetCmdResp6+0x1c>
 80049aa:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 80049ae:	d1f5      	bne.n	800499c <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049b0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80049b2:	f013 0f04 	tst.w	r3, #4
 80049b6:	d106      	bne.n	80049c6 <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80049b8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80049ba:	f013 0f01 	tst.w	r3, #1
 80049be:	d005      	beq.n	80049cc <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049c0:	2001      	movs	r0, #1
 80049c2:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049c4:	e021      	b.n	8004a0a <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049c6:	2004      	movs	r0, #4
 80049c8:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049ca:	e01e      	b.n	8004a0a <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80049cc:	4628      	mov	r0, r5
 80049ce:	f7ff fd90 	bl	80044f2 <SDIO_GetCommandResponse>
 80049d2:	42b0      	cmp	r0, r6
 80049d4:	d001      	beq.n	80049da <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049d6:	2001      	movs	r0, #1
 80049d8:	e017      	b.n	8004a0a <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80049da:	23c5      	movs	r3, #197	@ 0xc5
 80049dc:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80049de:	2100      	movs	r1, #0
 80049e0:	4628      	mov	r0, r5
 80049e2:	f7ff fd89 	bl	80044f8 <SDIO_GetResponse>
 80049e6:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80049e8:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 80049ec:	d008      	beq.n	8004a00 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80049ee:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80049f2:	d10b      	bne.n	8004a0c <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80049f4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80049f8:	d00b      	beq.n	8004a12 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80049fa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80049fe:	e004      	b.n	8004a0a <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8004a04:	e001      	b.n	8004a0a <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8004a06:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004a0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004a10:	e7fb      	b.n	8004a0a <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a12:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004a16:	e7f8      	b.n	8004a0a <SDMMC_GetCmdResp6+0x8a>
 8004a18:	20000008 	.word	0x20000008
 8004a1c:	10624dd3 	.word	0x10624dd3

08004a20 <SDMMC_CmdSetRelAdd>:
{
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	4604      	mov	r4, r0
 8004a26:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004a2c:	2603      	movs	r6, #3
 8004a2e:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a30:	2240      	movs	r2, #64	@ 0x40
 8004a32:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a34:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a3a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a3c:	a901      	add	r1, sp, #4
 8004a3e:	f7ff fd48 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a42:	462a      	mov	r2, r5
 8004a44:	4631      	mov	r1, r6
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff ff9a 	bl	8004980 <SDMMC_GetCmdResp6>
}
 8004a4c:	b006      	add	sp, #24
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}

08004a50 <SDMMC_GetCmdResp7>:
{
 8004a50:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a52:	4b16      	ldr	r3, [pc, #88]	@ (8004aac <SDMMC_GetCmdResp7+0x5c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a16      	ldr	r2, [pc, #88]	@ (8004ab0 <SDMMC_GetCmdResp7+0x60>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	0a5b      	lsrs	r3, r3, #9
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004a66:	461a      	mov	r2, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b1e2      	cbz	r2, 8004aa6 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8004a6c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a6e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8004a72:	d0f8      	beq.n	8004a66 <SDMMC_GetCmdResp7+0x16>
 8004a74:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004a78:	d1f5      	bne.n	8004a66 <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a7a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004a7c:	f013 0f04 	tst.w	r3, #4
 8004a80:	d10b      	bne.n	8004a9a <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a82:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004a84:	f013 0301 	ands.w	r3, r3, #1
 8004a88:	d10a      	bne.n	8004aa0 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004a8a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004a8c:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8004a90:	d00b      	beq.n	8004aaa <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004a92:	2240      	movs	r2, #64	@ 0x40
 8004a94:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004a96:	4618      	mov	r0, r3
 8004a98:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a9a:	2004      	movs	r0, #4
 8004a9c:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a9e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004aa4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004aa6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004aaa:	4770      	bx	lr
 8004aac:	20000008 	.word	0x20000008
 8004ab0:	10624dd3 	.word	0x10624dd3

08004ab4 <SDMMC_CmdOperCond>:
{
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004aba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004abe:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ac4:	2340      	movs	r3, #64	@ 0x40
 8004ac6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004acc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ad0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ad2:	a901      	add	r1, sp, #4
 8004ad4:	f7ff fcfd 	bl	80044d2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7ff ffb9 	bl	8004a50 <SDMMC_GetCmdResp7>
}
 8004ade:	b006      	add	sp, #24
 8004ae0:	bd10      	pop	{r4, pc}

08004ae2 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	4770      	bx	lr

08004ae6 <_kill>:

int _kill(int pid, int sig)
{
 8004ae6:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ae8:	f001 f874 	bl	8005bd4 <__errno>
 8004aec:	2316      	movs	r3, #22
 8004aee:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	bd08      	pop	{r3, pc}

08004af6 <_exit>:

void _exit (int status)
{
 8004af6:	b508      	push	{r3, lr}
  _kill(status, -1);
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295
 8004afc:	f7ff fff3 	bl	8004ae6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b00:	e7fe      	b.n	8004b00 <_exit+0xa>

08004b02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b02:	b570      	push	{r4, r5, r6, lr}
 8004b04:	460c      	mov	r4, r1
 8004b06:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b08:	2500      	movs	r5, #0
 8004b0a:	e006      	b.n	8004b1a <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8004b0c:	f3af 8000 	nop.w
 8004b10:	4621      	mov	r1, r4
 8004b12:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b16:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8004b18:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b1a:	42b5      	cmp	r5, r6
 8004b1c:	dbf6      	blt.n	8004b0c <_read+0xa>
  }

  return len;
}
 8004b1e:	4630      	mov	r0, r6
 8004b20:	bd70      	pop	{r4, r5, r6, pc}

08004b22 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	4770      	bx	lr

08004b28 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b2c:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004b2e:	2000      	movs	r0, #0
 8004b30:	4770      	bx	lr

08004b32 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004b32:	2001      	movs	r0, #1
 8004b34:	4770      	bx	lr

08004b36 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004b36:	2000      	movs	r0, #0
 8004b38:	4770      	bx	lr
	...

08004b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b40:	4a0c      	ldr	r2, [pc, #48]	@ (8004b74 <_sbrk+0x38>)
 8004b42:	490d      	ldr	r1, [pc, #52]	@ (8004b78 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b44:	480d      	ldr	r0, [pc, #52]	@ (8004b7c <_sbrk+0x40>)
 8004b46:	6800      	ldr	r0, [r0, #0]
 8004b48:	b140      	cbz	r0, 8004b5c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b4a:	480c      	ldr	r0, [pc, #48]	@ (8004b7c <_sbrk+0x40>)
 8004b4c:	6800      	ldr	r0, [r0, #0]
 8004b4e:	4403      	add	r3, r0
 8004b50:	1a52      	subs	r2, r2, r1
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d806      	bhi.n	8004b64 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004b56:	4a09      	ldr	r2, [pc, #36]	@ (8004b7c <_sbrk+0x40>)
 8004b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004b5a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004b5c:	4807      	ldr	r0, [pc, #28]	@ (8004b7c <_sbrk+0x40>)
 8004b5e:	4c08      	ldr	r4, [pc, #32]	@ (8004b80 <_sbrk+0x44>)
 8004b60:	6004      	str	r4, [r0, #0]
 8004b62:	e7f2      	b.n	8004b4a <_sbrk+0xe>
    errno = ENOMEM;
 8004b64:	f001 f836 	bl	8005bd4 <__errno>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	e7f3      	b.n	8004b5a <_sbrk+0x1e>
 8004b72:	bf00      	nop
 8004b74:	20020000 	.word	0x20020000
 8004b78:	00000400 	.word	0x00000400
 8004b7c:	200003b4 	.word	0x200003b4
 8004b80:	20000508 	.word	0x20000508

08004b84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b84:	4a03      	ldr	r2, [pc, #12]	@ (8004b94 <SystemInit+0x10>)
 8004b86:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004b8a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004b9c:	f7ff fff2 	bl	8004b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ba0:	480c      	ldr	r0, [pc, #48]	@ (8004bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ba2:	490d      	ldr	r1, [pc, #52]	@ (8004bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ba8:	e002      	b.n	8004bb0 <LoopCopyDataInit>

08004baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bae:	3304      	adds	r3, #4

08004bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bb4:	d3f9      	bcc.n	8004baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bbc:	e001      	b.n	8004bc2 <LoopFillZerobss>

08004bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bc0:	3204      	adds	r2, #4

08004bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bc4:	d3fb      	bcc.n	8004bbe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004bc6:	f001 f80b 	bl	8005be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bca:	f7fc fd57 	bl	800167c <main>
  bx  lr    
 8004bce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bd8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004bdc:	08009abc 	.word	0x08009abc
  ldr r2, =_sbss
 8004be0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004be4:	20000504 	.word	0x20000504

08004be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004be8:	e7fe      	b.n	8004be8 <ADC_IRQHandler>

08004bea <__cvt>:
 8004bea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bee:	ec57 6b10 	vmov	r6, r7, d0
 8004bf2:	2f00      	cmp	r7, #0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	bfbb      	ittet	lt
 8004bfc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c00:	461f      	movlt	r7, r3
 8004c02:	2300      	movge	r3, #0
 8004c04:	232d      	movlt	r3, #45	@ 0x2d
 8004c06:	700b      	strb	r3, [r1, #0]
 8004c08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c0a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c0e:	4691      	mov	r9, r2
 8004c10:	f023 0820 	bic.w	r8, r3, #32
 8004c14:	bfbc      	itt	lt
 8004c16:	4632      	movlt	r2, r6
 8004c18:	4616      	movlt	r6, r2
 8004c1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c1e:	d005      	beq.n	8004c2c <__cvt+0x42>
 8004c20:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c24:	d100      	bne.n	8004c28 <__cvt+0x3e>
 8004c26:	3401      	adds	r4, #1
 8004c28:	2102      	movs	r1, #2
 8004c2a:	e000      	b.n	8004c2e <__cvt+0x44>
 8004c2c:	2103      	movs	r1, #3
 8004c2e:	ab03      	add	r3, sp, #12
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	ab02      	add	r3, sp, #8
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	ec47 6b10 	vmov	d0, r6, r7
 8004c3a:	4653      	mov	r3, sl
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	f001 f887 	bl	8005d50 <_dtoa_r>
 8004c42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c46:	4605      	mov	r5, r0
 8004c48:	d119      	bne.n	8004c7e <__cvt+0x94>
 8004c4a:	f019 0f01 	tst.w	r9, #1
 8004c4e:	d00e      	beq.n	8004c6e <__cvt+0x84>
 8004c50:	eb00 0904 	add.w	r9, r0, r4
 8004c54:	2200      	movs	r2, #0
 8004c56:	2300      	movs	r3, #0
 8004c58:	4630      	mov	r0, r6
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	f7fb ff14 	bl	8000a88 <__aeabi_dcmpeq>
 8004c60:	b108      	cbz	r0, 8004c66 <__cvt+0x7c>
 8004c62:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c66:	2230      	movs	r2, #48	@ 0x30
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	454b      	cmp	r3, r9
 8004c6c:	d31e      	bcc.n	8004cac <__cvt+0xc2>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c72:	1b5b      	subs	r3, r3, r5
 8004c74:	4628      	mov	r0, r5
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	b004      	add	sp, #16
 8004c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c82:	eb00 0904 	add.w	r9, r0, r4
 8004c86:	d1e5      	bne.n	8004c54 <__cvt+0x6a>
 8004c88:	7803      	ldrb	r3, [r0, #0]
 8004c8a:	2b30      	cmp	r3, #48	@ 0x30
 8004c8c:	d10a      	bne.n	8004ca4 <__cvt+0xba>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2300      	movs	r3, #0
 8004c92:	4630      	mov	r0, r6
 8004c94:	4639      	mov	r1, r7
 8004c96:	f7fb fef7 	bl	8000a88 <__aeabi_dcmpeq>
 8004c9a:	b918      	cbnz	r0, 8004ca4 <__cvt+0xba>
 8004c9c:	f1c4 0401 	rsb	r4, r4, #1
 8004ca0:	f8ca 4000 	str.w	r4, [sl]
 8004ca4:	f8da 3000 	ldr.w	r3, [sl]
 8004ca8:	4499      	add	r9, r3
 8004caa:	e7d3      	b.n	8004c54 <__cvt+0x6a>
 8004cac:	1c59      	adds	r1, r3, #1
 8004cae:	9103      	str	r1, [sp, #12]
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e7d9      	b.n	8004c68 <__cvt+0x7e>

08004cb4 <__exponent>:
 8004cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	bfba      	itte	lt
 8004cba:	4249      	neglt	r1, r1
 8004cbc:	232d      	movlt	r3, #45	@ 0x2d
 8004cbe:	232b      	movge	r3, #43	@ 0x2b
 8004cc0:	2909      	cmp	r1, #9
 8004cc2:	7002      	strb	r2, [r0, #0]
 8004cc4:	7043      	strb	r3, [r0, #1]
 8004cc6:	dd29      	ble.n	8004d1c <__exponent+0x68>
 8004cc8:	f10d 0307 	add.w	r3, sp, #7
 8004ccc:	461d      	mov	r5, r3
 8004cce:	270a      	movs	r7, #10
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cd6:	fb07 1416 	mls	r4, r7, r6, r1
 8004cda:	3430      	adds	r4, #48	@ 0x30
 8004cdc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	2c63      	cmp	r4, #99	@ 0x63
 8004ce4:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ce8:	4631      	mov	r1, r6
 8004cea:	dcf1      	bgt.n	8004cd0 <__exponent+0x1c>
 8004cec:	3130      	adds	r1, #48	@ 0x30
 8004cee:	1e94      	subs	r4, r2, #2
 8004cf0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004cf4:	1c41      	adds	r1, r0, #1
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	d30a      	bcc.n	8004d12 <__exponent+0x5e>
 8004cfc:	f10d 0309 	add.w	r3, sp, #9
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	42ac      	cmp	r4, r5
 8004d04:	bf88      	it	hi
 8004d06:	2300      	movhi	r3, #0
 8004d08:	3302      	adds	r3, #2
 8004d0a:	4403      	add	r3, r0
 8004d0c:	1a18      	subs	r0, r3, r0
 8004d0e:	b003      	add	sp, #12
 8004d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d12:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d16:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d1a:	e7ed      	b.n	8004cf8 <__exponent+0x44>
 8004d1c:	2330      	movs	r3, #48	@ 0x30
 8004d1e:	3130      	adds	r1, #48	@ 0x30
 8004d20:	7083      	strb	r3, [r0, #2]
 8004d22:	70c1      	strb	r1, [r0, #3]
 8004d24:	1d03      	adds	r3, r0, #4
 8004d26:	e7f1      	b.n	8004d0c <__exponent+0x58>

08004d28 <_printf_float>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	b08d      	sub	sp, #52	@ 0x34
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d34:	4616      	mov	r6, r2
 8004d36:	461f      	mov	r7, r3
 8004d38:	4605      	mov	r5, r0
 8004d3a:	f000 ff01 	bl	8005b40 <_localeconv_r>
 8004d3e:	6803      	ldr	r3, [r0, #0]
 8004d40:	9304      	str	r3, [sp, #16]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fa74 	bl	8000230 <strlen>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d50:	9005      	str	r0, [sp, #20]
 8004d52:	3307      	adds	r3, #7
 8004d54:	f023 0307 	bic.w	r3, r3, #7
 8004d58:	f103 0208 	add.w	r2, r3, #8
 8004d5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d60:	f8d4 b000 	ldr.w	fp, [r4]
 8004d64:	f8c8 2000 	str.w	r2, [r8]
 8004d68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d70:	9307      	str	r3, [sp, #28]
 8004d72:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d7e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ff0 <_printf_float+0x2c8>)
 8004d80:	f04f 32ff 	mov.w	r2, #4294967295
 8004d84:	f7fb feb2 	bl	8000aec <__aeabi_dcmpun>
 8004d88:	bb70      	cbnz	r0, 8004de8 <_printf_float+0xc0>
 8004d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d8e:	4b98      	ldr	r3, [pc, #608]	@ (8004ff0 <_printf_float+0x2c8>)
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295
 8004d94:	f7fb fe8c 	bl	8000ab0 <__aeabi_dcmple>
 8004d98:	bb30      	cbnz	r0, 8004de8 <_printf_float+0xc0>
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4640      	mov	r0, r8
 8004da0:	4649      	mov	r1, r9
 8004da2:	f7fb fe7b 	bl	8000a9c <__aeabi_dcmplt>
 8004da6:	b110      	cbz	r0, 8004dae <_printf_float+0x86>
 8004da8:	232d      	movs	r3, #45	@ 0x2d
 8004daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dae:	4a91      	ldr	r2, [pc, #580]	@ (8004ff4 <_printf_float+0x2cc>)
 8004db0:	4b91      	ldr	r3, [pc, #580]	@ (8004ff8 <_printf_float+0x2d0>)
 8004db2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004db6:	bf8c      	ite	hi
 8004db8:	4690      	movhi	r8, r2
 8004dba:	4698      	movls	r8, r3
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	6123      	str	r3, [r4, #16]
 8004dc0:	f02b 0304 	bic.w	r3, fp, #4
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	f04f 0900 	mov.w	r9, #0
 8004dca:	9700      	str	r7, [sp, #0]
 8004dcc:	4633      	mov	r3, r6
 8004dce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 f9d2 	bl	800517c <_printf_common>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	f040 808d 	bne.w	8004ef8 <_printf_float+0x1d0>
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	b00d      	add	sp, #52	@ 0x34
 8004de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de8:	4642      	mov	r2, r8
 8004dea:	464b      	mov	r3, r9
 8004dec:	4640      	mov	r0, r8
 8004dee:	4649      	mov	r1, r9
 8004df0:	f7fb fe7c 	bl	8000aec <__aeabi_dcmpun>
 8004df4:	b140      	cbz	r0, 8004e08 <_printf_float+0xe0>
 8004df6:	464b      	mov	r3, r9
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bfbc      	itt	lt
 8004dfc:	232d      	movlt	r3, #45	@ 0x2d
 8004dfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e02:	4a7e      	ldr	r2, [pc, #504]	@ (8004ffc <_printf_float+0x2d4>)
 8004e04:	4b7e      	ldr	r3, [pc, #504]	@ (8005000 <_printf_float+0x2d8>)
 8004e06:	e7d4      	b.n	8004db2 <_printf_float+0x8a>
 8004e08:	6863      	ldr	r3, [r4, #4]
 8004e0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e0e:	9206      	str	r2, [sp, #24]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	d13b      	bne.n	8004e8c <_printf_float+0x164>
 8004e14:	2306      	movs	r3, #6
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	6022      	str	r2, [r4, #0]
 8004e20:	9303      	str	r3, [sp, #12]
 8004e22:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e28:	ab09      	add	r3, sp, #36	@ 0x24
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	6861      	ldr	r1, [r4, #4]
 8004e2e:	ec49 8b10 	vmov	d0, r8, r9
 8004e32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e36:	4628      	mov	r0, r5
 8004e38:	f7ff fed7 	bl	8004bea <__cvt>
 8004e3c:	9b06      	ldr	r3, [sp, #24]
 8004e3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e40:	2b47      	cmp	r3, #71	@ 0x47
 8004e42:	4680      	mov	r8, r0
 8004e44:	d129      	bne.n	8004e9a <_printf_float+0x172>
 8004e46:	1cc8      	adds	r0, r1, #3
 8004e48:	db02      	blt.n	8004e50 <_printf_float+0x128>
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	dd41      	ble.n	8004ed4 <_printf_float+0x1ac>
 8004e50:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e54:	fa5f fa8a 	uxtb.w	sl, sl
 8004e58:	3901      	subs	r1, #1
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e60:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e62:	f7ff ff27 	bl	8004cb4 <__exponent>
 8004e66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e68:	1813      	adds	r3, r2, r0
 8004e6a:	2a01      	cmp	r2, #1
 8004e6c:	4681      	mov	r9, r0
 8004e6e:	6123      	str	r3, [r4, #16]
 8004e70:	dc02      	bgt.n	8004e78 <_printf_float+0x150>
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	07d2      	lsls	r2, r2, #31
 8004e76:	d501      	bpl.n	8004e7c <_printf_float+0x154>
 8004e78:	3301      	adds	r3, #1
 8004e7a:	6123      	str	r3, [r4, #16]
 8004e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0a2      	beq.n	8004dca <_printf_float+0xa2>
 8004e84:	232d      	movs	r3, #45	@ 0x2d
 8004e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e8a:	e79e      	b.n	8004dca <_printf_float+0xa2>
 8004e8c:	9a06      	ldr	r2, [sp, #24]
 8004e8e:	2a47      	cmp	r2, #71	@ 0x47
 8004e90:	d1c2      	bne.n	8004e18 <_printf_float+0xf0>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1c0      	bne.n	8004e18 <_printf_float+0xf0>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e7bd      	b.n	8004e16 <_printf_float+0xee>
 8004e9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e9e:	d9db      	bls.n	8004e58 <_printf_float+0x130>
 8004ea0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ea4:	d118      	bne.n	8004ed8 <_printf_float+0x1b0>
 8004ea6:	2900      	cmp	r1, #0
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	dd0b      	ble.n	8004ec4 <_printf_float+0x19c>
 8004eac:	6121      	str	r1, [r4, #16]
 8004eae:	b913      	cbnz	r3, 8004eb6 <_printf_float+0x18e>
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	07d0      	lsls	r0, r2, #31
 8004eb4:	d502      	bpl.n	8004ebc <_printf_float+0x194>
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	440b      	add	r3, r1
 8004eba:	6123      	str	r3, [r4, #16]
 8004ebc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ebe:	f04f 0900 	mov.w	r9, #0
 8004ec2:	e7db      	b.n	8004e7c <_printf_float+0x154>
 8004ec4:	b913      	cbnz	r3, 8004ecc <_printf_float+0x1a4>
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	07d2      	lsls	r2, r2, #31
 8004eca:	d501      	bpl.n	8004ed0 <_printf_float+0x1a8>
 8004ecc:	3302      	adds	r3, #2
 8004ece:	e7f4      	b.n	8004eba <_printf_float+0x192>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e7f2      	b.n	8004eba <_printf_float+0x192>
 8004ed4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eda:	4299      	cmp	r1, r3
 8004edc:	db05      	blt.n	8004eea <_printf_float+0x1c2>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	6121      	str	r1, [r4, #16]
 8004ee2:	07d8      	lsls	r0, r3, #31
 8004ee4:	d5ea      	bpl.n	8004ebc <_printf_float+0x194>
 8004ee6:	1c4b      	adds	r3, r1, #1
 8004ee8:	e7e7      	b.n	8004eba <_printf_float+0x192>
 8004eea:	2900      	cmp	r1, #0
 8004eec:	bfd4      	ite	le
 8004eee:	f1c1 0202 	rsble	r2, r1, #2
 8004ef2:	2201      	movgt	r2, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	e7e0      	b.n	8004eba <_printf_float+0x192>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	055a      	lsls	r2, r3, #21
 8004efc:	d407      	bmi.n	8004f0e <_printf_float+0x1e6>
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	4642      	mov	r2, r8
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d12b      	bne.n	8004f64 <_printf_float+0x23c>
 8004f0c:	e767      	b.n	8004dde <_printf_float+0xb6>
 8004f0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f12:	f240 80dd 	bls.w	80050d0 <_printf_float+0x3a8>
 8004f16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f7fb fdb3 	bl	8000a88 <__aeabi_dcmpeq>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d033      	beq.n	8004f8e <_printf_float+0x266>
 8004f26:	4a37      	ldr	r2, [pc, #220]	@ (8005004 <_printf_float+0x2dc>)
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	f43f af54 	beq.w	8004dde <_printf_float+0xb6>
 8004f36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f3a:	4543      	cmp	r3, r8
 8004f3c:	db02      	blt.n	8004f44 <_printf_float+0x21c>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	07d8      	lsls	r0, r3, #31
 8004f42:	d50f      	bpl.n	8004f64 <_printf_float+0x23c>
 8004f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f af45 	beq.w	8004dde <_printf_float+0xb6>
 8004f54:	f04f 0900 	mov.w	r9, #0
 8004f58:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f5c:	f104 0a1a 	add.w	sl, r4, #26
 8004f60:	45c8      	cmp	r8, r9
 8004f62:	dc09      	bgt.n	8004f78 <_printf_float+0x250>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	079b      	lsls	r3, r3, #30
 8004f68:	f100 8103 	bmi.w	8005172 <_printf_float+0x44a>
 8004f6c:	68e0      	ldr	r0, [r4, #12]
 8004f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f70:	4298      	cmp	r0, r3
 8004f72:	bfb8      	it	lt
 8004f74:	4618      	movlt	r0, r3
 8004f76:	e734      	b.n	8004de2 <_printf_float+0xba>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4652      	mov	r2, sl
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	4628      	mov	r0, r5
 8004f80:	47b8      	blx	r7
 8004f82:	3001      	adds	r0, #1
 8004f84:	f43f af2b 	beq.w	8004dde <_printf_float+0xb6>
 8004f88:	f109 0901 	add.w	r9, r9, #1
 8004f8c:	e7e8      	b.n	8004f60 <_printf_float+0x238>
 8004f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dc39      	bgt.n	8005008 <_printf_float+0x2e0>
 8004f94:	4a1b      	ldr	r2, [pc, #108]	@ (8005004 <_printf_float+0x2dc>)
 8004f96:	2301      	movs	r3, #1
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f43f af1d 	beq.w	8004dde <_printf_float+0xb6>
 8004fa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fa8:	ea59 0303 	orrs.w	r3, r9, r3
 8004fac:	d102      	bne.n	8004fb4 <_printf_float+0x28c>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	07d9      	lsls	r1, r3, #31
 8004fb2:	d5d7      	bpl.n	8004f64 <_printf_float+0x23c>
 8004fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f af0d 	beq.w	8004dde <_printf_float+0xb6>
 8004fc4:	f04f 0a00 	mov.w	sl, #0
 8004fc8:	f104 0b1a 	add.w	fp, r4, #26
 8004fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fce:	425b      	negs	r3, r3
 8004fd0:	4553      	cmp	r3, sl
 8004fd2:	dc01      	bgt.n	8004fd8 <_printf_float+0x2b0>
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	e793      	b.n	8004f00 <_printf_float+0x1d8>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	465a      	mov	r2, fp
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f43f aefb 	beq.w	8004dde <_printf_float+0xb6>
 8004fe8:	f10a 0a01 	add.w	sl, sl, #1
 8004fec:	e7ee      	b.n	8004fcc <_printf_float+0x2a4>
 8004fee:	bf00      	nop
 8004ff0:	7fefffff 	.word	0x7fefffff
 8004ff4:	08009684 	.word	0x08009684
 8004ff8:	08009680 	.word	0x08009680
 8004ffc:	0800968c 	.word	0x0800968c
 8005000:	08009688 	.word	0x08009688
 8005004:	08009690 	.word	0x08009690
 8005008:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800500a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800500e:	4553      	cmp	r3, sl
 8005010:	bfa8      	it	ge
 8005012:	4653      	movge	r3, sl
 8005014:	2b00      	cmp	r3, #0
 8005016:	4699      	mov	r9, r3
 8005018:	dc36      	bgt.n	8005088 <_printf_float+0x360>
 800501a:	f04f 0b00 	mov.w	fp, #0
 800501e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005022:	f104 021a 	add.w	r2, r4, #26
 8005026:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005028:	9306      	str	r3, [sp, #24]
 800502a:	eba3 0309 	sub.w	r3, r3, r9
 800502e:	455b      	cmp	r3, fp
 8005030:	dc31      	bgt.n	8005096 <_printf_float+0x36e>
 8005032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005034:	459a      	cmp	sl, r3
 8005036:	dc3a      	bgt.n	80050ae <_printf_float+0x386>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	07da      	lsls	r2, r3, #31
 800503c:	d437      	bmi.n	80050ae <_printf_float+0x386>
 800503e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005040:	ebaa 0903 	sub.w	r9, sl, r3
 8005044:	9b06      	ldr	r3, [sp, #24]
 8005046:	ebaa 0303 	sub.w	r3, sl, r3
 800504a:	4599      	cmp	r9, r3
 800504c:	bfa8      	it	ge
 800504e:	4699      	movge	r9, r3
 8005050:	f1b9 0f00 	cmp.w	r9, #0
 8005054:	dc33      	bgt.n	80050be <_printf_float+0x396>
 8005056:	f04f 0800 	mov.w	r8, #0
 800505a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800505e:	f104 0b1a 	add.w	fp, r4, #26
 8005062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005064:	ebaa 0303 	sub.w	r3, sl, r3
 8005068:	eba3 0309 	sub.w	r3, r3, r9
 800506c:	4543      	cmp	r3, r8
 800506e:	f77f af79 	ble.w	8004f64 <_printf_float+0x23c>
 8005072:	2301      	movs	r3, #1
 8005074:	465a      	mov	r2, fp
 8005076:	4631      	mov	r1, r6
 8005078:	4628      	mov	r0, r5
 800507a:	47b8      	blx	r7
 800507c:	3001      	adds	r0, #1
 800507e:	f43f aeae 	beq.w	8004dde <_printf_float+0xb6>
 8005082:	f108 0801 	add.w	r8, r8, #1
 8005086:	e7ec      	b.n	8005062 <_printf_float+0x33a>
 8005088:	4642      	mov	r2, r8
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	d1c2      	bne.n	800501a <_printf_float+0x2f2>
 8005094:	e6a3      	b.n	8004dde <_printf_float+0xb6>
 8005096:	2301      	movs	r3, #1
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	9206      	str	r2, [sp, #24]
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae9c 	beq.w	8004dde <_printf_float+0xb6>
 80050a6:	9a06      	ldr	r2, [sp, #24]
 80050a8:	f10b 0b01 	add.w	fp, fp, #1
 80050ac:	e7bb      	b.n	8005026 <_printf_float+0x2fe>
 80050ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	d1c0      	bne.n	800503e <_printf_float+0x316>
 80050bc:	e68f      	b.n	8004dde <_printf_float+0xb6>
 80050be:	9a06      	ldr	r2, [sp, #24]
 80050c0:	464b      	mov	r3, r9
 80050c2:	4442      	add	r2, r8
 80050c4:	4631      	mov	r1, r6
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	d1c3      	bne.n	8005056 <_printf_float+0x32e>
 80050ce:	e686      	b.n	8004dde <_printf_float+0xb6>
 80050d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050d4:	f1ba 0f01 	cmp.w	sl, #1
 80050d8:	dc01      	bgt.n	80050de <_printf_float+0x3b6>
 80050da:	07db      	lsls	r3, r3, #31
 80050dc:	d536      	bpl.n	800514c <_printf_float+0x424>
 80050de:	2301      	movs	r3, #1
 80050e0:	4642      	mov	r2, r8
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b8      	blx	r7
 80050e8:	3001      	adds	r0, #1
 80050ea:	f43f ae78 	beq.w	8004dde <_printf_float+0xb6>
 80050ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b8      	blx	r7
 80050f8:	3001      	adds	r0, #1
 80050fa:	f43f ae70 	beq.w	8004dde <_printf_float+0xb6>
 80050fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005102:	2200      	movs	r2, #0
 8005104:	2300      	movs	r3, #0
 8005106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800510a:	f7fb fcbd 	bl	8000a88 <__aeabi_dcmpeq>
 800510e:	b9c0      	cbnz	r0, 8005142 <_printf_float+0x41a>
 8005110:	4653      	mov	r3, sl
 8005112:	f108 0201 	add.w	r2, r8, #1
 8005116:	4631      	mov	r1, r6
 8005118:	4628      	mov	r0, r5
 800511a:	47b8      	blx	r7
 800511c:	3001      	adds	r0, #1
 800511e:	d10c      	bne.n	800513a <_printf_float+0x412>
 8005120:	e65d      	b.n	8004dde <_printf_float+0xb6>
 8005122:	2301      	movs	r3, #1
 8005124:	465a      	mov	r2, fp
 8005126:	4631      	mov	r1, r6
 8005128:	4628      	mov	r0, r5
 800512a:	47b8      	blx	r7
 800512c:	3001      	adds	r0, #1
 800512e:	f43f ae56 	beq.w	8004dde <_printf_float+0xb6>
 8005132:	f108 0801 	add.w	r8, r8, #1
 8005136:	45d0      	cmp	r8, sl
 8005138:	dbf3      	blt.n	8005122 <_printf_float+0x3fa>
 800513a:	464b      	mov	r3, r9
 800513c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005140:	e6df      	b.n	8004f02 <_printf_float+0x1da>
 8005142:	f04f 0800 	mov.w	r8, #0
 8005146:	f104 0b1a 	add.w	fp, r4, #26
 800514a:	e7f4      	b.n	8005136 <_printf_float+0x40e>
 800514c:	2301      	movs	r3, #1
 800514e:	4642      	mov	r2, r8
 8005150:	e7e1      	b.n	8005116 <_printf_float+0x3ee>
 8005152:	2301      	movs	r3, #1
 8005154:	464a      	mov	r2, r9
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f ae3e 	beq.w	8004dde <_printf_float+0xb6>
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800516a:	1a5b      	subs	r3, r3, r1
 800516c:	4543      	cmp	r3, r8
 800516e:	dcf0      	bgt.n	8005152 <_printf_float+0x42a>
 8005170:	e6fc      	b.n	8004f6c <_printf_float+0x244>
 8005172:	f04f 0800 	mov.w	r8, #0
 8005176:	f104 0919 	add.w	r9, r4, #25
 800517a:	e7f4      	b.n	8005166 <_printf_float+0x43e>

0800517c <_printf_common>:
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	4616      	mov	r6, r2
 8005182:	4698      	mov	r8, r3
 8005184:	688a      	ldr	r2, [r1, #8]
 8005186:	690b      	ldr	r3, [r1, #16]
 8005188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800518c:	4293      	cmp	r3, r2
 800518e:	bfb8      	it	lt
 8005190:	4613      	movlt	r3, r2
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005198:	4607      	mov	r7, r0
 800519a:	460c      	mov	r4, r1
 800519c:	b10a      	cbz	r2, 80051a2 <_printf_common+0x26>
 800519e:	3301      	adds	r3, #1
 80051a0:	6033      	str	r3, [r6, #0]
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	0699      	lsls	r1, r3, #26
 80051a6:	bf42      	ittt	mi
 80051a8:	6833      	ldrmi	r3, [r6, #0]
 80051aa:	3302      	addmi	r3, #2
 80051ac:	6033      	strmi	r3, [r6, #0]
 80051ae:	6825      	ldr	r5, [r4, #0]
 80051b0:	f015 0506 	ands.w	r5, r5, #6
 80051b4:	d106      	bne.n	80051c4 <_printf_common+0x48>
 80051b6:	f104 0a19 	add.w	sl, r4, #25
 80051ba:	68e3      	ldr	r3, [r4, #12]
 80051bc:	6832      	ldr	r2, [r6, #0]
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	42ab      	cmp	r3, r5
 80051c2:	dc26      	bgt.n	8005212 <_printf_common+0x96>
 80051c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	3b00      	subs	r3, #0
 80051cc:	bf18      	it	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	0692      	lsls	r2, r2, #26
 80051d2:	d42b      	bmi.n	800522c <_printf_common+0xb0>
 80051d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051d8:	4641      	mov	r1, r8
 80051da:	4638      	mov	r0, r7
 80051dc:	47c8      	blx	r9
 80051de:	3001      	adds	r0, #1
 80051e0:	d01e      	beq.n	8005220 <_printf_common+0xa4>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	f003 0306 	and.w	r3, r3, #6
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	bf02      	ittt	eq
 80051ee:	68e5      	ldreq	r5, [r4, #12]
 80051f0:	6833      	ldreq	r3, [r6, #0]
 80051f2:	1aed      	subeq	r5, r5, r3
 80051f4:	68a3      	ldr	r3, [r4, #8]
 80051f6:	bf0c      	ite	eq
 80051f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051fc:	2500      	movne	r5, #0
 80051fe:	4293      	cmp	r3, r2
 8005200:	bfc4      	itt	gt
 8005202:	1a9b      	subgt	r3, r3, r2
 8005204:	18ed      	addgt	r5, r5, r3
 8005206:	2600      	movs	r6, #0
 8005208:	341a      	adds	r4, #26
 800520a:	42b5      	cmp	r5, r6
 800520c:	d11a      	bne.n	8005244 <_printf_common+0xc8>
 800520e:	2000      	movs	r0, #0
 8005210:	e008      	b.n	8005224 <_printf_common+0xa8>
 8005212:	2301      	movs	r3, #1
 8005214:	4652      	mov	r2, sl
 8005216:	4641      	mov	r1, r8
 8005218:	4638      	mov	r0, r7
 800521a:	47c8      	blx	r9
 800521c:	3001      	adds	r0, #1
 800521e:	d103      	bne.n	8005228 <_printf_common+0xac>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	3501      	adds	r5, #1
 800522a:	e7c6      	b.n	80051ba <_printf_common+0x3e>
 800522c:	18e1      	adds	r1, r4, r3
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	2030      	movs	r0, #48	@ 0x30
 8005232:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005236:	4422      	add	r2, r4
 8005238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800523c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005240:	3302      	adds	r3, #2
 8005242:	e7c7      	b.n	80051d4 <_printf_common+0x58>
 8005244:	2301      	movs	r3, #1
 8005246:	4622      	mov	r2, r4
 8005248:	4641      	mov	r1, r8
 800524a:	4638      	mov	r0, r7
 800524c:	47c8      	blx	r9
 800524e:	3001      	adds	r0, #1
 8005250:	d0e6      	beq.n	8005220 <_printf_common+0xa4>
 8005252:	3601      	adds	r6, #1
 8005254:	e7d9      	b.n	800520a <_printf_common+0x8e>
	...

08005258 <_printf_i>:
 8005258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	7e0f      	ldrb	r7, [r1, #24]
 800525e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005260:	2f78      	cmp	r7, #120	@ 0x78
 8005262:	4691      	mov	r9, r2
 8005264:	4680      	mov	r8, r0
 8005266:	460c      	mov	r4, r1
 8005268:	469a      	mov	sl, r3
 800526a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800526e:	d807      	bhi.n	8005280 <_printf_i+0x28>
 8005270:	2f62      	cmp	r7, #98	@ 0x62
 8005272:	d80a      	bhi.n	800528a <_printf_i+0x32>
 8005274:	2f00      	cmp	r7, #0
 8005276:	f000 80d1 	beq.w	800541c <_printf_i+0x1c4>
 800527a:	2f58      	cmp	r7, #88	@ 0x58
 800527c:	f000 80b8 	beq.w	80053f0 <_printf_i+0x198>
 8005280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005284:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005288:	e03a      	b.n	8005300 <_printf_i+0xa8>
 800528a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800528e:	2b15      	cmp	r3, #21
 8005290:	d8f6      	bhi.n	8005280 <_printf_i+0x28>
 8005292:	a101      	add	r1, pc, #4	@ (adr r1, 8005298 <_printf_i+0x40>)
 8005294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005298:	080052f1 	.word	0x080052f1
 800529c:	08005305 	.word	0x08005305
 80052a0:	08005281 	.word	0x08005281
 80052a4:	08005281 	.word	0x08005281
 80052a8:	08005281 	.word	0x08005281
 80052ac:	08005281 	.word	0x08005281
 80052b0:	08005305 	.word	0x08005305
 80052b4:	08005281 	.word	0x08005281
 80052b8:	08005281 	.word	0x08005281
 80052bc:	08005281 	.word	0x08005281
 80052c0:	08005281 	.word	0x08005281
 80052c4:	08005403 	.word	0x08005403
 80052c8:	0800532f 	.word	0x0800532f
 80052cc:	080053bd 	.word	0x080053bd
 80052d0:	08005281 	.word	0x08005281
 80052d4:	08005281 	.word	0x08005281
 80052d8:	08005425 	.word	0x08005425
 80052dc:	08005281 	.word	0x08005281
 80052e0:	0800532f 	.word	0x0800532f
 80052e4:	08005281 	.word	0x08005281
 80052e8:	08005281 	.word	0x08005281
 80052ec:	080053c5 	.word	0x080053c5
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6032      	str	r2, [r6, #0]
 80052f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005300:	2301      	movs	r3, #1
 8005302:	e09c      	b.n	800543e <_printf_i+0x1e6>
 8005304:	6833      	ldr	r3, [r6, #0]
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	1d19      	adds	r1, r3, #4
 800530a:	6031      	str	r1, [r6, #0]
 800530c:	0606      	lsls	r6, r0, #24
 800530e:	d501      	bpl.n	8005314 <_printf_i+0xbc>
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	e003      	b.n	800531c <_printf_i+0xc4>
 8005314:	0645      	lsls	r5, r0, #25
 8005316:	d5fb      	bpl.n	8005310 <_printf_i+0xb8>
 8005318:	f9b3 5000 	ldrsh.w	r5, [r3]
 800531c:	2d00      	cmp	r5, #0
 800531e:	da03      	bge.n	8005328 <_printf_i+0xd0>
 8005320:	232d      	movs	r3, #45	@ 0x2d
 8005322:	426d      	negs	r5, r5
 8005324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005328:	4858      	ldr	r0, [pc, #352]	@ (800548c <_printf_i+0x234>)
 800532a:	230a      	movs	r3, #10
 800532c:	e011      	b.n	8005352 <_printf_i+0xfa>
 800532e:	6821      	ldr	r1, [r4, #0]
 8005330:	6833      	ldr	r3, [r6, #0]
 8005332:	0608      	lsls	r0, r1, #24
 8005334:	f853 5b04 	ldr.w	r5, [r3], #4
 8005338:	d402      	bmi.n	8005340 <_printf_i+0xe8>
 800533a:	0649      	lsls	r1, r1, #25
 800533c:	bf48      	it	mi
 800533e:	b2ad      	uxthmi	r5, r5
 8005340:	2f6f      	cmp	r7, #111	@ 0x6f
 8005342:	4852      	ldr	r0, [pc, #328]	@ (800548c <_printf_i+0x234>)
 8005344:	6033      	str	r3, [r6, #0]
 8005346:	bf14      	ite	ne
 8005348:	230a      	movne	r3, #10
 800534a:	2308      	moveq	r3, #8
 800534c:	2100      	movs	r1, #0
 800534e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005352:	6866      	ldr	r6, [r4, #4]
 8005354:	60a6      	str	r6, [r4, #8]
 8005356:	2e00      	cmp	r6, #0
 8005358:	db05      	blt.n	8005366 <_printf_i+0x10e>
 800535a:	6821      	ldr	r1, [r4, #0]
 800535c:	432e      	orrs	r6, r5
 800535e:	f021 0104 	bic.w	r1, r1, #4
 8005362:	6021      	str	r1, [r4, #0]
 8005364:	d04b      	beq.n	80053fe <_printf_i+0x1a6>
 8005366:	4616      	mov	r6, r2
 8005368:	fbb5 f1f3 	udiv	r1, r5, r3
 800536c:	fb03 5711 	mls	r7, r3, r1, r5
 8005370:	5dc7      	ldrb	r7, [r0, r7]
 8005372:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005376:	462f      	mov	r7, r5
 8005378:	42bb      	cmp	r3, r7
 800537a:	460d      	mov	r5, r1
 800537c:	d9f4      	bls.n	8005368 <_printf_i+0x110>
 800537e:	2b08      	cmp	r3, #8
 8005380:	d10b      	bne.n	800539a <_printf_i+0x142>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	07df      	lsls	r7, r3, #31
 8005386:	d508      	bpl.n	800539a <_printf_i+0x142>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	6861      	ldr	r1, [r4, #4]
 800538c:	4299      	cmp	r1, r3
 800538e:	bfde      	ittt	le
 8005390:	2330      	movle	r3, #48	@ 0x30
 8005392:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005396:	f106 36ff 	addle.w	r6, r6, #4294967295
 800539a:	1b92      	subs	r2, r2, r6
 800539c:	6122      	str	r2, [r4, #16]
 800539e:	f8cd a000 	str.w	sl, [sp]
 80053a2:	464b      	mov	r3, r9
 80053a4:	aa03      	add	r2, sp, #12
 80053a6:	4621      	mov	r1, r4
 80053a8:	4640      	mov	r0, r8
 80053aa:	f7ff fee7 	bl	800517c <_printf_common>
 80053ae:	3001      	adds	r0, #1
 80053b0:	d14a      	bne.n	8005448 <_printf_i+0x1f0>
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	b004      	add	sp, #16
 80053b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	f043 0320 	orr.w	r3, r3, #32
 80053c2:	6023      	str	r3, [r4, #0]
 80053c4:	4832      	ldr	r0, [pc, #200]	@ (8005490 <_printf_i+0x238>)
 80053c6:	2778      	movs	r7, #120	@ 0x78
 80053c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	6831      	ldr	r1, [r6, #0]
 80053d0:	061f      	lsls	r7, r3, #24
 80053d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80053d6:	d402      	bmi.n	80053de <_printf_i+0x186>
 80053d8:	065f      	lsls	r7, r3, #25
 80053da:	bf48      	it	mi
 80053dc:	b2ad      	uxthmi	r5, r5
 80053de:	6031      	str	r1, [r6, #0]
 80053e0:	07d9      	lsls	r1, r3, #31
 80053e2:	bf44      	itt	mi
 80053e4:	f043 0320 	orrmi.w	r3, r3, #32
 80053e8:	6023      	strmi	r3, [r4, #0]
 80053ea:	b11d      	cbz	r5, 80053f4 <_printf_i+0x19c>
 80053ec:	2310      	movs	r3, #16
 80053ee:	e7ad      	b.n	800534c <_printf_i+0xf4>
 80053f0:	4826      	ldr	r0, [pc, #152]	@ (800548c <_printf_i+0x234>)
 80053f2:	e7e9      	b.n	80053c8 <_printf_i+0x170>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f023 0320 	bic.w	r3, r3, #32
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	e7f6      	b.n	80053ec <_printf_i+0x194>
 80053fe:	4616      	mov	r6, r2
 8005400:	e7bd      	b.n	800537e <_printf_i+0x126>
 8005402:	6833      	ldr	r3, [r6, #0]
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	6961      	ldr	r1, [r4, #20]
 8005408:	1d18      	adds	r0, r3, #4
 800540a:	6030      	str	r0, [r6, #0]
 800540c:	062e      	lsls	r6, r5, #24
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	d501      	bpl.n	8005416 <_printf_i+0x1be>
 8005412:	6019      	str	r1, [r3, #0]
 8005414:	e002      	b.n	800541c <_printf_i+0x1c4>
 8005416:	0668      	lsls	r0, r5, #25
 8005418:	d5fb      	bpl.n	8005412 <_printf_i+0x1ba>
 800541a:	8019      	strh	r1, [r3, #0]
 800541c:	2300      	movs	r3, #0
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	4616      	mov	r6, r2
 8005422:	e7bc      	b.n	800539e <_printf_i+0x146>
 8005424:	6833      	ldr	r3, [r6, #0]
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	6032      	str	r2, [r6, #0]
 800542a:	681e      	ldr	r6, [r3, #0]
 800542c:	6862      	ldr	r2, [r4, #4]
 800542e:	2100      	movs	r1, #0
 8005430:	4630      	mov	r0, r6
 8005432:	f7fa fead 	bl	8000190 <memchr>
 8005436:	b108      	cbz	r0, 800543c <_printf_i+0x1e4>
 8005438:	1b80      	subs	r0, r0, r6
 800543a:	6060      	str	r0, [r4, #4]
 800543c:	6863      	ldr	r3, [r4, #4]
 800543e:	6123      	str	r3, [r4, #16]
 8005440:	2300      	movs	r3, #0
 8005442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005446:	e7aa      	b.n	800539e <_printf_i+0x146>
 8005448:	6923      	ldr	r3, [r4, #16]
 800544a:	4632      	mov	r2, r6
 800544c:	4649      	mov	r1, r9
 800544e:	4640      	mov	r0, r8
 8005450:	47d0      	blx	sl
 8005452:	3001      	adds	r0, #1
 8005454:	d0ad      	beq.n	80053b2 <_printf_i+0x15a>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	079b      	lsls	r3, r3, #30
 800545a:	d413      	bmi.n	8005484 <_printf_i+0x22c>
 800545c:	68e0      	ldr	r0, [r4, #12]
 800545e:	9b03      	ldr	r3, [sp, #12]
 8005460:	4298      	cmp	r0, r3
 8005462:	bfb8      	it	lt
 8005464:	4618      	movlt	r0, r3
 8005466:	e7a6      	b.n	80053b6 <_printf_i+0x15e>
 8005468:	2301      	movs	r3, #1
 800546a:	4632      	mov	r2, r6
 800546c:	4649      	mov	r1, r9
 800546e:	4640      	mov	r0, r8
 8005470:	47d0      	blx	sl
 8005472:	3001      	adds	r0, #1
 8005474:	d09d      	beq.n	80053b2 <_printf_i+0x15a>
 8005476:	3501      	adds	r5, #1
 8005478:	68e3      	ldr	r3, [r4, #12]
 800547a:	9903      	ldr	r1, [sp, #12]
 800547c:	1a5b      	subs	r3, r3, r1
 800547e:	42ab      	cmp	r3, r5
 8005480:	dcf2      	bgt.n	8005468 <_printf_i+0x210>
 8005482:	e7eb      	b.n	800545c <_printf_i+0x204>
 8005484:	2500      	movs	r5, #0
 8005486:	f104 0619 	add.w	r6, r4, #25
 800548a:	e7f5      	b.n	8005478 <_printf_i+0x220>
 800548c:	08009692 	.word	0x08009692
 8005490:	080096a3 	.word	0x080096a3

08005494 <_scanf_float>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	b087      	sub	sp, #28
 800549a:	4617      	mov	r7, r2
 800549c:	9303      	str	r3, [sp, #12]
 800549e:	688b      	ldr	r3, [r1, #8]
 80054a0:	1e5a      	subs	r2, r3, #1
 80054a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80054a6:	bf81      	itttt	hi
 80054a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80054ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80054b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80054b4:	608b      	strhi	r3, [r1, #8]
 80054b6:	680b      	ldr	r3, [r1, #0]
 80054b8:	460a      	mov	r2, r1
 80054ba:	f04f 0500 	mov.w	r5, #0
 80054be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80054c2:	f842 3b1c 	str.w	r3, [r2], #28
 80054c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80054ca:	4680      	mov	r8, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	bf98      	it	ls
 80054d0:	f04f 0b00 	movls.w	fp, #0
 80054d4:	9201      	str	r2, [sp, #4]
 80054d6:	4616      	mov	r6, r2
 80054d8:	46aa      	mov	sl, r5
 80054da:	46a9      	mov	r9, r5
 80054dc:	9502      	str	r5, [sp, #8]
 80054de:	68a2      	ldr	r2, [r4, #8]
 80054e0:	b152      	cbz	r2, 80054f8 <_scanf_float+0x64>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80054e8:	d864      	bhi.n	80055b4 <_scanf_float+0x120>
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d83c      	bhi.n	8005568 <_scanf_float+0xd4>
 80054ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80054f2:	b2c8      	uxtb	r0, r1
 80054f4:	280e      	cmp	r0, #14
 80054f6:	d93a      	bls.n	800556e <_scanf_float+0xda>
 80054f8:	f1b9 0f00 	cmp.w	r9, #0
 80054fc:	d003      	beq.n	8005506 <_scanf_float+0x72>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550a:	f1ba 0f01 	cmp.w	sl, #1
 800550e:	f200 8117 	bhi.w	8005740 <_scanf_float+0x2ac>
 8005512:	9b01      	ldr	r3, [sp, #4]
 8005514:	429e      	cmp	r6, r3
 8005516:	f200 8108 	bhi.w	800572a <_scanf_float+0x296>
 800551a:	2001      	movs	r0, #1
 800551c:	b007      	add	sp, #28
 800551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005522:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005526:	2a0d      	cmp	r2, #13
 8005528:	d8e6      	bhi.n	80054f8 <_scanf_float+0x64>
 800552a:	a101      	add	r1, pc, #4	@ (adr r1, 8005530 <_scanf_float+0x9c>)
 800552c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005530:	08005677 	.word	0x08005677
 8005534:	080054f9 	.word	0x080054f9
 8005538:	080054f9 	.word	0x080054f9
 800553c:	080054f9 	.word	0x080054f9
 8005540:	080056d7 	.word	0x080056d7
 8005544:	080056af 	.word	0x080056af
 8005548:	080054f9 	.word	0x080054f9
 800554c:	080054f9 	.word	0x080054f9
 8005550:	08005685 	.word	0x08005685
 8005554:	080054f9 	.word	0x080054f9
 8005558:	080054f9 	.word	0x080054f9
 800555c:	080054f9 	.word	0x080054f9
 8005560:	080054f9 	.word	0x080054f9
 8005564:	0800563d 	.word	0x0800563d
 8005568:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800556c:	e7db      	b.n	8005526 <_scanf_float+0x92>
 800556e:	290e      	cmp	r1, #14
 8005570:	d8c2      	bhi.n	80054f8 <_scanf_float+0x64>
 8005572:	a001      	add	r0, pc, #4	@ (adr r0, 8005578 <_scanf_float+0xe4>)
 8005574:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005578:	0800562d 	.word	0x0800562d
 800557c:	080054f9 	.word	0x080054f9
 8005580:	0800562d 	.word	0x0800562d
 8005584:	080056c3 	.word	0x080056c3
 8005588:	080054f9 	.word	0x080054f9
 800558c:	080055d5 	.word	0x080055d5
 8005590:	08005613 	.word	0x08005613
 8005594:	08005613 	.word	0x08005613
 8005598:	08005613 	.word	0x08005613
 800559c:	08005613 	.word	0x08005613
 80055a0:	08005613 	.word	0x08005613
 80055a4:	08005613 	.word	0x08005613
 80055a8:	08005613 	.word	0x08005613
 80055ac:	08005613 	.word	0x08005613
 80055b0:	08005613 	.word	0x08005613
 80055b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80055b6:	d809      	bhi.n	80055cc <_scanf_float+0x138>
 80055b8:	2b60      	cmp	r3, #96	@ 0x60
 80055ba:	d8b2      	bhi.n	8005522 <_scanf_float+0x8e>
 80055bc:	2b54      	cmp	r3, #84	@ 0x54
 80055be:	d07b      	beq.n	80056b8 <_scanf_float+0x224>
 80055c0:	2b59      	cmp	r3, #89	@ 0x59
 80055c2:	d199      	bne.n	80054f8 <_scanf_float+0x64>
 80055c4:	2d07      	cmp	r5, #7
 80055c6:	d197      	bne.n	80054f8 <_scanf_float+0x64>
 80055c8:	2508      	movs	r5, #8
 80055ca:	e02c      	b.n	8005626 <_scanf_float+0x192>
 80055cc:	2b74      	cmp	r3, #116	@ 0x74
 80055ce:	d073      	beq.n	80056b8 <_scanf_float+0x224>
 80055d0:	2b79      	cmp	r3, #121	@ 0x79
 80055d2:	e7f6      	b.n	80055c2 <_scanf_float+0x12e>
 80055d4:	6821      	ldr	r1, [r4, #0]
 80055d6:	05c8      	lsls	r0, r1, #23
 80055d8:	d51b      	bpl.n	8005612 <_scanf_float+0x17e>
 80055da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80055de:	6021      	str	r1, [r4, #0]
 80055e0:	f109 0901 	add.w	r9, r9, #1
 80055e4:	f1bb 0f00 	cmp.w	fp, #0
 80055e8:	d003      	beq.n	80055f2 <_scanf_float+0x15e>
 80055ea:	3201      	adds	r2, #1
 80055ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055f0:	60a2      	str	r2, [r4, #8]
 80055f2:	68a3      	ldr	r3, [r4, #8]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	60a3      	str	r3, [r4, #8]
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	3301      	adds	r3, #1
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3b01      	subs	r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	f340 8087 	ble.w	8005718 <_scanf_float+0x284>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	e765      	b.n	80054de <_scanf_float+0x4a>
 8005612:	eb1a 0105 	adds.w	r1, sl, r5
 8005616:	f47f af6f 	bne.w	80054f8 <_scanf_float+0x64>
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	460d      	mov	r5, r1
 8005624:	468a      	mov	sl, r1
 8005626:	f806 3b01 	strb.w	r3, [r6], #1
 800562a:	e7e2      	b.n	80055f2 <_scanf_float+0x15e>
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	0610      	lsls	r0, r2, #24
 8005630:	f57f af62 	bpl.w	80054f8 <_scanf_float+0x64>
 8005634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005638:	6022      	str	r2, [r4, #0]
 800563a:	e7f4      	b.n	8005626 <_scanf_float+0x192>
 800563c:	f1ba 0f00 	cmp.w	sl, #0
 8005640:	d10e      	bne.n	8005660 <_scanf_float+0x1cc>
 8005642:	f1b9 0f00 	cmp.w	r9, #0
 8005646:	d10e      	bne.n	8005666 <_scanf_float+0x1d2>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800564e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005652:	d108      	bne.n	8005666 <_scanf_float+0x1d2>
 8005654:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005658:	6022      	str	r2, [r4, #0]
 800565a:	f04f 0a01 	mov.w	sl, #1
 800565e:	e7e2      	b.n	8005626 <_scanf_float+0x192>
 8005660:	f1ba 0f02 	cmp.w	sl, #2
 8005664:	d055      	beq.n	8005712 <_scanf_float+0x27e>
 8005666:	2d01      	cmp	r5, #1
 8005668:	d002      	beq.n	8005670 <_scanf_float+0x1dc>
 800566a:	2d04      	cmp	r5, #4
 800566c:	f47f af44 	bne.w	80054f8 <_scanf_float+0x64>
 8005670:	3501      	adds	r5, #1
 8005672:	b2ed      	uxtb	r5, r5
 8005674:	e7d7      	b.n	8005626 <_scanf_float+0x192>
 8005676:	f1ba 0f01 	cmp.w	sl, #1
 800567a:	f47f af3d 	bne.w	80054f8 <_scanf_float+0x64>
 800567e:	f04f 0a02 	mov.w	sl, #2
 8005682:	e7d0      	b.n	8005626 <_scanf_float+0x192>
 8005684:	b97d      	cbnz	r5, 80056a6 <_scanf_float+0x212>
 8005686:	f1b9 0f00 	cmp.w	r9, #0
 800568a:	f47f af38 	bne.w	80054fe <_scanf_float+0x6a>
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005694:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005698:	f040 8108 	bne.w	80058ac <_scanf_float+0x418>
 800569c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056a0:	6022      	str	r2, [r4, #0]
 80056a2:	2501      	movs	r5, #1
 80056a4:	e7bf      	b.n	8005626 <_scanf_float+0x192>
 80056a6:	2d03      	cmp	r5, #3
 80056a8:	d0e2      	beq.n	8005670 <_scanf_float+0x1dc>
 80056aa:	2d05      	cmp	r5, #5
 80056ac:	e7de      	b.n	800566c <_scanf_float+0x1d8>
 80056ae:	2d02      	cmp	r5, #2
 80056b0:	f47f af22 	bne.w	80054f8 <_scanf_float+0x64>
 80056b4:	2503      	movs	r5, #3
 80056b6:	e7b6      	b.n	8005626 <_scanf_float+0x192>
 80056b8:	2d06      	cmp	r5, #6
 80056ba:	f47f af1d 	bne.w	80054f8 <_scanf_float+0x64>
 80056be:	2507      	movs	r5, #7
 80056c0:	e7b1      	b.n	8005626 <_scanf_float+0x192>
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	0591      	lsls	r1, r2, #22
 80056c6:	f57f af17 	bpl.w	80054f8 <_scanf_float+0x64>
 80056ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80056d4:	e7a7      	b.n	8005626 <_scanf_float+0x192>
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80056dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80056e0:	d006      	beq.n	80056f0 <_scanf_float+0x25c>
 80056e2:	0550      	lsls	r0, r2, #21
 80056e4:	f57f af08 	bpl.w	80054f8 <_scanf_float+0x64>
 80056e8:	f1b9 0f00 	cmp.w	r9, #0
 80056ec:	f000 80de 	beq.w	80058ac <_scanf_float+0x418>
 80056f0:	0591      	lsls	r1, r2, #22
 80056f2:	bf58      	it	pl
 80056f4:	9902      	ldrpl	r1, [sp, #8]
 80056f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056fa:	bf58      	it	pl
 80056fc:	eba9 0101 	subpl.w	r1, r9, r1
 8005700:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005704:	bf58      	it	pl
 8005706:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800570a:	6022      	str	r2, [r4, #0]
 800570c:	f04f 0900 	mov.w	r9, #0
 8005710:	e789      	b.n	8005626 <_scanf_float+0x192>
 8005712:	f04f 0a03 	mov.w	sl, #3
 8005716:	e786      	b.n	8005626 <_scanf_float+0x192>
 8005718:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800571c:	4639      	mov	r1, r7
 800571e:	4640      	mov	r0, r8
 8005720:	4798      	blx	r3
 8005722:	2800      	cmp	r0, #0
 8005724:	f43f aedb 	beq.w	80054de <_scanf_float+0x4a>
 8005728:	e6e6      	b.n	80054f8 <_scanf_float+0x64>
 800572a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800572e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005732:	463a      	mov	r2, r7
 8005734:	4640      	mov	r0, r8
 8005736:	4798      	blx	r3
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	3b01      	subs	r3, #1
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	e6e8      	b.n	8005512 <_scanf_float+0x7e>
 8005740:	1e6b      	subs	r3, r5, #1
 8005742:	2b06      	cmp	r3, #6
 8005744:	d824      	bhi.n	8005790 <_scanf_float+0x2fc>
 8005746:	2d02      	cmp	r5, #2
 8005748:	d836      	bhi.n	80057b8 <_scanf_float+0x324>
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	429e      	cmp	r6, r3
 800574e:	f67f aee4 	bls.w	800551a <_scanf_float+0x86>
 8005752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800575a:	463a      	mov	r2, r7
 800575c:	4640      	mov	r0, r8
 800575e:	4798      	blx	r3
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	3b01      	subs	r3, #1
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	e7f0      	b.n	800574a <_scanf_float+0x2b6>
 8005768:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800576c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005770:	463a      	mov	r2, r7
 8005772:	4640      	mov	r0, r8
 8005774:	4798      	blx	r3
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	3b01      	subs	r3, #1
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005780:	fa5f fa8a 	uxtb.w	sl, sl
 8005784:	f1ba 0f02 	cmp.w	sl, #2
 8005788:	d1ee      	bne.n	8005768 <_scanf_float+0x2d4>
 800578a:	3d03      	subs	r5, #3
 800578c:	b2ed      	uxtb	r5, r5
 800578e:	1b76      	subs	r6, r6, r5
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	05da      	lsls	r2, r3, #23
 8005794:	d530      	bpl.n	80057f8 <_scanf_float+0x364>
 8005796:	055b      	lsls	r3, r3, #21
 8005798:	d511      	bpl.n	80057be <_scanf_float+0x32a>
 800579a:	9b01      	ldr	r3, [sp, #4]
 800579c:	429e      	cmp	r6, r3
 800579e:	f67f aebc 	bls.w	800551a <_scanf_float+0x86>
 80057a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057aa:	463a      	mov	r2, r7
 80057ac:	4640      	mov	r0, r8
 80057ae:	4798      	blx	r3
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	e7f0      	b.n	800579a <_scanf_float+0x306>
 80057b8:	46aa      	mov	sl, r5
 80057ba:	46b3      	mov	fp, r6
 80057bc:	e7de      	b.n	800577c <_scanf_float+0x2e8>
 80057be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	2965      	cmp	r1, #101	@ 0x65
 80057c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80057ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80057ce:	6123      	str	r3, [r4, #16]
 80057d0:	d00c      	beq.n	80057ec <_scanf_float+0x358>
 80057d2:	2945      	cmp	r1, #69	@ 0x45
 80057d4:	d00a      	beq.n	80057ec <_scanf_float+0x358>
 80057d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057da:	463a      	mov	r2, r7
 80057dc:	4640      	mov	r0, r8
 80057de:	4798      	blx	r3
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	1eb5      	subs	r5, r6, #2
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057f0:	463a      	mov	r2, r7
 80057f2:	4640      	mov	r0, r8
 80057f4:	4798      	blx	r3
 80057f6:	462e      	mov	r6, r5
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	f012 0210 	ands.w	r2, r2, #16
 80057fe:	d001      	beq.n	8005804 <_scanf_float+0x370>
 8005800:	2000      	movs	r0, #0
 8005802:	e68b      	b.n	800551c <_scanf_float+0x88>
 8005804:	7032      	strb	r2, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005810:	d11c      	bne.n	800584c <_scanf_float+0x3b8>
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	4599      	cmp	r9, r3
 8005816:	eba3 0209 	sub.w	r2, r3, r9
 800581a:	d123      	bne.n	8005864 <_scanf_float+0x3d0>
 800581c:	9901      	ldr	r1, [sp, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	4640      	mov	r0, r8
 8005822:	f002 fbfd 	bl	8008020 <_strtod_r>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	6821      	ldr	r1, [r4, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f011 0f02 	tst.w	r1, #2
 8005830:	ec57 6b10 	vmov	r6, r7, d0
 8005834:	f103 0204 	add.w	r2, r3, #4
 8005838:	d01f      	beq.n	800587a <_scanf_float+0x3e6>
 800583a:	9903      	ldr	r1, [sp, #12]
 800583c:	600a      	str	r2, [r1, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	e9c3 6700 	strd	r6, r7, [r3]
 8005844:	68e3      	ldr	r3, [r4, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60e3      	str	r3, [r4, #12]
 800584a:	e7d9      	b.n	8005800 <_scanf_float+0x36c>
 800584c:	9b04      	ldr	r3, [sp, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0e4      	beq.n	800581c <_scanf_float+0x388>
 8005852:	9905      	ldr	r1, [sp, #20]
 8005854:	230a      	movs	r3, #10
 8005856:	3101      	adds	r1, #1
 8005858:	4640      	mov	r0, r8
 800585a:	f002 fc61 	bl	8008120 <_strtol_r>
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	9e05      	ldr	r6, [sp, #20]
 8005862:	1ac2      	subs	r2, r0, r3
 8005864:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005868:	429e      	cmp	r6, r3
 800586a:	bf28      	it	cs
 800586c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005870:	4910      	ldr	r1, [pc, #64]	@ (80058b4 <_scanf_float+0x420>)
 8005872:	4630      	mov	r0, r6
 8005874:	f000 f8f6 	bl	8005a64 <siprintf>
 8005878:	e7d0      	b.n	800581c <_scanf_float+0x388>
 800587a:	f011 0f04 	tst.w	r1, #4
 800587e:	9903      	ldr	r1, [sp, #12]
 8005880:	600a      	str	r2, [r1, #0]
 8005882:	d1dc      	bne.n	800583e <_scanf_float+0x3aa>
 8005884:	681d      	ldr	r5, [r3, #0]
 8005886:	4632      	mov	r2, r6
 8005888:	463b      	mov	r3, r7
 800588a:	4630      	mov	r0, r6
 800588c:	4639      	mov	r1, r7
 800588e:	f7fb f92d 	bl	8000aec <__aeabi_dcmpun>
 8005892:	b128      	cbz	r0, 80058a0 <_scanf_float+0x40c>
 8005894:	4808      	ldr	r0, [pc, #32]	@ (80058b8 <_scanf_float+0x424>)
 8005896:	f000 f9cb 	bl	8005c30 <nanf>
 800589a:	ed85 0a00 	vstr	s0, [r5]
 800589e:	e7d1      	b.n	8005844 <_scanf_float+0x3b0>
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fb f980 	bl	8000ba8 <__aeabi_d2f>
 80058a8:	6028      	str	r0, [r5, #0]
 80058aa:	e7cb      	b.n	8005844 <_scanf_float+0x3b0>
 80058ac:	f04f 0900 	mov.w	r9, #0
 80058b0:	e629      	b.n	8005506 <_scanf_float+0x72>
 80058b2:	bf00      	nop
 80058b4:	080096b4 	.word	0x080096b4
 80058b8:	080097f7 	.word	0x080097f7

080058bc <std>:
 80058bc:	2300      	movs	r3, #0
 80058be:	b510      	push	{r4, lr}
 80058c0:	4604      	mov	r4, r0
 80058c2:	e9c0 3300 	strd	r3, r3, [r0]
 80058c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058ca:	6083      	str	r3, [r0, #8]
 80058cc:	8181      	strh	r1, [r0, #12]
 80058ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80058d0:	81c2      	strh	r2, [r0, #14]
 80058d2:	6183      	str	r3, [r0, #24]
 80058d4:	4619      	mov	r1, r3
 80058d6:	2208      	movs	r2, #8
 80058d8:	305c      	adds	r0, #92	@ 0x5c
 80058da:	f000 f928 	bl	8005b2e <memset>
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <std+0x58>)
 80058e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <std+0x5c>)
 80058e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <std+0x60>)
 80058e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <std+0x64>)
 80058ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005924 <std+0x68>)
 80058f0:	6224      	str	r4, [r4, #32]
 80058f2:	429c      	cmp	r4, r3
 80058f4:	d006      	beq.n	8005904 <std+0x48>
 80058f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058fa:	4294      	cmp	r4, r2
 80058fc:	d002      	beq.n	8005904 <std+0x48>
 80058fe:	33d0      	adds	r3, #208	@ 0xd0
 8005900:	429c      	cmp	r4, r3
 8005902:	d105      	bne.n	8005910 <std+0x54>
 8005904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590c:	f000 b98c 	b.w	8005c28 <__retarget_lock_init_recursive>
 8005910:	bd10      	pop	{r4, pc}
 8005912:	bf00      	nop
 8005914:	08005aa9 	.word	0x08005aa9
 8005918:	08005acb 	.word	0x08005acb
 800591c:	08005b03 	.word	0x08005b03
 8005920:	08005b27 	.word	0x08005b27
 8005924:	200003b8 	.word	0x200003b8

08005928 <stdio_exit_handler>:
 8005928:	4a02      	ldr	r2, [pc, #8]	@ (8005934 <stdio_exit_handler+0xc>)
 800592a:	4903      	ldr	r1, [pc, #12]	@ (8005938 <stdio_exit_handler+0x10>)
 800592c:	4803      	ldr	r0, [pc, #12]	@ (800593c <stdio_exit_handler+0x14>)
 800592e:	f000 b869 	b.w	8005a04 <_fwalk_sglue>
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c
 8005938:	08008761 	.word	0x08008761
 800593c:	2000001c 	.word	0x2000001c

08005940 <cleanup_stdio>:
 8005940:	6841      	ldr	r1, [r0, #4]
 8005942:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <cleanup_stdio+0x34>)
 8005944:	4299      	cmp	r1, r3
 8005946:	b510      	push	{r4, lr}
 8005948:	4604      	mov	r4, r0
 800594a:	d001      	beq.n	8005950 <cleanup_stdio+0x10>
 800594c:	f002 ff08 	bl	8008760 <_fflush_r>
 8005950:	68a1      	ldr	r1, [r4, #8]
 8005952:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <cleanup_stdio+0x38>)
 8005954:	4299      	cmp	r1, r3
 8005956:	d002      	beq.n	800595e <cleanup_stdio+0x1e>
 8005958:	4620      	mov	r0, r4
 800595a:	f002 ff01 	bl	8008760 <_fflush_r>
 800595e:	68e1      	ldr	r1, [r4, #12]
 8005960:	4b06      	ldr	r3, [pc, #24]	@ (800597c <cleanup_stdio+0x3c>)
 8005962:	4299      	cmp	r1, r3
 8005964:	d004      	beq.n	8005970 <cleanup_stdio+0x30>
 8005966:	4620      	mov	r0, r4
 8005968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800596c:	f002 bef8 	b.w	8008760 <_fflush_r>
 8005970:	bd10      	pop	{r4, pc}
 8005972:	bf00      	nop
 8005974:	200003b8 	.word	0x200003b8
 8005978:	20000420 	.word	0x20000420
 800597c:	20000488 	.word	0x20000488

08005980 <global_stdio_init.part.0>:
 8005980:	b510      	push	{r4, lr}
 8005982:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <global_stdio_init.part.0+0x30>)
 8005984:	4c0b      	ldr	r4, [pc, #44]	@ (80059b4 <global_stdio_init.part.0+0x34>)
 8005986:	4a0c      	ldr	r2, [pc, #48]	@ (80059b8 <global_stdio_init.part.0+0x38>)
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	4620      	mov	r0, r4
 800598c:	2200      	movs	r2, #0
 800598e:	2104      	movs	r1, #4
 8005990:	f7ff ff94 	bl	80058bc <std>
 8005994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005998:	2201      	movs	r2, #1
 800599a:	2109      	movs	r1, #9
 800599c:	f7ff ff8e 	bl	80058bc <std>
 80059a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059a4:	2202      	movs	r2, #2
 80059a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059aa:	2112      	movs	r1, #18
 80059ac:	f7ff bf86 	b.w	80058bc <std>
 80059b0:	200004f0 	.word	0x200004f0
 80059b4:	200003b8 	.word	0x200003b8
 80059b8:	08005929 	.word	0x08005929

080059bc <__sfp_lock_acquire>:
 80059bc:	4801      	ldr	r0, [pc, #4]	@ (80059c4 <__sfp_lock_acquire+0x8>)
 80059be:	f000 b934 	b.w	8005c2a <__retarget_lock_acquire_recursive>
 80059c2:	bf00      	nop
 80059c4:	200004f9 	.word	0x200004f9

080059c8 <__sfp_lock_release>:
 80059c8:	4801      	ldr	r0, [pc, #4]	@ (80059d0 <__sfp_lock_release+0x8>)
 80059ca:	f000 b92f 	b.w	8005c2c <__retarget_lock_release_recursive>
 80059ce:	bf00      	nop
 80059d0:	200004f9 	.word	0x200004f9

080059d4 <__sinit>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4604      	mov	r4, r0
 80059d8:	f7ff fff0 	bl	80059bc <__sfp_lock_acquire>
 80059dc:	6a23      	ldr	r3, [r4, #32]
 80059de:	b11b      	cbz	r3, 80059e8 <__sinit+0x14>
 80059e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e4:	f7ff bff0 	b.w	80059c8 <__sfp_lock_release>
 80059e8:	4b04      	ldr	r3, [pc, #16]	@ (80059fc <__sinit+0x28>)
 80059ea:	6223      	str	r3, [r4, #32]
 80059ec:	4b04      	ldr	r3, [pc, #16]	@ (8005a00 <__sinit+0x2c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f5      	bne.n	80059e0 <__sinit+0xc>
 80059f4:	f7ff ffc4 	bl	8005980 <global_stdio_init.part.0>
 80059f8:	e7f2      	b.n	80059e0 <__sinit+0xc>
 80059fa:	bf00      	nop
 80059fc:	08005941 	.word	0x08005941
 8005a00:	200004f0 	.word	0x200004f0

08005a04 <_fwalk_sglue>:
 8005a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a08:	4607      	mov	r7, r0
 8005a0a:	4688      	mov	r8, r1
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	2600      	movs	r6, #0
 8005a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a14:	f1b9 0901 	subs.w	r9, r9, #1
 8005a18:	d505      	bpl.n	8005a26 <_fwalk_sglue+0x22>
 8005a1a:	6824      	ldr	r4, [r4, #0]
 8005a1c:	2c00      	cmp	r4, #0
 8005a1e:	d1f7      	bne.n	8005a10 <_fwalk_sglue+0xc>
 8005a20:	4630      	mov	r0, r6
 8005a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a26:	89ab      	ldrh	r3, [r5, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d907      	bls.n	8005a3c <_fwalk_sglue+0x38>
 8005a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a30:	3301      	adds	r3, #1
 8005a32:	d003      	beq.n	8005a3c <_fwalk_sglue+0x38>
 8005a34:	4629      	mov	r1, r5
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c0      	blx	r8
 8005a3a:	4306      	orrs	r6, r0
 8005a3c:	3568      	adds	r5, #104	@ 0x68
 8005a3e:	e7e9      	b.n	8005a14 <_fwalk_sglue+0x10>

08005a40 <iprintf>:
 8005a40:	b40f      	push	{r0, r1, r2, r3}
 8005a42:	b507      	push	{r0, r1, r2, lr}
 8005a44:	4906      	ldr	r1, [pc, #24]	@ (8005a60 <iprintf+0x20>)
 8005a46:	ab04      	add	r3, sp, #16
 8005a48:	6808      	ldr	r0, [r1, #0]
 8005a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a4e:	6881      	ldr	r1, [r0, #8]
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	f002 fce9 	bl	8008428 <_vfiprintf_r>
 8005a56:	b003      	add	sp, #12
 8005a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a5c:	b004      	add	sp, #16
 8005a5e:	4770      	bx	lr
 8005a60:	20000018 	.word	0x20000018

08005a64 <siprintf>:
 8005a64:	b40e      	push	{r1, r2, r3}
 8005a66:	b510      	push	{r4, lr}
 8005a68:	b09d      	sub	sp, #116	@ 0x74
 8005a6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005a6c:	9002      	str	r0, [sp, #8]
 8005a6e:	9006      	str	r0, [sp, #24]
 8005a70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a74:	480a      	ldr	r0, [pc, #40]	@ (8005aa0 <siprintf+0x3c>)
 8005a76:	9107      	str	r1, [sp, #28]
 8005a78:	9104      	str	r1, [sp, #16]
 8005a7a:	490a      	ldr	r1, [pc, #40]	@ (8005aa4 <siprintf+0x40>)
 8005a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a80:	9105      	str	r1, [sp, #20]
 8005a82:	2400      	movs	r4, #0
 8005a84:	a902      	add	r1, sp, #8
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a8c:	f002 fba6 	bl	80081dc <_svfiprintf_r>
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	701c      	strb	r4, [r3, #0]
 8005a94:	b01d      	add	sp, #116	@ 0x74
 8005a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a9a:	b003      	add	sp, #12
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20000018 	.word	0x20000018
 8005aa4:	ffff0208 	.word	0xffff0208

08005aa8 <__sread>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	460c      	mov	r4, r1
 8005aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab0:	f000 f86c 	bl	8005b8c <_read_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	bfab      	itete	ge
 8005ab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005aba:	89a3      	ldrhlt	r3, [r4, #12]
 8005abc:	181b      	addge	r3, r3, r0
 8005abe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ac2:	bfac      	ite	ge
 8005ac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ac6:	81a3      	strhlt	r3, [r4, #12]
 8005ac8:	bd10      	pop	{r4, pc}

08005aca <__swrite>:
 8005aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ace:	461f      	mov	r7, r3
 8005ad0:	898b      	ldrh	r3, [r1, #12]
 8005ad2:	05db      	lsls	r3, r3, #23
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	4616      	mov	r6, r2
 8005ada:	d505      	bpl.n	8005ae8 <__swrite+0x1e>
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f000 f840 	bl	8005b68 <_lseek_r>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	4632      	mov	r2, r6
 8005af6:	463b      	mov	r3, r7
 8005af8:	4628      	mov	r0, r5
 8005afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	f000 b857 	b.w	8005bb0 <_write_r>

08005b02 <__sseek>:
 8005b02:	b510      	push	{r4, lr}
 8005b04:	460c      	mov	r4, r1
 8005b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0a:	f000 f82d 	bl	8005b68 <_lseek_r>
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	bf15      	itete	ne
 8005b14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b1e:	81a3      	strheq	r3, [r4, #12]
 8005b20:	bf18      	it	ne
 8005b22:	81a3      	strhne	r3, [r4, #12]
 8005b24:	bd10      	pop	{r4, pc}

08005b26 <__sclose>:
 8005b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2a:	f000 b80d 	b.w	8005b48 <_close_r>

08005b2e <memset>:
 8005b2e:	4402      	add	r2, r0
 8005b30:	4603      	mov	r3, r0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d100      	bne.n	8005b38 <memset+0xa>
 8005b36:	4770      	bx	lr
 8005b38:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3c:	e7f9      	b.n	8005b32 <memset+0x4>
	...

08005b40 <_localeconv_r>:
 8005b40:	4800      	ldr	r0, [pc, #0]	@ (8005b44 <_localeconv_r+0x4>)
 8005b42:	4770      	bx	lr
 8005b44:	20000158 	.word	0x20000158

08005b48 <_close_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d06      	ldr	r5, [pc, #24]	@ (8005b64 <_close_r+0x1c>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fe ffe5 	bl	8004b22 <_close>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_close_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_close_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	200004f4 	.word	0x200004f4

08005b68 <_lseek_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d07      	ldr	r5, [pc, #28]	@ (8005b88 <_lseek_r+0x20>)
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	4608      	mov	r0, r1
 8005b70:	4611      	mov	r1, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f7fe ffdd 	bl	8004b36 <_lseek>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_lseek_r+0x1e>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_lseek_r+0x1e>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	200004f4 	.word	0x200004f4

08005b8c <_read_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d07      	ldr	r5, [pc, #28]	@ (8005bac <_read_r+0x20>)
 8005b90:	4604      	mov	r4, r0
 8005b92:	4608      	mov	r0, r1
 8005b94:	4611      	mov	r1, r2
 8005b96:	2200      	movs	r2, #0
 8005b98:	602a      	str	r2, [r5, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f7fe ffb1 	bl	8004b02 <_read>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d102      	bne.n	8005baa <_read_r+0x1e>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	b103      	cbz	r3, 8005baa <_read_r+0x1e>
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	200004f4 	.word	0x200004f4

08005bb0 <_write_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	@ (8005bd0 <_write_r+0x20>)
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	4611      	mov	r1, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	602a      	str	r2, [r5, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7fb fc82 	bl	80014c8 <_write>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_write_r+0x1e>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_write_r+0x1e>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	200004f4 	.word	0x200004f4

08005bd4 <__errno>:
 8005bd4:	4b01      	ldr	r3, [pc, #4]	@ (8005bdc <__errno+0x8>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000018 	.word	0x20000018

08005be0 <__libc_init_array>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4d0d      	ldr	r5, [pc, #52]	@ (8005c18 <__libc_init_array+0x38>)
 8005be4:	4c0d      	ldr	r4, [pc, #52]	@ (8005c1c <__libc_init_array+0x3c>)
 8005be6:	1b64      	subs	r4, r4, r5
 8005be8:	10a4      	asrs	r4, r4, #2
 8005bea:	2600      	movs	r6, #0
 8005bec:	42a6      	cmp	r6, r4
 8005bee:	d109      	bne.n	8005c04 <__libc_init_array+0x24>
 8005bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8005c20 <__libc_init_array+0x40>)
 8005bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8005c24 <__libc_init_array+0x44>)
 8005bf4:	f003 fcfa 	bl	80095ec <_init>
 8005bf8:	1b64      	subs	r4, r4, r5
 8005bfa:	10a4      	asrs	r4, r4, #2
 8005bfc:	2600      	movs	r6, #0
 8005bfe:	42a6      	cmp	r6, r4
 8005c00:	d105      	bne.n	8005c0e <__libc_init_array+0x2e>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c08:	4798      	blx	r3
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7ee      	b.n	8005bec <__libc_init_array+0xc>
 8005c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c12:	4798      	blx	r3
 8005c14:	3601      	adds	r6, #1
 8005c16:	e7f2      	b.n	8005bfe <__libc_init_array+0x1e>
 8005c18:	08009ab4 	.word	0x08009ab4
 8005c1c:	08009ab4 	.word	0x08009ab4
 8005c20:	08009ab4 	.word	0x08009ab4
 8005c24:	08009ab8 	.word	0x08009ab8

08005c28 <__retarget_lock_init_recursive>:
 8005c28:	4770      	bx	lr

08005c2a <__retarget_lock_acquire_recursive>:
 8005c2a:	4770      	bx	lr

08005c2c <__retarget_lock_release_recursive>:
 8005c2c:	4770      	bx	lr
	...

08005c30 <nanf>:
 8005c30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005c38 <nanf+0x8>
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	7fc00000 	.word	0x7fc00000

08005c3c <quorem>:
 8005c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	6903      	ldr	r3, [r0, #16]
 8005c42:	690c      	ldr	r4, [r1, #16]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	4607      	mov	r7, r0
 8005c48:	db7e      	blt.n	8005d48 <quorem+0x10c>
 8005c4a:	3c01      	subs	r4, #1
 8005c4c:	f101 0814 	add.w	r8, r1, #20
 8005c50:	00a3      	lsls	r3, r4, #2
 8005c52:	f100 0514 	add.w	r5, r0, #20
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c66:	3301      	adds	r3, #1
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c72:	d32e      	bcc.n	8005cd2 <quorem+0x96>
 8005c74:	f04f 0a00 	mov.w	sl, #0
 8005c78:	46c4      	mov	ip, r8
 8005c7a:	46ae      	mov	lr, r5
 8005c7c:	46d3      	mov	fp, sl
 8005c7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c82:	b298      	uxth	r0, r3
 8005c84:	fb06 a000 	mla	r0, r6, r0, sl
 8005c88:	0c02      	lsrs	r2, r0, #16
 8005c8a:	0c1b      	lsrs	r3, r3, #16
 8005c8c:	fb06 2303 	mla	r3, r6, r3, r2
 8005c90:	f8de 2000 	ldr.w	r2, [lr]
 8005c94:	b280      	uxth	r0, r0
 8005c96:	b292      	uxth	r2, r2
 8005c98:	1a12      	subs	r2, r2, r0
 8005c9a:	445a      	add	r2, fp
 8005c9c:	f8de 0000 	ldr.w	r0, [lr]
 8005ca0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005caa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005cae:	b292      	uxth	r2, r2
 8005cb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005cb4:	45e1      	cmp	r9, ip
 8005cb6:	f84e 2b04 	str.w	r2, [lr], #4
 8005cba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005cbe:	d2de      	bcs.n	8005c7e <quorem+0x42>
 8005cc0:	9b00      	ldr	r3, [sp, #0]
 8005cc2:	58eb      	ldr	r3, [r5, r3]
 8005cc4:	b92b      	cbnz	r3, 8005cd2 <quorem+0x96>
 8005cc6:	9b01      	ldr	r3, [sp, #4]
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	429d      	cmp	r5, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	d32f      	bcc.n	8005d30 <quorem+0xf4>
 8005cd0:	613c      	str	r4, [r7, #16]
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f001 f9b2 	bl	800703c <__mcmp>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	db25      	blt.n	8005d28 <quorem+0xec>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ce4:	f8d1 c000 	ldr.w	ip, [r1]
 8005ce8:	fa1f fe82 	uxth.w	lr, r2
 8005cec:	fa1f f38c 	uxth.w	r3, ip
 8005cf0:	eba3 030e 	sub.w	r3, r3, lr
 8005cf4:	4403      	add	r3, r0
 8005cf6:	0c12      	lsrs	r2, r2, #16
 8005cf8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cfc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d06:	45c1      	cmp	r9, r8
 8005d08:	f841 3b04 	str.w	r3, [r1], #4
 8005d0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d10:	d2e6      	bcs.n	8005ce0 <quorem+0xa4>
 8005d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d1a:	b922      	cbnz	r2, 8005d26 <quorem+0xea>
 8005d1c:	3b04      	subs	r3, #4
 8005d1e:	429d      	cmp	r5, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	d30b      	bcc.n	8005d3c <quorem+0x100>
 8005d24:	613c      	str	r4, [r7, #16]
 8005d26:	3601      	adds	r6, #1
 8005d28:	4630      	mov	r0, r6
 8005d2a:	b003      	add	sp, #12
 8005d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	3b04      	subs	r3, #4
 8005d34:	2a00      	cmp	r2, #0
 8005d36:	d1cb      	bne.n	8005cd0 <quorem+0x94>
 8005d38:	3c01      	subs	r4, #1
 8005d3a:	e7c6      	b.n	8005cca <quorem+0x8e>
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	d1ef      	bne.n	8005d24 <quorem+0xe8>
 8005d44:	3c01      	subs	r4, #1
 8005d46:	e7ea      	b.n	8005d1e <quorem+0xe2>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e7ee      	b.n	8005d2a <quorem+0xee>
 8005d4c:	0000      	movs	r0, r0
	...

08005d50 <_dtoa_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	69c7      	ldr	r7, [r0, #28]
 8005d56:	b099      	sub	sp, #100	@ 0x64
 8005d58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005d5c:	ec55 4b10 	vmov	r4, r5, d0
 8005d60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005d62:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d64:	4683      	mov	fp, r0
 8005d66:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d6a:	b97f      	cbnz	r7, 8005d8c <_dtoa_r+0x3c>
 8005d6c:	2010      	movs	r0, #16
 8005d6e:	f000 fdf3 	bl	8006958 <malloc>
 8005d72:	4602      	mov	r2, r0
 8005d74:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d78:	b920      	cbnz	r0, 8005d84 <_dtoa_r+0x34>
 8005d7a:	4ba5      	ldr	r3, [pc, #660]	@ (8006010 <_dtoa_r+0x2c0>)
 8005d7c:	21ef      	movs	r1, #239	@ 0xef
 8005d7e:	48a5      	ldr	r0, [pc, #660]	@ (8006014 <_dtoa_r+0x2c4>)
 8005d80:	f002 fdfe 	bl	8008980 <__assert_func>
 8005d84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d88:	6007      	str	r7, [r0, #0]
 8005d8a:	60c7      	str	r7, [r0, #12]
 8005d8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	b159      	cbz	r1, 8005dac <_dtoa_r+0x5c>
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	604a      	str	r2, [r1, #4]
 8005d98:	2301      	movs	r3, #1
 8005d9a:	4093      	lsls	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
 8005d9e:	4658      	mov	r0, fp
 8005da0:	f000 fed0 	bl	8006b44 <_Bfree>
 8005da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	1e2b      	subs	r3, r5, #0
 8005dae:	bfb9      	ittee	lt
 8005db0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005db4:	9305      	strlt	r3, [sp, #20]
 8005db6:	2300      	movge	r3, #0
 8005db8:	6033      	strge	r3, [r6, #0]
 8005dba:	9f05      	ldr	r7, [sp, #20]
 8005dbc:	4b96      	ldr	r3, [pc, #600]	@ (8006018 <_dtoa_r+0x2c8>)
 8005dbe:	bfbc      	itt	lt
 8005dc0:	2201      	movlt	r2, #1
 8005dc2:	6032      	strlt	r2, [r6, #0]
 8005dc4:	43bb      	bics	r3, r7
 8005dc6:	d112      	bne.n	8005dee <_dtoa_r+0x9e>
 8005dc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005dca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005dd4:	4323      	orrs	r3, r4
 8005dd6:	f000 8543 	beq.w	8006860 <_dtoa_r+0xb10>
 8005dda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ddc:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 800602c <_dtoa_r+0x2dc>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8545 	beq.w	8006870 <_dtoa_r+0xb20>
 8005de6:	f10a 0303 	add.w	r3, sl, #3
 8005dea:	f000 bd3f 	b.w	800686c <_dtoa_r+0xb1c>
 8005dee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005df2:	2200      	movs	r2, #0
 8005df4:	ec51 0b17 	vmov	r0, r1, d7
 8005df8:	2300      	movs	r3, #0
 8005dfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005dfe:	f7fa fe43 	bl	8000a88 <__aeabi_dcmpeq>
 8005e02:	4680      	mov	r8, r0
 8005e04:	b158      	cbz	r0, 8005e1e <_dtoa_r+0xce>
 8005e06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e08:	2301      	movs	r3, #1
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e0e:	b113      	cbz	r3, 8005e16 <_dtoa_r+0xc6>
 8005e10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e12:	4b82      	ldr	r3, [pc, #520]	@ (800601c <_dtoa_r+0x2cc>)
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8006030 <_dtoa_r+0x2e0>
 8005e1a:	f000 bd29 	b.w	8006870 <_dtoa_r+0xb20>
 8005e1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005e22:	aa16      	add	r2, sp, #88	@ 0x58
 8005e24:	a917      	add	r1, sp, #92	@ 0x5c
 8005e26:	4658      	mov	r0, fp
 8005e28:	f001 fa28 	bl	800727c <__d2b>
 8005e2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e30:	4681      	mov	r9, r0
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	d077      	beq.n	8005f26 <_dtoa_r+0x1d6>
 8005e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e50:	4619      	mov	r1, r3
 8005e52:	2200      	movs	r2, #0
 8005e54:	4b72      	ldr	r3, [pc, #456]	@ (8006020 <_dtoa_r+0x2d0>)
 8005e56:	f7fa f9f7 	bl	8000248 <__aeabi_dsub>
 8005e5a:	a367      	add	r3, pc, #412	@ (adr r3, 8005ff8 <_dtoa_r+0x2a8>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f7fa fbaa 	bl	80005b8 <__aeabi_dmul>
 8005e64:	a366      	add	r3, pc, #408	@ (adr r3, 8006000 <_dtoa_r+0x2b0>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f7fa f9ef 	bl	800024c <__adddf3>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4630      	mov	r0, r6
 8005e72:	460d      	mov	r5, r1
 8005e74:	f7fa fb36 	bl	80004e4 <__aeabi_i2d>
 8005e78:	a363      	add	r3, pc, #396	@ (adr r3, 8006008 <_dtoa_r+0x2b8>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fb9b 	bl	80005b8 <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4620      	mov	r0, r4
 8005e88:	4629      	mov	r1, r5
 8005e8a:	f7fa f9df 	bl	800024c <__adddf3>
 8005e8e:	4604      	mov	r4, r0
 8005e90:	460d      	mov	r5, r1
 8005e92:	f7fa fe41 	bl	8000b18 <__aeabi_d2iz>
 8005e96:	2200      	movs	r2, #0
 8005e98:	4607      	mov	r7, r0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa fdfc 	bl	8000a9c <__aeabi_dcmplt>
 8005ea4:	b140      	cbz	r0, 8005eb8 <_dtoa_r+0x168>
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	f7fa fb1c 	bl	80004e4 <__aeabi_i2d>
 8005eac:	4622      	mov	r2, r4
 8005eae:	462b      	mov	r3, r5
 8005eb0:	f7fa fdea 	bl	8000a88 <__aeabi_dcmpeq>
 8005eb4:	b900      	cbnz	r0, 8005eb8 <_dtoa_r+0x168>
 8005eb6:	3f01      	subs	r7, #1
 8005eb8:	2f16      	cmp	r7, #22
 8005eba:	d851      	bhi.n	8005f60 <_dtoa_r+0x210>
 8005ebc:	4b59      	ldr	r3, [pc, #356]	@ (8006024 <_dtoa_r+0x2d4>)
 8005ebe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005eca:	f7fa fde7 	bl	8000a9c <__aeabi_dcmplt>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d048      	beq.n	8005f64 <_dtoa_r+0x214>
 8005ed2:	3f01      	subs	r7, #1
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ed8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005eda:	1b9b      	subs	r3, r3, r6
 8005edc:	1e5a      	subs	r2, r3, #1
 8005ede:	bf44      	itt	mi
 8005ee0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ee4:	2300      	movmi	r3, #0
 8005ee6:	9208      	str	r2, [sp, #32]
 8005ee8:	bf54      	ite	pl
 8005eea:	f04f 0800 	movpl.w	r8, #0
 8005eee:	9308      	strmi	r3, [sp, #32]
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	db39      	blt.n	8005f68 <_dtoa_r+0x218>
 8005ef4:	9b08      	ldr	r3, [sp, #32]
 8005ef6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005ef8:	443b      	add	r3, r7
 8005efa:	9308      	str	r3, [sp, #32]
 8005efc:	2300      	movs	r3, #0
 8005efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f02:	2b09      	cmp	r3, #9
 8005f04:	d861      	bhi.n	8005fca <_dtoa_r+0x27a>
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	bfc4      	itt	gt
 8005f0a:	3b04      	subgt	r3, #4
 8005f0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f10:	f1a3 0302 	sub.w	r3, r3, #2
 8005f14:	bfcc      	ite	gt
 8005f16:	2400      	movgt	r4, #0
 8005f18:	2401      	movle	r4, #1
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d861      	bhi.n	8005fe2 <_dtoa_r+0x292>
 8005f1e:	e8df f003 	tbb	[pc, r3]
 8005f22:	5250      	.short	0x5250
 8005f24:	2a35      	.short	0x2a35
 8005f26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005f2a:	441e      	add	r6, r3
 8005f2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	bfc1      	itttt	gt
 8005f34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f38:	409f      	lslgt	r7, r3
 8005f3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f42:	bfd6      	itet	le
 8005f44:	f1c3 0320 	rsble	r3, r3, #32
 8005f48:	ea47 0003 	orrgt.w	r0, r7, r3
 8005f4c:	fa04 f003 	lslle.w	r0, r4, r3
 8005f50:	f7fa fab8 	bl	80004c4 <__aeabi_ui2d>
 8005f54:	2201      	movs	r2, #1
 8005f56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f5a:	3e01      	subs	r6, #1
 8005f5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005f5e:	e777      	b.n	8005e50 <_dtoa_r+0x100>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e7b8      	b.n	8005ed6 <_dtoa_r+0x186>
 8005f64:	9012      	str	r0, [sp, #72]	@ 0x48
 8005f66:	e7b7      	b.n	8005ed8 <_dtoa_r+0x188>
 8005f68:	427b      	negs	r3, r7
 8005f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	eba8 0807 	sub.w	r8, r8, r7
 8005f72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f74:	e7c4      	b.n	8005f00 <_dtoa_r+0x1b0>
 8005f76:	2301      	movs	r3, #1
 8005f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	9303      	str	r3, [sp, #12]
 8005f86:	bfb8      	it	lt
 8005f88:	2301      	movlt	r3, #1
 8005f8a:	e006      	b.n	8005f9a <_dtoa_r+0x24a>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dd28      	ble.n	8005fe8 <_dtoa_r+0x298>
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	f102 0514 	add.w	r5, r2, #20
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	d923      	bls.n	8005ff2 <_dtoa_r+0x2a2>
 8005faa:	6041      	str	r1, [r0, #4]
 8005fac:	4658      	mov	r0, fp
 8005fae:	f000 fd89 	bl	8006ac4 <_Balloc>
 8005fb2:	4682      	mov	sl, r0
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	d13d      	bne.n	8006034 <_dtoa_r+0x2e4>
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006028 <_dtoa_r+0x2d8>)
 8005fba:	4602      	mov	r2, r0
 8005fbc:	f240 11af 	movw	r1, #431	@ 0x1af
 8005fc0:	e6dd      	b.n	8005d7e <_dtoa_r+0x2e>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e7e3      	b.n	8005f8e <_dtoa_r+0x23e>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e7d6      	b.n	8005f78 <_dtoa_r+0x228>
 8005fca:	2401      	movs	r4, #1
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	9303      	str	r3, [sp, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2312      	movs	r3, #18
 8005fde:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fe0:	e7db      	b.n	8005f9a <_dtoa_r+0x24a>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe6:	e7f4      	b.n	8005fd2 <_dtoa_r+0x282>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	e7f5      	b.n	8005fde <_dtoa_r+0x28e>
 8005ff2:	3101      	adds	r1, #1
 8005ff4:	0052      	lsls	r2, r2, #1
 8005ff6:	e7d4      	b.n	8005fa2 <_dtoa_r+0x252>
 8005ff8:	636f4361 	.word	0x636f4361
 8005ffc:	3fd287a7 	.word	0x3fd287a7
 8006000:	8b60c8b3 	.word	0x8b60c8b3
 8006004:	3fc68a28 	.word	0x3fc68a28
 8006008:	509f79fb 	.word	0x509f79fb
 800600c:	3fd34413 	.word	0x3fd34413
 8006010:	080096c6 	.word	0x080096c6
 8006014:	080096dd 	.word	0x080096dd
 8006018:	7ff00000 	.word	0x7ff00000
 800601c:	08009691 	.word	0x08009691
 8006020:	3ff80000 	.word	0x3ff80000
 8006024:	08009890 	.word	0x08009890
 8006028:	08009736 	.word	0x08009736
 800602c:	080096c2 	.word	0x080096c2
 8006030:	08009690 	.word	0x08009690
 8006034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006038:	6018      	str	r0, [r3, #0]
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	2b0e      	cmp	r3, #14
 800603e:	f200 80a1 	bhi.w	8006184 <_dtoa_r+0x434>
 8006042:	2c00      	cmp	r4, #0
 8006044:	f000 809e 	beq.w	8006184 <_dtoa_r+0x434>
 8006048:	2f00      	cmp	r7, #0
 800604a:	dd33      	ble.n	80060b4 <_dtoa_r+0x364>
 800604c:	4b9c      	ldr	r3, [pc, #624]	@ (80062c0 <_dtoa_r+0x570>)
 800604e:	f007 020f 	and.w	r2, r7, #15
 8006052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006056:	ed93 7b00 	vldr	d7, [r3]
 800605a:	05f8      	lsls	r0, r7, #23
 800605c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006060:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006064:	d516      	bpl.n	8006094 <_dtoa_r+0x344>
 8006066:	4b97      	ldr	r3, [pc, #604]	@ (80062c4 <_dtoa_r+0x574>)
 8006068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800606c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006070:	f7fa fbcc 	bl	800080c <__aeabi_ddiv>
 8006074:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006078:	f004 040f 	and.w	r4, r4, #15
 800607c:	2603      	movs	r6, #3
 800607e:	4d91      	ldr	r5, [pc, #580]	@ (80062c4 <_dtoa_r+0x574>)
 8006080:	b954      	cbnz	r4, 8006098 <_dtoa_r+0x348>
 8006082:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800608a:	f7fa fbbf 	bl	800080c <__aeabi_ddiv>
 800608e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006092:	e028      	b.n	80060e6 <_dtoa_r+0x396>
 8006094:	2602      	movs	r6, #2
 8006096:	e7f2      	b.n	800607e <_dtoa_r+0x32e>
 8006098:	07e1      	lsls	r1, r4, #31
 800609a:	d508      	bpl.n	80060ae <_dtoa_r+0x35e>
 800609c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060a4:	f7fa fa88 	bl	80005b8 <__aeabi_dmul>
 80060a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060ac:	3601      	adds	r6, #1
 80060ae:	1064      	asrs	r4, r4, #1
 80060b0:	3508      	adds	r5, #8
 80060b2:	e7e5      	b.n	8006080 <_dtoa_r+0x330>
 80060b4:	f000 80af 	beq.w	8006216 <_dtoa_r+0x4c6>
 80060b8:	427c      	negs	r4, r7
 80060ba:	4b81      	ldr	r3, [pc, #516]	@ (80062c0 <_dtoa_r+0x570>)
 80060bc:	4d81      	ldr	r5, [pc, #516]	@ (80062c4 <_dtoa_r+0x574>)
 80060be:	f004 020f 	and.w	r2, r4, #15
 80060c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060ce:	f7fa fa73 	bl	80005b8 <__aeabi_dmul>
 80060d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d6:	1124      	asrs	r4, r4, #4
 80060d8:	2300      	movs	r3, #0
 80060da:	2602      	movs	r6, #2
 80060dc:	2c00      	cmp	r4, #0
 80060de:	f040 808f 	bne.w	8006200 <_dtoa_r+0x4b0>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1d3      	bne.n	800608e <_dtoa_r+0x33e>
 80060e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8094 	beq.w	800621a <_dtoa_r+0x4ca>
 80060f2:	4b75      	ldr	r3, [pc, #468]	@ (80062c8 <_dtoa_r+0x578>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7fa fccf 	bl	8000a9c <__aeabi_dcmplt>
 80060fe:	2800      	cmp	r0, #0
 8006100:	f000 808b 	beq.w	800621a <_dtoa_r+0x4ca>
 8006104:	9b03      	ldr	r3, [sp, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8087 	beq.w	800621a <_dtoa_r+0x4ca>
 800610c:	9b00      	ldr	r3, [sp, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	dd34      	ble.n	800617c <_dtoa_r+0x42c>
 8006112:	1e7b      	subs	r3, r7, #1
 8006114:	9306      	str	r3, [sp, #24]
 8006116:	4620      	mov	r0, r4
 8006118:	4b6c      	ldr	r3, [pc, #432]	@ (80062cc <_dtoa_r+0x57c>)
 800611a:	2200      	movs	r2, #0
 800611c:	4629      	mov	r1, r5
 800611e:	f7fa fa4b 	bl	80005b8 <__aeabi_dmul>
 8006122:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006126:	9c00      	ldr	r4, [sp, #0]
 8006128:	3601      	adds	r6, #1
 800612a:	4630      	mov	r0, r6
 800612c:	f7fa f9da 	bl	80004e4 <__aeabi_i2d>
 8006130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006134:	f7fa fa40 	bl	80005b8 <__aeabi_dmul>
 8006138:	4b65      	ldr	r3, [pc, #404]	@ (80062d0 <_dtoa_r+0x580>)
 800613a:	2200      	movs	r2, #0
 800613c:	f7fa f886 	bl	800024c <__adddf3>
 8006140:	4605      	mov	r5, r0
 8006142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006146:	2c00      	cmp	r4, #0
 8006148:	d16a      	bne.n	8006220 <_dtoa_r+0x4d0>
 800614a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800614e:	4b61      	ldr	r3, [pc, #388]	@ (80062d4 <_dtoa_r+0x584>)
 8006150:	2200      	movs	r2, #0
 8006152:	f7fa f879 	bl	8000248 <__aeabi_dsub>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800615e:	462a      	mov	r2, r5
 8006160:	4633      	mov	r3, r6
 8006162:	f7fa fcb9 	bl	8000ad8 <__aeabi_dcmpgt>
 8006166:	2800      	cmp	r0, #0
 8006168:	f040 8287 	bne.w	800667a <_dtoa_r+0x92a>
 800616c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006170:	462a      	mov	r2, r5
 8006172:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006176:	f7fa fc91 	bl	8000a9c <__aeabi_dcmplt>
 800617a:	bb38      	cbnz	r0, 80061cc <_dtoa_r+0x47c>
 800617c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006180:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006184:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006186:	2b00      	cmp	r3, #0
 8006188:	f2c0 8158 	blt.w	800643c <_dtoa_r+0x6ec>
 800618c:	2f0e      	cmp	r7, #14
 800618e:	f300 8155 	bgt.w	800643c <_dtoa_r+0x6ec>
 8006192:	4b4b      	ldr	r3, [pc, #300]	@ (80062c0 <_dtoa_r+0x570>)
 8006194:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006198:	ed93 7b00 	vldr	d7, [r3]
 800619c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	ed8d 7b00 	vstr	d7, [sp]
 80061a4:	f280 80e5 	bge.w	8006372 <_dtoa_r+0x622>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f300 80e1 	bgt.w	8006372 <_dtoa_r+0x622>
 80061b0:	d10c      	bne.n	80061cc <_dtoa_r+0x47c>
 80061b2:	4b48      	ldr	r3, [pc, #288]	@ (80062d4 <_dtoa_r+0x584>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	ec51 0b17 	vmov	r0, r1, d7
 80061ba:	f7fa f9fd 	bl	80005b8 <__aeabi_dmul>
 80061be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c2:	f7fa fc7f 	bl	8000ac4 <__aeabi_dcmpge>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f000 8255 	beq.w	8006676 <_dtoa_r+0x926>
 80061cc:	2400      	movs	r4, #0
 80061ce:	4625      	mov	r5, r4
 80061d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061d2:	43db      	mvns	r3, r3
 80061d4:	9306      	str	r3, [sp, #24]
 80061d6:	4656      	mov	r6, sl
 80061d8:	2700      	movs	r7, #0
 80061da:	4621      	mov	r1, r4
 80061dc:	4658      	mov	r0, fp
 80061de:	f000 fcb1 	bl	8006b44 <_Bfree>
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	f000 80bd 	beq.w	8006362 <_dtoa_r+0x612>
 80061e8:	b12f      	cbz	r7, 80061f6 <_dtoa_r+0x4a6>
 80061ea:	42af      	cmp	r7, r5
 80061ec:	d003      	beq.n	80061f6 <_dtoa_r+0x4a6>
 80061ee:	4639      	mov	r1, r7
 80061f0:	4658      	mov	r0, fp
 80061f2:	f000 fca7 	bl	8006b44 <_Bfree>
 80061f6:	4629      	mov	r1, r5
 80061f8:	4658      	mov	r0, fp
 80061fa:	f000 fca3 	bl	8006b44 <_Bfree>
 80061fe:	e0b0      	b.n	8006362 <_dtoa_r+0x612>
 8006200:	07e2      	lsls	r2, r4, #31
 8006202:	d505      	bpl.n	8006210 <_dtoa_r+0x4c0>
 8006204:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006208:	f7fa f9d6 	bl	80005b8 <__aeabi_dmul>
 800620c:	3601      	adds	r6, #1
 800620e:	2301      	movs	r3, #1
 8006210:	1064      	asrs	r4, r4, #1
 8006212:	3508      	adds	r5, #8
 8006214:	e762      	b.n	80060dc <_dtoa_r+0x38c>
 8006216:	2602      	movs	r6, #2
 8006218:	e765      	b.n	80060e6 <_dtoa_r+0x396>
 800621a:	9c03      	ldr	r4, [sp, #12]
 800621c:	9706      	str	r7, [sp, #24]
 800621e:	e784      	b.n	800612a <_dtoa_r+0x3da>
 8006220:	4b27      	ldr	r3, [pc, #156]	@ (80062c0 <_dtoa_r+0x570>)
 8006222:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006224:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800622c:	4454      	add	r4, sl
 800622e:	2900      	cmp	r1, #0
 8006230:	d054      	beq.n	80062dc <_dtoa_r+0x58c>
 8006232:	4929      	ldr	r1, [pc, #164]	@ (80062d8 <_dtoa_r+0x588>)
 8006234:	2000      	movs	r0, #0
 8006236:	f7fa fae9 	bl	800080c <__aeabi_ddiv>
 800623a:	4633      	mov	r3, r6
 800623c:	462a      	mov	r2, r5
 800623e:	f7fa f803 	bl	8000248 <__aeabi_dsub>
 8006242:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006246:	4656      	mov	r6, sl
 8006248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624c:	f7fa fc64 	bl	8000b18 <__aeabi_d2iz>
 8006250:	4605      	mov	r5, r0
 8006252:	f7fa f947 	bl	80004e4 <__aeabi_i2d>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800625e:	f7f9 fff3 	bl	8000248 <__aeabi_dsub>
 8006262:	3530      	adds	r5, #48	@ 0x30
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800626c:	f806 5b01 	strb.w	r5, [r6], #1
 8006270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006274:	f7fa fc12 	bl	8000a9c <__aeabi_dcmplt>
 8006278:	2800      	cmp	r0, #0
 800627a:	d172      	bne.n	8006362 <_dtoa_r+0x612>
 800627c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006280:	4911      	ldr	r1, [pc, #68]	@ (80062c8 <_dtoa_r+0x578>)
 8006282:	2000      	movs	r0, #0
 8006284:	f7f9 ffe0 	bl	8000248 <__aeabi_dsub>
 8006288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800628c:	f7fa fc06 	bl	8000a9c <__aeabi_dcmplt>
 8006290:	2800      	cmp	r0, #0
 8006292:	f040 80b4 	bne.w	80063fe <_dtoa_r+0x6ae>
 8006296:	42a6      	cmp	r6, r4
 8006298:	f43f af70 	beq.w	800617c <_dtoa_r+0x42c>
 800629c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062a0:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <_dtoa_r+0x57c>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	f7fa f988 	bl	80005b8 <__aeabi_dmul>
 80062a8:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <_dtoa_r+0x57c>)
 80062aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062ae:	2200      	movs	r2, #0
 80062b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062b4:	f7fa f980 	bl	80005b8 <__aeabi_dmul>
 80062b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062bc:	e7c4      	b.n	8006248 <_dtoa_r+0x4f8>
 80062be:	bf00      	nop
 80062c0:	08009890 	.word	0x08009890
 80062c4:	08009868 	.word	0x08009868
 80062c8:	3ff00000 	.word	0x3ff00000
 80062cc:	40240000 	.word	0x40240000
 80062d0:	401c0000 	.word	0x401c0000
 80062d4:	40140000 	.word	0x40140000
 80062d8:	3fe00000 	.word	0x3fe00000
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	f7fa f96a 	bl	80005b8 <__aeabi_dmul>
 80062e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062e8:	9415      	str	r4, [sp, #84]	@ 0x54
 80062ea:	4656      	mov	r6, sl
 80062ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f0:	f7fa fc12 	bl	8000b18 <__aeabi_d2iz>
 80062f4:	4605      	mov	r5, r0
 80062f6:	f7fa f8f5 	bl	80004e4 <__aeabi_i2d>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006302:	f7f9 ffa1 	bl	8000248 <__aeabi_dsub>
 8006306:	3530      	adds	r5, #48	@ 0x30
 8006308:	f806 5b01 	strb.w	r5, [r6], #1
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	42a6      	cmp	r6, r4
 8006312:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	d124      	bne.n	8006366 <_dtoa_r+0x616>
 800631c:	4bab      	ldr	r3, [pc, #684]	@ (80065cc <_dtoa_r+0x87c>)
 800631e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006322:	f7f9 ff93 	bl	800024c <__adddf3>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800632e:	f7fa fbd3 	bl	8000ad8 <__aeabi_dcmpgt>
 8006332:	2800      	cmp	r0, #0
 8006334:	d163      	bne.n	80063fe <_dtoa_r+0x6ae>
 8006336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800633a:	49a4      	ldr	r1, [pc, #656]	@ (80065cc <_dtoa_r+0x87c>)
 800633c:	2000      	movs	r0, #0
 800633e:	f7f9 ff83 	bl	8000248 <__aeabi_dsub>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800634a:	f7fa fba7 	bl	8000a9c <__aeabi_dcmplt>
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f af14 	beq.w	800617c <_dtoa_r+0x42c>
 8006354:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006356:	1e73      	subs	r3, r6, #1
 8006358:	9315      	str	r3, [sp, #84]	@ 0x54
 800635a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800635e:	2b30      	cmp	r3, #48	@ 0x30
 8006360:	d0f8      	beq.n	8006354 <_dtoa_r+0x604>
 8006362:	9f06      	ldr	r7, [sp, #24]
 8006364:	e03b      	b.n	80063de <_dtoa_r+0x68e>
 8006366:	4b9a      	ldr	r3, [pc, #616]	@ (80065d0 <_dtoa_r+0x880>)
 8006368:	f7fa f926 	bl	80005b8 <__aeabi_dmul>
 800636c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006370:	e7bc      	b.n	80062ec <_dtoa_r+0x59c>
 8006372:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006376:	4656      	mov	r6, sl
 8006378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800637c:	4620      	mov	r0, r4
 800637e:	4629      	mov	r1, r5
 8006380:	f7fa fa44 	bl	800080c <__aeabi_ddiv>
 8006384:	f7fa fbc8 	bl	8000b18 <__aeabi_d2iz>
 8006388:	4680      	mov	r8, r0
 800638a:	f7fa f8ab 	bl	80004e4 <__aeabi_i2d>
 800638e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006392:	f7fa f911 	bl	80005b8 <__aeabi_dmul>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4620      	mov	r0, r4
 800639c:	4629      	mov	r1, r5
 800639e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80063a2:	f7f9 ff51 	bl	8000248 <__aeabi_dsub>
 80063a6:	f806 4b01 	strb.w	r4, [r6], #1
 80063aa:	9d03      	ldr	r5, [sp, #12]
 80063ac:	eba6 040a 	sub.w	r4, r6, sl
 80063b0:	42a5      	cmp	r5, r4
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	d134      	bne.n	8006422 <_dtoa_r+0x6d2>
 80063b8:	f7f9 ff48 	bl	800024c <__adddf3>
 80063bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063c0:	4604      	mov	r4, r0
 80063c2:	460d      	mov	r5, r1
 80063c4:	f7fa fb88 	bl	8000ad8 <__aeabi_dcmpgt>
 80063c8:	b9c0      	cbnz	r0, 80063fc <_dtoa_r+0x6ac>
 80063ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ce:	4620      	mov	r0, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7fa fb59 	bl	8000a88 <__aeabi_dcmpeq>
 80063d6:	b110      	cbz	r0, 80063de <_dtoa_r+0x68e>
 80063d8:	f018 0f01 	tst.w	r8, #1
 80063dc:	d10e      	bne.n	80063fc <_dtoa_r+0x6ac>
 80063de:	4649      	mov	r1, r9
 80063e0:	4658      	mov	r0, fp
 80063e2:	f000 fbaf 	bl	8006b44 <_Bfree>
 80063e6:	2300      	movs	r3, #0
 80063e8:	7033      	strb	r3, [r6, #0]
 80063ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ec:	3701      	adds	r7, #1
 80063ee:	601f      	str	r7, [r3, #0]
 80063f0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 823c 	beq.w	8006870 <_dtoa_r+0xb20>
 80063f8:	601e      	str	r6, [r3, #0]
 80063fa:	e239      	b.n	8006870 <_dtoa_r+0xb20>
 80063fc:	9706      	str	r7, [sp, #24]
 80063fe:	4633      	mov	r3, r6
 8006400:	461e      	mov	r6, r3
 8006402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006406:	2a39      	cmp	r2, #57	@ 0x39
 8006408:	d107      	bne.n	800641a <_dtoa_r+0x6ca>
 800640a:	459a      	cmp	sl, r3
 800640c:	d1f8      	bne.n	8006400 <_dtoa_r+0x6b0>
 800640e:	9a06      	ldr	r2, [sp, #24]
 8006410:	3201      	adds	r2, #1
 8006412:	9206      	str	r2, [sp, #24]
 8006414:	2230      	movs	r2, #48	@ 0x30
 8006416:	f88a 2000 	strb.w	r2, [sl]
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	3201      	adds	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e79f      	b.n	8006362 <_dtoa_r+0x612>
 8006422:	4b6b      	ldr	r3, [pc, #428]	@ (80065d0 <_dtoa_r+0x880>)
 8006424:	2200      	movs	r2, #0
 8006426:	f7fa f8c7 	bl	80005b8 <__aeabi_dmul>
 800642a:	2200      	movs	r2, #0
 800642c:	2300      	movs	r3, #0
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	f7fa fb29 	bl	8000a88 <__aeabi_dcmpeq>
 8006436:	2800      	cmp	r0, #0
 8006438:	d09e      	beq.n	8006378 <_dtoa_r+0x628>
 800643a:	e7d0      	b.n	80063de <_dtoa_r+0x68e>
 800643c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800643e:	2a00      	cmp	r2, #0
 8006440:	f000 80e1 	beq.w	8006606 <_dtoa_r+0x8b6>
 8006444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006446:	2a01      	cmp	r2, #1
 8006448:	f300 80c4 	bgt.w	80065d4 <_dtoa_r+0x884>
 800644c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800644e:	2a00      	cmp	r2, #0
 8006450:	f000 80b7 	beq.w	80065c2 <_dtoa_r+0x872>
 8006454:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006458:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800645a:	4646      	mov	r6, r8
 800645c:	9a08      	ldr	r2, [sp, #32]
 800645e:	2101      	movs	r1, #1
 8006460:	441a      	add	r2, r3
 8006462:	4658      	mov	r0, fp
 8006464:	4498      	add	r8, r3
 8006466:	9208      	str	r2, [sp, #32]
 8006468:	f000 fc6a 	bl	8006d40 <__i2b>
 800646c:	4605      	mov	r5, r0
 800646e:	b15e      	cbz	r6, 8006488 <_dtoa_r+0x738>
 8006470:	9b08      	ldr	r3, [sp, #32]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dd08      	ble.n	8006488 <_dtoa_r+0x738>
 8006476:	42b3      	cmp	r3, r6
 8006478:	9a08      	ldr	r2, [sp, #32]
 800647a:	bfa8      	it	ge
 800647c:	4633      	movge	r3, r6
 800647e:	eba8 0803 	sub.w	r8, r8, r3
 8006482:	1af6      	subs	r6, r6, r3
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	9308      	str	r3, [sp, #32]
 8006488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800648a:	b1f3      	cbz	r3, 80064ca <_dtoa_r+0x77a>
 800648c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80bd 	beq.w	800660e <_dtoa_r+0x8be>
 8006494:	b18c      	cbz	r4, 80064ba <_dtoa_r+0x76a>
 8006496:	4629      	mov	r1, r5
 8006498:	4622      	mov	r2, r4
 800649a:	4658      	mov	r0, fp
 800649c:	f000 fd08 	bl	8006eb0 <__pow5mult>
 80064a0:	464a      	mov	r2, r9
 80064a2:	4601      	mov	r1, r0
 80064a4:	4605      	mov	r5, r0
 80064a6:	4658      	mov	r0, fp
 80064a8:	f000 fc60 	bl	8006d6c <__multiply>
 80064ac:	4649      	mov	r1, r9
 80064ae:	9006      	str	r0, [sp, #24]
 80064b0:	4658      	mov	r0, fp
 80064b2:	f000 fb47 	bl	8006b44 <_Bfree>
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	4699      	mov	r9, r3
 80064ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064bc:	1b1a      	subs	r2, r3, r4
 80064be:	d004      	beq.n	80064ca <_dtoa_r+0x77a>
 80064c0:	4649      	mov	r1, r9
 80064c2:	4658      	mov	r0, fp
 80064c4:	f000 fcf4 	bl	8006eb0 <__pow5mult>
 80064c8:	4681      	mov	r9, r0
 80064ca:	2101      	movs	r1, #1
 80064cc:	4658      	mov	r0, fp
 80064ce:	f000 fc37 	bl	8006d40 <__i2b>
 80064d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064d4:	4604      	mov	r4, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 81ce 	beq.w	8006878 <_dtoa_r+0xb28>
 80064dc:	461a      	mov	r2, r3
 80064de:	4601      	mov	r1, r0
 80064e0:	4658      	mov	r0, fp
 80064e2:	f000 fce5 	bl	8006eb0 <__pow5mult>
 80064e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	4604      	mov	r4, r0
 80064ec:	f300 8095 	bgt.w	800661a <_dtoa_r+0x8ca>
 80064f0:	9b04      	ldr	r3, [sp, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 808d 	bne.w	8006612 <_dtoa_r+0x8c2>
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 8089 	bne.w	8006616 <_dtoa_r+0x8c6>
 8006504:	9b05      	ldr	r3, [sp, #20]
 8006506:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800650a:	0d1b      	lsrs	r3, r3, #20
 800650c:	051b      	lsls	r3, r3, #20
 800650e:	b12b      	cbz	r3, 800651c <_dtoa_r+0x7cc>
 8006510:	9b08      	ldr	r3, [sp, #32]
 8006512:	3301      	adds	r3, #1
 8006514:	9308      	str	r3, [sp, #32]
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	2301      	movs	r3, #1
 800651c:	930a      	str	r3, [sp, #40]	@ 0x28
 800651e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 81af 	beq.w	8006884 <_dtoa_r+0xb34>
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800652c:	6918      	ldr	r0, [r3, #16]
 800652e:	f000 fbbb 	bl	8006ca8 <__hi0bits>
 8006532:	f1c0 0020 	rsb	r0, r0, #32
 8006536:	9b08      	ldr	r3, [sp, #32]
 8006538:	4418      	add	r0, r3
 800653a:	f010 001f 	ands.w	r0, r0, #31
 800653e:	d077      	beq.n	8006630 <_dtoa_r+0x8e0>
 8006540:	f1c0 0320 	rsb	r3, r0, #32
 8006544:	2b04      	cmp	r3, #4
 8006546:	dd6b      	ble.n	8006620 <_dtoa_r+0x8d0>
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	f1c0 001c 	rsb	r0, r0, #28
 800654e:	4403      	add	r3, r0
 8006550:	4480      	add	r8, r0
 8006552:	4406      	add	r6, r0
 8006554:	9308      	str	r3, [sp, #32]
 8006556:	f1b8 0f00 	cmp.w	r8, #0
 800655a:	dd05      	ble.n	8006568 <_dtoa_r+0x818>
 800655c:	4649      	mov	r1, r9
 800655e:	4642      	mov	r2, r8
 8006560:	4658      	mov	r0, fp
 8006562:	f000 fcff 	bl	8006f64 <__lshift>
 8006566:	4681      	mov	r9, r0
 8006568:	9b08      	ldr	r3, [sp, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	dd05      	ble.n	800657a <_dtoa_r+0x82a>
 800656e:	4621      	mov	r1, r4
 8006570:	461a      	mov	r2, r3
 8006572:	4658      	mov	r0, fp
 8006574:	f000 fcf6 	bl	8006f64 <__lshift>
 8006578:	4604      	mov	r4, r0
 800657a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800657c:	2b00      	cmp	r3, #0
 800657e:	d059      	beq.n	8006634 <_dtoa_r+0x8e4>
 8006580:	4621      	mov	r1, r4
 8006582:	4648      	mov	r0, r9
 8006584:	f000 fd5a 	bl	800703c <__mcmp>
 8006588:	2800      	cmp	r0, #0
 800658a:	da53      	bge.n	8006634 <_dtoa_r+0x8e4>
 800658c:	1e7b      	subs	r3, r7, #1
 800658e:	9306      	str	r3, [sp, #24]
 8006590:	4649      	mov	r1, r9
 8006592:	2300      	movs	r3, #0
 8006594:	220a      	movs	r2, #10
 8006596:	4658      	mov	r0, fp
 8006598:	f000 faf6 	bl	8006b88 <__multadd>
 800659c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800659e:	4681      	mov	r9, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8171 	beq.w	8006888 <_dtoa_r+0xb38>
 80065a6:	2300      	movs	r3, #0
 80065a8:	4629      	mov	r1, r5
 80065aa:	220a      	movs	r2, #10
 80065ac:	4658      	mov	r0, fp
 80065ae:	f000 faeb 	bl	8006b88 <__multadd>
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	4605      	mov	r5, r0
 80065b8:	dc67      	bgt.n	800668a <_dtoa_r+0x93a>
 80065ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065bc:	2b02      	cmp	r3, #2
 80065be:	dc41      	bgt.n	8006644 <_dtoa_r+0x8f4>
 80065c0:	e063      	b.n	800668a <_dtoa_r+0x93a>
 80065c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80065c4:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065c8:	e746      	b.n	8006458 <_dtoa_r+0x708>
 80065ca:	bf00      	nop
 80065cc:	3fe00000 	.word	0x3fe00000
 80065d0:	40240000 	.word	0x40240000
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	1e5c      	subs	r4, r3, #1
 80065d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065da:	42a3      	cmp	r3, r4
 80065dc:	db09      	blt.n	80065f2 <_dtoa_r+0x8a2>
 80065de:	1b1c      	subs	r4, r3, r4
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f6bf af39 	bge.w	800645a <_dtoa_r+0x70a>
 80065e8:	9b03      	ldr	r3, [sp, #12]
 80065ea:	eba8 0603 	sub.w	r6, r8, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	e734      	b.n	800645c <_dtoa_r+0x70c>
 80065f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80065f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80065f8:	1ae3      	subs	r3, r4, r3
 80065fa:	441a      	add	r2, r3
 80065fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	4646      	mov	r6, r8
 8006602:	2400      	movs	r4, #0
 8006604:	e72a      	b.n	800645c <_dtoa_r+0x70c>
 8006606:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006608:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800660a:	4646      	mov	r6, r8
 800660c:	e72f      	b.n	800646e <_dtoa_r+0x71e>
 800660e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006610:	e756      	b.n	80064c0 <_dtoa_r+0x770>
 8006612:	2300      	movs	r3, #0
 8006614:	e782      	b.n	800651c <_dtoa_r+0x7cc>
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	e780      	b.n	800651c <_dtoa_r+0x7cc>
 800661a:	2300      	movs	r3, #0
 800661c:	930a      	str	r3, [sp, #40]	@ 0x28
 800661e:	e782      	b.n	8006526 <_dtoa_r+0x7d6>
 8006620:	d099      	beq.n	8006556 <_dtoa_r+0x806>
 8006622:	9a08      	ldr	r2, [sp, #32]
 8006624:	331c      	adds	r3, #28
 8006626:	441a      	add	r2, r3
 8006628:	4498      	add	r8, r3
 800662a:	441e      	add	r6, r3
 800662c:	9208      	str	r2, [sp, #32]
 800662e:	e792      	b.n	8006556 <_dtoa_r+0x806>
 8006630:	4603      	mov	r3, r0
 8006632:	e7f6      	b.n	8006622 <_dtoa_r+0x8d2>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	9706      	str	r7, [sp, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	dc20      	bgt.n	800667e <_dtoa_r+0x92e>
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006640:	2b02      	cmp	r3, #2
 8006642:	dd1e      	ble.n	8006682 <_dtoa_r+0x932>
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	f47f adc2 	bne.w	80061d0 <_dtoa_r+0x480>
 800664c:	4621      	mov	r1, r4
 800664e:	2205      	movs	r2, #5
 8006650:	4658      	mov	r0, fp
 8006652:	f000 fa99 	bl	8006b88 <__multadd>
 8006656:	4601      	mov	r1, r0
 8006658:	4604      	mov	r4, r0
 800665a:	4648      	mov	r0, r9
 800665c:	f000 fcee 	bl	800703c <__mcmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	f77f adb5 	ble.w	80061d0 <_dtoa_r+0x480>
 8006666:	4656      	mov	r6, sl
 8006668:	2331      	movs	r3, #49	@ 0x31
 800666a:	f806 3b01 	strb.w	r3, [r6], #1
 800666e:	9b06      	ldr	r3, [sp, #24]
 8006670:	3301      	adds	r3, #1
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	e5b0      	b.n	80061d8 <_dtoa_r+0x488>
 8006676:	9c03      	ldr	r4, [sp, #12]
 8006678:	9706      	str	r7, [sp, #24]
 800667a:	4625      	mov	r5, r4
 800667c:	e7f3      	b.n	8006666 <_dtoa_r+0x916>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8103 	beq.w	8006890 <_dtoa_r+0xb40>
 800668a:	2e00      	cmp	r6, #0
 800668c:	dd05      	ble.n	800669a <_dtoa_r+0x94a>
 800668e:	4629      	mov	r1, r5
 8006690:	4632      	mov	r2, r6
 8006692:	4658      	mov	r0, fp
 8006694:	f000 fc66 	bl	8006f64 <__lshift>
 8006698:	4605      	mov	r5, r0
 800669a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d05a      	beq.n	8006756 <_dtoa_r+0xa06>
 80066a0:	6869      	ldr	r1, [r5, #4]
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 fa0e 	bl	8006ac4 <_Balloc>
 80066a8:	4606      	mov	r6, r0
 80066aa:	b928      	cbnz	r0, 80066b8 <_dtoa_r+0x968>
 80066ac:	4b83      	ldr	r3, [pc, #524]	@ (80068bc <_dtoa_r+0xb6c>)
 80066ae:	4602      	mov	r2, r0
 80066b0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066b4:	f7ff bb63 	b.w	8005d7e <_dtoa_r+0x2e>
 80066b8:	692a      	ldr	r2, [r5, #16]
 80066ba:	3202      	adds	r2, #2
 80066bc:	0092      	lsls	r2, r2, #2
 80066be:	f105 010c 	add.w	r1, r5, #12
 80066c2:	300c      	adds	r0, #12
 80066c4:	f002 f944 	bl	8008950 <memcpy>
 80066c8:	2201      	movs	r2, #1
 80066ca:	4631      	mov	r1, r6
 80066cc:	4658      	mov	r0, fp
 80066ce:	f000 fc49 	bl	8006f64 <__lshift>
 80066d2:	f10a 0301 	add.w	r3, sl, #1
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	9b00      	ldr	r3, [sp, #0]
 80066da:	4453      	add	r3, sl
 80066dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	462f      	mov	r7, r5
 80066e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e8:	4605      	mov	r5, r0
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	4621      	mov	r1, r4
 80066ee:	3b01      	subs	r3, #1
 80066f0:	4648      	mov	r0, r9
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	f7ff faa2 	bl	8005c3c <quorem>
 80066f8:	4639      	mov	r1, r7
 80066fa:	9004      	str	r0, [sp, #16]
 80066fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006700:	4648      	mov	r0, r9
 8006702:	f000 fc9b 	bl	800703c <__mcmp>
 8006706:	462a      	mov	r2, r5
 8006708:	9008      	str	r0, [sp, #32]
 800670a:	4621      	mov	r1, r4
 800670c:	4658      	mov	r0, fp
 800670e:	f000 fcb1 	bl	8007074 <__mdiff>
 8006712:	68c2      	ldr	r2, [r0, #12]
 8006714:	4606      	mov	r6, r0
 8006716:	bb02      	cbnz	r2, 800675a <_dtoa_r+0xa0a>
 8006718:	4601      	mov	r1, r0
 800671a:	4648      	mov	r0, r9
 800671c:	f000 fc8e 	bl	800703c <__mcmp>
 8006720:	4602      	mov	r2, r0
 8006722:	4631      	mov	r1, r6
 8006724:	4658      	mov	r0, fp
 8006726:	920e      	str	r2, [sp, #56]	@ 0x38
 8006728:	f000 fa0c 	bl	8006b44 <_Bfree>
 800672c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800672e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006730:	9e03      	ldr	r6, [sp, #12]
 8006732:	ea42 0103 	orr.w	r1, r2, r3
 8006736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006738:	4319      	orrs	r1, r3
 800673a:	d110      	bne.n	800675e <_dtoa_r+0xa0e>
 800673c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006740:	d029      	beq.n	8006796 <_dtoa_r+0xa46>
 8006742:	9b08      	ldr	r3, [sp, #32]
 8006744:	2b00      	cmp	r3, #0
 8006746:	dd02      	ble.n	800674e <_dtoa_r+0x9fe>
 8006748:	9b04      	ldr	r3, [sp, #16]
 800674a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	f883 8000 	strb.w	r8, [r3]
 8006754:	e541      	b.n	80061da <_dtoa_r+0x48a>
 8006756:	4628      	mov	r0, r5
 8006758:	e7bb      	b.n	80066d2 <_dtoa_r+0x982>
 800675a:	2201      	movs	r2, #1
 800675c:	e7e1      	b.n	8006722 <_dtoa_r+0x9d2>
 800675e:	9b08      	ldr	r3, [sp, #32]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db04      	blt.n	800676e <_dtoa_r+0xa1e>
 8006764:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006766:	430b      	orrs	r3, r1
 8006768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800676a:	430b      	orrs	r3, r1
 800676c:	d120      	bne.n	80067b0 <_dtoa_r+0xa60>
 800676e:	2a00      	cmp	r2, #0
 8006770:	dded      	ble.n	800674e <_dtoa_r+0x9fe>
 8006772:	4649      	mov	r1, r9
 8006774:	2201      	movs	r2, #1
 8006776:	4658      	mov	r0, fp
 8006778:	f000 fbf4 	bl	8006f64 <__lshift>
 800677c:	4621      	mov	r1, r4
 800677e:	4681      	mov	r9, r0
 8006780:	f000 fc5c 	bl	800703c <__mcmp>
 8006784:	2800      	cmp	r0, #0
 8006786:	dc03      	bgt.n	8006790 <_dtoa_r+0xa40>
 8006788:	d1e1      	bne.n	800674e <_dtoa_r+0x9fe>
 800678a:	f018 0f01 	tst.w	r8, #1
 800678e:	d0de      	beq.n	800674e <_dtoa_r+0x9fe>
 8006790:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006794:	d1d8      	bne.n	8006748 <_dtoa_r+0x9f8>
 8006796:	9a00      	ldr	r2, [sp, #0]
 8006798:	2339      	movs	r3, #57	@ 0x39
 800679a:	7013      	strb	r3, [r2, #0]
 800679c:	4633      	mov	r3, r6
 800679e:	461e      	mov	r6, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067a6:	2a39      	cmp	r2, #57	@ 0x39
 80067a8:	d051      	beq.n	800684e <_dtoa_r+0xafe>
 80067aa:	3201      	adds	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e514      	b.n	80061da <_dtoa_r+0x48a>
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	dd07      	ble.n	80067c4 <_dtoa_r+0xa74>
 80067b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067b8:	d0ed      	beq.n	8006796 <_dtoa_r+0xa46>
 80067ba:	9a00      	ldr	r2, [sp, #0]
 80067bc:	f108 0301 	add.w	r3, r8, #1
 80067c0:	7013      	strb	r3, [r2, #0]
 80067c2:	e50a      	b.n	80061da <_dtoa_r+0x48a>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d028      	beq.n	8006822 <_dtoa_r+0xad2>
 80067d0:	4649      	mov	r1, r9
 80067d2:	2300      	movs	r3, #0
 80067d4:	220a      	movs	r2, #10
 80067d6:	4658      	mov	r0, fp
 80067d8:	f000 f9d6 	bl	8006b88 <__multadd>
 80067dc:	42af      	cmp	r7, r5
 80067de:	4681      	mov	r9, r0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	f04f 020a 	mov.w	r2, #10
 80067e8:	4639      	mov	r1, r7
 80067ea:	4658      	mov	r0, fp
 80067ec:	d107      	bne.n	80067fe <_dtoa_r+0xaae>
 80067ee:	f000 f9cb 	bl	8006b88 <__multadd>
 80067f2:	4607      	mov	r7, r0
 80067f4:	4605      	mov	r5, r0
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	3301      	adds	r3, #1
 80067fa:	9303      	str	r3, [sp, #12]
 80067fc:	e775      	b.n	80066ea <_dtoa_r+0x99a>
 80067fe:	f000 f9c3 	bl	8006b88 <__multadd>
 8006802:	4629      	mov	r1, r5
 8006804:	4607      	mov	r7, r0
 8006806:	2300      	movs	r3, #0
 8006808:	220a      	movs	r2, #10
 800680a:	4658      	mov	r0, fp
 800680c:	f000 f9bc 	bl	8006b88 <__multadd>
 8006810:	4605      	mov	r5, r0
 8006812:	e7f0      	b.n	80067f6 <_dtoa_r+0xaa6>
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfcc      	ite	gt
 800681a:	461e      	movgt	r6, r3
 800681c:	2601      	movle	r6, #1
 800681e:	4456      	add	r6, sl
 8006820:	2700      	movs	r7, #0
 8006822:	4649      	mov	r1, r9
 8006824:	2201      	movs	r2, #1
 8006826:	4658      	mov	r0, fp
 8006828:	f000 fb9c 	bl	8006f64 <__lshift>
 800682c:	4621      	mov	r1, r4
 800682e:	4681      	mov	r9, r0
 8006830:	f000 fc04 	bl	800703c <__mcmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	dcb1      	bgt.n	800679c <_dtoa_r+0xa4c>
 8006838:	d102      	bne.n	8006840 <_dtoa_r+0xaf0>
 800683a:	f018 0f01 	tst.w	r8, #1
 800683e:	d1ad      	bne.n	800679c <_dtoa_r+0xa4c>
 8006840:	4633      	mov	r3, r6
 8006842:	461e      	mov	r6, r3
 8006844:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006848:	2a30      	cmp	r2, #48	@ 0x30
 800684a:	d0fa      	beq.n	8006842 <_dtoa_r+0xaf2>
 800684c:	e4c5      	b.n	80061da <_dtoa_r+0x48a>
 800684e:	459a      	cmp	sl, r3
 8006850:	d1a5      	bne.n	800679e <_dtoa_r+0xa4e>
 8006852:	9b06      	ldr	r3, [sp, #24]
 8006854:	3301      	adds	r3, #1
 8006856:	9306      	str	r3, [sp, #24]
 8006858:	2331      	movs	r3, #49	@ 0x31
 800685a:	f88a 3000 	strb.w	r3, [sl]
 800685e:	e4bc      	b.n	80061da <_dtoa_r+0x48a>
 8006860:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006862:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80068c0 <_dtoa_r+0xb70>
 8006866:	b11b      	cbz	r3, 8006870 <_dtoa_r+0xb20>
 8006868:	f10a 0308 	add.w	r3, sl, #8
 800686c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	4650      	mov	r0, sl
 8006872:	b019      	add	sp, #100	@ 0x64
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687a:	2b01      	cmp	r3, #1
 800687c:	f77f ae38 	ble.w	80064f0 <_dtoa_r+0x7a0>
 8006880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006882:	930a      	str	r3, [sp, #40]	@ 0x28
 8006884:	2001      	movs	r0, #1
 8006886:	e656      	b.n	8006536 <_dtoa_r+0x7e6>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f77f aed7 	ble.w	800663e <_dtoa_r+0x8ee>
 8006890:	4656      	mov	r6, sl
 8006892:	4621      	mov	r1, r4
 8006894:	4648      	mov	r0, r9
 8006896:	f7ff f9d1 	bl	8005c3c <quorem>
 800689a:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800689e:	f806 8b01 	strb.w	r8, [r6], #1
 80068a2:	9b00      	ldr	r3, [sp, #0]
 80068a4:	eba6 020a 	sub.w	r2, r6, sl
 80068a8:	4293      	cmp	r3, r2
 80068aa:	ddb3      	ble.n	8006814 <_dtoa_r+0xac4>
 80068ac:	4649      	mov	r1, r9
 80068ae:	2300      	movs	r3, #0
 80068b0:	220a      	movs	r2, #10
 80068b2:	4658      	mov	r0, fp
 80068b4:	f000 f968 	bl	8006b88 <__multadd>
 80068b8:	4681      	mov	r9, r0
 80068ba:	e7ea      	b.n	8006892 <_dtoa_r+0xb42>
 80068bc:	08009736 	.word	0x08009736
 80068c0:	080096b9 	.word	0x080096b9

080068c4 <_free_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4605      	mov	r5, r0
 80068c8:	2900      	cmp	r1, #0
 80068ca:	d041      	beq.n	8006950 <_free_r+0x8c>
 80068cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068d0:	1f0c      	subs	r4, r1, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bfb8      	it	lt
 80068d6:	18e4      	addlt	r4, r4, r3
 80068d8:	f000 f8e8 	bl	8006aac <__malloc_lock>
 80068dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006954 <_free_r+0x90>)
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	b933      	cbnz	r3, 80068f0 <_free_r+0x2c>
 80068e2:	6063      	str	r3, [r4, #4]
 80068e4:	6014      	str	r4, [r2, #0]
 80068e6:	4628      	mov	r0, r5
 80068e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ec:	f000 b8e4 	b.w	8006ab8 <__malloc_unlock>
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d908      	bls.n	8006906 <_free_r+0x42>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	1821      	adds	r1, r4, r0
 80068f8:	428b      	cmp	r3, r1
 80068fa:	bf01      	itttt	eq
 80068fc:	6819      	ldreq	r1, [r3, #0]
 80068fe:	685b      	ldreq	r3, [r3, #4]
 8006900:	1809      	addeq	r1, r1, r0
 8006902:	6021      	streq	r1, [r4, #0]
 8006904:	e7ed      	b.n	80068e2 <_free_r+0x1e>
 8006906:	461a      	mov	r2, r3
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	b10b      	cbz	r3, 8006910 <_free_r+0x4c>
 800690c:	42a3      	cmp	r3, r4
 800690e:	d9fa      	bls.n	8006906 <_free_r+0x42>
 8006910:	6811      	ldr	r1, [r2, #0]
 8006912:	1850      	adds	r0, r2, r1
 8006914:	42a0      	cmp	r0, r4
 8006916:	d10b      	bne.n	8006930 <_free_r+0x6c>
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	4401      	add	r1, r0
 800691c:	1850      	adds	r0, r2, r1
 800691e:	4283      	cmp	r3, r0
 8006920:	6011      	str	r1, [r2, #0]
 8006922:	d1e0      	bne.n	80068e6 <_free_r+0x22>
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	6053      	str	r3, [r2, #4]
 800692a:	4408      	add	r0, r1
 800692c:	6010      	str	r0, [r2, #0]
 800692e:	e7da      	b.n	80068e6 <_free_r+0x22>
 8006930:	d902      	bls.n	8006938 <_free_r+0x74>
 8006932:	230c      	movs	r3, #12
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	e7d6      	b.n	80068e6 <_free_r+0x22>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	1821      	adds	r1, r4, r0
 800693c:	428b      	cmp	r3, r1
 800693e:	bf04      	itt	eq
 8006940:	6819      	ldreq	r1, [r3, #0]
 8006942:	685b      	ldreq	r3, [r3, #4]
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	bf04      	itt	eq
 8006948:	1809      	addeq	r1, r1, r0
 800694a:	6021      	streq	r1, [r4, #0]
 800694c:	6054      	str	r4, [r2, #4]
 800694e:	e7ca      	b.n	80068e6 <_free_r+0x22>
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop
 8006954:	20000500 	.word	0x20000500

08006958 <malloc>:
 8006958:	4b02      	ldr	r3, [pc, #8]	@ (8006964 <malloc+0xc>)
 800695a:	4601      	mov	r1, r0
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f000 b825 	b.w	80069ac <_malloc_r>
 8006962:	bf00      	nop
 8006964:	20000018 	.word	0x20000018

08006968 <sbrk_aligned>:
 8006968:	b570      	push	{r4, r5, r6, lr}
 800696a:	4e0f      	ldr	r6, [pc, #60]	@ (80069a8 <sbrk_aligned+0x40>)
 800696c:	460c      	mov	r4, r1
 800696e:	6831      	ldr	r1, [r6, #0]
 8006970:	4605      	mov	r5, r0
 8006972:	b911      	cbnz	r1, 800697a <sbrk_aligned+0x12>
 8006974:	f001 ffdc 	bl	8008930 <_sbrk_r>
 8006978:	6030      	str	r0, [r6, #0]
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f001 ffd7 	bl	8008930 <_sbrk_r>
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	d103      	bne.n	800698e <sbrk_aligned+0x26>
 8006986:	f04f 34ff 	mov.w	r4, #4294967295
 800698a:	4620      	mov	r0, r4
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	1cc4      	adds	r4, r0, #3
 8006990:	f024 0403 	bic.w	r4, r4, #3
 8006994:	42a0      	cmp	r0, r4
 8006996:	d0f8      	beq.n	800698a <sbrk_aligned+0x22>
 8006998:	1a21      	subs	r1, r4, r0
 800699a:	4628      	mov	r0, r5
 800699c:	f001 ffc8 	bl	8008930 <_sbrk_r>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d1f2      	bne.n	800698a <sbrk_aligned+0x22>
 80069a4:	e7ef      	b.n	8006986 <sbrk_aligned+0x1e>
 80069a6:	bf00      	nop
 80069a8:	200004fc 	.word	0x200004fc

080069ac <_malloc_r>:
 80069ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b0:	1ccd      	adds	r5, r1, #3
 80069b2:	f025 0503 	bic.w	r5, r5, #3
 80069b6:	3508      	adds	r5, #8
 80069b8:	2d0c      	cmp	r5, #12
 80069ba:	bf38      	it	cc
 80069bc:	250c      	movcc	r5, #12
 80069be:	2d00      	cmp	r5, #0
 80069c0:	4606      	mov	r6, r0
 80069c2:	db01      	blt.n	80069c8 <_malloc_r+0x1c>
 80069c4:	42a9      	cmp	r1, r5
 80069c6:	d904      	bls.n	80069d2 <_malloc_r+0x26>
 80069c8:	230c      	movs	r3, #12
 80069ca:	6033      	str	r3, [r6, #0]
 80069cc:	2000      	movs	r0, #0
 80069ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006aa8 <_malloc_r+0xfc>
 80069d6:	f000 f869 	bl	8006aac <__malloc_lock>
 80069da:	f8d8 3000 	ldr.w	r3, [r8]
 80069de:	461c      	mov	r4, r3
 80069e0:	bb44      	cbnz	r4, 8006a34 <_malloc_r+0x88>
 80069e2:	4629      	mov	r1, r5
 80069e4:	4630      	mov	r0, r6
 80069e6:	f7ff ffbf 	bl	8006968 <sbrk_aligned>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	4604      	mov	r4, r0
 80069ee:	d158      	bne.n	8006aa2 <_malloc_r+0xf6>
 80069f0:	f8d8 4000 	ldr.w	r4, [r8]
 80069f4:	4627      	mov	r7, r4
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	d143      	bne.n	8006a82 <_malloc_r+0xd6>
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	d04b      	beq.n	8006a96 <_malloc_r+0xea>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	4639      	mov	r1, r7
 8006a02:	4630      	mov	r0, r6
 8006a04:	eb04 0903 	add.w	r9, r4, r3
 8006a08:	f001 ff92 	bl	8008930 <_sbrk_r>
 8006a0c:	4581      	cmp	r9, r0
 8006a0e:	d142      	bne.n	8006a96 <_malloc_r+0xea>
 8006a10:	6821      	ldr	r1, [r4, #0]
 8006a12:	1a6d      	subs	r5, r5, r1
 8006a14:	4629      	mov	r1, r5
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7ff ffa6 	bl	8006968 <sbrk_aligned>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d03a      	beq.n	8006a96 <_malloc_r+0xea>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	442b      	add	r3, r5
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	f8d8 3000 	ldr.w	r3, [r8]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	bb62      	cbnz	r2, 8006a88 <_malloc_r+0xdc>
 8006a2e:	f8c8 7000 	str.w	r7, [r8]
 8006a32:	e00f      	b.n	8006a54 <_malloc_r+0xa8>
 8006a34:	6822      	ldr	r2, [r4, #0]
 8006a36:	1b52      	subs	r2, r2, r5
 8006a38:	d420      	bmi.n	8006a7c <_malloc_r+0xd0>
 8006a3a:	2a0b      	cmp	r2, #11
 8006a3c:	d917      	bls.n	8006a6e <_malloc_r+0xc2>
 8006a3e:	1961      	adds	r1, r4, r5
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	6025      	str	r5, [r4, #0]
 8006a44:	bf18      	it	ne
 8006a46:	6059      	strne	r1, [r3, #4]
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	bf08      	it	eq
 8006a4c:	f8c8 1000 	streq.w	r1, [r8]
 8006a50:	5162      	str	r2, [r4, r5]
 8006a52:	604b      	str	r3, [r1, #4]
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 f82f 	bl	8006ab8 <__malloc_unlock>
 8006a5a:	f104 000b 	add.w	r0, r4, #11
 8006a5e:	1d23      	adds	r3, r4, #4
 8006a60:	f020 0007 	bic.w	r0, r0, #7
 8006a64:	1ac2      	subs	r2, r0, r3
 8006a66:	bf1c      	itt	ne
 8006a68:	1a1b      	subne	r3, r3, r0
 8006a6a:	50a3      	strne	r3, [r4, r2]
 8006a6c:	e7af      	b.n	80069ce <_malloc_r+0x22>
 8006a6e:	6862      	ldr	r2, [r4, #4]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	bf0c      	ite	eq
 8006a74:	f8c8 2000 	streq.w	r2, [r8]
 8006a78:	605a      	strne	r2, [r3, #4]
 8006a7a:	e7eb      	b.n	8006a54 <_malloc_r+0xa8>
 8006a7c:	4623      	mov	r3, r4
 8006a7e:	6864      	ldr	r4, [r4, #4]
 8006a80:	e7ae      	b.n	80069e0 <_malloc_r+0x34>
 8006a82:	463c      	mov	r4, r7
 8006a84:	687f      	ldr	r7, [r7, #4]
 8006a86:	e7b6      	b.n	80069f6 <_malloc_r+0x4a>
 8006a88:	461a      	mov	r2, r3
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	d1fb      	bne.n	8006a88 <_malloc_r+0xdc>
 8006a90:	2300      	movs	r3, #0
 8006a92:	6053      	str	r3, [r2, #4]
 8006a94:	e7de      	b.n	8006a54 <_malloc_r+0xa8>
 8006a96:	230c      	movs	r3, #12
 8006a98:	6033      	str	r3, [r6, #0]
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f000 f80c 	bl	8006ab8 <__malloc_unlock>
 8006aa0:	e794      	b.n	80069cc <_malloc_r+0x20>
 8006aa2:	6005      	str	r5, [r0, #0]
 8006aa4:	e7d6      	b.n	8006a54 <_malloc_r+0xa8>
 8006aa6:	bf00      	nop
 8006aa8:	20000500 	.word	0x20000500

08006aac <__malloc_lock>:
 8006aac:	4801      	ldr	r0, [pc, #4]	@ (8006ab4 <__malloc_lock+0x8>)
 8006aae:	f7ff b8bc 	b.w	8005c2a <__retarget_lock_acquire_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	200004f8 	.word	0x200004f8

08006ab8 <__malloc_unlock>:
 8006ab8:	4801      	ldr	r0, [pc, #4]	@ (8006ac0 <__malloc_unlock+0x8>)
 8006aba:	f7ff b8b7 	b.w	8005c2c <__retarget_lock_release_recursive>
 8006abe:	bf00      	nop
 8006ac0:	200004f8 	.word	0x200004f8

08006ac4 <_Balloc>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	69c6      	ldr	r6, [r0, #28]
 8006ac8:	4604      	mov	r4, r0
 8006aca:	460d      	mov	r5, r1
 8006acc:	b976      	cbnz	r6, 8006aec <_Balloc+0x28>
 8006ace:	2010      	movs	r0, #16
 8006ad0:	f7ff ff42 	bl	8006958 <malloc>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	61e0      	str	r0, [r4, #28]
 8006ad8:	b920      	cbnz	r0, 8006ae4 <_Balloc+0x20>
 8006ada:	4b18      	ldr	r3, [pc, #96]	@ (8006b3c <_Balloc+0x78>)
 8006adc:	4818      	ldr	r0, [pc, #96]	@ (8006b40 <_Balloc+0x7c>)
 8006ade:	216b      	movs	r1, #107	@ 0x6b
 8006ae0:	f001 ff4e 	bl	8008980 <__assert_func>
 8006ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ae8:	6006      	str	r6, [r0, #0]
 8006aea:	60c6      	str	r6, [r0, #12]
 8006aec:	69e6      	ldr	r6, [r4, #28]
 8006aee:	68f3      	ldr	r3, [r6, #12]
 8006af0:	b183      	cbz	r3, 8006b14 <_Balloc+0x50>
 8006af2:	69e3      	ldr	r3, [r4, #28]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006afa:	b9b8      	cbnz	r0, 8006b2c <_Balloc+0x68>
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f605 	lsl.w	r6, r1, r5
 8006b02:	1d72      	adds	r2, r6, #5
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	4620      	mov	r0, r4
 8006b08:	f001 ff58 	bl	80089bc <_calloc_r>
 8006b0c:	b160      	cbz	r0, 8006b28 <_Balloc+0x64>
 8006b0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b12:	e00e      	b.n	8006b32 <_Balloc+0x6e>
 8006b14:	2221      	movs	r2, #33	@ 0x21
 8006b16:	2104      	movs	r1, #4
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f001 ff4f 	bl	80089bc <_calloc_r>
 8006b1e:	69e3      	ldr	r3, [r4, #28]
 8006b20:	60f0      	str	r0, [r6, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e4      	bne.n	8006af2 <_Balloc+0x2e>
 8006b28:	2000      	movs	r0, #0
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	6802      	ldr	r2, [r0, #0]
 8006b2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b32:	2300      	movs	r3, #0
 8006b34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b38:	e7f7      	b.n	8006b2a <_Balloc+0x66>
 8006b3a:	bf00      	nop
 8006b3c:	080096c6 	.word	0x080096c6
 8006b40:	08009747 	.word	0x08009747

08006b44 <_Bfree>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	69c6      	ldr	r6, [r0, #28]
 8006b48:	4605      	mov	r5, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	b976      	cbnz	r6, 8006b6c <_Bfree+0x28>
 8006b4e:	2010      	movs	r0, #16
 8006b50:	f7ff ff02 	bl	8006958 <malloc>
 8006b54:	4602      	mov	r2, r0
 8006b56:	61e8      	str	r0, [r5, #28]
 8006b58:	b920      	cbnz	r0, 8006b64 <_Bfree+0x20>
 8006b5a:	4b09      	ldr	r3, [pc, #36]	@ (8006b80 <_Bfree+0x3c>)
 8006b5c:	4809      	ldr	r0, [pc, #36]	@ (8006b84 <_Bfree+0x40>)
 8006b5e:	218f      	movs	r1, #143	@ 0x8f
 8006b60:	f001 ff0e 	bl	8008980 <__assert_func>
 8006b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b68:	6006      	str	r6, [r0, #0]
 8006b6a:	60c6      	str	r6, [r0, #12]
 8006b6c:	b13c      	cbz	r4, 8006b7e <_Bfree+0x3a>
 8006b6e:	69eb      	ldr	r3, [r5, #28]
 8006b70:	6862      	ldr	r2, [r4, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b78:	6021      	str	r1, [r4, #0]
 8006b7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	080096c6 	.word	0x080096c6
 8006b84:	08009747 	.word	0x08009747

08006b88 <__multadd>:
 8006b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8c:	690d      	ldr	r5, [r1, #16]
 8006b8e:	4607      	mov	r7, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	461e      	mov	r6, r3
 8006b94:	f101 0c14 	add.w	ip, r1, #20
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b9e:	b299      	uxth	r1, r3
 8006ba0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ba4:	0c1e      	lsrs	r6, r3, #16
 8006ba6:	0c0b      	lsrs	r3, r1, #16
 8006ba8:	fb02 3306 	mla	r3, r2, r6, r3
 8006bac:	b289      	uxth	r1, r1
 8006bae:	3001      	adds	r0, #1
 8006bb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bb4:	4285      	cmp	r5, r0
 8006bb6:	f84c 1b04 	str.w	r1, [ip], #4
 8006bba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bbe:	dcec      	bgt.n	8006b9a <__multadd+0x12>
 8006bc0:	b30e      	cbz	r6, 8006c06 <__multadd+0x7e>
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	dc19      	bgt.n	8006bfc <__multadd+0x74>
 8006bc8:	6861      	ldr	r1, [r4, #4]
 8006bca:	4638      	mov	r0, r7
 8006bcc:	3101      	adds	r1, #1
 8006bce:	f7ff ff79 	bl	8006ac4 <_Balloc>
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	b928      	cbnz	r0, 8006be2 <__multadd+0x5a>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c0c <__multadd+0x84>)
 8006bda:	480d      	ldr	r0, [pc, #52]	@ (8006c10 <__multadd+0x88>)
 8006bdc:	21ba      	movs	r1, #186	@ 0xba
 8006bde:	f001 fecf 	bl	8008980 <__assert_func>
 8006be2:	6922      	ldr	r2, [r4, #16]
 8006be4:	3202      	adds	r2, #2
 8006be6:	f104 010c 	add.w	r1, r4, #12
 8006bea:	0092      	lsls	r2, r2, #2
 8006bec:	300c      	adds	r0, #12
 8006bee:	f001 feaf 	bl	8008950 <memcpy>
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f7ff ffa5 	bl	8006b44 <_Bfree>
 8006bfa:	4644      	mov	r4, r8
 8006bfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c00:	3501      	adds	r5, #1
 8006c02:	615e      	str	r6, [r3, #20]
 8006c04:	6125      	str	r5, [r4, #16]
 8006c06:	4620      	mov	r0, r4
 8006c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c0c:	08009736 	.word	0x08009736
 8006c10:	08009747 	.word	0x08009747

08006c14 <__s2b>:
 8006c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c18:	460c      	mov	r4, r1
 8006c1a:	4615      	mov	r5, r2
 8006c1c:	461f      	mov	r7, r3
 8006c1e:	2209      	movs	r2, #9
 8006c20:	3308      	adds	r3, #8
 8006c22:	4606      	mov	r6, r0
 8006c24:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c28:	2100      	movs	r1, #0
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	db09      	blt.n	8006c44 <__s2b+0x30>
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff ff47 	bl	8006ac4 <_Balloc>
 8006c36:	b940      	cbnz	r0, 8006c4a <__s2b+0x36>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4b19      	ldr	r3, [pc, #100]	@ (8006ca0 <__s2b+0x8c>)
 8006c3c:	4819      	ldr	r0, [pc, #100]	@ (8006ca4 <__s2b+0x90>)
 8006c3e:	21d3      	movs	r1, #211	@ 0xd3
 8006c40:	f001 fe9e 	bl	8008980 <__assert_func>
 8006c44:	0052      	lsls	r2, r2, #1
 8006c46:	3101      	adds	r1, #1
 8006c48:	e7f0      	b.n	8006c2c <__s2b+0x18>
 8006c4a:	9b08      	ldr	r3, [sp, #32]
 8006c4c:	6143      	str	r3, [r0, #20]
 8006c4e:	2d09      	cmp	r5, #9
 8006c50:	f04f 0301 	mov.w	r3, #1
 8006c54:	6103      	str	r3, [r0, #16]
 8006c56:	dd16      	ble.n	8006c86 <__s2b+0x72>
 8006c58:	f104 0909 	add.w	r9, r4, #9
 8006c5c:	46c8      	mov	r8, r9
 8006c5e:	442c      	add	r4, r5
 8006c60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c64:	4601      	mov	r1, r0
 8006c66:	3b30      	subs	r3, #48	@ 0x30
 8006c68:	220a      	movs	r2, #10
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff ff8c 	bl	8006b88 <__multadd>
 8006c70:	45a0      	cmp	r8, r4
 8006c72:	d1f5      	bne.n	8006c60 <__s2b+0x4c>
 8006c74:	f1a5 0408 	sub.w	r4, r5, #8
 8006c78:	444c      	add	r4, r9
 8006c7a:	1b2d      	subs	r5, r5, r4
 8006c7c:	1963      	adds	r3, r4, r5
 8006c7e:	42bb      	cmp	r3, r7
 8006c80:	db04      	blt.n	8006c8c <__s2b+0x78>
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	340a      	adds	r4, #10
 8006c88:	2509      	movs	r5, #9
 8006c8a:	e7f6      	b.n	8006c7a <__s2b+0x66>
 8006c8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c90:	4601      	mov	r1, r0
 8006c92:	3b30      	subs	r3, #48	@ 0x30
 8006c94:	220a      	movs	r2, #10
 8006c96:	4630      	mov	r0, r6
 8006c98:	f7ff ff76 	bl	8006b88 <__multadd>
 8006c9c:	e7ee      	b.n	8006c7c <__s2b+0x68>
 8006c9e:	bf00      	nop
 8006ca0:	08009736 	.word	0x08009736
 8006ca4:	08009747 	.word	0x08009747

08006ca8 <__hi0bits>:
 8006ca8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cac:	4603      	mov	r3, r0
 8006cae:	bf36      	itet	cc
 8006cb0:	0403      	lslcc	r3, r0, #16
 8006cb2:	2000      	movcs	r0, #0
 8006cb4:	2010      	movcc	r0, #16
 8006cb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cba:	bf3c      	itt	cc
 8006cbc:	021b      	lslcc	r3, r3, #8
 8006cbe:	3008      	addcc	r0, #8
 8006cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc4:	bf3c      	itt	cc
 8006cc6:	011b      	lslcc	r3, r3, #4
 8006cc8:	3004      	addcc	r0, #4
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cce:	bf3c      	itt	cc
 8006cd0:	009b      	lslcc	r3, r3, #2
 8006cd2:	3002      	addcc	r0, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	db05      	blt.n	8006ce4 <__hi0bits+0x3c>
 8006cd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cdc:	f100 0001 	add.w	r0, r0, #1
 8006ce0:	bf08      	it	eq
 8006ce2:	2020      	moveq	r0, #32
 8006ce4:	4770      	bx	lr

08006ce6 <__lo0bits>:
 8006ce6:	6803      	ldr	r3, [r0, #0]
 8006ce8:	4602      	mov	r2, r0
 8006cea:	f013 0007 	ands.w	r0, r3, #7
 8006cee:	d00b      	beq.n	8006d08 <__lo0bits+0x22>
 8006cf0:	07d9      	lsls	r1, r3, #31
 8006cf2:	d421      	bmi.n	8006d38 <__lo0bits+0x52>
 8006cf4:	0798      	lsls	r0, r3, #30
 8006cf6:	bf49      	itett	mi
 8006cf8:	085b      	lsrmi	r3, r3, #1
 8006cfa:	089b      	lsrpl	r3, r3, #2
 8006cfc:	2001      	movmi	r0, #1
 8006cfe:	6013      	strmi	r3, [r2, #0]
 8006d00:	bf5c      	itt	pl
 8006d02:	6013      	strpl	r3, [r2, #0]
 8006d04:	2002      	movpl	r0, #2
 8006d06:	4770      	bx	lr
 8006d08:	b299      	uxth	r1, r3
 8006d0a:	b909      	cbnz	r1, 8006d10 <__lo0bits+0x2a>
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	2010      	movs	r0, #16
 8006d10:	b2d9      	uxtb	r1, r3
 8006d12:	b909      	cbnz	r1, 8006d18 <__lo0bits+0x32>
 8006d14:	3008      	adds	r0, #8
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	0719      	lsls	r1, r3, #28
 8006d1a:	bf04      	itt	eq
 8006d1c:	091b      	lsreq	r3, r3, #4
 8006d1e:	3004      	addeq	r0, #4
 8006d20:	0799      	lsls	r1, r3, #30
 8006d22:	bf04      	itt	eq
 8006d24:	089b      	lsreq	r3, r3, #2
 8006d26:	3002      	addeq	r0, #2
 8006d28:	07d9      	lsls	r1, r3, #31
 8006d2a:	d403      	bmi.n	8006d34 <__lo0bits+0x4e>
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	f100 0001 	add.w	r0, r0, #1
 8006d32:	d003      	beq.n	8006d3c <__lo0bits+0x56>
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	4770      	bx	lr
 8006d38:	2000      	movs	r0, #0
 8006d3a:	4770      	bx	lr
 8006d3c:	2020      	movs	r0, #32
 8006d3e:	4770      	bx	lr

08006d40 <__i2b>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	460c      	mov	r4, r1
 8006d44:	2101      	movs	r1, #1
 8006d46:	f7ff febd 	bl	8006ac4 <_Balloc>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	b928      	cbnz	r0, 8006d5a <__i2b+0x1a>
 8006d4e:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <__i2b+0x24>)
 8006d50:	4805      	ldr	r0, [pc, #20]	@ (8006d68 <__i2b+0x28>)
 8006d52:	f240 1145 	movw	r1, #325	@ 0x145
 8006d56:	f001 fe13 	bl	8008980 <__assert_func>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	6144      	str	r4, [r0, #20]
 8006d5e:	6103      	str	r3, [r0, #16]
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08009736 	.word	0x08009736
 8006d68:	08009747 	.word	0x08009747

08006d6c <__multiply>:
 8006d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	4617      	mov	r7, r2
 8006d72:	690a      	ldr	r2, [r1, #16]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	bfa8      	it	ge
 8006d7a:	463b      	movge	r3, r7
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	bfa4      	itt	ge
 8006d80:	460f      	movge	r7, r1
 8006d82:	4699      	movge	r9, r3
 8006d84:	693d      	ldr	r5, [r7, #16]
 8006d86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	eb05 060a 	add.w	r6, r5, sl
 8006d92:	42b3      	cmp	r3, r6
 8006d94:	b085      	sub	sp, #20
 8006d96:	bfb8      	it	lt
 8006d98:	3101      	addlt	r1, #1
 8006d9a:	f7ff fe93 	bl	8006ac4 <_Balloc>
 8006d9e:	b930      	cbnz	r0, 8006dae <__multiply+0x42>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b41      	ldr	r3, [pc, #260]	@ (8006ea8 <__multiply+0x13c>)
 8006da4:	4841      	ldr	r0, [pc, #260]	@ (8006eac <__multiply+0x140>)
 8006da6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006daa:	f001 fde9 	bl	8008980 <__assert_func>
 8006dae:	f100 0414 	add.w	r4, r0, #20
 8006db2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006db6:	4623      	mov	r3, r4
 8006db8:	2200      	movs	r2, #0
 8006dba:	4573      	cmp	r3, lr
 8006dbc:	d320      	bcc.n	8006e00 <__multiply+0x94>
 8006dbe:	f107 0814 	add.w	r8, r7, #20
 8006dc2:	f109 0114 	add.w	r1, r9, #20
 8006dc6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006dca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006dce:	9302      	str	r3, [sp, #8]
 8006dd0:	1beb      	subs	r3, r5, r7
 8006dd2:	3b15      	subs	r3, #21
 8006dd4:	f023 0303 	bic.w	r3, r3, #3
 8006dd8:	3304      	adds	r3, #4
 8006dda:	3715      	adds	r7, #21
 8006ddc:	42bd      	cmp	r5, r7
 8006dde:	bf38      	it	cc
 8006de0:	2304      	movcc	r3, #4
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	9103      	str	r1, [sp, #12]
 8006de8:	428b      	cmp	r3, r1
 8006dea:	d80c      	bhi.n	8006e06 <__multiply+0x9a>
 8006dec:	2e00      	cmp	r6, #0
 8006dee:	dd03      	ble.n	8006df8 <__multiply+0x8c>
 8006df0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d055      	beq.n	8006ea4 <__multiply+0x138>
 8006df8:	6106      	str	r6, [r0, #16]
 8006dfa:	b005      	add	sp, #20
 8006dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e00:	f843 2b04 	str.w	r2, [r3], #4
 8006e04:	e7d9      	b.n	8006dba <__multiply+0x4e>
 8006e06:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e0a:	f1ba 0f00 	cmp.w	sl, #0
 8006e0e:	d01f      	beq.n	8006e50 <__multiply+0xe4>
 8006e10:	46c4      	mov	ip, r8
 8006e12:	46a1      	mov	r9, r4
 8006e14:	2700      	movs	r7, #0
 8006e16:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e1a:	f8d9 3000 	ldr.w	r3, [r9]
 8006e1e:	fa1f fb82 	uxth.w	fp, r2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e28:	443b      	add	r3, r7
 8006e2a:	f8d9 7000 	ldr.w	r7, [r9]
 8006e2e:	0c12      	lsrs	r2, r2, #16
 8006e30:	0c3f      	lsrs	r7, r7, #16
 8006e32:	fb0a 7202 	mla	r2, sl, r2, r7
 8006e36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e40:	4565      	cmp	r5, ip
 8006e42:	f849 3b04 	str.w	r3, [r9], #4
 8006e46:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006e4a:	d8e4      	bhi.n	8006e16 <__multiply+0xaa>
 8006e4c:	9b01      	ldr	r3, [sp, #4]
 8006e4e:	50e7      	str	r7, [r4, r3]
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e56:	3104      	adds	r1, #4
 8006e58:	f1b9 0f00 	cmp.w	r9, #0
 8006e5c:	d020      	beq.n	8006ea0 <__multiply+0x134>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	4647      	mov	r7, r8
 8006e62:	46a4      	mov	ip, r4
 8006e64:	f04f 0a00 	mov.w	sl, #0
 8006e68:	f8b7 b000 	ldrh.w	fp, [r7]
 8006e6c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006e70:	fb09 220b 	mla	r2, r9, fp, r2
 8006e74:	4452      	add	r2, sl
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e7c:	f84c 3b04 	str.w	r3, [ip], #4
 8006e80:	f857 3b04 	ldr.w	r3, [r7], #4
 8006e84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e88:	f8bc 3000 	ldrh.w	r3, [ip]
 8006e8c:	fb09 330a 	mla	r3, r9, sl, r3
 8006e90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006e94:	42bd      	cmp	r5, r7
 8006e96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e9a:	d8e5      	bhi.n	8006e68 <__multiply+0xfc>
 8006e9c:	9a01      	ldr	r2, [sp, #4]
 8006e9e:	50a3      	str	r3, [r4, r2]
 8006ea0:	3404      	adds	r4, #4
 8006ea2:	e79f      	b.n	8006de4 <__multiply+0x78>
 8006ea4:	3e01      	subs	r6, #1
 8006ea6:	e7a1      	b.n	8006dec <__multiply+0x80>
 8006ea8:	08009736 	.word	0x08009736
 8006eac:	08009747 	.word	0x08009747

08006eb0 <__pow5mult>:
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	4615      	mov	r5, r2
 8006eb6:	f012 0203 	ands.w	r2, r2, #3
 8006eba:	4607      	mov	r7, r0
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	d007      	beq.n	8006ed0 <__pow5mult+0x20>
 8006ec0:	4c25      	ldr	r4, [pc, #148]	@ (8006f58 <__pow5mult+0xa8>)
 8006ec2:	3a01      	subs	r2, #1
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eca:	f7ff fe5d 	bl	8006b88 <__multadd>
 8006ece:	4606      	mov	r6, r0
 8006ed0:	10ad      	asrs	r5, r5, #2
 8006ed2:	d03d      	beq.n	8006f50 <__pow5mult+0xa0>
 8006ed4:	69fc      	ldr	r4, [r7, #28]
 8006ed6:	b97c      	cbnz	r4, 8006ef8 <__pow5mult+0x48>
 8006ed8:	2010      	movs	r0, #16
 8006eda:	f7ff fd3d 	bl	8006958 <malloc>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	61f8      	str	r0, [r7, #28]
 8006ee2:	b928      	cbnz	r0, 8006ef0 <__pow5mult+0x40>
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f5c <__pow5mult+0xac>)
 8006ee6:	481e      	ldr	r0, [pc, #120]	@ (8006f60 <__pow5mult+0xb0>)
 8006ee8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006eec:	f001 fd48 	bl	8008980 <__assert_func>
 8006ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef4:	6004      	str	r4, [r0, #0]
 8006ef6:	60c4      	str	r4, [r0, #12]
 8006ef8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f00:	b94c      	cbnz	r4, 8006f16 <__pow5mult+0x66>
 8006f02:	f240 2171 	movw	r1, #625	@ 0x271
 8006f06:	4638      	mov	r0, r7
 8006f08:	f7ff ff1a 	bl	8006d40 <__i2b>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f12:	4604      	mov	r4, r0
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	07eb      	lsls	r3, r5, #31
 8006f1c:	d50a      	bpl.n	8006f34 <__pow5mult+0x84>
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4622      	mov	r2, r4
 8006f22:	4638      	mov	r0, r7
 8006f24:	f7ff ff22 	bl	8006d6c <__multiply>
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff fe09 	bl	8006b44 <_Bfree>
 8006f32:	4646      	mov	r6, r8
 8006f34:	106d      	asrs	r5, r5, #1
 8006f36:	d00b      	beq.n	8006f50 <__pow5mult+0xa0>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	b938      	cbnz	r0, 8006f4c <__pow5mult+0x9c>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4638      	mov	r0, r7
 8006f42:	f7ff ff13 	bl	8006d6c <__multiply>
 8006f46:	6020      	str	r0, [r4, #0]
 8006f48:	f8c0 9000 	str.w	r9, [r0]
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	e7e4      	b.n	8006f1a <__pow5mult+0x6a>
 8006f50:	4630      	mov	r0, r6
 8006f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f56:	bf00      	nop
 8006f58:	0800985c 	.word	0x0800985c
 8006f5c:	080096c6 	.word	0x080096c6
 8006f60:	08009747 	.word	0x08009747

08006f64 <__lshift>:
 8006f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	460c      	mov	r4, r1
 8006f6a:	6849      	ldr	r1, [r1, #4]
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	4607      	mov	r7, r0
 8006f76:	4691      	mov	r9, r2
 8006f78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f7c:	f108 0601 	add.w	r6, r8, #1
 8006f80:	42b3      	cmp	r3, r6
 8006f82:	db0b      	blt.n	8006f9c <__lshift+0x38>
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff fd9d 	bl	8006ac4 <_Balloc>
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	b948      	cbnz	r0, 8006fa2 <__lshift+0x3e>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	4b28      	ldr	r3, [pc, #160]	@ (8007034 <__lshift+0xd0>)
 8006f92:	4829      	ldr	r0, [pc, #164]	@ (8007038 <__lshift+0xd4>)
 8006f94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f98:	f001 fcf2 	bl	8008980 <__assert_func>
 8006f9c:	3101      	adds	r1, #1
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	e7ee      	b.n	8006f80 <__lshift+0x1c>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f100 0114 	add.w	r1, r0, #20
 8006fa8:	f100 0210 	add.w	r2, r0, #16
 8006fac:	4618      	mov	r0, r3
 8006fae:	4553      	cmp	r3, sl
 8006fb0:	db33      	blt.n	800701a <__lshift+0xb6>
 8006fb2:	6920      	ldr	r0, [r4, #16]
 8006fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb8:	f104 0314 	add.w	r3, r4, #20
 8006fbc:	f019 091f 	ands.w	r9, r9, #31
 8006fc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fc8:	d02b      	beq.n	8007022 <__lshift+0xbe>
 8006fca:	f1c9 0e20 	rsb	lr, r9, #32
 8006fce:	468a      	mov	sl, r1
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006fd8:	4310      	orrs	r0, r2
 8006fda:	f84a 0b04 	str.w	r0, [sl], #4
 8006fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe2:	459c      	cmp	ip, r3
 8006fe4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fe8:	d8f3      	bhi.n	8006fd2 <__lshift+0x6e>
 8006fea:	ebac 0304 	sub.w	r3, ip, r4
 8006fee:	3b15      	subs	r3, #21
 8006ff0:	f023 0303 	bic.w	r3, r3, #3
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	f104 0015 	add.w	r0, r4, #21
 8006ffa:	4560      	cmp	r0, ip
 8006ffc:	bf88      	it	hi
 8006ffe:	2304      	movhi	r3, #4
 8007000:	50ca      	str	r2, [r1, r3]
 8007002:	b10a      	cbz	r2, 8007008 <__lshift+0xa4>
 8007004:	f108 0602 	add.w	r6, r8, #2
 8007008:	3e01      	subs	r6, #1
 800700a:	4638      	mov	r0, r7
 800700c:	612e      	str	r6, [r5, #16]
 800700e:	4621      	mov	r1, r4
 8007010:	f7ff fd98 	bl	8006b44 <_Bfree>
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701a:	f842 0f04 	str.w	r0, [r2, #4]!
 800701e:	3301      	adds	r3, #1
 8007020:	e7c5      	b.n	8006fae <__lshift+0x4a>
 8007022:	3904      	subs	r1, #4
 8007024:	f853 2b04 	ldr.w	r2, [r3], #4
 8007028:	f841 2f04 	str.w	r2, [r1, #4]!
 800702c:	459c      	cmp	ip, r3
 800702e:	d8f9      	bhi.n	8007024 <__lshift+0xc0>
 8007030:	e7ea      	b.n	8007008 <__lshift+0xa4>
 8007032:	bf00      	nop
 8007034:	08009736 	.word	0x08009736
 8007038:	08009747 	.word	0x08009747

0800703c <__mcmp>:
 800703c:	690a      	ldr	r2, [r1, #16]
 800703e:	4603      	mov	r3, r0
 8007040:	6900      	ldr	r0, [r0, #16]
 8007042:	1a80      	subs	r0, r0, r2
 8007044:	b530      	push	{r4, r5, lr}
 8007046:	d10e      	bne.n	8007066 <__mcmp+0x2a>
 8007048:	3314      	adds	r3, #20
 800704a:	3114      	adds	r1, #20
 800704c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007050:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007054:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007058:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800705c:	4295      	cmp	r5, r2
 800705e:	d003      	beq.n	8007068 <__mcmp+0x2c>
 8007060:	d205      	bcs.n	800706e <__mcmp+0x32>
 8007062:	f04f 30ff 	mov.w	r0, #4294967295
 8007066:	bd30      	pop	{r4, r5, pc}
 8007068:	42a3      	cmp	r3, r4
 800706a:	d3f3      	bcc.n	8007054 <__mcmp+0x18>
 800706c:	e7fb      	b.n	8007066 <__mcmp+0x2a>
 800706e:	2001      	movs	r0, #1
 8007070:	e7f9      	b.n	8007066 <__mcmp+0x2a>
	...

08007074 <__mdiff>:
 8007074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	4689      	mov	r9, r1
 800707a:	4606      	mov	r6, r0
 800707c:	4611      	mov	r1, r2
 800707e:	4648      	mov	r0, r9
 8007080:	4614      	mov	r4, r2
 8007082:	f7ff ffdb 	bl	800703c <__mcmp>
 8007086:	1e05      	subs	r5, r0, #0
 8007088:	d112      	bne.n	80070b0 <__mdiff+0x3c>
 800708a:	4629      	mov	r1, r5
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff fd19 	bl	8006ac4 <_Balloc>
 8007092:	4602      	mov	r2, r0
 8007094:	b928      	cbnz	r0, 80070a2 <__mdiff+0x2e>
 8007096:	4b3f      	ldr	r3, [pc, #252]	@ (8007194 <__mdiff+0x120>)
 8007098:	f240 2137 	movw	r1, #567	@ 0x237
 800709c:	483e      	ldr	r0, [pc, #248]	@ (8007198 <__mdiff+0x124>)
 800709e:	f001 fc6f 	bl	8008980 <__assert_func>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070a8:	4610      	mov	r0, r2
 80070aa:	b003      	add	sp, #12
 80070ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b0:	bfbc      	itt	lt
 80070b2:	464b      	movlt	r3, r9
 80070b4:	46a1      	movlt	r9, r4
 80070b6:	4630      	mov	r0, r6
 80070b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070bc:	bfba      	itte	lt
 80070be:	461c      	movlt	r4, r3
 80070c0:	2501      	movlt	r5, #1
 80070c2:	2500      	movge	r5, #0
 80070c4:	f7ff fcfe 	bl	8006ac4 <_Balloc>
 80070c8:	4602      	mov	r2, r0
 80070ca:	b918      	cbnz	r0, 80070d4 <__mdiff+0x60>
 80070cc:	4b31      	ldr	r3, [pc, #196]	@ (8007194 <__mdiff+0x120>)
 80070ce:	f240 2145 	movw	r1, #581	@ 0x245
 80070d2:	e7e3      	b.n	800709c <__mdiff+0x28>
 80070d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070d8:	6926      	ldr	r6, [r4, #16]
 80070da:	60c5      	str	r5, [r0, #12]
 80070dc:	f109 0310 	add.w	r3, r9, #16
 80070e0:	f109 0514 	add.w	r5, r9, #20
 80070e4:	f104 0e14 	add.w	lr, r4, #20
 80070e8:	f100 0b14 	add.w	fp, r0, #20
 80070ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	46d9      	mov	r9, fp
 80070f8:	f04f 0c00 	mov.w	ip, #0
 80070fc:	9b01      	ldr	r3, [sp, #4]
 80070fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007102:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	fa1f f38a 	uxth.w	r3, sl
 800710c:	4619      	mov	r1, r3
 800710e:	b283      	uxth	r3, r0
 8007110:	1acb      	subs	r3, r1, r3
 8007112:	0c00      	lsrs	r0, r0, #16
 8007114:	4463      	add	r3, ip
 8007116:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800711a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800711e:	b29b      	uxth	r3, r3
 8007120:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007124:	4576      	cmp	r6, lr
 8007126:	f849 3b04 	str.w	r3, [r9], #4
 800712a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800712e:	d8e5      	bhi.n	80070fc <__mdiff+0x88>
 8007130:	1b33      	subs	r3, r6, r4
 8007132:	3b15      	subs	r3, #21
 8007134:	f023 0303 	bic.w	r3, r3, #3
 8007138:	3415      	adds	r4, #21
 800713a:	3304      	adds	r3, #4
 800713c:	42a6      	cmp	r6, r4
 800713e:	bf38      	it	cc
 8007140:	2304      	movcc	r3, #4
 8007142:	441d      	add	r5, r3
 8007144:	445b      	add	r3, fp
 8007146:	461e      	mov	r6, r3
 8007148:	462c      	mov	r4, r5
 800714a:	4544      	cmp	r4, r8
 800714c:	d30e      	bcc.n	800716c <__mdiff+0xf8>
 800714e:	f108 0103 	add.w	r1, r8, #3
 8007152:	1b49      	subs	r1, r1, r5
 8007154:	f021 0103 	bic.w	r1, r1, #3
 8007158:	3d03      	subs	r5, #3
 800715a:	45a8      	cmp	r8, r5
 800715c:	bf38      	it	cc
 800715e:	2100      	movcc	r1, #0
 8007160:	440b      	add	r3, r1
 8007162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007166:	b191      	cbz	r1, 800718e <__mdiff+0x11a>
 8007168:	6117      	str	r7, [r2, #16]
 800716a:	e79d      	b.n	80070a8 <__mdiff+0x34>
 800716c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007170:	46e6      	mov	lr, ip
 8007172:	0c08      	lsrs	r0, r1, #16
 8007174:	fa1c fc81 	uxtah	ip, ip, r1
 8007178:	4471      	add	r1, lr
 800717a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800717e:	b289      	uxth	r1, r1
 8007180:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007184:	f846 1b04 	str.w	r1, [r6], #4
 8007188:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800718c:	e7dd      	b.n	800714a <__mdiff+0xd6>
 800718e:	3f01      	subs	r7, #1
 8007190:	e7e7      	b.n	8007162 <__mdiff+0xee>
 8007192:	bf00      	nop
 8007194:	08009736 	.word	0x08009736
 8007198:	08009747 	.word	0x08009747

0800719c <__ulp>:
 800719c:	b082      	sub	sp, #8
 800719e:	ed8d 0b00 	vstr	d0, [sp]
 80071a2:	9a01      	ldr	r2, [sp, #4]
 80071a4:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <__ulp+0x48>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dc08      	bgt.n	80071c2 <__ulp+0x26>
 80071b0:	425b      	negs	r3, r3
 80071b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80071b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071ba:	da04      	bge.n	80071c6 <__ulp+0x2a>
 80071bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80071c0:	4113      	asrs	r3, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	e008      	b.n	80071d8 <__ulp+0x3c>
 80071c6:	f1a2 0314 	sub.w	r3, r2, #20
 80071ca:	2b1e      	cmp	r3, #30
 80071cc:	bfda      	itte	le
 80071ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80071d2:	40da      	lsrle	r2, r3
 80071d4:	2201      	movgt	r2, #1
 80071d6:	2300      	movs	r3, #0
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	ec41 0b10 	vmov	d0, r0, r1
 80071e0:	b002      	add	sp, #8
 80071e2:	4770      	bx	lr
 80071e4:	7ff00000 	.word	0x7ff00000

080071e8 <__b2d>:
 80071e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ec:	6906      	ldr	r6, [r0, #16]
 80071ee:	f100 0814 	add.w	r8, r0, #20
 80071f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80071f6:	1f37      	subs	r7, r6, #4
 80071f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071fc:	4610      	mov	r0, r2
 80071fe:	f7ff fd53 	bl	8006ca8 <__hi0bits>
 8007202:	f1c0 0320 	rsb	r3, r0, #32
 8007206:	280a      	cmp	r0, #10
 8007208:	600b      	str	r3, [r1, #0]
 800720a:	491b      	ldr	r1, [pc, #108]	@ (8007278 <__b2d+0x90>)
 800720c:	dc15      	bgt.n	800723a <__b2d+0x52>
 800720e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007212:	fa22 f30c 	lsr.w	r3, r2, ip
 8007216:	45b8      	cmp	r8, r7
 8007218:	ea43 0501 	orr.w	r5, r3, r1
 800721c:	bf34      	ite	cc
 800721e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007222:	2300      	movcs	r3, #0
 8007224:	3015      	adds	r0, #21
 8007226:	fa02 f000 	lsl.w	r0, r2, r0
 800722a:	fa23 f30c 	lsr.w	r3, r3, ip
 800722e:	4303      	orrs	r3, r0
 8007230:	461c      	mov	r4, r3
 8007232:	ec45 4b10 	vmov	d0, r4, r5
 8007236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723a:	45b8      	cmp	r8, r7
 800723c:	bf3a      	itte	cc
 800723e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007242:	f1a6 0708 	subcc.w	r7, r6, #8
 8007246:	2300      	movcs	r3, #0
 8007248:	380b      	subs	r0, #11
 800724a:	d012      	beq.n	8007272 <__b2d+0x8a>
 800724c:	f1c0 0120 	rsb	r1, r0, #32
 8007250:	fa23 f401 	lsr.w	r4, r3, r1
 8007254:	4082      	lsls	r2, r0
 8007256:	4322      	orrs	r2, r4
 8007258:	4547      	cmp	r7, r8
 800725a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800725e:	bf8c      	ite	hi
 8007260:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007264:	2200      	movls	r2, #0
 8007266:	4083      	lsls	r3, r0
 8007268:	40ca      	lsrs	r2, r1
 800726a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800726e:	4313      	orrs	r3, r2
 8007270:	e7de      	b.n	8007230 <__b2d+0x48>
 8007272:	ea42 0501 	orr.w	r5, r2, r1
 8007276:	e7db      	b.n	8007230 <__b2d+0x48>
 8007278:	3ff00000 	.word	0x3ff00000

0800727c <__d2b>:
 800727c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007280:	460f      	mov	r7, r1
 8007282:	2101      	movs	r1, #1
 8007284:	ec59 8b10 	vmov	r8, r9, d0
 8007288:	4616      	mov	r6, r2
 800728a:	f7ff fc1b 	bl	8006ac4 <_Balloc>
 800728e:	4604      	mov	r4, r0
 8007290:	b930      	cbnz	r0, 80072a0 <__d2b+0x24>
 8007292:	4602      	mov	r2, r0
 8007294:	4b23      	ldr	r3, [pc, #140]	@ (8007324 <__d2b+0xa8>)
 8007296:	4824      	ldr	r0, [pc, #144]	@ (8007328 <__d2b+0xac>)
 8007298:	f240 310f 	movw	r1, #783	@ 0x30f
 800729c:	f001 fb70 	bl	8008980 <__assert_func>
 80072a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072a8:	b10d      	cbz	r5, 80072ae <__d2b+0x32>
 80072aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	f1b8 0300 	subs.w	r3, r8, #0
 80072b4:	d023      	beq.n	80072fe <__d2b+0x82>
 80072b6:	4668      	mov	r0, sp
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	f7ff fd14 	bl	8006ce6 <__lo0bits>
 80072be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072c2:	b1d0      	cbz	r0, 80072fa <__d2b+0x7e>
 80072c4:	f1c0 0320 	rsb	r3, r0, #32
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	430b      	orrs	r3, r1
 80072ce:	40c2      	lsrs	r2, r0
 80072d0:	6163      	str	r3, [r4, #20]
 80072d2:	9201      	str	r2, [sp, #4]
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	61a3      	str	r3, [r4, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf0c      	ite	eq
 80072dc:	2201      	moveq	r2, #1
 80072de:	2202      	movne	r2, #2
 80072e0:	6122      	str	r2, [r4, #16]
 80072e2:	b1a5      	cbz	r5, 800730e <__d2b+0x92>
 80072e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072e8:	4405      	add	r5, r0
 80072ea:	603d      	str	r5, [r7, #0]
 80072ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072f0:	6030      	str	r0, [r6, #0]
 80072f2:	4620      	mov	r0, r4
 80072f4:	b003      	add	sp, #12
 80072f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072fa:	6161      	str	r1, [r4, #20]
 80072fc:	e7ea      	b.n	80072d4 <__d2b+0x58>
 80072fe:	a801      	add	r0, sp, #4
 8007300:	f7ff fcf1 	bl	8006ce6 <__lo0bits>
 8007304:	9b01      	ldr	r3, [sp, #4]
 8007306:	6163      	str	r3, [r4, #20]
 8007308:	3020      	adds	r0, #32
 800730a:	2201      	movs	r2, #1
 800730c:	e7e8      	b.n	80072e0 <__d2b+0x64>
 800730e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007312:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007316:	6038      	str	r0, [r7, #0]
 8007318:	6918      	ldr	r0, [r3, #16]
 800731a:	f7ff fcc5 	bl	8006ca8 <__hi0bits>
 800731e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007322:	e7e5      	b.n	80072f0 <__d2b+0x74>
 8007324:	08009736 	.word	0x08009736
 8007328:	08009747 	.word	0x08009747

0800732c <__ratio>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	b085      	sub	sp, #20
 8007332:	e9cd 1000 	strd	r1, r0, [sp]
 8007336:	a902      	add	r1, sp, #8
 8007338:	f7ff ff56 	bl	80071e8 <__b2d>
 800733c:	9800      	ldr	r0, [sp, #0]
 800733e:	a903      	add	r1, sp, #12
 8007340:	ec55 4b10 	vmov	r4, r5, d0
 8007344:	f7ff ff50 	bl	80071e8 <__b2d>
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	6919      	ldr	r1, [r3, #16]
 800734c:	9b00      	ldr	r3, [sp, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	1ac9      	subs	r1, r1, r3
 8007352:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	ec5b ab10 	vmov	sl, fp, d0
 800735c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007360:	2b00      	cmp	r3, #0
 8007362:	bfce      	itee	gt
 8007364:	462a      	movgt	r2, r5
 8007366:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800736a:	465a      	movle	r2, fp
 800736c:	462f      	mov	r7, r5
 800736e:	46d9      	mov	r9, fp
 8007370:	bfcc      	ite	gt
 8007372:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007376:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800737a:	464b      	mov	r3, r9
 800737c:	4652      	mov	r2, sl
 800737e:	4620      	mov	r0, r4
 8007380:	4639      	mov	r1, r7
 8007382:	f7f9 fa43 	bl	800080c <__aeabi_ddiv>
 8007386:	ec41 0b10 	vmov	d0, r0, r1
 800738a:	b005      	add	sp, #20
 800738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007390 <__copybits>:
 8007390:	3901      	subs	r1, #1
 8007392:	b570      	push	{r4, r5, r6, lr}
 8007394:	1149      	asrs	r1, r1, #5
 8007396:	6914      	ldr	r4, [r2, #16]
 8007398:	3101      	adds	r1, #1
 800739a:	f102 0314 	add.w	r3, r2, #20
 800739e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073a6:	1f05      	subs	r5, r0, #4
 80073a8:	42a3      	cmp	r3, r4
 80073aa:	d30c      	bcc.n	80073c6 <__copybits+0x36>
 80073ac:	1aa3      	subs	r3, r4, r2
 80073ae:	3b11      	subs	r3, #17
 80073b0:	f023 0303 	bic.w	r3, r3, #3
 80073b4:	3211      	adds	r2, #17
 80073b6:	42a2      	cmp	r2, r4
 80073b8:	bf88      	it	hi
 80073ba:	2300      	movhi	r3, #0
 80073bc:	4418      	add	r0, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	4288      	cmp	r0, r1
 80073c2:	d305      	bcc.n	80073d0 <__copybits+0x40>
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
 80073c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80073ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80073ce:	e7eb      	b.n	80073a8 <__copybits+0x18>
 80073d0:	f840 3b04 	str.w	r3, [r0], #4
 80073d4:	e7f4      	b.n	80073c0 <__copybits+0x30>

080073d6 <__any_on>:
 80073d6:	f100 0214 	add.w	r2, r0, #20
 80073da:	6900      	ldr	r0, [r0, #16]
 80073dc:	114b      	asrs	r3, r1, #5
 80073de:	4298      	cmp	r0, r3
 80073e0:	b510      	push	{r4, lr}
 80073e2:	db11      	blt.n	8007408 <__any_on+0x32>
 80073e4:	dd0a      	ble.n	80073fc <__any_on+0x26>
 80073e6:	f011 011f 	ands.w	r1, r1, #31
 80073ea:	d007      	beq.n	80073fc <__any_on+0x26>
 80073ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073f0:	fa24 f001 	lsr.w	r0, r4, r1
 80073f4:	fa00 f101 	lsl.w	r1, r0, r1
 80073f8:	428c      	cmp	r4, r1
 80073fa:	d10b      	bne.n	8007414 <__any_on+0x3e>
 80073fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007400:	4293      	cmp	r3, r2
 8007402:	d803      	bhi.n	800740c <__any_on+0x36>
 8007404:	2000      	movs	r0, #0
 8007406:	bd10      	pop	{r4, pc}
 8007408:	4603      	mov	r3, r0
 800740a:	e7f7      	b.n	80073fc <__any_on+0x26>
 800740c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007410:	2900      	cmp	r1, #0
 8007412:	d0f5      	beq.n	8007400 <__any_on+0x2a>
 8007414:	2001      	movs	r0, #1
 8007416:	e7f6      	b.n	8007406 <__any_on+0x30>

08007418 <sulp>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4604      	mov	r4, r0
 800741c:	460d      	mov	r5, r1
 800741e:	ec45 4b10 	vmov	d0, r4, r5
 8007422:	4616      	mov	r6, r2
 8007424:	f7ff feba 	bl	800719c <__ulp>
 8007428:	ec51 0b10 	vmov	r0, r1, d0
 800742c:	b17e      	cbz	r6, 800744e <sulp+0x36>
 800742e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007432:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007436:	2b00      	cmp	r3, #0
 8007438:	dd09      	ble.n	800744e <sulp+0x36>
 800743a:	051b      	lsls	r3, r3, #20
 800743c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007440:	2400      	movs	r4, #0
 8007442:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007446:	4622      	mov	r2, r4
 8007448:	462b      	mov	r3, r5
 800744a:	f7f9 f8b5 	bl	80005b8 <__aeabi_dmul>
 800744e:	ec41 0b10 	vmov	d0, r0, r1
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	0000      	movs	r0, r0
	...

08007458 <_strtod_l>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b09f      	sub	sp, #124	@ 0x7c
 800745e:	460c      	mov	r4, r1
 8007460:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007462:	2200      	movs	r2, #0
 8007464:	921a      	str	r2, [sp, #104]	@ 0x68
 8007466:	9005      	str	r0, [sp, #20]
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	f04f 0b00 	mov.w	fp, #0
 8007470:	460a      	mov	r2, r1
 8007472:	9219      	str	r2, [sp, #100]	@ 0x64
 8007474:	7811      	ldrb	r1, [r2, #0]
 8007476:	292b      	cmp	r1, #43	@ 0x2b
 8007478:	d04a      	beq.n	8007510 <_strtod_l+0xb8>
 800747a:	d838      	bhi.n	80074ee <_strtod_l+0x96>
 800747c:	290d      	cmp	r1, #13
 800747e:	d832      	bhi.n	80074e6 <_strtod_l+0x8e>
 8007480:	2908      	cmp	r1, #8
 8007482:	d832      	bhi.n	80074ea <_strtod_l+0x92>
 8007484:	2900      	cmp	r1, #0
 8007486:	d03b      	beq.n	8007500 <_strtod_l+0xa8>
 8007488:	2200      	movs	r2, #0
 800748a:	920e      	str	r2, [sp, #56]	@ 0x38
 800748c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800748e:	782a      	ldrb	r2, [r5, #0]
 8007490:	2a30      	cmp	r2, #48	@ 0x30
 8007492:	f040 80b2 	bne.w	80075fa <_strtod_l+0x1a2>
 8007496:	786a      	ldrb	r2, [r5, #1]
 8007498:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800749c:	2a58      	cmp	r2, #88	@ 0x58
 800749e:	d16e      	bne.n	800757e <_strtod_l+0x126>
 80074a0:	9302      	str	r3, [sp, #8]
 80074a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4a8f      	ldr	r2, [pc, #572]	@ (80076e8 <_strtod_l+0x290>)
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80074b0:	a919      	add	r1, sp, #100	@ 0x64
 80074b2:	f001 faff 	bl	8008ab4 <__gethex>
 80074b6:	f010 060f 	ands.w	r6, r0, #15
 80074ba:	4604      	mov	r4, r0
 80074bc:	d005      	beq.n	80074ca <_strtod_l+0x72>
 80074be:	2e06      	cmp	r6, #6
 80074c0:	d128      	bne.n	8007514 <_strtod_l+0xbc>
 80074c2:	3501      	adds	r5, #1
 80074c4:	2300      	movs	r3, #0
 80074c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80074c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80074ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f040 858e 	bne.w	8007fee <_strtod_l+0xb96>
 80074d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d4:	b1cb      	cbz	r3, 800750a <_strtod_l+0xb2>
 80074d6:	4652      	mov	r2, sl
 80074d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80074dc:	ec43 2b10 	vmov	d0, r2, r3
 80074e0:	b01f      	add	sp, #124	@ 0x7c
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	2920      	cmp	r1, #32
 80074e8:	d1ce      	bne.n	8007488 <_strtod_l+0x30>
 80074ea:	3201      	adds	r2, #1
 80074ec:	e7c1      	b.n	8007472 <_strtod_l+0x1a>
 80074ee:	292d      	cmp	r1, #45	@ 0x2d
 80074f0:	d1ca      	bne.n	8007488 <_strtod_l+0x30>
 80074f2:	2101      	movs	r1, #1
 80074f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80074f6:	1c51      	adds	r1, r2, #1
 80074f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80074fa:	7852      	ldrb	r2, [r2, #1]
 80074fc:	2a00      	cmp	r2, #0
 80074fe:	d1c5      	bne.n	800748c <_strtod_l+0x34>
 8007500:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007502:	9419      	str	r4, [sp, #100]	@ 0x64
 8007504:	2b00      	cmp	r3, #0
 8007506:	f040 8570 	bne.w	8007fea <_strtod_l+0xb92>
 800750a:	4652      	mov	r2, sl
 800750c:	465b      	mov	r3, fp
 800750e:	e7e5      	b.n	80074dc <_strtod_l+0x84>
 8007510:	2100      	movs	r1, #0
 8007512:	e7ef      	b.n	80074f4 <_strtod_l+0x9c>
 8007514:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007516:	b13a      	cbz	r2, 8007528 <_strtod_l+0xd0>
 8007518:	2135      	movs	r1, #53	@ 0x35
 800751a:	a81c      	add	r0, sp, #112	@ 0x70
 800751c:	f7ff ff38 	bl	8007390 <__copybits>
 8007520:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007522:	9805      	ldr	r0, [sp, #20]
 8007524:	f7ff fb0e 	bl	8006b44 <_Bfree>
 8007528:	3e01      	subs	r6, #1
 800752a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800752c:	2e04      	cmp	r6, #4
 800752e:	d806      	bhi.n	800753e <_strtod_l+0xe6>
 8007530:	e8df f006 	tbb	[pc, r6]
 8007534:	201d0314 	.word	0x201d0314
 8007538:	14          	.byte	0x14
 8007539:	00          	.byte	0x00
 800753a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800753e:	05e1      	lsls	r1, r4, #23
 8007540:	bf48      	it	mi
 8007542:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800754a:	0d1b      	lsrs	r3, r3, #20
 800754c:	051b      	lsls	r3, r3, #20
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1bb      	bne.n	80074ca <_strtod_l+0x72>
 8007552:	f7fe fb3f 	bl	8005bd4 <__errno>
 8007556:	2322      	movs	r3, #34	@ 0x22
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	e7b6      	b.n	80074ca <_strtod_l+0x72>
 800755c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007560:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007568:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800756c:	e7e7      	b.n	800753e <_strtod_l+0xe6>
 800756e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80076f0 <_strtod_l+0x298>
 8007572:	e7e4      	b.n	800753e <_strtod_l+0xe6>
 8007574:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007578:	f04f 3aff 	mov.w	sl, #4294967295
 800757c:	e7df      	b.n	800753e <_strtod_l+0xe6>
 800757e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	9219      	str	r2, [sp, #100]	@ 0x64
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b30      	cmp	r3, #48	@ 0x30
 8007588:	d0f9      	beq.n	800757e <_strtod_l+0x126>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d09d      	beq.n	80074ca <_strtod_l+0x72>
 800758e:	2301      	movs	r3, #1
 8007590:	2700      	movs	r7, #0
 8007592:	9308      	str	r3, [sp, #32]
 8007594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007596:	930c      	str	r3, [sp, #48]	@ 0x30
 8007598:	970b      	str	r7, [sp, #44]	@ 0x2c
 800759a:	46b9      	mov	r9, r7
 800759c:	220a      	movs	r2, #10
 800759e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80075a0:	7805      	ldrb	r5, [r0, #0]
 80075a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	2909      	cmp	r1, #9
 80075aa:	d928      	bls.n	80075fe <_strtod_l+0x1a6>
 80075ac:	494f      	ldr	r1, [pc, #316]	@ (80076ec <_strtod_l+0x294>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	f001 f9ac 	bl	800890c <strncmp>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d032      	beq.n	800761e <_strtod_l+0x1c6>
 80075b8:	2000      	movs	r0, #0
 80075ba:	462a      	mov	r2, r5
 80075bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80075be:	464d      	mov	r5, r9
 80075c0:	4603      	mov	r3, r0
 80075c2:	2a65      	cmp	r2, #101	@ 0x65
 80075c4:	d001      	beq.n	80075ca <_strtod_l+0x172>
 80075c6:	2a45      	cmp	r2, #69	@ 0x45
 80075c8:	d114      	bne.n	80075f4 <_strtod_l+0x19c>
 80075ca:	b91d      	cbnz	r5, 80075d4 <_strtod_l+0x17c>
 80075cc:	9a08      	ldr	r2, [sp, #32]
 80075ce:	4302      	orrs	r2, r0
 80075d0:	d096      	beq.n	8007500 <_strtod_l+0xa8>
 80075d2:	2500      	movs	r5, #0
 80075d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80075d6:	1c62      	adds	r2, r4, #1
 80075d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80075da:	7862      	ldrb	r2, [r4, #1]
 80075dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80075de:	d07a      	beq.n	80076d6 <_strtod_l+0x27e>
 80075e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80075e2:	d07e      	beq.n	80076e2 <_strtod_l+0x28a>
 80075e4:	f04f 0c00 	mov.w	ip, #0
 80075e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80075ec:	2909      	cmp	r1, #9
 80075ee:	f240 8085 	bls.w	80076fc <_strtod_l+0x2a4>
 80075f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80075f4:	f04f 0800 	mov.w	r8, #0
 80075f8:	e0a5      	b.n	8007746 <_strtod_l+0x2ee>
 80075fa:	2300      	movs	r3, #0
 80075fc:	e7c8      	b.n	8007590 <_strtod_l+0x138>
 80075fe:	f1b9 0f08 	cmp.w	r9, #8
 8007602:	bfd8      	it	le
 8007604:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007606:	f100 0001 	add.w	r0, r0, #1
 800760a:	bfda      	itte	le
 800760c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007610:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007612:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007616:	f109 0901 	add.w	r9, r9, #1
 800761a:	9019      	str	r0, [sp, #100]	@ 0x64
 800761c:	e7bf      	b.n	800759e <_strtod_l+0x146>
 800761e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	9219      	str	r2, [sp, #100]	@ 0x64
 8007624:	785a      	ldrb	r2, [r3, #1]
 8007626:	f1b9 0f00 	cmp.w	r9, #0
 800762a:	d03b      	beq.n	80076a4 <_strtod_l+0x24c>
 800762c:	900a      	str	r0, [sp, #40]	@ 0x28
 800762e:	464d      	mov	r5, r9
 8007630:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007634:	2b09      	cmp	r3, #9
 8007636:	d912      	bls.n	800765e <_strtod_l+0x206>
 8007638:	2301      	movs	r3, #1
 800763a:	e7c2      	b.n	80075c2 <_strtod_l+0x16a>
 800763c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	9219      	str	r2, [sp, #100]	@ 0x64
 8007642:	785a      	ldrb	r2, [r3, #1]
 8007644:	3001      	adds	r0, #1
 8007646:	2a30      	cmp	r2, #48	@ 0x30
 8007648:	d0f8      	beq.n	800763c <_strtod_l+0x1e4>
 800764a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800764e:	2b08      	cmp	r3, #8
 8007650:	f200 84d2 	bhi.w	8007ff8 <_strtod_l+0xba0>
 8007654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007656:	900a      	str	r0, [sp, #40]	@ 0x28
 8007658:	2000      	movs	r0, #0
 800765a:	930c      	str	r3, [sp, #48]	@ 0x30
 800765c:	4605      	mov	r5, r0
 800765e:	3a30      	subs	r2, #48	@ 0x30
 8007660:	f100 0301 	add.w	r3, r0, #1
 8007664:	d018      	beq.n	8007698 <_strtod_l+0x240>
 8007666:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007668:	4419      	add	r1, r3
 800766a:	910a      	str	r1, [sp, #40]	@ 0x28
 800766c:	462e      	mov	r6, r5
 800766e:	f04f 0e0a 	mov.w	lr, #10
 8007672:	1c71      	adds	r1, r6, #1
 8007674:	eba1 0c05 	sub.w	ip, r1, r5
 8007678:	4563      	cmp	r3, ip
 800767a:	dc15      	bgt.n	80076a8 <_strtod_l+0x250>
 800767c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007680:	182b      	adds	r3, r5, r0
 8007682:	2b08      	cmp	r3, #8
 8007684:	f105 0501 	add.w	r5, r5, #1
 8007688:	4405      	add	r5, r0
 800768a:	dc1a      	bgt.n	80076c2 <_strtod_l+0x26a>
 800768c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800768e:	230a      	movs	r3, #10
 8007690:	fb03 2301 	mla	r3, r3, r1, r2
 8007694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007696:	2300      	movs	r3, #0
 8007698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800769a:	1c51      	adds	r1, r2, #1
 800769c:	9119      	str	r1, [sp, #100]	@ 0x64
 800769e:	7852      	ldrb	r2, [r2, #1]
 80076a0:	4618      	mov	r0, r3
 80076a2:	e7c5      	b.n	8007630 <_strtod_l+0x1d8>
 80076a4:	4648      	mov	r0, r9
 80076a6:	e7ce      	b.n	8007646 <_strtod_l+0x1ee>
 80076a8:	2e08      	cmp	r6, #8
 80076aa:	dc05      	bgt.n	80076b8 <_strtod_l+0x260>
 80076ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80076ae:	fb0e f606 	mul.w	r6, lr, r6
 80076b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80076b4:	460e      	mov	r6, r1
 80076b6:	e7dc      	b.n	8007672 <_strtod_l+0x21a>
 80076b8:	2910      	cmp	r1, #16
 80076ba:	bfd8      	it	le
 80076bc:	fb0e f707 	mulle.w	r7, lr, r7
 80076c0:	e7f8      	b.n	80076b4 <_strtod_l+0x25c>
 80076c2:	2b0f      	cmp	r3, #15
 80076c4:	bfdc      	itt	le
 80076c6:	230a      	movle	r3, #10
 80076c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80076cc:	e7e3      	b.n	8007696 <_strtod_l+0x23e>
 80076ce:	2300      	movs	r3, #0
 80076d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d2:	2301      	movs	r3, #1
 80076d4:	e77a      	b.n	80075cc <_strtod_l+0x174>
 80076d6:	f04f 0c00 	mov.w	ip, #0
 80076da:	1ca2      	adds	r2, r4, #2
 80076dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80076de:	78a2      	ldrb	r2, [r4, #2]
 80076e0:	e782      	b.n	80075e8 <_strtod_l+0x190>
 80076e2:	f04f 0c01 	mov.w	ip, #1
 80076e6:	e7f8      	b.n	80076da <_strtod_l+0x282>
 80076e8:	0800996c 	.word	0x0800996c
 80076ec:	080097a1 	.word	0x080097a1
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076f6:	1c51      	adds	r1, r2, #1
 80076f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80076fa:	7852      	ldrb	r2, [r2, #1]
 80076fc:	2a30      	cmp	r2, #48	@ 0x30
 80076fe:	d0f9      	beq.n	80076f4 <_strtod_l+0x29c>
 8007700:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007704:	2908      	cmp	r1, #8
 8007706:	f63f af75 	bhi.w	80075f4 <_strtod_l+0x19c>
 800770a:	3a30      	subs	r2, #48	@ 0x30
 800770c:	9209      	str	r2, [sp, #36]	@ 0x24
 800770e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007710:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007712:	f04f 080a 	mov.w	r8, #10
 8007716:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007718:	1c56      	adds	r6, r2, #1
 800771a:	9619      	str	r6, [sp, #100]	@ 0x64
 800771c:	7852      	ldrb	r2, [r2, #1]
 800771e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007722:	f1be 0f09 	cmp.w	lr, #9
 8007726:	d939      	bls.n	800779c <_strtod_l+0x344>
 8007728:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800772a:	1a76      	subs	r6, r6, r1
 800772c:	2e08      	cmp	r6, #8
 800772e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007732:	dc03      	bgt.n	800773c <_strtod_l+0x2e4>
 8007734:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007736:	4588      	cmp	r8, r1
 8007738:	bfa8      	it	ge
 800773a:	4688      	movge	r8, r1
 800773c:	f1bc 0f00 	cmp.w	ip, #0
 8007740:	d001      	beq.n	8007746 <_strtod_l+0x2ee>
 8007742:	f1c8 0800 	rsb	r8, r8, #0
 8007746:	2d00      	cmp	r5, #0
 8007748:	d14e      	bne.n	80077e8 <_strtod_l+0x390>
 800774a:	9908      	ldr	r1, [sp, #32]
 800774c:	4301      	orrs	r1, r0
 800774e:	f47f aebc 	bne.w	80074ca <_strtod_l+0x72>
 8007752:	2b00      	cmp	r3, #0
 8007754:	f47f aed4 	bne.w	8007500 <_strtod_l+0xa8>
 8007758:	2a69      	cmp	r2, #105	@ 0x69
 800775a:	d028      	beq.n	80077ae <_strtod_l+0x356>
 800775c:	dc25      	bgt.n	80077aa <_strtod_l+0x352>
 800775e:	2a49      	cmp	r2, #73	@ 0x49
 8007760:	d025      	beq.n	80077ae <_strtod_l+0x356>
 8007762:	2a4e      	cmp	r2, #78	@ 0x4e
 8007764:	f47f aecc 	bne.w	8007500 <_strtod_l+0xa8>
 8007768:	499a      	ldr	r1, [pc, #616]	@ (80079d4 <_strtod_l+0x57c>)
 800776a:	a819      	add	r0, sp, #100	@ 0x64
 800776c:	f001 fbc4 	bl	8008ef8 <__match>
 8007770:	2800      	cmp	r0, #0
 8007772:	f43f aec5 	beq.w	8007500 <_strtod_l+0xa8>
 8007776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b28      	cmp	r3, #40	@ 0x28
 800777c:	d12e      	bne.n	80077dc <_strtod_l+0x384>
 800777e:	4996      	ldr	r1, [pc, #600]	@ (80079d8 <_strtod_l+0x580>)
 8007780:	aa1c      	add	r2, sp, #112	@ 0x70
 8007782:	a819      	add	r0, sp, #100	@ 0x64
 8007784:	f001 fbcc 	bl	8008f20 <__hexnan>
 8007788:	2805      	cmp	r0, #5
 800778a:	d127      	bne.n	80077dc <_strtod_l+0x384>
 800778c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800778e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007792:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007796:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800779a:	e696      	b.n	80074ca <_strtod_l+0x72>
 800779c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800779e:	fb08 2101 	mla	r1, r8, r1, r2
 80077a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80077a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80077a8:	e7b5      	b.n	8007716 <_strtod_l+0x2be>
 80077aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80077ac:	e7da      	b.n	8007764 <_strtod_l+0x30c>
 80077ae:	498b      	ldr	r1, [pc, #556]	@ (80079dc <_strtod_l+0x584>)
 80077b0:	a819      	add	r0, sp, #100	@ 0x64
 80077b2:	f001 fba1 	bl	8008ef8 <__match>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f aea2 	beq.w	8007500 <_strtod_l+0xa8>
 80077bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077be:	4988      	ldr	r1, [pc, #544]	@ (80079e0 <_strtod_l+0x588>)
 80077c0:	3b01      	subs	r3, #1
 80077c2:	a819      	add	r0, sp, #100	@ 0x64
 80077c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80077c6:	f001 fb97 	bl	8008ef8 <__match>
 80077ca:	b910      	cbnz	r0, 80077d2 <_strtod_l+0x37a>
 80077cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ce:	3301      	adds	r3, #1
 80077d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80077d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80079f0 <_strtod_l+0x598>
 80077d6:	f04f 0a00 	mov.w	sl, #0
 80077da:	e676      	b.n	80074ca <_strtod_l+0x72>
 80077dc:	4881      	ldr	r0, [pc, #516]	@ (80079e4 <_strtod_l+0x58c>)
 80077de:	f001 f8c7 	bl	8008970 <nan>
 80077e2:	ec5b ab10 	vmov	sl, fp, d0
 80077e6:	e670      	b.n	80074ca <_strtod_l+0x72>
 80077e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80077ec:	eba8 0303 	sub.w	r3, r8, r3
 80077f0:	f1b9 0f00 	cmp.w	r9, #0
 80077f4:	bf08      	it	eq
 80077f6:	46a9      	moveq	r9, r5
 80077f8:	2d10      	cmp	r5, #16
 80077fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fc:	462c      	mov	r4, r5
 80077fe:	bfa8      	it	ge
 8007800:	2410      	movge	r4, #16
 8007802:	f7f8 fe5f 	bl	80004c4 <__aeabi_ui2d>
 8007806:	2d09      	cmp	r5, #9
 8007808:	4682      	mov	sl, r0
 800780a:	468b      	mov	fp, r1
 800780c:	dc13      	bgt.n	8007836 <_strtod_l+0x3de>
 800780e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	f43f ae5a 	beq.w	80074ca <_strtod_l+0x72>
 8007816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007818:	dd78      	ble.n	800790c <_strtod_l+0x4b4>
 800781a:	2b16      	cmp	r3, #22
 800781c:	dc5f      	bgt.n	80078de <_strtod_l+0x486>
 800781e:	4972      	ldr	r1, [pc, #456]	@ (80079e8 <_strtod_l+0x590>)
 8007820:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007828:	4652      	mov	r2, sl
 800782a:	465b      	mov	r3, fp
 800782c:	f7f8 fec4 	bl	80005b8 <__aeabi_dmul>
 8007830:	4682      	mov	sl, r0
 8007832:	468b      	mov	fp, r1
 8007834:	e649      	b.n	80074ca <_strtod_l+0x72>
 8007836:	4b6c      	ldr	r3, [pc, #432]	@ (80079e8 <_strtod_l+0x590>)
 8007838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800783c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007840:	f7f8 feba 	bl	80005b8 <__aeabi_dmul>
 8007844:	4682      	mov	sl, r0
 8007846:	4638      	mov	r0, r7
 8007848:	468b      	mov	fp, r1
 800784a:	f7f8 fe3b 	bl	80004c4 <__aeabi_ui2d>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4650      	mov	r0, sl
 8007854:	4659      	mov	r1, fp
 8007856:	f7f8 fcf9 	bl	800024c <__adddf3>
 800785a:	2d0f      	cmp	r5, #15
 800785c:	4682      	mov	sl, r0
 800785e:	468b      	mov	fp, r1
 8007860:	ddd5      	ble.n	800780e <_strtod_l+0x3b6>
 8007862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007864:	1b2c      	subs	r4, r5, r4
 8007866:	441c      	add	r4, r3
 8007868:	2c00      	cmp	r4, #0
 800786a:	f340 8093 	ble.w	8007994 <_strtod_l+0x53c>
 800786e:	f014 030f 	ands.w	r3, r4, #15
 8007872:	d00a      	beq.n	800788a <_strtod_l+0x432>
 8007874:	495c      	ldr	r1, [pc, #368]	@ (80079e8 <_strtod_l+0x590>)
 8007876:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800787a:	4652      	mov	r2, sl
 800787c:	465b      	mov	r3, fp
 800787e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007882:	f7f8 fe99 	bl	80005b8 <__aeabi_dmul>
 8007886:	4682      	mov	sl, r0
 8007888:	468b      	mov	fp, r1
 800788a:	f034 040f 	bics.w	r4, r4, #15
 800788e:	d073      	beq.n	8007978 <_strtod_l+0x520>
 8007890:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007894:	dd49      	ble.n	800792a <_strtod_l+0x4d2>
 8007896:	2400      	movs	r4, #0
 8007898:	46a0      	mov	r8, r4
 800789a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800789c:	46a1      	mov	r9, r4
 800789e:	9a05      	ldr	r2, [sp, #20]
 80078a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80079f0 <_strtod_l+0x598>
 80078a4:	2322      	movs	r3, #34	@ 0x22
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	f04f 0a00 	mov.w	sl, #0
 80078ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f43f ae0b 	beq.w	80074ca <_strtod_l+0x72>
 80078b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078b6:	9805      	ldr	r0, [sp, #20]
 80078b8:	f7ff f944 	bl	8006b44 <_Bfree>
 80078bc:	9805      	ldr	r0, [sp, #20]
 80078be:	4649      	mov	r1, r9
 80078c0:	f7ff f940 	bl	8006b44 <_Bfree>
 80078c4:	9805      	ldr	r0, [sp, #20]
 80078c6:	4641      	mov	r1, r8
 80078c8:	f7ff f93c 	bl	8006b44 <_Bfree>
 80078cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078ce:	9805      	ldr	r0, [sp, #20]
 80078d0:	f7ff f938 	bl	8006b44 <_Bfree>
 80078d4:	9805      	ldr	r0, [sp, #20]
 80078d6:	4621      	mov	r1, r4
 80078d8:	f7ff f934 	bl	8006b44 <_Bfree>
 80078dc:	e5f5      	b.n	80074ca <_strtod_l+0x72>
 80078de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80078e4:	4293      	cmp	r3, r2
 80078e6:	dbbc      	blt.n	8007862 <_strtod_l+0x40a>
 80078e8:	4c3f      	ldr	r4, [pc, #252]	@ (80079e8 <_strtod_l+0x590>)
 80078ea:	f1c5 050f 	rsb	r5, r5, #15
 80078ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078f2:	4652      	mov	r2, sl
 80078f4:	465b      	mov	r3, fp
 80078f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fa:	f7f8 fe5d 	bl	80005b8 <__aeabi_dmul>
 80078fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007900:	1b5d      	subs	r5, r3, r5
 8007902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007906:	e9d4 2300 	ldrd	r2, r3, [r4]
 800790a:	e78f      	b.n	800782c <_strtod_l+0x3d4>
 800790c:	3316      	adds	r3, #22
 800790e:	dba8      	blt.n	8007862 <_strtod_l+0x40a>
 8007910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007912:	eba3 0808 	sub.w	r8, r3, r8
 8007916:	4b34      	ldr	r3, [pc, #208]	@ (80079e8 <_strtod_l+0x590>)
 8007918:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800791c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	f7f8 ff72 	bl	800080c <__aeabi_ddiv>
 8007928:	e782      	b.n	8007830 <_strtod_l+0x3d8>
 800792a:	2300      	movs	r3, #0
 800792c:	4f2f      	ldr	r7, [pc, #188]	@ (80079ec <_strtod_l+0x594>)
 800792e:	1124      	asrs	r4, r4, #4
 8007930:	4650      	mov	r0, sl
 8007932:	4659      	mov	r1, fp
 8007934:	461e      	mov	r6, r3
 8007936:	2c01      	cmp	r4, #1
 8007938:	dc21      	bgt.n	800797e <_strtod_l+0x526>
 800793a:	b10b      	cbz	r3, 8007940 <_strtod_l+0x4e8>
 800793c:	4682      	mov	sl, r0
 800793e:	468b      	mov	fp, r1
 8007940:	492a      	ldr	r1, [pc, #168]	@ (80079ec <_strtod_l+0x594>)
 8007942:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007946:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800794a:	4652      	mov	r2, sl
 800794c:	465b      	mov	r3, fp
 800794e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007952:	f7f8 fe31 	bl	80005b8 <__aeabi_dmul>
 8007956:	4b26      	ldr	r3, [pc, #152]	@ (80079f0 <_strtod_l+0x598>)
 8007958:	460a      	mov	r2, r1
 800795a:	400b      	ands	r3, r1
 800795c:	4925      	ldr	r1, [pc, #148]	@ (80079f4 <_strtod_l+0x59c>)
 800795e:	428b      	cmp	r3, r1
 8007960:	4682      	mov	sl, r0
 8007962:	d898      	bhi.n	8007896 <_strtod_l+0x43e>
 8007964:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007968:	428b      	cmp	r3, r1
 800796a:	bf86      	itte	hi
 800796c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80079f8 <_strtod_l+0x5a0>
 8007970:	f04f 3aff 	movhi.w	sl, #4294967295
 8007974:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007978:	2300      	movs	r3, #0
 800797a:	9308      	str	r3, [sp, #32]
 800797c:	e076      	b.n	8007a6c <_strtod_l+0x614>
 800797e:	07e2      	lsls	r2, r4, #31
 8007980:	d504      	bpl.n	800798c <_strtod_l+0x534>
 8007982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007986:	f7f8 fe17 	bl	80005b8 <__aeabi_dmul>
 800798a:	2301      	movs	r3, #1
 800798c:	3601      	adds	r6, #1
 800798e:	1064      	asrs	r4, r4, #1
 8007990:	3708      	adds	r7, #8
 8007992:	e7d0      	b.n	8007936 <_strtod_l+0x4de>
 8007994:	d0f0      	beq.n	8007978 <_strtod_l+0x520>
 8007996:	4264      	negs	r4, r4
 8007998:	f014 020f 	ands.w	r2, r4, #15
 800799c:	d00a      	beq.n	80079b4 <_strtod_l+0x55c>
 800799e:	4b12      	ldr	r3, [pc, #72]	@ (80079e8 <_strtod_l+0x590>)
 80079a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	4659      	mov	r1, fp
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f8 ff2e 	bl	800080c <__aeabi_ddiv>
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	1124      	asrs	r4, r4, #4
 80079b6:	d0df      	beq.n	8007978 <_strtod_l+0x520>
 80079b8:	2c1f      	cmp	r4, #31
 80079ba:	dd1f      	ble.n	80079fc <_strtod_l+0x5a4>
 80079bc:	2400      	movs	r4, #0
 80079be:	46a0      	mov	r8, r4
 80079c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079c2:	46a1      	mov	r9, r4
 80079c4:	9a05      	ldr	r2, [sp, #20]
 80079c6:	2322      	movs	r3, #34	@ 0x22
 80079c8:	f04f 0a00 	mov.w	sl, #0
 80079cc:	f04f 0b00 	mov.w	fp, #0
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e76b      	b.n	80078ac <_strtod_l+0x454>
 80079d4:	0800968d 	.word	0x0800968d
 80079d8:	08009958 	.word	0x08009958
 80079dc:	08009685 	.word	0x08009685
 80079e0:	080096bc 	.word	0x080096bc
 80079e4:	080097f7 	.word	0x080097f7
 80079e8:	08009890 	.word	0x08009890
 80079ec:	08009868 	.word	0x08009868
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	7ca00000 	.word	0x7ca00000
 80079f8:	7fefffff 	.word	0x7fefffff
 80079fc:	f014 0310 	ands.w	r3, r4, #16
 8007a00:	bf18      	it	ne
 8007a02:	236a      	movne	r3, #106	@ 0x6a
 8007a04:	4ea9      	ldr	r6, [pc, #676]	@ (8007cac <_strtod_l+0x854>)
 8007a06:	9308      	str	r3, [sp, #32]
 8007a08:	4650      	mov	r0, sl
 8007a0a:	4659      	mov	r1, fp
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	07e7      	lsls	r7, r4, #31
 8007a10:	d504      	bpl.n	8007a1c <_strtod_l+0x5c4>
 8007a12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a16:	f7f8 fdcf 	bl	80005b8 <__aeabi_dmul>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	1064      	asrs	r4, r4, #1
 8007a1e:	f106 0608 	add.w	r6, r6, #8
 8007a22:	d1f4      	bne.n	8007a0e <_strtod_l+0x5b6>
 8007a24:	b10b      	cbz	r3, 8007a2a <_strtod_l+0x5d2>
 8007a26:	4682      	mov	sl, r0
 8007a28:	468b      	mov	fp, r1
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	b1b3      	cbz	r3, 8007a5c <_strtod_l+0x604>
 8007a2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	4659      	mov	r1, fp
 8007a3a:	dd0f      	ble.n	8007a5c <_strtod_l+0x604>
 8007a3c:	2b1f      	cmp	r3, #31
 8007a3e:	dd56      	ble.n	8007aee <_strtod_l+0x696>
 8007a40:	2b34      	cmp	r3, #52	@ 0x34
 8007a42:	bfde      	ittt	le
 8007a44:	f04f 33ff 	movle.w	r3, #4294967295
 8007a48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a4c:	4093      	lslle	r3, r2
 8007a4e:	f04f 0a00 	mov.w	sl, #0
 8007a52:	bfcc      	ite	gt
 8007a54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a58:	ea03 0b01 	andle.w	fp, r3, r1
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4650      	mov	r0, sl
 8007a62:	4659      	mov	r1, fp
 8007a64:	f7f9 f810 	bl	8000a88 <__aeabi_dcmpeq>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d1a7      	bne.n	80079bc <_strtod_l+0x564>
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a72:	9805      	ldr	r0, [sp, #20]
 8007a74:	462b      	mov	r3, r5
 8007a76:	464a      	mov	r2, r9
 8007a78:	f7ff f8cc 	bl	8006c14 <__s2b>
 8007a7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f43f af09 	beq.w	8007896 <_strtod_l+0x43e>
 8007a84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	eba3 0308 	sub.w	r3, r3, r8
 8007a8e:	bfa8      	it	ge
 8007a90:	2300      	movge	r3, #0
 8007a92:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a94:	2400      	movs	r4, #0
 8007a96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007a9c:	46a0      	mov	r8, r4
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	9805      	ldr	r0, [sp, #20]
 8007aa2:	6859      	ldr	r1, [r3, #4]
 8007aa4:	f7ff f80e 	bl	8006ac4 <_Balloc>
 8007aa8:	4681      	mov	r9, r0
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f43f aef7 	beq.w	800789e <_strtod_l+0x446>
 8007ab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	3202      	adds	r2, #2
 8007ab6:	f103 010c 	add.w	r1, r3, #12
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	300c      	adds	r0, #12
 8007abe:	f000 ff47 	bl	8008950 <memcpy>
 8007ac2:	ec4b ab10 	vmov	d0, sl, fp
 8007ac6:	9805      	ldr	r0, [sp, #20]
 8007ac8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007aca:	a91b      	add	r1, sp, #108	@ 0x6c
 8007acc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ad0:	f7ff fbd4 	bl	800727c <__d2b>
 8007ad4:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f43f aee1 	beq.w	800789e <_strtod_l+0x446>
 8007adc:	9805      	ldr	r0, [sp, #20]
 8007ade:	2101      	movs	r1, #1
 8007ae0:	f7ff f92e 	bl	8006d40 <__i2b>
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	b948      	cbnz	r0, 8007afc <_strtod_l+0x6a4>
 8007ae8:	f04f 0800 	mov.w	r8, #0
 8007aec:	e6d7      	b.n	800789e <_strtod_l+0x446>
 8007aee:	f04f 32ff 	mov.w	r2, #4294967295
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	ea03 0a0a 	and.w	sl, r3, sl
 8007afa:	e7af      	b.n	8007a5c <_strtod_l+0x604>
 8007afc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007afe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	bfab      	itete	ge
 8007b04:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b06:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b08:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b0a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b0c:	bfac      	ite	ge
 8007b0e:	18ef      	addge	r7, r5, r3
 8007b10:	1b5e      	sublt	r6, r3, r5
 8007b12:	9b08      	ldr	r3, [sp, #32]
 8007b14:	1aed      	subs	r5, r5, r3
 8007b16:	4415      	add	r5, r2
 8007b18:	4b65      	ldr	r3, [pc, #404]	@ (8007cb0 <_strtod_l+0x858>)
 8007b1a:	3d01      	subs	r5, #1
 8007b1c:	429d      	cmp	r5, r3
 8007b1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b22:	da50      	bge.n	8007bc6 <_strtod_l+0x76e>
 8007b24:	1b5b      	subs	r3, r3, r5
 8007b26:	2b1f      	cmp	r3, #31
 8007b28:	eba2 0203 	sub.w	r2, r2, r3
 8007b2c:	f04f 0101 	mov.w	r1, #1
 8007b30:	dc3d      	bgt.n	8007bae <_strtod_l+0x756>
 8007b32:	fa01 f303 	lsl.w	r3, r1, r3
 8007b36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b3c:	18bd      	adds	r5, r7, r2
 8007b3e:	9b08      	ldr	r3, [sp, #32]
 8007b40:	42af      	cmp	r7, r5
 8007b42:	4416      	add	r6, r2
 8007b44:	441e      	add	r6, r3
 8007b46:	463b      	mov	r3, r7
 8007b48:	bfa8      	it	ge
 8007b4a:	462b      	movge	r3, r5
 8007b4c:	42b3      	cmp	r3, r6
 8007b4e:	bfa8      	it	ge
 8007b50:	4633      	movge	r3, r6
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfc2      	ittt	gt
 8007b56:	1aed      	subgt	r5, r5, r3
 8007b58:	1af6      	subgt	r6, r6, r3
 8007b5a:	1aff      	subgt	r7, r7, r3
 8007b5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd16      	ble.n	8007b90 <_strtod_l+0x738>
 8007b62:	4641      	mov	r1, r8
 8007b64:	9805      	ldr	r0, [sp, #20]
 8007b66:	461a      	mov	r2, r3
 8007b68:	f7ff f9a2 	bl	8006eb0 <__pow5mult>
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d0ba      	beq.n	8007ae8 <_strtod_l+0x690>
 8007b72:	4601      	mov	r1, r0
 8007b74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b76:	9805      	ldr	r0, [sp, #20]
 8007b78:	f7ff f8f8 	bl	8006d6c <__multiply>
 8007b7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f43f ae8d 	beq.w	800789e <_strtod_l+0x446>
 8007b84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b86:	9805      	ldr	r0, [sp, #20]
 8007b88:	f7fe ffdc 	bl	8006b44 <_Bfree>
 8007b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	dc1d      	bgt.n	8007bd0 <_strtod_l+0x778>
 8007b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dd23      	ble.n	8007be2 <_strtod_l+0x78a>
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007b9e:	9805      	ldr	r0, [sp, #20]
 8007ba0:	f7ff f986 	bl	8006eb0 <__pow5mult>
 8007ba4:	4681      	mov	r9, r0
 8007ba6:	b9e0      	cbnz	r0, 8007be2 <_strtod_l+0x78a>
 8007ba8:	f04f 0900 	mov.w	r9, #0
 8007bac:	e677      	b.n	800789e <_strtod_l+0x446>
 8007bae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007bb2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007bb6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007bba:	35e2      	adds	r5, #226	@ 0xe2
 8007bbc:	fa01 f305 	lsl.w	r3, r1, r5
 8007bc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007bc4:	e7ba      	b.n	8007b3c <_strtod_l+0x6e4>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bce:	e7b5      	b.n	8007b3c <_strtod_l+0x6e4>
 8007bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bd2:	9805      	ldr	r0, [sp, #20]
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	f7ff f9c5 	bl	8006f64 <__lshift>
 8007bda:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1d9      	bne.n	8007b94 <_strtod_l+0x73c>
 8007be0:	e65d      	b.n	800789e <_strtod_l+0x446>
 8007be2:	2e00      	cmp	r6, #0
 8007be4:	dd07      	ble.n	8007bf6 <_strtod_l+0x79e>
 8007be6:	4649      	mov	r1, r9
 8007be8:	9805      	ldr	r0, [sp, #20]
 8007bea:	4632      	mov	r2, r6
 8007bec:	f7ff f9ba 	bl	8006f64 <__lshift>
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d0d8      	beq.n	8007ba8 <_strtod_l+0x750>
 8007bf6:	2f00      	cmp	r7, #0
 8007bf8:	dd08      	ble.n	8007c0c <_strtod_l+0x7b4>
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	9805      	ldr	r0, [sp, #20]
 8007bfe:	463a      	mov	r2, r7
 8007c00:	f7ff f9b0 	bl	8006f64 <__lshift>
 8007c04:	4680      	mov	r8, r0
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f ae49 	beq.w	800789e <_strtod_l+0x446>
 8007c0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c0e:	9805      	ldr	r0, [sp, #20]
 8007c10:	464a      	mov	r2, r9
 8007c12:	f7ff fa2f 	bl	8007074 <__mdiff>
 8007c16:	4604      	mov	r4, r0
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f43f ae40 	beq.w	800789e <_strtod_l+0x446>
 8007c1e:	68c3      	ldr	r3, [r0, #12]
 8007c20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c22:	2300      	movs	r3, #0
 8007c24:	60c3      	str	r3, [r0, #12]
 8007c26:	4641      	mov	r1, r8
 8007c28:	f7ff fa08 	bl	800703c <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	da45      	bge.n	8007cbc <_strtod_l+0x864>
 8007c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c32:	ea53 030a 	orrs.w	r3, r3, sl
 8007c36:	d16b      	bne.n	8007d10 <_strtod_l+0x8b8>
 8007c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d167      	bne.n	8007d10 <_strtod_l+0x8b8>
 8007c40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c44:	0d1b      	lsrs	r3, r3, #20
 8007c46:	051b      	lsls	r3, r3, #20
 8007c48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c4c:	d960      	bls.n	8007d10 <_strtod_l+0x8b8>
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	b913      	cbnz	r3, 8007c58 <_strtod_l+0x800>
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	dd5b      	ble.n	8007d10 <_strtod_l+0x8b8>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	9805      	ldr	r0, [sp, #20]
 8007c5e:	f7ff f981 	bl	8006f64 <__lshift>
 8007c62:	4641      	mov	r1, r8
 8007c64:	4604      	mov	r4, r0
 8007c66:	f7ff f9e9 	bl	800703c <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	dd50      	ble.n	8007d10 <_strtod_l+0x8b8>
 8007c6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c72:	9a08      	ldr	r2, [sp, #32]
 8007c74:	0d1b      	lsrs	r3, r3, #20
 8007c76:	051b      	lsls	r3, r3, #20
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	d06a      	beq.n	8007d52 <_strtod_l+0x8fa>
 8007c7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c80:	d867      	bhi.n	8007d52 <_strtod_l+0x8fa>
 8007c82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c86:	f67f ae9d 	bls.w	80079c4 <_strtod_l+0x56c>
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <_strtod_l+0x85c>)
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	4659      	mov	r1, fp
 8007c90:	2200      	movs	r2, #0
 8007c92:	f7f8 fc91 	bl	80005b8 <__aeabi_dmul>
 8007c96:	4b08      	ldr	r3, [pc, #32]	@ (8007cb8 <_strtod_l+0x860>)
 8007c98:	400b      	ands	r3, r1
 8007c9a:	4682      	mov	sl, r0
 8007c9c:	468b      	mov	fp, r1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f47f ae08 	bne.w	80078b4 <_strtod_l+0x45c>
 8007ca4:	9a05      	ldr	r2, [sp, #20]
 8007ca6:	2322      	movs	r3, #34	@ 0x22
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	e603      	b.n	80078b4 <_strtod_l+0x45c>
 8007cac:	08009980 	.word	0x08009980
 8007cb0:	fffffc02 	.word	0xfffffc02
 8007cb4:	39500000 	.word	0x39500000
 8007cb8:	7ff00000 	.word	0x7ff00000
 8007cbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007cc0:	d165      	bne.n	8007d8e <_strtod_l+0x936>
 8007cc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cc8:	b35a      	cbz	r2, 8007d22 <_strtod_l+0x8ca>
 8007cca:	4a9f      	ldr	r2, [pc, #636]	@ (8007f48 <_strtod_l+0xaf0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d12b      	bne.n	8007d28 <_strtod_l+0x8d0>
 8007cd0:	9b08      	ldr	r3, [sp, #32]
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	b303      	cbz	r3, 8007d18 <_strtod_l+0x8c0>
 8007cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8007f4c <_strtod_l+0xaf4>)
 8007cd8:	465a      	mov	r2, fp
 8007cda:	4013      	ands	r3, r2
 8007cdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	d81b      	bhi.n	8007d1e <_strtod_l+0x8c6>
 8007ce6:	0d1b      	lsrs	r3, r3, #20
 8007ce8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	4299      	cmp	r1, r3
 8007cf2:	d119      	bne.n	8007d28 <_strtod_l+0x8d0>
 8007cf4:	4b96      	ldr	r3, [pc, #600]	@ (8007f50 <_strtod_l+0xaf8>)
 8007cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d102      	bne.n	8007d02 <_strtod_l+0x8aa>
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	f43f adce 	beq.w	800789e <_strtod_l+0x446>
 8007d02:	4b92      	ldr	r3, [pc, #584]	@ (8007f4c <_strtod_l+0xaf4>)
 8007d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d06:	401a      	ands	r2, r3
 8007d08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d0c:	f04f 0a00 	mov.w	sl, #0
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1b9      	bne.n	8007c8a <_strtod_l+0x832>
 8007d16:	e5cd      	b.n	80078b4 <_strtod_l+0x45c>
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1c:	e7e8      	b.n	8007cf0 <_strtod_l+0x898>
 8007d1e:	4613      	mov	r3, r2
 8007d20:	e7e6      	b.n	8007cf0 <_strtod_l+0x898>
 8007d22:	ea53 030a 	orrs.w	r3, r3, sl
 8007d26:	d0a2      	beq.n	8007c6e <_strtod_l+0x816>
 8007d28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d2a:	b1db      	cbz	r3, 8007d64 <_strtod_l+0x90c>
 8007d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d2e:	4213      	tst	r3, r2
 8007d30:	d0ee      	beq.n	8007d10 <_strtod_l+0x8b8>
 8007d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d34:	9a08      	ldr	r2, [sp, #32]
 8007d36:	4650      	mov	r0, sl
 8007d38:	4659      	mov	r1, fp
 8007d3a:	b1bb      	cbz	r3, 8007d6c <_strtod_l+0x914>
 8007d3c:	f7ff fb6c 	bl	8007418 <sulp>
 8007d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d44:	ec53 2b10 	vmov	r2, r3, d0
 8007d48:	f7f8 fa80 	bl	800024c <__adddf3>
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	468b      	mov	fp, r1
 8007d50:	e7de      	b.n	8007d10 <_strtod_l+0x8b8>
 8007d52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d5e:	f04f 3aff 	mov.w	sl, #4294967295
 8007d62:	e7d5      	b.n	8007d10 <_strtod_l+0x8b8>
 8007d64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d66:	ea13 0f0a 	tst.w	r3, sl
 8007d6a:	e7e1      	b.n	8007d30 <_strtod_l+0x8d8>
 8007d6c:	f7ff fb54 	bl	8007418 <sulp>
 8007d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d74:	ec53 2b10 	vmov	r2, r3, d0
 8007d78:	f7f8 fa66 	bl	8000248 <__aeabi_dsub>
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2300      	movs	r3, #0
 8007d80:	4682      	mov	sl, r0
 8007d82:	468b      	mov	fp, r1
 8007d84:	f7f8 fe80 	bl	8000a88 <__aeabi_dcmpeq>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d0c1      	beq.n	8007d10 <_strtod_l+0x8b8>
 8007d8c:	e61a      	b.n	80079c4 <_strtod_l+0x56c>
 8007d8e:	4641      	mov	r1, r8
 8007d90:	4620      	mov	r0, r4
 8007d92:	f7ff facb 	bl	800732c <__ratio>
 8007d96:	ec57 6b10 	vmov	r6, r7, d0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f8 fe84 	bl	8000ab0 <__aeabi_dcmple>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d06f      	beq.n	8007e8c <_strtod_l+0xa34>
 8007dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d17a      	bne.n	8007ea8 <_strtod_l+0xa50>
 8007db2:	f1ba 0f00 	cmp.w	sl, #0
 8007db6:	d158      	bne.n	8007e6a <_strtod_l+0xa12>
 8007db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d15a      	bne.n	8007e78 <_strtod_l+0xa20>
 8007dc2:	4b64      	ldr	r3, [pc, #400]	@ (8007f54 <_strtod_l+0xafc>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fe67 	bl	8000a9c <__aeabi_dcmplt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d159      	bne.n	8007e86 <_strtod_l+0xa2e>
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4b60      	ldr	r3, [pc, #384]	@ (8007f58 <_strtod_l+0xb00>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f7f8 fbed 	bl	80005b8 <__aeabi_dmul>
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007de6:	9606      	str	r6, [sp, #24]
 8007de8:	9307      	str	r3, [sp, #28]
 8007dea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dee:	4d57      	ldr	r5, [pc, #348]	@ (8007f4c <_strtod_l+0xaf4>)
 8007df0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df6:	401d      	ands	r5, r3
 8007df8:	4b58      	ldr	r3, [pc, #352]	@ (8007f5c <_strtod_l+0xb04>)
 8007dfa:	429d      	cmp	r5, r3
 8007dfc:	f040 80b2 	bne.w	8007f64 <_strtod_l+0xb0c>
 8007e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e06:	ec4b ab10 	vmov	d0, sl, fp
 8007e0a:	f7ff f9c7 	bl	800719c <__ulp>
 8007e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e12:	ec51 0b10 	vmov	r0, r1, d0
 8007e16:	f7f8 fbcf 	bl	80005b8 <__aeabi_dmul>
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	f7f8 fa15 	bl	800024c <__adddf3>
 8007e22:	460b      	mov	r3, r1
 8007e24:	4949      	ldr	r1, [pc, #292]	@ (8007f4c <_strtod_l+0xaf4>)
 8007e26:	4a4e      	ldr	r2, [pc, #312]	@ (8007f60 <_strtod_l+0xb08>)
 8007e28:	4019      	ands	r1, r3
 8007e2a:	4291      	cmp	r1, r2
 8007e2c:	4682      	mov	sl, r0
 8007e2e:	d942      	bls.n	8007eb6 <_strtod_l+0xa5e>
 8007e30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e32:	4b47      	ldr	r3, [pc, #284]	@ (8007f50 <_strtod_l+0xaf8>)
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d103      	bne.n	8007e40 <_strtod_l+0x9e8>
 8007e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f43f ad2f 	beq.w	800789e <_strtod_l+0x446>
 8007e40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007f50 <_strtod_l+0xaf8>
 8007e44:	f04f 3aff 	mov.w	sl, #4294967295
 8007e48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e4a:	9805      	ldr	r0, [sp, #20]
 8007e4c:	f7fe fe7a 	bl	8006b44 <_Bfree>
 8007e50:	9805      	ldr	r0, [sp, #20]
 8007e52:	4649      	mov	r1, r9
 8007e54:	f7fe fe76 	bl	8006b44 <_Bfree>
 8007e58:	9805      	ldr	r0, [sp, #20]
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	f7fe fe72 	bl	8006b44 <_Bfree>
 8007e60:	9805      	ldr	r0, [sp, #20]
 8007e62:	4621      	mov	r1, r4
 8007e64:	f7fe fe6e 	bl	8006b44 <_Bfree>
 8007e68:	e619      	b.n	8007a9e <_strtod_l+0x646>
 8007e6a:	f1ba 0f01 	cmp.w	sl, #1
 8007e6e:	d103      	bne.n	8007e78 <_strtod_l+0xa20>
 8007e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f43f ada6 	beq.w	80079c4 <_strtod_l+0x56c>
 8007e78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007f28 <_strtod_l+0xad0>
 8007e7c:	4f35      	ldr	r7, [pc, #212]	@ (8007f54 <_strtod_l+0xafc>)
 8007e7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e82:	2600      	movs	r6, #0
 8007e84:	e7b1      	b.n	8007dea <_strtod_l+0x992>
 8007e86:	4f34      	ldr	r7, [pc, #208]	@ (8007f58 <_strtod_l+0xb00>)
 8007e88:	2600      	movs	r6, #0
 8007e8a:	e7aa      	b.n	8007de2 <_strtod_l+0x98a>
 8007e8c:	4b32      	ldr	r3, [pc, #200]	@ (8007f58 <_strtod_l+0xb00>)
 8007e8e:	4630      	mov	r0, r6
 8007e90:	4639      	mov	r1, r7
 8007e92:	2200      	movs	r2, #0
 8007e94:	f7f8 fb90 	bl	80005b8 <__aeabi_dmul>
 8007e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d09f      	beq.n	8007de2 <_strtod_l+0x98a>
 8007ea2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ea6:	e7a0      	b.n	8007dea <_strtod_l+0x992>
 8007ea8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007f30 <_strtod_l+0xad8>
 8007eac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007eb0:	ec57 6b17 	vmov	r6, r7, d7
 8007eb4:	e799      	b.n	8007dea <_strtod_l+0x992>
 8007eb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007eba:	9b08      	ldr	r3, [sp, #32]
 8007ebc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1c1      	bne.n	8007e48 <_strtod_l+0x9f0>
 8007ec4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ec8:	0d1b      	lsrs	r3, r3, #20
 8007eca:	051b      	lsls	r3, r3, #20
 8007ecc:	429d      	cmp	r5, r3
 8007ece:	d1bb      	bne.n	8007e48 <_strtod_l+0x9f0>
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f001 f9f6 	bl	80092c4 <__aeabi_d2lz>
 8007ed8:	f7f8 fb40 	bl	800055c <__aeabi_l2d>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 f9b0 	bl	8000248 <__aeabi_dsub>
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4602      	mov	r2, r0
 8007eec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ef0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ef6:	ea46 060a 	orr.w	r6, r6, sl
 8007efa:	431e      	orrs	r6, r3
 8007efc:	d06f      	beq.n	8007fde <_strtod_l+0xb86>
 8007efe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f38 <_strtod_l+0xae0>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f7f8 fdca 	bl	8000a9c <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f47f acd3 	bne.w	80078b4 <_strtod_l+0x45c>
 8007f0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007f40 <_strtod_l+0xae8>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f18:	f7f8 fdde 	bl	8000ad8 <__aeabi_dcmpgt>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d093      	beq.n	8007e48 <_strtod_l+0x9f0>
 8007f20:	e4c8      	b.n	80078b4 <_strtod_l+0x45c>
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	00000000 	.word	0x00000000
 8007f2c:	bff00000 	.word	0xbff00000
 8007f30:	00000000 	.word	0x00000000
 8007f34:	3ff00000 	.word	0x3ff00000
 8007f38:	94a03595 	.word	0x94a03595
 8007f3c:	3fdfffff 	.word	0x3fdfffff
 8007f40:	35afe535 	.word	0x35afe535
 8007f44:	3fe00000 	.word	0x3fe00000
 8007f48:	000fffff 	.word	0x000fffff
 8007f4c:	7ff00000 	.word	0x7ff00000
 8007f50:	7fefffff 	.word	0x7fefffff
 8007f54:	3ff00000 	.word	0x3ff00000
 8007f58:	3fe00000 	.word	0x3fe00000
 8007f5c:	7fe00000 	.word	0x7fe00000
 8007f60:	7c9fffff 	.word	0x7c9fffff
 8007f64:	9b08      	ldr	r3, [sp, #32]
 8007f66:	b323      	cbz	r3, 8007fb2 <_strtod_l+0xb5a>
 8007f68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f6c:	d821      	bhi.n	8007fb2 <_strtod_l+0xb5a>
 8007f6e:	a328      	add	r3, pc, #160	@ (adr r3, 8008010 <_strtod_l+0xbb8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fd9a 	bl	8000ab0 <__aeabi_dcmple>
 8007f7c:	b1a0      	cbz	r0, 8007fa8 <_strtod_l+0xb50>
 8007f7e:	4639      	mov	r1, r7
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7f8 fdf1 	bl	8000b68 <__aeabi_d2uiz>
 8007f86:	2801      	cmp	r0, #1
 8007f88:	bf38      	it	cc
 8007f8a:	2001      	movcc	r0, #1
 8007f8c:	f7f8 fa9a 	bl	80004c4 <__aeabi_ui2d>
 8007f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	b9fb      	cbnz	r3, 8007fd8 <_strtod_l+0xb80>
 8007f98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007f9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007fa0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007fa4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fa8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007faa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007fae:	1b5b      	subs	r3, r3, r5
 8007fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007fb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007fb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007fba:	f7ff f8ef 	bl	800719c <__ulp>
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	ec53 2b10 	vmov	r2, r3, d0
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	f7f8 faf7 	bl	80005b8 <__aeabi_dmul>
 8007fca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fce:	f7f8 f93d 	bl	800024c <__adddf3>
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	468b      	mov	fp, r1
 8007fd6:	e770      	b.n	8007eba <_strtod_l+0xa62>
 8007fd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007fdc:	e7e0      	b.n	8007fa0 <_strtod_l+0xb48>
 8007fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8008018 <_strtod_l+0xbc0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f7f8 fd5a 	bl	8000a9c <__aeabi_dcmplt>
 8007fe8:	e798      	b.n	8007f1c <_strtod_l+0xac4>
 8007fea:	2300      	movs	r3, #0
 8007fec:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ff0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	f7ff ba6d 	b.w	80074d2 <_strtod_l+0x7a>
 8007ff8:	2a65      	cmp	r2, #101	@ 0x65
 8007ffa:	f43f ab68 	beq.w	80076ce <_strtod_l+0x276>
 8007ffe:	2a45      	cmp	r2, #69	@ 0x45
 8008000:	f43f ab65 	beq.w	80076ce <_strtod_l+0x276>
 8008004:	2301      	movs	r3, #1
 8008006:	f7ff bba0 	b.w	800774a <_strtod_l+0x2f2>
 800800a:	bf00      	nop
 800800c:	f3af 8000 	nop.w
 8008010:	ffc00000 	.word	0xffc00000
 8008014:	41dfffff 	.word	0x41dfffff
 8008018:	94a03595 	.word	0x94a03595
 800801c:	3fcfffff 	.word	0x3fcfffff

08008020 <_strtod_r>:
 8008020:	4b01      	ldr	r3, [pc, #4]	@ (8008028 <_strtod_r+0x8>)
 8008022:	f7ff ba19 	b.w	8007458 <_strtod_l>
 8008026:	bf00      	nop
 8008028:	20000068 	.word	0x20000068

0800802c <_strtol_l.isra.0>:
 800802c:	2b24      	cmp	r3, #36	@ 0x24
 800802e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008032:	4686      	mov	lr, r0
 8008034:	4690      	mov	r8, r2
 8008036:	d801      	bhi.n	800803c <_strtol_l.isra.0+0x10>
 8008038:	2b01      	cmp	r3, #1
 800803a:	d106      	bne.n	800804a <_strtol_l.isra.0+0x1e>
 800803c:	f7fd fdca 	bl	8005bd4 <__errno>
 8008040:	2316      	movs	r3, #22
 8008042:	6003      	str	r3, [r0, #0]
 8008044:	2000      	movs	r0, #0
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	4834      	ldr	r0, [pc, #208]	@ (800811c <_strtol_l.isra.0+0xf0>)
 800804c:	460d      	mov	r5, r1
 800804e:	462a      	mov	r2, r5
 8008050:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008054:	5d06      	ldrb	r6, [r0, r4]
 8008056:	f016 0608 	ands.w	r6, r6, #8
 800805a:	d1f8      	bne.n	800804e <_strtol_l.isra.0+0x22>
 800805c:	2c2d      	cmp	r4, #45	@ 0x2d
 800805e:	d110      	bne.n	8008082 <_strtol_l.isra.0+0x56>
 8008060:	782c      	ldrb	r4, [r5, #0]
 8008062:	2601      	movs	r6, #1
 8008064:	1c95      	adds	r5, r2, #2
 8008066:	f033 0210 	bics.w	r2, r3, #16
 800806a:	d115      	bne.n	8008098 <_strtol_l.isra.0+0x6c>
 800806c:	2c30      	cmp	r4, #48	@ 0x30
 800806e:	d10d      	bne.n	800808c <_strtol_l.isra.0+0x60>
 8008070:	782a      	ldrb	r2, [r5, #0]
 8008072:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008076:	2a58      	cmp	r2, #88	@ 0x58
 8008078:	d108      	bne.n	800808c <_strtol_l.isra.0+0x60>
 800807a:	786c      	ldrb	r4, [r5, #1]
 800807c:	3502      	adds	r5, #2
 800807e:	2310      	movs	r3, #16
 8008080:	e00a      	b.n	8008098 <_strtol_l.isra.0+0x6c>
 8008082:	2c2b      	cmp	r4, #43	@ 0x2b
 8008084:	bf04      	itt	eq
 8008086:	782c      	ldrbeq	r4, [r5, #0]
 8008088:	1c95      	addeq	r5, r2, #2
 800808a:	e7ec      	b.n	8008066 <_strtol_l.isra.0+0x3a>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f6      	bne.n	800807e <_strtol_l.isra.0+0x52>
 8008090:	2c30      	cmp	r4, #48	@ 0x30
 8008092:	bf14      	ite	ne
 8008094:	230a      	movne	r3, #10
 8008096:	2308      	moveq	r3, #8
 8008098:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800809c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80080a0:	2200      	movs	r2, #0
 80080a2:	fbbc f9f3 	udiv	r9, ip, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80080ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80080b0:	2f09      	cmp	r7, #9
 80080b2:	d80f      	bhi.n	80080d4 <_strtol_l.isra.0+0xa8>
 80080b4:	463c      	mov	r4, r7
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	dd1b      	ble.n	80080f2 <_strtol_l.isra.0+0xc6>
 80080ba:	1c57      	adds	r7, r2, #1
 80080bc:	d007      	beq.n	80080ce <_strtol_l.isra.0+0xa2>
 80080be:	4581      	cmp	r9, r0
 80080c0:	d314      	bcc.n	80080ec <_strtol_l.isra.0+0xc0>
 80080c2:	d101      	bne.n	80080c8 <_strtol_l.isra.0+0x9c>
 80080c4:	45a2      	cmp	sl, r4
 80080c6:	db11      	blt.n	80080ec <_strtol_l.isra.0+0xc0>
 80080c8:	fb00 4003 	mla	r0, r0, r3, r4
 80080cc:	2201      	movs	r2, #1
 80080ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080d2:	e7eb      	b.n	80080ac <_strtol_l.isra.0+0x80>
 80080d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080d8:	2f19      	cmp	r7, #25
 80080da:	d801      	bhi.n	80080e0 <_strtol_l.isra.0+0xb4>
 80080dc:	3c37      	subs	r4, #55	@ 0x37
 80080de:	e7ea      	b.n	80080b6 <_strtol_l.isra.0+0x8a>
 80080e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080e4:	2f19      	cmp	r7, #25
 80080e6:	d804      	bhi.n	80080f2 <_strtol_l.isra.0+0xc6>
 80080e8:	3c57      	subs	r4, #87	@ 0x57
 80080ea:	e7e4      	b.n	80080b6 <_strtol_l.isra.0+0x8a>
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	e7ed      	b.n	80080ce <_strtol_l.isra.0+0xa2>
 80080f2:	1c53      	adds	r3, r2, #1
 80080f4:	d108      	bne.n	8008108 <_strtol_l.isra.0+0xdc>
 80080f6:	2322      	movs	r3, #34	@ 0x22
 80080f8:	f8ce 3000 	str.w	r3, [lr]
 80080fc:	4660      	mov	r0, ip
 80080fe:	f1b8 0f00 	cmp.w	r8, #0
 8008102:	d0a0      	beq.n	8008046 <_strtol_l.isra.0+0x1a>
 8008104:	1e69      	subs	r1, r5, #1
 8008106:	e006      	b.n	8008116 <_strtol_l.isra.0+0xea>
 8008108:	b106      	cbz	r6, 800810c <_strtol_l.isra.0+0xe0>
 800810a:	4240      	negs	r0, r0
 800810c:	f1b8 0f00 	cmp.w	r8, #0
 8008110:	d099      	beq.n	8008046 <_strtol_l.isra.0+0x1a>
 8008112:	2a00      	cmp	r2, #0
 8008114:	d1f6      	bne.n	8008104 <_strtol_l.isra.0+0xd8>
 8008116:	f8c8 1000 	str.w	r1, [r8]
 800811a:	e794      	b.n	8008046 <_strtol_l.isra.0+0x1a>
 800811c:	080099a9 	.word	0x080099a9

08008120 <_strtol_r>:
 8008120:	f7ff bf84 	b.w	800802c <_strtol_l.isra.0>

08008124 <__ssputs_r>:
 8008124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	688e      	ldr	r6, [r1, #8]
 800812a:	461f      	mov	r7, r3
 800812c:	42be      	cmp	r6, r7
 800812e:	680b      	ldr	r3, [r1, #0]
 8008130:	4682      	mov	sl, r0
 8008132:	460c      	mov	r4, r1
 8008134:	4690      	mov	r8, r2
 8008136:	d82d      	bhi.n	8008194 <__ssputs_r+0x70>
 8008138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800813c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008140:	d026      	beq.n	8008190 <__ssputs_r+0x6c>
 8008142:	6965      	ldr	r5, [r4, #20]
 8008144:	6909      	ldr	r1, [r1, #16]
 8008146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800814a:	eba3 0901 	sub.w	r9, r3, r1
 800814e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008152:	1c7b      	adds	r3, r7, #1
 8008154:	444b      	add	r3, r9
 8008156:	106d      	asrs	r5, r5, #1
 8008158:	429d      	cmp	r5, r3
 800815a:	bf38      	it	cc
 800815c:	461d      	movcc	r5, r3
 800815e:	0553      	lsls	r3, r2, #21
 8008160:	d527      	bpl.n	80081b2 <__ssputs_r+0x8e>
 8008162:	4629      	mov	r1, r5
 8008164:	f7fe fc22 	bl	80069ac <_malloc_r>
 8008168:	4606      	mov	r6, r0
 800816a:	b360      	cbz	r0, 80081c6 <__ssputs_r+0xa2>
 800816c:	6921      	ldr	r1, [r4, #16]
 800816e:	464a      	mov	r2, r9
 8008170:	f000 fbee 	bl	8008950 <memcpy>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800817a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	6126      	str	r6, [r4, #16]
 8008182:	6165      	str	r5, [r4, #20]
 8008184:	444e      	add	r6, r9
 8008186:	eba5 0509 	sub.w	r5, r5, r9
 800818a:	6026      	str	r6, [r4, #0]
 800818c:	60a5      	str	r5, [r4, #8]
 800818e:	463e      	mov	r6, r7
 8008190:	42be      	cmp	r6, r7
 8008192:	d900      	bls.n	8008196 <__ssputs_r+0x72>
 8008194:	463e      	mov	r6, r7
 8008196:	6820      	ldr	r0, [r4, #0]
 8008198:	4632      	mov	r2, r6
 800819a:	4641      	mov	r1, r8
 800819c:	f000 fb9c 	bl	80088d8 <memmove>
 80081a0:	68a3      	ldr	r3, [r4, #8]
 80081a2:	1b9b      	subs	r3, r3, r6
 80081a4:	60a3      	str	r3, [r4, #8]
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	4433      	add	r3, r6
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	2000      	movs	r0, #0
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	462a      	mov	r2, r5
 80081b4:	f000 ff61 	bl	800907a <_realloc_r>
 80081b8:	4606      	mov	r6, r0
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d1e0      	bne.n	8008180 <__ssputs_r+0x5c>
 80081be:	6921      	ldr	r1, [r4, #16]
 80081c0:	4650      	mov	r0, sl
 80081c2:	f7fe fb7f 	bl	80068c4 <_free_r>
 80081c6:	230c      	movs	r3, #12
 80081c8:	f8ca 3000 	str.w	r3, [sl]
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	f04f 30ff 	mov.w	r0, #4294967295
 80081d8:	e7e9      	b.n	80081ae <__ssputs_r+0x8a>
	...

080081dc <_svfiprintf_r>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	4698      	mov	r8, r3
 80081e2:	898b      	ldrh	r3, [r1, #12]
 80081e4:	061b      	lsls	r3, r3, #24
 80081e6:	b09d      	sub	sp, #116	@ 0x74
 80081e8:	4607      	mov	r7, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	4614      	mov	r4, r2
 80081ee:	d510      	bpl.n	8008212 <_svfiprintf_r+0x36>
 80081f0:	690b      	ldr	r3, [r1, #16]
 80081f2:	b973      	cbnz	r3, 8008212 <_svfiprintf_r+0x36>
 80081f4:	2140      	movs	r1, #64	@ 0x40
 80081f6:	f7fe fbd9 	bl	80069ac <_malloc_r>
 80081fa:	6028      	str	r0, [r5, #0]
 80081fc:	6128      	str	r0, [r5, #16]
 80081fe:	b930      	cbnz	r0, 800820e <_svfiprintf_r+0x32>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	b01d      	add	sp, #116	@ 0x74
 800820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820e:	2340      	movs	r3, #64	@ 0x40
 8008210:	616b      	str	r3, [r5, #20]
 8008212:	2300      	movs	r3, #0
 8008214:	9309      	str	r3, [sp, #36]	@ 0x24
 8008216:	2320      	movs	r3, #32
 8008218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800821c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008220:	2330      	movs	r3, #48	@ 0x30
 8008222:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083c0 <_svfiprintf_r+0x1e4>
 8008226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800822a:	f04f 0901 	mov.w	r9, #1
 800822e:	4623      	mov	r3, r4
 8008230:	469a      	mov	sl, r3
 8008232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008236:	b10a      	cbz	r2, 800823c <_svfiprintf_r+0x60>
 8008238:	2a25      	cmp	r2, #37	@ 0x25
 800823a:	d1f9      	bne.n	8008230 <_svfiprintf_r+0x54>
 800823c:	ebba 0b04 	subs.w	fp, sl, r4
 8008240:	d00b      	beq.n	800825a <_svfiprintf_r+0x7e>
 8008242:	465b      	mov	r3, fp
 8008244:	4622      	mov	r2, r4
 8008246:	4629      	mov	r1, r5
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ff6b 	bl	8008124 <__ssputs_r>
 800824e:	3001      	adds	r0, #1
 8008250:	f000 80a7 	beq.w	80083a2 <_svfiprintf_r+0x1c6>
 8008254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008256:	445a      	add	r2, fp
 8008258:	9209      	str	r2, [sp, #36]	@ 0x24
 800825a:	f89a 3000 	ldrb.w	r3, [sl]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 809f 	beq.w	80083a2 <_svfiprintf_r+0x1c6>
 8008264:	2300      	movs	r3, #0
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800826e:	f10a 0a01 	add.w	sl, sl, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	9307      	str	r3, [sp, #28]
 8008276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800827a:	931a      	str	r3, [sp, #104]	@ 0x68
 800827c:	4654      	mov	r4, sl
 800827e:	2205      	movs	r2, #5
 8008280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008284:	484e      	ldr	r0, [pc, #312]	@ (80083c0 <_svfiprintf_r+0x1e4>)
 8008286:	f7f7 ff83 	bl	8000190 <memchr>
 800828a:	9a04      	ldr	r2, [sp, #16]
 800828c:	b9d8      	cbnz	r0, 80082c6 <_svfiprintf_r+0xea>
 800828e:	06d0      	lsls	r0, r2, #27
 8008290:	bf44      	itt	mi
 8008292:	2320      	movmi	r3, #32
 8008294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008298:	0711      	lsls	r1, r2, #28
 800829a:	bf44      	itt	mi
 800829c:	232b      	movmi	r3, #43	@ 0x2b
 800829e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a2:	f89a 3000 	ldrb.w	r3, [sl]
 80082a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a8:	d015      	beq.n	80082d6 <_svfiprintf_r+0xfa>
 80082aa:	9a07      	ldr	r2, [sp, #28]
 80082ac:	4654      	mov	r4, sl
 80082ae:	2000      	movs	r0, #0
 80082b0:	f04f 0c0a 	mov.w	ip, #10
 80082b4:	4621      	mov	r1, r4
 80082b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ba:	3b30      	subs	r3, #48	@ 0x30
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d94b      	bls.n	8008358 <_svfiprintf_r+0x17c>
 80082c0:	b1b0      	cbz	r0, 80082f0 <_svfiprintf_r+0x114>
 80082c2:	9207      	str	r2, [sp, #28]
 80082c4:	e014      	b.n	80082f0 <_svfiprintf_r+0x114>
 80082c6:	eba0 0308 	sub.w	r3, r0, r8
 80082ca:	fa09 f303 	lsl.w	r3, r9, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	46a2      	mov	sl, r4
 80082d4:	e7d2      	b.n	800827c <_svfiprintf_r+0xa0>
 80082d6:	9b03      	ldr	r3, [sp, #12]
 80082d8:	1d19      	adds	r1, r3, #4
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	9103      	str	r1, [sp, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfbb      	ittet	lt
 80082e2:	425b      	neglt	r3, r3
 80082e4:	f042 0202 	orrlt.w	r2, r2, #2
 80082e8:	9307      	strge	r3, [sp, #28]
 80082ea:	9307      	strlt	r3, [sp, #28]
 80082ec:	bfb8      	it	lt
 80082ee:	9204      	strlt	r2, [sp, #16]
 80082f0:	7823      	ldrb	r3, [r4, #0]
 80082f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80082f4:	d10a      	bne.n	800830c <_svfiprintf_r+0x130>
 80082f6:	7863      	ldrb	r3, [r4, #1]
 80082f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082fa:	d132      	bne.n	8008362 <_svfiprintf_r+0x186>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	9203      	str	r2, [sp, #12]
 8008304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008308:	3402      	adds	r4, #2
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083d0 <_svfiprintf_r+0x1f4>
 8008310:	7821      	ldrb	r1, [r4, #0]
 8008312:	2203      	movs	r2, #3
 8008314:	4650      	mov	r0, sl
 8008316:	f7f7 ff3b 	bl	8000190 <memchr>
 800831a:	b138      	cbz	r0, 800832c <_svfiprintf_r+0x150>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	eba0 000a 	sub.w	r0, r0, sl
 8008322:	2240      	movs	r2, #64	@ 0x40
 8008324:	4082      	lsls	r2, r0
 8008326:	4313      	orrs	r3, r2
 8008328:	3401      	adds	r4, #1
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	4824      	ldr	r0, [pc, #144]	@ (80083c4 <_svfiprintf_r+0x1e8>)
 8008332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008336:	2206      	movs	r2, #6
 8008338:	f7f7 ff2a 	bl	8000190 <memchr>
 800833c:	2800      	cmp	r0, #0
 800833e:	d036      	beq.n	80083ae <_svfiprintf_r+0x1d2>
 8008340:	4b21      	ldr	r3, [pc, #132]	@ (80083c8 <_svfiprintf_r+0x1ec>)
 8008342:	bb1b      	cbnz	r3, 800838c <_svfiprintf_r+0x1b0>
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	3307      	adds	r3, #7
 8008348:	f023 0307 	bic.w	r3, r3, #7
 800834c:	3308      	adds	r3, #8
 800834e:	9303      	str	r3, [sp, #12]
 8008350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008352:	4433      	add	r3, r6
 8008354:	9309      	str	r3, [sp, #36]	@ 0x24
 8008356:	e76a      	b.n	800822e <_svfiprintf_r+0x52>
 8008358:	fb0c 3202 	mla	r2, ip, r2, r3
 800835c:	460c      	mov	r4, r1
 800835e:	2001      	movs	r0, #1
 8008360:	e7a8      	b.n	80082b4 <_svfiprintf_r+0xd8>
 8008362:	2300      	movs	r3, #0
 8008364:	3401      	adds	r4, #1
 8008366:	9305      	str	r3, [sp, #20]
 8008368:	4619      	mov	r1, r3
 800836a:	f04f 0c0a 	mov.w	ip, #10
 800836e:	4620      	mov	r0, r4
 8008370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008374:	3a30      	subs	r2, #48	@ 0x30
 8008376:	2a09      	cmp	r2, #9
 8008378:	d903      	bls.n	8008382 <_svfiprintf_r+0x1a6>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c6      	beq.n	800830c <_svfiprintf_r+0x130>
 800837e:	9105      	str	r1, [sp, #20]
 8008380:	e7c4      	b.n	800830c <_svfiprintf_r+0x130>
 8008382:	fb0c 2101 	mla	r1, ip, r1, r2
 8008386:	4604      	mov	r4, r0
 8008388:	2301      	movs	r3, #1
 800838a:	e7f0      	b.n	800836e <_svfiprintf_r+0x192>
 800838c:	ab03      	add	r3, sp, #12
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	462a      	mov	r2, r5
 8008392:	4b0e      	ldr	r3, [pc, #56]	@ (80083cc <_svfiprintf_r+0x1f0>)
 8008394:	a904      	add	r1, sp, #16
 8008396:	4638      	mov	r0, r7
 8008398:	f7fc fcc6 	bl	8004d28 <_printf_float>
 800839c:	1c42      	adds	r2, r0, #1
 800839e:	4606      	mov	r6, r0
 80083a0:	d1d6      	bne.n	8008350 <_svfiprintf_r+0x174>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	065b      	lsls	r3, r3, #25
 80083a6:	f53f af2d 	bmi.w	8008204 <_svfiprintf_r+0x28>
 80083aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ac:	e72c      	b.n	8008208 <_svfiprintf_r+0x2c>
 80083ae:	ab03      	add	r3, sp, #12
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	462a      	mov	r2, r5
 80083b4:	4b05      	ldr	r3, [pc, #20]	@ (80083cc <_svfiprintf_r+0x1f0>)
 80083b6:	a904      	add	r1, sp, #16
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7fc ff4d 	bl	8005258 <_printf_i>
 80083be:	e7ed      	b.n	800839c <_svfiprintf_r+0x1c0>
 80083c0:	080097a3 	.word	0x080097a3
 80083c4:	080097ad 	.word	0x080097ad
 80083c8:	08004d29 	.word	0x08004d29
 80083cc:	08008125 	.word	0x08008125
 80083d0:	080097a9 	.word	0x080097a9

080083d4 <__sfputc_r>:
 80083d4:	6893      	ldr	r3, [r2, #8]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	b410      	push	{r4}
 80083dc:	6093      	str	r3, [r2, #8]
 80083de:	da08      	bge.n	80083f2 <__sfputc_r+0x1e>
 80083e0:	6994      	ldr	r4, [r2, #24]
 80083e2:	42a3      	cmp	r3, r4
 80083e4:	db01      	blt.n	80083ea <__sfputc_r+0x16>
 80083e6:	290a      	cmp	r1, #10
 80083e8:	d103      	bne.n	80083f2 <__sfputc_r+0x1e>
 80083ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ee:	f000 b9df 	b.w	80087b0 <__swbuf_r>
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	1c58      	adds	r0, r3, #1
 80083f6:	6010      	str	r0, [r2, #0]
 80083f8:	7019      	strb	r1, [r3, #0]
 80083fa:	4608      	mov	r0, r1
 80083fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008400:	4770      	bx	lr

08008402 <__sfputs_r>:
 8008402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	4614      	mov	r4, r2
 800840a:	18d5      	adds	r5, r2, r3
 800840c:	42ac      	cmp	r4, r5
 800840e:	d101      	bne.n	8008414 <__sfputs_r+0x12>
 8008410:	2000      	movs	r0, #0
 8008412:	e007      	b.n	8008424 <__sfputs_r+0x22>
 8008414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008418:	463a      	mov	r2, r7
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff ffda 	bl	80083d4 <__sfputc_r>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d1f3      	bne.n	800840c <__sfputs_r+0xa>
 8008424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008428 <_vfiprintf_r>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	460d      	mov	r5, r1
 800842e:	b09d      	sub	sp, #116	@ 0x74
 8008430:	4614      	mov	r4, r2
 8008432:	4698      	mov	r8, r3
 8008434:	4606      	mov	r6, r0
 8008436:	b118      	cbz	r0, 8008440 <_vfiprintf_r+0x18>
 8008438:	6a03      	ldr	r3, [r0, #32]
 800843a:	b90b      	cbnz	r3, 8008440 <_vfiprintf_r+0x18>
 800843c:	f7fd faca 	bl	80059d4 <__sinit>
 8008440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008442:	07d9      	lsls	r1, r3, #31
 8008444:	d405      	bmi.n	8008452 <_vfiprintf_r+0x2a>
 8008446:	89ab      	ldrh	r3, [r5, #12]
 8008448:	059a      	lsls	r2, r3, #22
 800844a:	d402      	bmi.n	8008452 <_vfiprintf_r+0x2a>
 800844c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800844e:	f7fd fbec 	bl	8005c2a <__retarget_lock_acquire_recursive>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	071b      	lsls	r3, r3, #28
 8008456:	d501      	bpl.n	800845c <_vfiprintf_r+0x34>
 8008458:	692b      	ldr	r3, [r5, #16]
 800845a:	b99b      	cbnz	r3, 8008484 <_vfiprintf_r+0x5c>
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f000 f9e4 	bl	800882c <__swsetup_r>
 8008464:	b170      	cbz	r0, 8008484 <_vfiprintf_r+0x5c>
 8008466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008468:	07dc      	lsls	r4, r3, #31
 800846a:	d504      	bpl.n	8008476 <_vfiprintf_r+0x4e>
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	b01d      	add	sp, #116	@ 0x74
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	89ab      	ldrh	r3, [r5, #12]
 8008478:	0598      	lsls	r0, r3, #22
 800847a:	d4f7      	bmi.n	800846c <_vfiprintf_r+0x44>
 800847c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800847e:	f7fd fbd5 	bl	8005c2c <__retarget_lock_release_recursive>
 8008482:	e7f3      	b.n	800846c <_vfiprintf_r+0x44>
 8008484:	2300      	movs	r3, #0
 8008486:	9309      	str	r3, [sp, #36]	@ 0x24
 8008488:	2320      	movs	r3, #32
 800848a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800848e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008492:	2330      	movs	r3, #48	@ 0x30
 8008494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008644 <_vfiprintf_r+0x21c>
 8008498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800849c:	f04f 0901 	mov.w	r9, #1
 80084a0:	4623      	mov	r3, r4
 80084a2:	469a      	mov	sl, r3
 80084a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a8:	b10a      	cbz	r2, 80084ae <_vfiprintf_r+0x86>
 80084aa:	2a25      	cmp	r2, #37	@ 0x25
 80084ac:	d1f9      	bne.n	80084a2 <_vfiprintf_r+0x7a>
 80084ae:	ebba 0b04 	subs.w	fp, sl, r4
 80084b2:	d00b      	beq.n	80084cc <_vfiprintf_r+0xa4>
 80084b4:	465b      	mov	r3, fp
 80084b6:	4622      	mov	r2, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	f7ff ffa1 	bl	8008402 <__sfputs_r>
 80084c0:	3001      	adds	r0, #1
 80084c2:	f000 80a7 	beq.w	8008614 <_vfiprintf_r+0x1ec>
 80084c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084c8:	445a      	add	r2, fp
 80084ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80084cc:	f89a 3000 	ldrb.w	r3, [sl]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 809f 	beq.w	8008614 <_vfiprintf_r+0x1ec>
 80084d6:	2300      	movs	r3, #0
 80084d8:	f04f 32ff 	mov.w	r2, #4294967295
 80084dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e0:	f10a 0a01 	add.w	sl, sl, #1
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80084ee:	4654      	mov	r4, sl
 80084f0:	2205      	movs	r2, #5
 80084f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f6:	4853      	ldr	r0, [pc, #332]	@ (8008644 <_vfiprintf_r+0x21c>)
 80084f8:	f7f7 fe4a 	bl	8000190 <memchr>
 80084fc:	9a04      	ldr	r2, [sp, #16]
 80084fe:	b9d8      	cbnz	r0, 8008538 <_vfiprintf_r+0x110>
 8008500:	06d1      	lsls	r1, r2, #27
 8008502:	bf44      	itt	mi
 8008504:	2320      	movmi	r3, #32
 8008506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800850a:	0713      	lsls	r3, r2, #28
 800850c:	bf44      	itt	mi
 800850e:	232b      	movmi	r3, #43	@ 0x2b
 8008510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008514:	f89a 3000 	ldrb.w	r3, [sl]
 8008518:	2b2a      	cmp	r3, #42	@ 0x2a
 800851a:	d015      	beq.n	8008548 <_vfiprintf_r+0x120>
 800851c:	9a07      	ldr	r2, [sp, #28]
 800851e:	4654      	mov	r4, sl
 8008520:	2000      	movs	r0, #0
 8008522:	f04f 0c0a 	mov.w	ip, #10
 8008526:	4621      	mov	r1, r4
 8008528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800852c:	3b30      	subs	r3, #48	@ 0x30
 800852e:	2b09      	cmp	r3, #9
 8008530:	d94b      	bls.n	80085ca <_vfiprintf_r+0x1a2>
 8008532:	b1b0      	cbz	r0, 8008562 <_vfiprintf_r+0x13a>
 8008534:	9207      	str	r2, [sp, #28]
 8008536:	e014      	b.n	8008562 <_vfiprintf_r+0x13a>
 8008538:	eba0 0308 	sub.w	r3, r0, r8
 800853c:	fa09 f303 	lsl.w	r3, r9, r3
 8008540:	4313      	orrs	r3, r2
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	46a2      	mov	sl, r4
 8008546:	e7d2      	b.n	80084ee <_vfiprintf_r+0xc6>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	1d19      	adds	r1, r3, #4
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	9103      	str	r1, [sp, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	bfbb      	ittet	lt
 8008554:	425b      	neglt	r3, r3
 8008556:	f042 0202 	orrlt.w	r2, r2, #2
 800855a:	9307      	strge	r3, [sp, #28]
 800855c:	9307      	strlt	r3, [sp, #28]
 800855e:	bfb8      	it	lt
 8008560:	9204      	strlt	r2, [sp, #16]
 8008562:	7823      	ldrb	r3, [r4, #0]
 8008564:	2b2e      	cmp	r3, #46	@ 0x2e
 8008566:	d10a      	bne.n	800857e <_vfiprintf_r+0x156>
 8008568:	7863      	ldrb	r3, [r4, #1]
 800856a:	2b2a      	cmp	r3, #42	@ 0x2a
 800856c:	d132      	bne.n	80085d4 <_vfiprintf_r+0x1ac>
 800856e:	9b03      	ldr	r3, [sp, #12]
 8008570:	1d1a      	adds	r2, r3, #4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	9203      	str	r2, [sp, #12]
 8008576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800857a:	3402      	adds	r4, #2
 800857c:	9305      	str	r3, [sp, #20]
 800857e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008654 <_vfiprintf_r+0x22c>
 8008582:	7821      	ldrb	r1, [r4, #0]
 8008584:	2203      	movs	r2, #3
 8008586:	4650      	mov	r0, sl
 8008588:	f7f7 fe02 	bl	8000190 <memchr>
 800858c:	b138      	cbz	r0, 800859e <_vfiprintf_r+0x176>
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	eba0 000a 	sub.w	r0, r0, sl
 8008594:	2240      	movs	r2, #64	@ 0x40
 8008596:	4082      	lsls	r2, r0
 8008598:	4313      	orrs	r3, r2
 800859a:	3401      	adds	r4, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a2:	4829      	ldr	r0, [pc, #164]	@ (8008648 <_vfiprintf_r+0x220>)
 80085a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085a8:	2206      	movs	r2, #6
 80085aa:	f7f7 fdf1 	bl	8000190 <memchr>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d03f      	beq.n	8008632 <_vfiprintf_r+0x20a>
 80085b2:	4b26      	ldr	r3, [pc, #152]	@ (800864c <_vfiprintf_r+0x224>)
 80085b4:	bb1b      	cbnz	r3, 80085fe <_vfiprintf_r+0x1d6>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	3307      	adds	r3, #7
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	3308      	adds	r3, #8
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c4:	443b      	add	r3, r7
 80085c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c8:	e76a      	b.n	80084a0 <_vfiprintf_r+0x78>
 80085ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ce:	460c      	mov	r4, r1
 80085d0:	2001      	movs	r0, #1
 80085d2:	e7a8      	b.n	8008526 <_vfiprintf_r+0xfe>
 80085d4:	2300      	movs	r3, #0
 80085d6:	3401      	adds	r4, #1
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	4619      	mov	r1, r3
 80085dc:	f04f 0c0a 	mov.w	ip, #10
 80085e0:	4620      	mov	r0, r4
 80085e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e6:	3a30      	subs	r2, #48	@ 0x30
 80085e8:	2a09      	cmp	r2, #9
 80085ea:	d903      	bls.n	80085f4 <_vfiprintf_r+0x1cc>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0c6      	beq.n	800857e <_vfiprintf_r+0x156>
 80085f0:	9105      	str	r1, [sp, #20]
 80085f2:	e7c4      	b.n	800857e <_vfiprintf_r+0x156>
 80085f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f8:	4604      	mov	r4, r0
 80085fa:	2301      	movs	r3, #1
 80085fc:	e7f0      	b.n	80085e0 <_vfiprintf_r+0x1b8>
 80085fe:	ab03      	add	r3, sp, #12
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	462a      	mov	r2, r5
 8008604:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <_vfiprintf_r+0x228>)
 8008606:	a904      	add	r1, sp, #16
 8008608:	4630      	mov	r0, r6
 800860a:	f7fc fb8d 	bl	8004d28 <_printf_float>
 800860e:	4607      	mov	r7, r0
 8008610:	1c78      	adds	r0, r7, #1
 8008612:	d1d6      	bne.n	80085c2 <_vfiprintf_r+0x19a>
 8008614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	d405      	bmi.n	8008626 <_vfiprintf_r+0x1fe>
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	059a      	lsls	r2, r3, #22
 800861e:	d402      	bmi.n	8008626 <_vfiprintf_r+0x1fe>
 8008620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008622:	f7fd fb03 	bl	8005c2c <__retarget_lock_release_recursive>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	065b      	lsls	r3, r3, #25
 800862a:	f53f af1f 	bmi.w	800846c <_vfiprintf_r+0x44>
 800862e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008630:	e71e      	b.n	8008470 <_vfiprintf_r+0x48>
 8008632:	ab03      	add	r3, sp, #12
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	462a      	mov	r2, r5
 8008638:	4b05      	ldr	r3, [pc, #20]	@ (8008650 <_vfiprintf_r+0x228>)
 800863a:	a904      	add	r1, sp, #16
 800863c:	4630      	mov	r0, r6
 800863e:	f7fc fe0b 	bl	8005258 <_printf_i>
 8008642:	e7e4      	b.n	800860e <_vfiprintf_r+0x1e6>
 8008644:	080097a3 	.word	0x080097a3
 8008648:	080097ad 	.word	0x080097ad
 800864c:	08004d29 	.word	0x08004d29
 8008650:	08008403 	.word	0x08008403
 8008654:	080097a9 	.word	0x080097a9

08008658 <__sflush_r>:
 8008658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	0716      	lsls	r6, r2, #28
 8008662:	4605      	mov	r5, r0
 8008664:	460c      	mov	r4, r1
 8008666:	d454      	bmi.n	8008712 <__sflush_r+0xba>
 8008668:	684b      	ldr	r3, [r1, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	dc02      	bgt.n	8008674 <__sflush_r+0x1c>
 800866e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	dd48      	ble.n	8008706 <__sflush_r+0xae>
 8008674:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008676:	2e00      	cmp	r6, #0
 8008678:	d045      	beq.n	8008706 <__sflush_r+0xae>
 800867a:	2300      	movs	r3, #0
 800867c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008680:	682f      	ldr	r7, [r5, #0]
 8008682:	6a21      	ldr	r1, [r4, #32]
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	d030      	beq.n	80086ea <__sflush_r+0x92>
 8008688:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	0759      	lsls	r1, r3, #29
 800868e:	d505      	bpl.n	800869c <__sflush_r+0x44>
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008696:	b10b      	cbz	r3, 800869c <__sflush_r+0x44>
 8008698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800869a:	1ad2      	subs	r2, r2, r3
 800869c:	2300      	movs	r3, #0
 800869e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086a0:	6a21      	ldr	r1, [r4, #32]
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b0      	blx	r6
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	d106      	bne.n	80086ba <__sflush_r+0x62>
 80086ac:	6829      	ldr	r1, [r5, #0]
 80086ae:	291d      	cmp	r1, #29
 80086b0:	d82b      	bhi.n	800870a <__sflush_r+0xb2>
 80086b2:	4a2a      	ldr	r2, [pc, #168]	@ (800875c <__sflush_r+0x104>)
 80086b4:	40ca      	lsrs	r2, r1
 80086b6:	07d6      	lsls	r6, r2, #31
 80086b8:	d527      	bpl.n	800870a <__sflush_r+0xb2>
 80086ba:	2200      	movs	r2, #0
 80086bc:	6062      	str	r2, [r4, #4]
 80086be:	04d9      	lsls	r1, r3, #19
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	d504      	bpl.n	80086d0 <__sflush_r+0x78>
 80086c6:	1c42      	adds	r2, r0, #1
 80086c8:	d101      	bne.n	80086ce <__sflush_r+0x76>
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	b903      	cbnz	r3, 80086d0 <__sflush_r+0x78>
 80086ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80086d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086d2:	602f      	str	r7, [r5, #0]
 80086d4:	b1b9      	cbz	r1, 8008706 <__sflush_r+0xae>
 80086d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086da:	4299      	cmp	r1, r3
 80086dc:	d002      	beq.n	80086e4 <__sflush_r+0x8c>
 80086de:	4628      	mov	r0, r5
 80086e0:	f7fe f8f0 	bl	80068c4 <_free_r>
 80086e4:	2300      	movs	r3, #0
 80086e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80086e8:	e00d      	b.n	8008706 <__sflush_r+0xae>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b0      	blx	r6
 80086f0:	4602      	mov	r2, r0
 80086f2:	1c50      	adds	r0, r2, #1
 80086f4:	d1c9      	bne.n	800868a <__sflush_r+0x32>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0c6      	beq.n	800868a <__sflush_r+0x32>
 80086fc:	2b1d      	cmp	r3, #29
 80086fe:	d001      	beq.n	8008704 <__sflush_r+0xac>
 8008700:	2b16      	cmp	r3, #22
 8008702:	d11e      	bne.n	8008742 <__sflush_r+0xea>
 8008704:	602f      	str	r7, [r5, #0]
 8008706:	2000      	movs	r0, #0
 8008708:	e022      	b.n	8008750 <__sflush_r+0xf8>
 800870a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870e:	b21b      	sxth	r3, r3
 8008710:	e01b      	b.n	800874a <__sflush_r+0xf2>
 8008712:	690f      	ldr	r7, [r1, #16]
 8008714:	2f00      	cmp	r7, #0
 8008716:	d0f6      	beq.n	8008706 <__sflush_r+0xae>
 8008718:	0793      	lsls	r3, r2, #30
 800871a:	680e      	ldr	r6, [r1, #0]
 800871c:	bf08      	it	eq
 800871e:	694b      	ldreq	r3, [r1, #20]
 8008720:	600f      	str	r7, [r1, #0]
 8008722:	bf18      	it	ne
 8008724:	2300      	movne	r3, #0
 8008726:	eba6 0807 	sub.w	r8, r6, r7
 800872a:	608b      	str	r3, [r1, #8]
 800872c:	f1b8 0f00 	cmp.w	r8, #0
 8008730:	dde9      	ble.n	8008706 <__sflush_r+0xae>
 8008732:	6a21      	ldr	r1, [r4, #32]
 8008734:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008736:	4643      	mov	r3, r8
 8008738:	463a      	mov	r2, r7
 800873a:	4628      	mov	r0, r5
 800873c:	47b0      	blx	r6
 800873e:	2800      	cmp	r0, #0
 8008740:	dc08      	bgt.n	8008754 <__sflush_r+0xfc>
 8008742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	4407      	add	r7, r0
 8008756:	eba8 0800 	sub.w	r8, r8, r0
 800875a:	e7e7      	b.n	800872c <__sflush_r+0xd4>
 800875c:	20400001 	.word	0x20400001

08008760 <_fflush_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	690b      	ldr	r3, [r1, #16]
 8008764:	4605      	mov	r5, r0
 8008766:	460c      	mov	r4, r1
 8008768:	b913      	cbnz	r3, 8008770 <_fflush_r+0x10>
 800876a:	2500      	movs	r5, #0
 800876c:	4628      	mov	r0, r5
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	b118      	cbz	r0, 800877a <_fflush_r+0x1a>
 8008772:	6a03      	ldr	r3, [r0, #32]
 8008774:	b90b      	cbnz	r3, 800877a <_fflush_r+0x1a>
 8008776:	f7fd f92d 	bl	80059d4 <__sinit>
 800877a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f3      	beq.n	800876a <_fflush_r+0xa>
 8008782:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008784:	07d0      	lsls	r0, r2, #31
 8008786:	d404      	bmi.n	8008792 <_fflush_r+0x32>
 8008788:	0599      	lsls	r1, r3, #22
 800878a:	d402      	bmi.n	8008792 <_fflush_r+0x32>
 800878c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878e:	f7fd fa4c 	bl	8005c2a <__retarget_lock_acquire_recursive>
 8008792:	4628      	mov	r0, r5
 8008794:	4621      	mov	r1, r4
 8008796:	f7ff ff5f 	bl	8008658 <__sflush_r>
 800879a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800879c:	07da      	lsls	r2, r3, #31
 800879e:	4605      	mov	r5, r0
 80087a0:	d4e4      	bmi.n	800876c <_fflush_r+0xc>
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	059b      	lsls	r3, r3, #22
 80087a6:	d4e1      	bmi.n	800876c <_fflush_r+0xc>
 80087a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087aa:	f7fd fa3f 	bl	8005c2c <__retarget_lock_release_recursive>
 80087ae:	e7dd      	b.n	800876c <_fflush_r+0xc>

080087b0 <__swbuf_r>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	460e      	mov	r6, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	4605      	mov	r5, r0
 80087b8:	b118      	cbz	r0, 80087c2 <__swbuf_r+0x12>
 80087ba:	6a03      	ldr	r3, [r0, #32]
 80087bc:	b90b      	cbnz	r3, 80087c2 <__swbuf_r+0x12>
 80087be:	f7fd f909 	bl	80059d4 <__sinit>
 80087c2:	69a3      	ldr	r3, [r4, #24]
 80087c4:	60a3      	str	r3, [r4, #8]
 80087c6:	89a3      	ldrh	r3, [r4, #12]
 80087c8:	071a      	lsls	r2, r3, #28
 80087ca:	d501      	bpl.n	80087d0 <__swbuf_r+0x20>
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	b943      	cbnz	r3, 80087e2 <__swbuf_r+0x32>
 80087d0:	4621      	mov	r1, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f82a 	bl	800882c <__swsetup_r>
 80087d8:	b118      	cbz	r0, 80087e2 <__swbuf_r+0x32>
 80087da:	f04f 37ff 	mov.w	r7, #4294967295
 80087de:	4638      	mov	r0, r7
 80087e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	6922      	ldr	r2, [r4, #16]
 80087e6:	1a98      	subs	r0, r3, r2
 80087e8:	6963      	ldr	r3, [r4, #20]
 80087ea:	b2f6      	uxtb	r6, r6
 80087ec:	4283      	cmp	r3, r0
 80087ee:	4637      	mov	r7, r6
 80087f0:	dc05      	bgt.n	80087fe <__swbuf_r+0x4e>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4628      	mov	r0, r5
 80087f6:	f7ff ffb3 	bl	8008760 <_fflush_r>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d1ed      	bne.n	80087da <__swbuf_r+0x2a>
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	3b01      	subs	r3, #1
 8008802:	60a3      	str	r3, [r4, #8]
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	6022      	str	r2, [r4, #0]
 800880a:	701e      	strb	r6, [r3, #0]
 800880c:	6962      	ldr	r2, [r4, #20]
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	429a      	cmp	r2, r3
 8008812:	d004      	beq.n	800881e <__swbuf_r+0x6e>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	07db      	lsls	r3, r3, #31
 8008818:	d5e1      	bpl.n	80087de <__swbuf_r+0x2e>
 800881a:	2e0a      	cmp	r6, #10
 800881c:	d1df      	bne.n	80087de <__swbuf_r+0x2e>
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	f7ff ff9d 	bl	8008760 <_fflush_r>
 8008826:	2800      	cmp	r0, #0
 8008828:	d0d9      	beq.n	80087de <__swbuf_r+0x2e>
 800882a:	e7d6      	b.n	80087da <__swbuf_r+0x2a>

0800882c <__swsetup_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4b29      	ldr	r3, [pc, #164]	@ (80088d4 <__swsetup_r+0xa8>)
 8008830:	4605      	mov	r5, r0
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	460c      	mov	r4, r1
 8008836:	b118      	cbz	r0, 8008840 <__swsetup_r+0x14>
 8008838:	6a03      	ldr	r3, [r0, #32]
 800883a:	b90b      	cbnz	r3, 8008840 <__swsetup_r+0x14>
 800883c:	f7fd f8ca 	bl	80059d4 <__sinit>
 8008840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008844:	0719      	lsls	r1, r3, #28
 8008846:	d422      	bmi.n	800888e <__swsetup_r+0x62>
 8008848:	06da      	lsls	r2, r3, #27
 800884a:	d407      	bmi.n	800885c <__swsetup_r+0x30>
 800884c:	2209      	movs	r2, #9
 800884e:	602a      	str	r2, [r5, #0]
 8008850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	f04f 30ff 	mov.w	r0, #4294967295
 800885a:	e033      	b.n	80088c4 <__swsetup_r+0x98>
 800885c:	0758      	lsls	r0, r3, #29
 800885e:	d512      	bpl.n	8008886 <__swsetup_r+0x5a>
 8008860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008862:	b141      	cbz	r1, 8008876 <__swsetup_r+0x4a>
 8008864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008868:	4299      	cmp	r1, r3
 800886a:	d002      	beq.n	8008872 <__swsetup_r+0x46>
 800886c:	4628      	mov	r0, r5
 800886e:	f7fe f829 	bl	80068c4 <_free_r>
 8008872:	2300      	movs	r3, #0
 8008874:	6363      	str	r3, [r4, #52]	@ 0x34
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	2300      	movs	r3, #0
 8008880:	6063      	str	r3, [r4, #4]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f043 0308 	orr.w	r3, r3, #8
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	b94b      	cbnz	r3, 80088a6 <__swsetup_r+0x7a>
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800889c:	d003      	beq.n	80088a6 <__swsetup_r+0x7a>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 fc5d 	bl	8009160 <__smakebuf_r>
 80088a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088aa:	f013 0201 	ands.w	r2, r3, #1
 80088ae:	d00a      	beq.n	80088c6 <__swsetup_r+0x9a>
 80088b0:	2200      	movs	r2, #0
 80088b2:	60a2      	str	r2, [r4, #8]
 80088b4:	6962      	ldr	r2, [r4, #20]
 80088b6:	4252      	negs	r2, r2
 80088b8:	61a2      	str	r2, [r4, #24]
 80088ba:	6922      	ldr	r2, [r4, #16]
 80088bc:	b942      	cbnz	r2, 80088d0 <__swsetup_r+0xa4>
 80088be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088c2:	d1c5      	bne.n	8008850 <__swsetup_r+0x24>
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	0799      	lsls	r1, r3, #30
 80088c8:	bf58      	it	pl
 80088ca:	6962      	ldrpl	r2, [r4, #20]
 80088cc:	60a2      	str	r2, [r4, #8]
 80088ce:	e7f4      	b.n	80088ba <__swsetup_r+0x8e>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7f7      	b.n	80088c4 <__swsetup_r+0x98>
 80088d4:	20000018 	.word	0x20000018

080088d8 <memmove>:
 80088d8:	4288      	cmp	r0, r1
 80088da:	b510      	push	{r4, lr}
 80088dc:	eb01 0402 	add.w	r4, r1, r2
 80088e0:	d902      	bls.n	80088e8 <memmove+0x10>
 80088e2:	4284      	cmp	r4, r0
 80088e4:	4623      	mov	r3, r4
 80088e6:	d807      	bhi.n	80088f8 <memmove+0x20>
 80088e8:	1e43      	subs	r3, r0, #1
 80088ea:	42a1      	cmp	r1, r4
 80088ec:	d008      	beq.n	8008900 <memmove+0x28>
 80088ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088f6:	e7f8      	b.n	80088ea <memmove+0x12>
 80088f8:	4402      	add	r2, r0
 80088fa:	4601      	mov	r1, r0
 80088fc:	428a      	cmp	r2, r1
 80088fe:	d100      	bne.n	8008902 <memmove+0x2a>
 8008900:	bd10      	pop	{r4, pc}
 8008902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800890a:	e7f7      	b.n	80088fc <memmove+0x24>

0800890c <strncmp>:
 800890c:	b510      	push	{r4, lr}
 800890e:	b16a      	cbz	r2, 800892c <strncmp+0x20>
 8008910:	3901      	subs	r1, #1
 8008912:	1884      	adds	r4, r0, r2
 8008914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008918:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800891c:	429a      	cmp	r2, r3
 800891e:	d103      	bne.n	8008928 <strncmp+0x1c>
 8008920:	42a0      	cmp	r0, r4
 8008922:	d001      	beq.n	8008928 <strncmp+0x1c>
 8008924:	2a00      	cmp	r2, #0
 8008926:	d1f5      	bne.n	8008914 <strncmp+0x8>
 8008928:	1ad0      	subs	r0, r2, r3
 800892a:	bd10      	pop	{r4, pc}
 800892c:	4610      	mov	r0, r2
 800892e:	e7fc      	b.n	800892a <strncmp+0x1e>

08008930 <_sbrk_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d06      	ldr	r5, [pc, #24]	@ (800894c <_sbrk_r+0x1c>)
 8008934:	2300      	movs	r3, #0
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	f7fc f8fe 	bl	8004b3c <_sbrk>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_sbrk_r+0x1a>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_sbrk_r+0x1a>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	200004f4 	.word	0x200004f4

08008950 <memcpy>:
 8008950:	440a      	add	r2, r1
 8008952:	4291      	cmp	r1, r2
 8008954:	f100 33ff 	add.w	r3, r0, #4294967295
 8008958:	d100      	bne.n	800895c <memcpy+0xc>
 800895a:	4770      	bx	lr
 800895c:	b510      	push	{r4, lr}
 800895e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008966:	4291      	cmp	r1, r2
 8008968:	d1f9      	bne.n	800895e <memcpy+0xe>
 800896a:	bd10      	pop	{r4, pc}
 800896c:	0000      	movs	r0, r0
	...

08008970 <nan>:
 8008970:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008978 <nan+0x8>
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	00000000 	.word	0x00000000
 800897c:	7ff80000 	.word	0x7ff80000

08008980 <__assert_func>:
 8008980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008982:	4614      	mov	r4, r2
 8008984:	461a      	mov	r2, r3
 8008986:	4b09      	ldr	r3, [pc, #36]	@ (80089ac <__assert_func+0x2c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4605      	mov	r5, r0
 800898c:	68d8      	ldr	r0, [r3, #12]
 800898e:	b14c      	cbz	r4, 80089a4 <__assert_func+0x24>
 8008990:	4b07      	ldr	r3, [pc, #28]	@ (80089b0 <__assert_func+0x30>)
 8008992:	9100      	str	r1, [sp, #0]
 8008994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008998:	4906      	ldr	r1, [pc, #24]	@ (80089b4 <__assert_func+0x34>)
 800899a:	462b      	mov	r3, r5
 800899c:	f000 fba8 	bl	80090f0 <fiprintf>
 80089a0:	f000 fc3c 	bl	800921c <abort>
 80089a4:	4b04      	ldr	r3, [pc, #16]	@ (80089b8 <__assert_func+0x38>)
 80089a6:	461c      	mov	r4, r3
 80089a8:	e7f3      	b.n	8008992 <__assert_func+0x12>
 80089aa:	bf00      	nop
 80089ac:	20000018 	.word	0x20000018
 80089b0:	080097bc 	.word	0x080097bc
 80089b4:	080097c9 	.word	0x080097c9
 80089b8:	080097f7 	.word	0x080097f7

080089bc <_calloc_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	fba1 5402 	umull	r5, r4, r1, r2
 80089c2:	b934      	cbnz	r4, 80089d2 <_calloc_r+0x16>
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7fd fff1 	bl	80069ac <_malloc_r>
 80089ca:	4606      	mov	r6, r0
 80089cc:	b928      	cbnz	r0, 80089da <_calloc_r+0x1e>
 80089ce:	4630      	mov	r0, r6
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	220c      	movs	r2, #12
 80089d4:	6002      	str	r2, [r0, #0]
 80089d6:	2600      	movs	r6, #0
 80089d8:	e7f9      	b.n	80089ce <_calloc_r+0x12>
 80089da:	462a      	mov	r2, r5
 80089dc:	4621      	mov	r1, r4
 80089de:	f7fd f8a6 	bl	8005b2e <memset>
 80089e2:	e7f4      	b.n	80089ce <_calloc_r+0x12>

080089e4 <rshift>:
 80089e4:	6903      	ldr	r3, [r0, #16]
 80089e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089f2:	f100 0414 	add.w	r4, r0, #20
 80089f6:	dd45      	ble.n	8008a84 <rshift+0xa0>
 80089f8:	f011 011f 	ands.w	r1, r1, #31
 80089fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a04:	d10c      	bne.n	8008a20 <rshift+0x3c>
 8008a06:	f100 0710 	add.w	r7, r0, #16
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	42b1      	cmp	r1, r6
 8008a0e:	d334      	bcc.n	8008a7a <rshift+0x96>
 8008a10:	1a9b      	subs	r3, r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	1eea      	subs	r2, r5, #3
 8008a16:	4296      	cmp	r6, r2
 8008a18:	bf38      	it	cc
 8008a1a:	2300      	movcc	r3, #0
 8008a1c:	4423      	add	r3, r4
 8008a1e:	e015      	b.n	8008a4c <rshift+0x68>
 8008a20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a24:	f1c1 0820 	rsb	r8, r1, #32
 8008a28:	40cf      	lsrs	r7, r1
 8008a2a:	f105 0e04 	add.w	lr, r5, #4
 8008a2e:	46a1      	mov	r9, r4
 8008a30:	4576      	cmp	r6, lr
 8008a32:	46f4      	mov	ip, lr
 8008a34:	d815      	bhi.n	8008a62 <rshift+0x7e>
 8008a36:	1a9a      	subs	r2, r3, r2
 8008a38:	0092      	lsls	r2, r2, #2
 8008a3a:	3a04      	subs	r2, #4
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	42ae      	cmp	r6, r5
 8008a40:	bf38      	it	cc
 8008a42:	2200      	movcc	r2, #0
 8008a44:	18a3      	adds	r3, r4, r2
 8008a46:	50a7      	str	r7, [r4, r2]
 8008a48:	b107      	cbz	r7, 8008a4c <rshift+0x68>
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	1b1a      	subs	r2, r3, r4
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a54:	bf08      	it	eq
 8008a56:	2300      	moveq	r3, #0
 8008a58:	6102      	str	r2, [r0, #16]
 8008a5a:	bf08      	it	eq
 8008a5c:	6143      	streq	r3, [r0, #20]
 8008a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a62:	f8dc c000 	ldr.w	ip, [ip]
 8008a66:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a6a:	ea4c 0707 	orr.w	r7, ip, r7
 8008a6e:	f849 7b04 	str.w	r7, [r9], #4
 8008a72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a76:	40cf      	lsrs	r7, r1
 8008a78:	e7da      	b.n	8008a30 <rshift+0x4c>
 8008a7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a82:	e7c3      	b.n	8008a0c <rshift+0x28>
 8008a84:	4623      	mov	r3, r4
 8008a86:	e7e1      	b.n	8008a4c <rshift+0x68>

08008a88 <__hexdig_fun>:
 8008a88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008a8c:	2b09      	cmp	r3, #9
 8008a8e:	d802      	bhi.n	8008a96 <__hexdig_fun+0xe>
 8008a90:	3820      	subs	r0, #32
 8008a92:	b2c0      	uxtb	r0, r0
 8008a94:	4770      	bx	lr
 8008a96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d801      	bhi.n	8008aa2 <__hexdig_fun+0x1a>
 8008a9e:	3847      	subs	r0, #71	@ 0x47
 8008aa0:	e7f7      	b.n	8008a92 <__hexdig_fun+0xa>
 8008aa2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d801      	bhi.n	8008aae <__hexdig_fun+0x26>
 8008aaa:	3827      	subs	r0, #39	@ 0x27
 8008aac:	e7f1      	b.n	8008a92 <__hexdig_fun+0xa>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	4770      	bx	lr
	...

08008ab4 <__gethex>:
 8008ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	b085      	sub	sp, #20
 8008aba:	468a      	mov	sl, r1
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	680b      	ldr	r3, [r1, #0]
 8008ac0:	9001      	str	r0, [sp, #4]
 8008ac2:	4690      	mov	r8, r2
 8008ac4:	1c9c      	adds	r4, r3, #2
 8008ac6:	46a1      	mov	r9, r4
 8008ac8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008acc:	2830      	cmp	r0, #48	@ 0x30
 8008ace:	d0fa      	beq.n	8008ac6 <__gethex+0x12>
 8008ad0:	eba9 0303 	sub.w	r3, r9, r3
 8008ad4:	f1a3 0b02 	sub.w	fp, r3, #2
 8008ad8:	f7ff ffd6 	bl	8008a88 <__hexdig_fun>
 8008adc:	4605      	mov	r5, r0
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d168      	bne.n	8008bb4 <__gethex+0x100>
 8008ae2:	49a0      	ldr	r1, [pc, #640]	@ (8008d64 <__gethex+0x2b0>)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	4648      	mov	r0, r9
 8008ae8:	f7ff ff10 	bl	800890c <strncmp>
 8008aec:	4607      	mov	r7, r0
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d167      	bne.n	8008bc2 <__gethex+0x10e>
 8008af2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008af6:	4626      	mov	r6, r4
 8008af8:	f7ff ffc6 	bl	8008a88 <__hexdig_fun>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d062      	beq.n	8008bc6 <__gethex+0x112>
 8008b00:	4623      	mov	r3, r4
 8008b02:	7818      	ldrb	r0, [r3, #0]
 8008b04:	2830      	cmp	r0, #48	@ 0x30
 8008b06:	4699      	mov	r9, r3
 8008b08:	f103 0301 	add.w	r3, r3, #1
 8008b0c:	d0f9      	beq.n	8008b02 <__gethex+0x4e>
 8008b0e:	f7ff ffbb 	bl	8008a88 <__hexdig_fun>
 8008b12:	fab0 f580 	clz	r5, r0
 8008b16:	096d      	lsrs	r5, r5, #5
 8008b18:	f04f 0b01 	mov.w	fp, #1
 8008b1c:	464a      	mov	r2, r9
 8008b1e:	4616      	mov	r6, r2
 8008b20:	3201      	adds	r2, #1
 8008b22:	7830      	ldrb	r0, [r6, #0]
 8008b24:	f7ff ffb0 	bl	8008a88 <__hexdig_fun>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d1f8      	bne.n	8008b1e <__gethex+0x6a>
 8008b2c:	498d      	ldr	r1, [pc, #564]	@ (8008d64 <__gethex+0x2b0>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff feeb 	bl	800890c <strncmp>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d13f      	bne.n	8008bba <__gethex+0x106>
 8008b3a:	b944      	cbnz	r4, 8008b4e <__gethex+0x9a>
 8008b3c:	1c74      	adds	r4, r6, #1
 8008b3e:	4622      	mov	r2, r4
 8008b40:	4616      	mov	r6, r2
 8008b42:	3201      	adds	r2, #1
 8008b44:	7830      	ldrb	r0, [r6, #0]
 8008b46:	f7ff ff9f 	bl	8008a88 <__hexdig_fun>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d1f8      	bne.n	8008b40 <__gethex+0x8c>
 8008b4e:	1ba4      	subs	r4, r4, r6
 8008b50:	00a7      	lsls	r7, r4, #2
 8008b52:	7833      	ldrb	r3, [r6, #0]
 8008b54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b58:	2b50      	cmp	r3, #80	@ 0x50
 8008b5a:	d13e      	bne.n	8008bda <__gethex+0x126>
 8008b5c:	7873      	ldrb	r3, [r6, #1]
 8008b5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b60:	d033      	beq.n	8008bca <__gethex+0x116>
 8008b62:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b64:	d034      	beq.n	8008bd0 <__gethex+0x11c>
 8008b66:	1c71      	adds	r1, r6, #1
 8008b68:	2400      	movs	r4, #0
 8008b6a:	7808      	ldrb	r0, [r1, #0]
 8008b6c:	f7ff ff8c 	bl	8008a88 <__hexdig_fun>
 8008b70:	1e43      	subs	r3, r0, #1
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b18      	cmp	r3, #24
 8008b76:	d830      	bhi.n	8008bda <__gethex+0x126>
 8008b78:	f1a0 0210 	sub.w	r2, r0, #16
 8008b7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b80:	f7ff ff82 	bl	8008a88 <__hexdig_fun>
 8008b84:	f100 3cff 	add.w	ip, r0, #4294967295
 8008b88:	fa5f fc8c 	uxtb.w	ip, ip
 8008b8c:	f1bc 0f18 	cmp.w	ip, #24
 8008b90:	f04f 030a 	mov.w	r3, #10
 8008b94:	d91e      	bls.n	8008bd4 <__gethex+0x120>
 8008b96:	b104      	cbz	r4, 8008b9a <__gethex+0xe6>
 8008b98:	4252      	negs	r2, r2
 8008b9a:	4417      	add	r7, r2
 8008b9c:	f8ca 1000 	str.w	r1, [sl]
 8008ba0:	b1ed      	cbz	r5, 8008bde <__gethex+0x12a>
 8008ba2:	f1bb 0f00 	cmp.w	fp, #0
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2506      	moveq	r5, #6
 8008baa:	2500      	movne	r5, #0
 8008bac:	4628      	mov	r0, r5
 8008bae:	b005      	add	sp, #20
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	2500      	movs	r5, #0
 8008bb6:	462c      	mov	r4, r5
 8008bb8:	e7b0      	b.n	8008b1c <__gethex+0x68>
 8008bba:	2c00      	cmp	r4, #0
 8008bbc:	d1c7      	bne.n	8008b4e <__gethex+0x9a>
 8008bbe:	4627      	mov	r7, r4
 8008bc0:	e7c7      	b.n	8008b52 <__gethex+0x9e>
 8008bc2:	464e      	mov	r6, r9
 8008bc4:	462f      	mov	r7, r5
 8008bc6:	2501      	movs	r5, #1
 8008bc8:	e7c3      	b.n	8008b52 <__gethex+0x9e>
 8008bca:	2400      	movs	r4, #0
 8008bcc:	1cb1      	adds	r1, r6, #2
 8008bce:	e7cc      	b.n	8008b6a <__gethex+0xb6>
 8008bd0:	2401      	movs	r4, #1
 8008bd2:	e7fb      	b.n	8008bcc <__gethex+0x118>
 8008bd4:	fb03 0002 	mla	r0, r3, r2, r0
 8008bd8:	e7ce      	b.n	8008b78 <__gethex+0xc4>
 8008bda:	4631      	mov	r1, r6
 8008bdc:	e7de      	b.n	8008b9c <__gethex+0xe8>
 8008bde:	eba6 0309 	sub.w	r3, r6, r9
 8008be2:	3b01      	subs	r3, #1
 8008be4:	4629      	mov	r1, r5
 8008be6:	2b07      	cmp	r3, #7
 8008be8:	dc0a      	bgt.n	8008c00 <__gethex+0x14c>
 8008bea:	9801      	ldr	r0, [sp, #4]
 8008bec:	f7fd ff6a 	bl	8006ac4 <_Balloc>
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	b940      	cbnz	r0, 8008c06 <__gethex+0x152>
 8008bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8008d68 <__gethex+0x2b4>)
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	21e4      	movs	r1, #228	@ 0xe4
 8008bfa:	485c      	ldr	r0, [pc, #368]	@ (8008d6c <__gethex+0x2b8>)
 8008bfc:	f7ff fec0 	bl	8008980 <__assert_func>
 8008c00:	3101      	adds	r1, #1
 8008c02:	105b      	asrs	r3, r3, #1
 8008c04:	e7ef      	b.n	8008be6 <__gethex+0x132>
 8008c06:	f100 0a14 	add.w	sl, r0, #20
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4655      	mov	r5, sl
 8008c0e:	469b      	mov	fp, r3
 8008c10:	45b1      	cmp	r9, r6
 8008c12:	d337      	bcc.n	8008c84 <__gethex+0x1d0>
 8008c14:	f845 bb04 	str.w	fp, [r5], #4
 8008c18:	eba5 050a 	sub.w	r5, r5, sl
 8008c1c:	10ad      	asrs	r5, r5, #2
 8008c1e:	6125      	str	r5, [r4, #16]
 8008c20:	4658      	mov	r0, fp
 8008c22:	f7fe f841 	bl	8006ca8 <__hi0bits>
 8008c26:	016d      	lsls	r5, r5, #5
 8008c28:	f8d8 6000 	ldr.w	r6, [r8]
 8008c2c:	1a2d      	subs	r5, r5, r0
 8008c2e:	42b5      	cmp	r5, r6
 8008c30:	dd54      	ble.n	8008cdc <__gethex+0x228>
 8008c32:	1bad      	subs	r5, r5, r6
 8008c34:	4629      	mov	r1, r5
 8008c36:	4620      	mov	r0, r4
 8008c38:	f7fe fbcd 	bl	80073d6 <__any_on>
 8008c3c:	4681      	mov	r9, r0
 8008c3e:	b178      	cbz	r0, 8008c60 <__gethex+0x1ac>
 8008c40:	1e6b      	subs	r3, r5, #1
 8008c42:	1159      	asrs	r1, r3, #5
 8008c44:	f003 021f 	and.w	r2, r3, #31
 8008c48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c4c:	f04f 0901 	mov.w	r9, #1
 8008c50:	fa09 f202 	lsl.w	r2, r9, r2
 8008c54:	420a      	tst	r2, r1
 8008c56:	d003      	beq.n	8008c60 <__gethex+0x1ac>
 8008c58:	454b      	cmp	r3, r9
 8008c5a:	dc36      	bgt.n	8008cca <__gethex+0x216>
 8008c5c:	f04f 0902 	mov.w	r9, #2
 8008c60:	4629      	mov	r1, r5
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7ff febe 	bl	80089e4 <rshift>
 8008c68:	442f      	add	r7, r5
 8008c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c6e:	42bb      	cmp	r3, r7
 8008c70:	da42      	bge.n	8008cf8 <__gethex+0x244>
 8008c72:	9801      	ldr	r0, [sp, #4]
 8008c74:	4621      	mov	r1, r4
 8008c76:	f7fd ff65 	bl	8006b44 <_Bfree>
 8008c7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	25a3      	movs	r5, #163	@ 0xa3
 8008c82:	e793      	b.n	8008bac <__gethex+0xf8>
 8008c84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008c88:	2a2e      	cmp	r2, #46	@ 0x2e
 8008c8a:	d012      	beq.n	8008cb2 <__gethex+0x1fe>
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d104      	bne.n	8008c9a <__gethex+0x1e6>
 8008c90:	f845 bb04 	str.w	fp, [r5], #4
 8008c94:	f04f 0b00 	mov.w	fp, #0
 8008c98:	465b      	mov	r3, fp
 8008c9a:	7830      	ldrb	r0, [r6, #0]
 8008c9c:	9303      	str	r3, [sp, #12]
 8008c9e:	f7ff fef3 	bl	8008a88 <__hexdig_fun>
 8008ca2:	9b03      	ldr	r3, [sp, #12]
 8008ca4:	f000 000f 	and.w	r0, r0, #15
 8008ca8:	4098      	lsls	r0, r3
 8008caa:	ea4b 0b00 	orr.w	fp, fp, r0
 8008cae:	3304      	adds	r3, #4
 8008cb0:	e7ae      	b.n	8008c10 <__gethex+0x15c>
 8008cb2:	45b1      	cmp	r9, r6
 8008cb4:	d8ea      	bhi.n	8008c8c <__gethex+0x1d8>
 8008cb6:	492b      	ldr	r1, [pc, #172]	@ (8008d64 <__gethex+0x2b0>)
 8008cb8:	9303      	str	r3, [sp, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff fe25 	bl	800890c <strncmp>
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d1e1      	bne.n	8008c8c <__gethex+0x1d8>
 8008cc8:	e7a2      	b.n	8008c10 <__gethex+0x15c>
 8008cca:	1ea9      	subs	r1, r5, #2
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f7fe fb82 	bl	80073d6 <__any_on>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d0c2      	beq.n	8008c5c <__gethex+0x1a8>
 8008cd6:	f04f 0903 	mov.w	r9, #3
 8008cda:	e7c1      	b.n	8008c60 <__gethex+0x1ac>
 8008cdc:	da09      	bge.n	8008cf2 <__gethex+0x23e>
 8008cde:	1b75      	subs	r5, r6, r5
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	9801      	ldr	r0, [sp, #4]
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	f7fe f93d 	bl	8006f64 <__lshift>
 8008cea:	1b7f      	subs	r7, r7, r5
 8008cec:	4604      	mov	r4, r0
 8008cee:	f100 0a14 	add.w	sl, r0, #20
 8008cf2:	f04f 0900 	mov.w	r9, #0
 8008cf6:	e7b8      	b.n	8008c6a <__gethex+0x1b6>
 8008cf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cfc:	42bd      	cmp	r5, r7
 8008cfe:	dd6f      	ble.n	8008de0 <__gethex+0x32c>
 8008d00:	1bed      	subs	r5, r5, r7
 8008d02:	42ae      	cmp	r6, r5
 8008d04:	dc34      	bgt.n	8008d70 <__gethex+0x2bc>
 8008d06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d022      	beq.n	8008d54 <__gethex+0x2a0>
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d024      	beq.n	8008d5c <__gethex+0x2a8>
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d115      	bne.n	8008d42 <__gethex+0x28e>
 8008d16:	42ae      	cmp	r6, r5
 8008d18:	d113      	bne.n	8008d42 <__gethex+0x28e>
 8008d1a:	2e01      	cmp	r6, #1
 8008d1c:	d10b      	bne.n	8008d36 <__gethex+0x282>
 8008d1e:	9a02      	ldr	r2, [sp, #8]
 8008d20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	2301      	movs	r3, #1
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	f8ca 3000 	str.w	r3, [sl]
 8008d2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d30:	2562      	movs	r5, #98	@ 0x62
 8008d32:	601c      	str	r4, [r3, #0]
 8008d34:	e73a      	b.n	8008bac <__gethex+0xf8>
 8008d36:	1e71      	subs	r1, r6, #1
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7fe fb4c 	bl	80073d6 <__any_on>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d1ed      	bne.n	8008d1e <__gethex+0x26a>
 8008d42:	9801      	ldr	r0, [sp, #4]
 8008d44:	4621      	mov	r1, r4
 8008d46:	f7fd fefd 	bl	8006b44 <_Bfree>
 8008d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	2550      	movs	r5, #80	@ 0x50
 8008d52:	e72b      	b.n	8008bac <__gethex+0xf8>
 8008d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1f3      	bne.n	8008d42 <__gethex+0x28e>
 8008d5a:	e7e0      	b.n	8008d1e <__gethex+0x26a>
 8008d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1dd      	bne.n	8008d1e <__gethex+0x26a>
 8008d62:	e7ee      	b.n	8008d42 <__gethex+0x28e>
 8008d64:	080097a1 	.word	0x080097a1
 8008d68:	08009736 	.word	0x08009736
 8008d6c:	080097f8 	.word	0x080097f8
 8008d70:	1e6f      	subs	r7, r5, #1
 8008d72:	f1b9 0f00 	cmp.w	r9, #0
 8008d76:	d130      	bne.n	8008dda <__gethex+0x326>
 8008d78:	b127      	cbz	r7, 8008d84 <__gethex+0x2d0>
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f7fe fb2a 	bl	80073d6 <__any_on>
 8008d82:	4681      	mov	r9, r0
 8008d84:	117a      	asrs	r2, r7, #5
 8008d86:	2301      	movs	r3, #1
 8008d88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d8c:	f007 071f 	and.w	r7, r7, #31
 8008d90:	40bb      	lsls	r3, r7
 8008d92:	4213      	tst	r3, r2
 8008d94:	4629      	mov	r1, r5
 8008d96:	4620      	mov	r0, r4
 8008d98:	bf18      	it	ne
 8008d9a:	f049 0902 	orrne.w	r9, r9, #2
 8008d9e:	f7ff fe21 	bl	80089e4 <rshift>
 8008da2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008da6:	1b76      	subs	r6, r6, r5
 8008da8:	2502      	movs	r5, #2
 8008daa:	f1b9 0f00 	cmp.w	r9, #0
 8008dae:	d047      	beq.n	8008e40 <__gethex+0x38c>
 8008db0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d015      	beq.n	8008de4 <__gethex+0x330>
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d017      	beq.n	8008dec <__gethex+0x338>
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d109      	bne.n	8008dd4 <__gethex+0x320>
 8008dc0:	f019 0f02 	tst.w	r9, #2
 8008dc4:	d006      	beq.n	8008dd4 <__gethex+0x320>
 8008dc6:	f8da 3000 	ldr.w	r3, [sl]
 8008dca:	ea49 0903 	orr.w	r9, r9, r3
 8008dce:	f019 0f01 	tst.w	r9, #1
 8008dd2:	d10e      	bne.n	8008df2 <__gethex+0x33e>
 8008dd4:	f045 0510 	orr.w	r5, r5, #16
 8008dd8:	e032      	b.n	8008e40 <__gethex+0x38c>
 8008dda:	f04f 0901 	mov.w	r9, #1
 8008dde:	e7d1      	b.n	8008d84 <__gethex+0x2d0>
 8008de0:	2501      	movs	r5, #1
 8008de2:	e7e2      	b.n	8008daa <__gethex+0x2f6>
 8008de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008de6:	f1c3 0301 	rsb	r3, r3, #1
 8008dea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0f0      	beq.n	8008dd4 <__gethex+0x320>
 8008df2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008df6:	f104 0314 	add.w	r3, r4, #20
 8008dfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e02:	f04f 0c00 	mov.w	ip, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e10:	d01b      	beq.n	8008e4a <__gethex+0x396>
 8008e12:	3201      	adds	r2, #1
 8008e14:	6002      	str	r2, [r0, #0]
 8008e16:	2d02      	cmp	r5, #2
 8008e18:	f104 0314 	add.w	r3, r4, #20
 8008e1c:	d13c      	bne.n	8008e98 <__gethex+0x3e4>
 8008e1e:	f8d8 2000 	ldr.w	r2, [r8]
 8008e22:	3a01      	subs	r2, #1
 8008e24:	42b2      	cmp	r2, r6
 8008e26:	d109      	bne.n	8008e3c <__gethex+0x388>
 8008e28:	1171      	asrs	r1, r6, #5
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e30:	f006 061f 	and.w	r6, r6, #31
 8008e34:	fa02 f606 	lsl.w	r6, r2, r6
 8008e38:	421e      	tst	r6, r3
 8008e3a:	d13a      	bne.n	8008eb2 <__gethex+0x3fe>
 8008e3c:	f045 0520 	orr.w	r5, r5, #32
 8008e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e42:	601c      	str	r4, [r3, #0]
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	601f      	str	r7, [r3, #0]
 8008e48:	e6b0      	b.n	8008bac <__gethex+0xf8>
 8008e4a:	4299      	cmp	r1, r3
 8008e4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e50:	d8d9      	bhi.n	8008e06 <__gethex+0x352>
 8008e52:	68a3      	ldr	r3, [r4, #8]
 8008e54:	459b      	cmp	fp, r3
 8008e56:	db17      	blt.n	8008e88 <__gethex+0x3d4>
 8008e58:	6861      	ldr	r1, [r4, #4]
 8008e5a:	9801      	ldr	r0, [sp, #4]
 8008e5c:	3101      	adds	r1, #1
 8008e5e:	f7fd fe31 	bl	8006ac4 <_Balloc>
 8008e62:	4681      	mov	r9, r0
 8008e64:	b918      	cbnz	r0, 8008e6e <__gethex+0x3ba>
 8008e66:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed0 <__gethex+0x41c>)
 8008e68:	4602      	mov	r2, r0
 8008e6a:	2184      	movs	r1, #132	@ 0x84
 8008e6c:	e6c5      	b.n	8008bfa <__gethex+0x146>
 8008e6e:	6922      	ldr	r2, [r4, #16]
 8008e70:	3202      	adds	r2, #2
 8008e72:	f104 010c 	add.w	r1, r4, #12
 8008e76:	0092      	lsls	r2, r2, #2
 8008e78:	300c      	adds	r0, #12
 8008e7a:	f7ff fd69 	bl	8008950 <memcpy>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	9801      	ldr	r0, [sp, #4]
 8008e82:	f7fd fe5f 	bl	8006b44 <_Bfree>
 8008e86:	464c      	mov	r4, r9
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e90:	6122      	str	r2, [r4, #16]
 8008e92:	2201      	movs	r2, #1
 8008e94:	615a      	str	r2, [r3, #20]
 8008e96:	e7be      	b.n	8008e16 <__gethex+0x362>
 8008e98:	6922      	ldr	r2, [r4, #16]
 8008e9a:	455a      	cmp	r2, fp
 8008e9c:	dd0b      	ble.n	8008eb6 <__gethex+0x402>
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7ff fd9f 	bl	80089e4 <rshift>
 8008ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008eaa:	3701      	adds	r7, #1
 8008eac:	42bb      	cmp	r3, r7
 8008eae:	f6ff aee0 	blt.w	8008c72 <__gethex+0x1be>
 8008eb2:	2501      	movs	r5, #1
 8008eb4:	e7c2      	b.n	8008e3c <__gethex+0x388>
 8008eb6:	f016 061f 	ands.w	r6, r6, #31
 8008eba:	d0fa      	beq.n	8008eb2 <__gethex+0x3fe>
 8008ebc:	4453      	add	r3, sl
 8008ebe:	f1c6 0620 	rsb	r6, r6, #32
 8008ec2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ec6:	f7fd feef 	bl	8006ca8 <__hi0bits>
 8008eca:	42b0      	cmp	r0, r6
 8008ecc:	dbe7      	blt.n	8008e9e <__gethex+0x3ea>
 8008ece:	e7f0      	b.n	8008eb2 <__gethex+0x3fe>
 8008ed0:	08009736 	.word	0x08009736

08008ed4 <L_shift>:
 8008ed4:	f1c2 0208 	rsb	r2, r2, #8
 8008ed8:	0092      	lsls	r2, r2, #2
 8008eda:	b570      	push	{r4, r5, r6, lr}
 8008edc:	f1c2 0620 	rsb	r6, r2, #32
 8008ee0:	6843      	ldr	r3, [r0, #4]
 8008ee2:	6804      	ldr	r4, [r0, #0]
 8008ee4:	fa03 f506 	lsl.w	r5, r3, r6
 8008ee8:	432c      	orrs	r4, r5
 8008eea:	40d3      	lsrs	r3, r2
 8008eec:	6004      	str	r4, [r0, #0]
 8008eee:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ef2:	4288      	cmp	r0, r1
 8008ef4:	d3f4      	bcc.n	8008ee0 <L_shift+0xc>
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}

08008ef8 <__match>:
 8008ef8:	b530      	push	{r4, r5, lr}
 8008efa:	6803      	ldr	r3, [r0, #0]
 8008efc:	3301      	adds	r3, #1
 8008efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f02:	b914      	cbnz	r4, 8008f0a <__match+0x12>
 8008f04:	6003      	str	r3, [r0, #0]
 8008f06:	2001      	movs	r0, #1
 8008f08:	bd30      	pop	{r4, r5, pc}
 8008f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008f12:	2d19      	cmp	r5, #25
 8008f14:	bf98      	it	ls
 8008f16:	3220      	addls	r2, #32
 8008f18:	42a2      	cmp	r2, r4
 8008f1a:	d0f0      	beq.n	8008efe <__match+0x6>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e7f3      	b.n	8008f08 <__match+0x10>

08008f20 <__hexnan>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	680b      	ldr	r3, [r1, #0]
 8008f26:	6801      	ldr	r1, [r0, #0]
 8008f28:	115e      	asrs	r6, r3, #5
 8008f2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f2e:	f013 031f 	ands.w	r3, r3, #31
 8008f32:	b087      	sub	sp, #28
 8008f34:	bf18      	it	ne
 8008f36:	3604      	addne	r6, #4
 8008f38:	2500      	movs	r5, #0
 8008f3a:	1f37      	subs	r7, r6, #4
 8008f3c:	4682      	mov	sl, r0
 8008f3e:	4690      	mov	r8, r2
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f46:	46b9      	mov	r9, r7
 8008f48:	463c      	mov	r4, r7
 8008f4a:	9502      	str	r5, [sp, #8]
 8008f4c:	46ab      	mov	fp, r5
 8008f4e:	784a      	ldrb	r2, [r1, #1]
 8008f50:	1c4b      	adds	r3, r1, #1
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	b342      	cbz	r2, 8008fa8 <__hexnan+0x88>
 8008f56:	4610      	mov	r0, r2
 8008f58:	9105      	str	r1, [sp, #20]
 8008f5a:	9204      	str	r2, [sp, #16]
 8008f5c:	f7ff fd94 	bl	8008a88 <__hexdig_fun>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d151      	bne.n	8009008 <__hexnan+0xe8>
 8008f64:	9a04      	ldr	r2, [sp, #16]
 8008f66:	9905      	ldr	r1, [sp, #20]
 8008f68:	2a20      	cmp	r2, #32
 8008f6a:	d818      	bhi.n	8008f9e <__hexnan+0x7e>
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	459b      	cmp	fp, r3
 8008f70:	dd13      	ble.n	8008f9a <__hexnan+0x7a>
 8008f72:	454c      	cmp	r4, r9
 8008f74:	d206      	bcs.n	8008f84 <__hexnan+0x64>
 8008f76:	2d07      	cmp	r5, #7
 8008f78:	dc04      	bgt.n	8008f84 <__hexnan+0x64>
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f7ff ffa8 	bl	8008ed4 <L_shift>
 8008f84:	4544      	cmp	r4, r8
 8008f86:	d952      	bls.n	800902e <__hexnan+0x10e>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f1a4 0904 	sub.w	r9, r4, #4
 8008f8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f92:	f8cd b008 	str.w	fp, [sp, #8]
 8008f96:	464c      	mov	r4, r9
 8008f98:	461d      	mov	r5, r3
 8008f9a:	9903      	ldr	r1, [sp, #12]
 8008f9c:	e7d7      	b.n	8008f4e <__hexnan+0x2e>
 8008f9e:	2a29      	cmp	r2, #41	@ 0x29
 8008fa0:	d157      	bne.n	8009052 <__hexnan+0x132>
 8008fa2:	3102      	adds	r1, #2
 8008fa4:	f8ca 1000 	str.w	r1, [sl]
 8008fa8:	f1bb 0f00 	cmp.w	fp, #0
 8008fac:	d051      	beq.n	8009052 <__hexnan+0x132>
 8008fae:	454c      	cmp	r4, r9
 8008fb0:	d206      	bcs.n	8008fc0 <__hexnan+0xa0>
 8008fb2:	2d07      	cmp	r5, #7
 8008fb4:	dc04      	bgt.n	8008fc0 <__hexnan+0xa0>
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4649      	mov	r1, r9
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f7ff ff8a 	bl	8008ed4 <L_shift>
 8008fc0:	4544      	cmp	r4, r8
 8008fc2:	d936      	bls.n	8009032 <__hexnan+0x112>
 8008fc4:	f1a8 0204 	sub.w	r2, r8, #4
 8008fc8:	4623      	mov	r3, r4
 8008fca:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fce:	f842 1f04 	str.w	r1, [r2, #4]!
 8008fd2:	429f      	cmp	r7, r3
 8008fd4:	d2f9      	bcs.n	8008fca <__hexnan+0xaa>
 8008fd6:	1b3b      	subs	r3, r7, r4
 8008fd8:	f023 0303 	bic.w	r3, r3, #3
 8008fdc:	3304      	adds	r3, #4
 8008fde:	3401      	adds	r4, #1
 8008fe0:	3e03      	subs	r6, #3
 8008fe2:	42b4      	cmp	r4, r6
 8008fe4:	bf88      	it	hi
 8008fe6:	2304      	movhi	r3, #4
 8008fe8:	4443      	add	r3, r8
 8008fea:	2200      	movs	r2, #0
 8008fec:	f843 2b04 	str.w	r2, [r3], #4
 8008ff0:	429f      	cmp	r7, r3
 8008ff2:	d2fb      	bcs.n	8008fec <__hexnan+0xcc>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	b91b      	cbnz	r3, 8009000 <__hexnan+0xe0>
 8008ff8:	4547      	cmp	r7, r8
 8008ffa:	d128      	bne.n	800904e <__hexnan+0x12e>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	2005      	movs	r0, #5
 8009002:	b007      	add	sp, #28
 8009004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009008:	3501      	adds	r5, #1
 800900a:	2d08      	cmp	r5, #8
 800900c:	f10b 0b01 	add.w	fp, fp, #1
 8009010:	dd06      	ble.n	8009020 <__hexnan+0x100>
 8009012:	4544      	cmp	r4, r8
 8009014:	d9c1      	bls.n	8008f9a <__hexnan+0x7a>
 8009016:	2300      	movs	r3, #0
 8009018:	f844 3c04 	str.w	r3, [r4, #-4]
 800901c:	2501      	movs	r5, #1
 800901e:	3c04      	subs	r4, #4
 8009020:	6822      	ldr	r2, [r4, #0]
 8009022:	f000 000f 	and.w	r0, r0, #15
 8009026:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800902a:	6020      	str	r0, [r4, #0]
 800902c:	e7b5      	b.n	8008f9a <__hexnan+0x7a>
 800902e:	2508      	movs	r5, #8
 8009030:	e7b3      	b.n	8008f9a <__hexnan+0x7a>
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0dd      	beq.n	8008ff4 <__hexnan+0xd4>
 8009038:	f1c3 0320 	rsb	r3, r3, #32
 800903c:	f04f 32ff 	mov.w	r2, #4294967295
 8009040:	40da      	lsrs	r2, r3
 8009042:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009046:	4013      	ands	r3, r2
 8009048:	f846 3c04 	str.w	r3, [r6, #-4]
 800904c:	e7d2      	b.n	8008ff4 <__hexnan+0xd4>
 800904e:	3f04      	subs	r7, #4
 8009050:	e7d0      	b.n	8008ff4 <__hexnan+0xd4>
 8009052:	2004      	movs	r0, #4
 8009054:	e7d5      	b.n	8009002 <__hexnan+0xe2>

08009056 <__ascii_mbtowc>:
 8009056:	b082      	sub	sp, #8
 8009058:	b901      	cbnz	r1, 800905c <__ascii_mbtowc+0x6>
 800905a:	a901      	add	r1, sp, #4
 800905c:	b142      	cbz	r2, 8009070 <__ascii_mbtowc+0x1a>
 800905e:	b14b      	cbz	r3, 8009074 <__ascii_mbtowc+0x1e>
 8009060:	7813      	ldrb	r3, [r2, #0]
 8009062:	600b      	str	r3, [r1, #0]
 8009064:	7812      	ldrb	r2, [r2, #0]
 8009066:	1e10      	subs	r0, r2, #0
 8009068:	bf18      	it	ne
 800906a:	2001      	movne	r0, #1
 800906c:	b002      	add	sp, #8
 800906e:	4770      	bx	lr
 8009070:	4610      	mov	r0, r2
 8009072:	e7fb      	b.n	800906c <__ascii_mbtowc+0x16>
 8009074:	f06f 0001 	mvn.w	r0, #1
 8009078:	e7f8      	b.n	800906c <__ascii_mbtowc+0x16>

0800907a <_realloc_r>:
 800907a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800907e:	4607      	mov	r7, r0
 8009080:	4614      	mov	r4, r2
 8009082:	460d      	mov	r5, r1
 8009084:	b921      	cbnz	r1, 8009090 <_realloc_r+0x16>
 8009086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800908a:	4611      	mov	r1, r2
 800908c:	f7fd bc8e 	b.w	80069ac <_malloc_r>
 8009090:	b92a      	cbnz	r2, 800909e <_realloc_r+0x24>
 8009092:	f7fd fc17 	bl	80068c4 <_free_r>
 8009096:	4625      	mov	r5, r4
 8009098:	4628      	mov	r0, r5
 800909a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800909e:	f000 f8c4 	bl	800922a <_malloc_usable_size_r>
 80090a2:	4284      	cmp	r4, r0
 80090a4:	4606      	mov	r6, r0
 80090a6:	d802      	bhi.n	80090ae <_realloc_r+0x34>
 80090a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090ac:	d8f4      	bhi.n	8009098 <_realloc_r+0x1e>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4638      	mov	r0, r7
 80090b2:	f7fd fc7b 	bl	80069ac <_malloc_r>
 80090b6:	4680      	mov	r8, r0
 80090b8:	b908      	cbnz	r0, 80090be <_realloc_r+0x44>
 80090ba:	4645      	mov	r5, r8
 80090bc:	e7ec      	b.n	8009098 <_realloc_r+0x1e>
 80090be:	42b4      	cmp	r4, r6
 80090c0:	4622      	mov	r2, r4
 80090c2:	4629      	mov	r1, r5
 80090c4:	bf28      	it	cs
 80090c6:	4632      	movcs	r2, r6
 80090c8:	f7ff fc42 	bl	8008950 <memcpy>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4638      	mov	r0, r7
 80090d0:	f7fd fbf8 	bl	80068c4 <_free_r>
 80090d4:	e7f1      	b.n	80090ba <_realloc_r+0x40>

080090d6 <__ascii_wctomb>:
 80090d6:	4603      	mov	r3, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	b141      	cbz	r1, 80090ee <__ascii_wctomb+0x18>
 80090dc:	2aff      	cmp	r2, #255	@ 0xff
 80090de:	d904      	bls.n	80090ea <__ascii_wctomb+0x14>
 80090e0:	228a      	movs	r2, #138	@ 0x8a
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	4770      	bx	lr
 80090ea:	700a      	strb	r2, [r1, #0]
 80090ec:	2001      	movs	r0, #1
 80090ee:	4770      	bx	lr

080090f0 <fiprintf>:
 80090f0:	b40e      	push	{r1, r2, r3}
 80090f2:	b503      	push	{r0, r1, lr}
 80090f4:	4601      	mov	r1, r0
 80090f6:	ab03      	add	r3, sp, #12
 80090f8:	4805      	ldr	r0, [pc, #20]	@ (8009110 <fiprintf+0x20>)
 80090fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fe:	6800      	ldr	r0, [r0, #0]
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	f7ff f991 	bl	8008428 <_vfiprintf_r>
 8009106:	b002      	add	sp, #8
 8009108:	f85d eb04 	ldr.w	lr, [sp], #4
 800910c:	b003      	add	sp, #12
 800910e:	4770      	bx	lr
 8009110:	20000018 	.word	0x20000018

08009114 <__swhatbuf_r>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	2900      	cmp	r1, #0
 800911e:	b096      	sub	sp, #88	@ 0x58
 8009120:	4615      	mov	r5, r2
 8009122:	461e      	mov	r6, r3
 8009124:	da0d      	bge.n	8009142 <__swhatbuf_r+0x2e>
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800912c:	f04f 0100 	mov.w	r1, #0
 8009130:	bf14      	ite	ne
 8009132:	2340      	movne	r3, #64	@ 0x40
 8009134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009138:	2000      	movs	r0, #0
 800913a:	6031      	str	r1, [r6, #0]
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	b016      	add	sp, #88	@ 0x58
 8009140:	bd70      	pop	{r4, r5, r6, pc}
 8009142:	466a      	mov	r2, sp
 8009144:	f000 f848 	bl	80091d8 <_fstat_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	dbec      	blt.n	8009126 <__swhatbuf_r+0x12>
 800914c:	9901      	ldr	r1, [sp, #4]
 800914e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009156:	4259      	negs	r1, r3
 8009158:	4159      	adcs	r1, r3
 800915a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800915e:	e7eb      	b.n	8009138 <__swhatbuf_r+0x24>

08009160 <__smakebuf_r>:
 8009160:	898b      	ldrh	r3, [r1, #12]
 8009162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009164:	079d      	lsls	r5, r3, #30
 8009166:	4606      	mov	r6, r0
 8009168:	460c      	mov	r4, r1
 800916a:	d507      	bpl.n	800917c <__smakebuf_r+0x1c>
 800916c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	2301      	movs	r3, #1
 8009176:	6163      	str	r3, [r4, #20]
 8009178:	b003      	add	sp, #12
 800917a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800917c:	ab01      	add	r3, sp, #4
 800917e:	466a      	mov	r2, sp
 8009180:	f7ff ffc8 	bl	8009114 <__swhatbuf_r>
 8009184:	9f00      	ldr	r7, [sp, #0]
 8009186:	4605      	mov	r5, r0
 8009188:	4639      	mov	r1, r7
 800918a:	4630      	mov	r0, r6
 800918c:	f7fd fc0e 	bl	80069ac <_malloc_r>
 8009190:	b948      	cbnz	r0, 80091a6 <__smakebuf_r+0x46>
 8009192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009196:	059a      	lsls	r2, r3, #22
 8009198:	d4ee      	bmi.n	8009178 <__smakebuf_r+0x18>
 800919a:	f023 0303 	bic.w	r3, r3, #3
 800919e:	f043 0302 	orr.w	r3, r3, #2
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	e7e2      	b.n	800916c <__smakebuf_r+0xc>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	6020      	str	r0, [r4, #0]
 80091aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091b6:	b15b      	cbz	r3, 80091d0 <__smakebuf_r+0x70>
 80091b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 f81d 	bl	80091fc <_isatty_r>
 80091c2:	b128      	cbz	r0, 80091d0 <__smakebuf_r+0x70>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0301 	orr.w	r3, r3, #1
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	431d      	orrs	r5, r3
 80091d4:	81a5      	strh	r5, [r4, #12]
 80091d6:	e7cf      	b.n	8009178 <__smakebuf_r+0x18>

080091d8 <_fstat_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	@ (80091f8 <_fstat_r+0x20>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	4611      	mov	r1, r2
 80091e4:	602b      	str	r3, [r5, #0]
 80091e6:	f7fb fc9f 	bl	8004b28 <_fstat>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d102      	bne.n	80091f4 <_fstat_r+0x1c>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	b103      	cbz	r3, 80091f4 <_fstat_r+0x1c>
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	bd38      	pop	{r3, r4, r5, pc}
 80091f6:	bf00      	nop
 80091f8:	200004f4 	.word	0x200004f4

080091fc <_isatty_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	@ (8009218 <_isatty_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7fb fc93 	bl	8004b32 <_isatty>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_isatty_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_isatty_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	200004f4 	.word	0x200004f4

0800921c <abort>:
 800921c:	b508      	push	{r3, lr}
 800921e:	2006      	movs	r0, #6
 8009220:	f000 f834 	bl	800928c <raise>
 8009224:	2001      	movs	r0, #1
 8009226:	f7fb fc66 	bl	8004af6 <_exit>

0800922a <_malloc_usable_size_r>:
 800922a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800922e:	1f18      	subs	r0, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	bfbc      	itt	lt
 8009234:	580b      	ldrlt	r3, [r1, r0]
 8009236:	18c0      	addlt	r0, r0, r3
 8009238:	4770      	bx	lr

0800923a <_raise_r>:
 800923a:	291f      	cmp	r1, #31
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4605      	mov	r5, r0
 8009240:	460c      	mov	r4, r1
 8009242:	d904      	bls.n	800924e <_raise_r+0x14>
 8009244:	2316      	movs	r3, #22
 8009246:	6003      	str	r3, [r0, #0]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009250:	b112      	cbz	r2, 8009258 <_raise_r+0x1e>
 8009252:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009256:	b94b      	cbnz	r3, 800926c <_raise_r+0x32>
 8009258:	4628      	mov	r0, r5
 800925a:	f000 f831 	bl	80092c0 <_getpid_r>
 800925e:	4622      	mov	r2, r4
 8009260:	4601      	mov	r1, r0
 8009262:	4628      	mov	r0, r5
 8009264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009268:	f000 b818 	b.w	800929c <_kill_r>
 800926c:	2b01      	cmp	r3, #1
 800926e:	d00a      	beq.n	8009286 <_raise_r+0x4c>
 8009270:	1c59      	adds	r1, r3, #1
 8009272:	d103      	bne.n	800927c <_raise_r+0x42>
 8009274:	2316      	movs	r3, #22
 8009276:	6003      	str	r3, [r0, #0]
 8009278:	2001      	movs	r0, #1
 800927a:	e7e7      	b.n	800924c <_raise_r+0x12>
 800927c:	2100      	movs	r1, #0
 800927e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009282:	4620      	mov	r0, r4
 8009284:	4798      	blx	r3
 8009286:	2000      	movs	r0, #0
 8009288:	e7e0      	b.n	800924c <_raise_r+0x12>
	...

0800928c <raise>:
 800928c:	4b02      	ldr	r3, [pc, #8]	@ (8009298 <raise+0xc>)
 800928e:	4601      	mov	r1, r0
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f7ff bfd2 	b.w	800923a <_raise_r>
 8009296:	bf00      	nop
 8009298:	20000018 	.word	0x20000018

0800929c <_kill_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d07      	ldr	r5, [pc, #28]	@ (80092bc <_kill_r+0x20>)
 80092a0:	2300      	movs	r3, #0
 80092a2:	4604      	mov	r4, r0
 80092a4:	4608      	mov	r0, r1
 80092a6:	4611      	mov	r1, r2
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	f7fb fc1c 	bl	8004ae6 <_kill>
 80092ae:	1c43      	adds	r3, r0, #1
 80092b0:	d102      	bne.n	80092b8 <_kill_r+0x1c>
 80092b2:	682b      	ldr	r3, [r5, #0]
 80092b4:	b103      	cbz	r3, 80092b8 <_kill_r+0x1c>
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	bd38      	pop	{r3, r4, r5, pc}
 80092ba:	bf00      	nop
 80092bc:	200004f4 	.word	0x200004f4

080092c0 <_getpid_r>:
 80092c0:	f7fb bc0f 	b.w	8004ae2 <_getpid>

080092c4 <__aeabi_d2lz>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	2200      	movs	r2, #0
 80092c8:	2300      	movs	r3, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	f7f7 fbe5 	bl	8000a9c <__aeabi_dcmplt>
 80092d2:	b928      	cbnz	r0, 80092e0 <__aeabi_d2lz+0x1c>
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092dc:	f000 b80a 	b.w	80092f4 <__aeabi_d2ulz>
 80092e0:	4620      	mov	r0, r4
 80092e2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80092e6:	f000 f805 	bl	80092f4 <__aeabi_d2ulz>
 80092ea:	4240      	negs	r0, r0
 80092ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop

080092f4 <__aeabi_d2ulz>:
 80092f4:	b5d0      	push	{r4, r6, r7, lr}
 80092f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009328 <__aeabi_d2ulz+0x34>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	f7f7 f95b 	bl	80005b8 <__aeabi_dmul>
 8009302:	f7f7 fc31 	bl	8000b68 <__aeabi_d2uiz>
 8009306:	4604      	mov	r4, r0
 8009308:	f7f7 f8dc 	bl	80004c4 <__aeabi_ui2d>
 800930c:	4b07      	ldr	r3, [pc, #28]	@ (800932c <__aeabi_d2ulz+0x38>)
 800930e:	2200      	movs	r2, #0
 8009310:	f7f7 f952 	bl	80005b8 <__aeabi_dmul>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f6 ff94 	bl	8000248 <__aeabi_dsub>
 8009320:	f7f7 fc22 	bl	8000b68 <__aeabi_d2uiz>
 8009324:	4621      	mov	r1, r4
 8009326:	bdd0      	pop	{r4, r6, r7, pc}
 8009328:	3df00000 	.word	0x3df00000
 800932c:	41f00000 	.word	0x41f00000

08009330 <__udivmoddi4>:
 8009330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009334:	9d08      	ldr	r5, [sp, #32]
 8009336:	460e      	mov	r6, r1
 8009338:	4604      	mov	r4, r0
 800933a:	460f      	mov	r7, r1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d14a      	bne.n	80093d6 <__udivmoddi4+0xa6>
 8009340:	4694      	mov	ip, r2
 8009342:	458c      	cmp	ip, r1
 8009344:	fab2 f282 	clz	r2, r2
 8009348:	d960      	bls.n	800940c <__udivmoddi4+0xdc>
 800934a:	b142      	cbz	r2, 800935e <__udivmoddi4+0x2e>
 800934c:	f1c2 0320 	rsb	r3, r2, #32
 8009350:	4097      	lsls	r7, r2
 8009352:	fa20 f303 	lsr.w	r3, r0, r3
 8009356:	fa0c fc02 	lsl.w	ip, ip, r2
 800935a:	431f      	orrs	r7, r3
 800935c:	4094      	lsls	r4, r2
 800935e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8009362:	fa1f f68c 	uxth.w	r6, ip
 8009366:	fbb7 f1fe 	udiv	r1, r7, lr
 800936a:	0c23      	lsrs	r3, r4, #16
 800936c:	fb0e 7711 	mls	r7, lr, r1, r7
 8009370:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009374:	fb01 f006 	mul.w	r0, r1, r6
 8009378:	4298      	cmp	r0, r3
 800937a:	d90a      	bls.n	8009392 <__udivmoddi4+0x62>
 800937c:	eb1c 0303 	adds.w	r3, ip, r3
 8009380:	f101 37ff 	add.w	r7, r1, #4294967295
 8009384:	f080 8115 	bcs.w	80095b2 <__udivmoddi4+0x282>
 8009388:	4298      	cmp	r0, r3
 800938a:	f240 8112 	bls.w	80095b2 <__udivmoddi4+0x282>
 800938e:	3902      	subs	r1, #2
 8009390:	4463      	add	r3, ip
 8009392:	1a1b      	subs	r3, r3, r0
 8009394:	b2a4      	uxth	r4, r4
 8009396:	fbb3 f0fe 	udiv	r0, r3, lr
 800939a:	fb0e 3310 	mls	r3, lr, r0, r3
 800939e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80093a2:	fb00 f606 	mul.w	r6, r0, r6
 80093a6:	42a6      	cmp	r6, r4
 80093a8:	d90a      	bls.n	80093c0 <__udivmoddi4+0x90>
 80093aa:	eb1c 0404 	adds.w	r4, ip, r4
 80093ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b2:	f080 8100 	bcs.w	80095b6 <__udivmoddi4+0x286>
 80093b6:	42a6      	cmp	r6, r4
 80093b8:	f240 80fd 	bls.w	80095b6 <__udivmoddi4+0x286>
 80093bc:	4464      	add	r4, ip
 80093be:	3802      	subs	r0, #2
 80093c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80093c4:	1ba4      	subs	r4, r4, r6
 80093c6:	2100      	movs	r1, #0
 80093c8:	b11d      	cbz	r5, 80093d2 <__udivmoddi4+0xa2>
 80093ca:	40d4      	lsrs	r4, r2
 80093cc:	2300      	movs	r3, #0
 80093ce:	e9c5 4300 	strd	r4, r3, [r5]
 80093d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d6:	428b      	cmp	r3, r1
 80093d8:	d905      	bls.n	80093e6 <__udivmoddi4+0xb6>
 80093da:	b10d      	cbz	r5, 80093e0 <__udivmoddi4+0xb0>
 80093dc:	e9c5 0100 	strd	r0, r1, [r5]
 80093e0:	2100      	movs	r1, #0
 80093e2:	4608      	mov	r0, r1
 80093e4:	e7f5      	b.n	80093d2 <__udivmoddi4+0xa2>
 80093e6:	fab3 f183 	clz	r1, r3
 80093ea:	2900      	cmp	r1, #0
 80093ec:	d146      	bne.n	800947c <__udivmoddi4+0x14c>
 80093ee:	42b3      	cmp	r3, r6
 80093f0:	d302      	bcc.n	80093f8 <__udivmoddi4+0xc8>
 80093f2:	4282      	cmp	r2, r0
 80093f4:	f200 80f5 	bhi.w	80095e2 <__udivmoddi4+0x2b2>
 80093f8:	1a84      	subs	r4, r0, r2
 80093fa:	eb66 0203 	sbc.w	r2, r6, r3
 80093fe:	2001      	movs	r0, #1
 8009400:	4617      	mov	r7, r2
 8009402:	2d00      	cmp	r5, #0
 8009404:	d0e5      	beq.n	80093d2 <__udivmoddi4+0xa2>
 8009406:	e9c5 4700 	strd	r4, r7, [r5]
 800940a:	e7e2      	b.n	80093d2 <__udivmoddi4+0xa2>
 800940c:	2a00      	cmp	r2, #0
 800940e:	f040 8093 	bne.w	8009538 <__udivmoddi4+0x208>
 8009412:	eba1 030c 	sub.w	r3, r1, ip
 8009416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800941a:	fa1f fe8c 	uxth.w	lr, ip
 800941e:	2101      	movs	r1, #1
 8009420:	fbb3 f6f7 	udiv	r6, r3, r7
 8009424:	fb07 3016 	mls	r0, r7, r6, r3
 8009428:	0c23      	lsrs	r3, r4, #16
 800942a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800942e:	fb0e f006 	mul.w	r0, lr, r6
 8009432:	4298      	cmp	r0, r3
 8009434:	d908      	bls.n	8009448 <__udivmoddi4+0x118>
 8009436:	eb1c 0303 	adds.w	r3, ip, r3
 800943a:	f106 38ff 	add.w	r8, r6, #4294967295
 800943e:	d202      	bcs.n	8009446 <__udivmoddi4+0x116>
 8009440:	4298      	cmp	r0, r3
 8009442:	f200 80d0 	bhi.w	80095e6 <__udivmoddi4+0x2b6>
 8009446:	4646      	mov	r6, r8
 8009448:	1a1b      	subs	r3, r3, r0
 800944a:	b2a4      	uxth	r4, r4
 800944c:	fbb3 f0f7 	udiv	r0, r3, r7
 8009450:	fb07 3310 	mls	r3, r7, r0, r3
 8009454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8009458:	fb0e fe00 	mul.w	lr, lr, r0
 800945c:	45a6      	cmp	lr, r4
 800945e:	d908      	bls.n	8009472 <__udivmoddi4+0x142>
 8009460:	eb1c 0404 	adds.w	r4, ip, r4
 8009464:	f100 33ff 	add.w	r3, r0, #4294967295
 8009468:	d202      	bcs.n	8009470 <__udivmoddi4+0x140>
 800946a:	45a6      	cmp	lr, r4
 800946c:	f200 80b6 	bhi.w	80095dc <__udivmoddi4+0x2ac>
 8009470:	4618      	mov	r0, r3
 8009472:	eba4 040e 	sub.w	r4, r4, lr
 8009476:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800947a:	e7a5      	b.n	80093c8 <__udivmoddi4+0x98>
 800947c:	f1c1 0720 	rsb	r7, r1, #32
 8009480:	408b      	lsls	r3, r1
 8009482:	fa22 fc07 	lsr.w	ip, r2, r7
 8009486:	ea4c 0c03 	orr.w	ip, ip, r3
 800948a:	fa06 fe01 	lsl.w	lr, r6, r1
 800948e:	fa20 f407 	lsr.w	r4, r0, r7
 8009492:	fa26 f307 	lsr.w	r3, r6, r7
 8009496:	ea44 040e 	orr.w	r4, r4, lr
 800949a:	fa00 f801 	lsl.w	r8, r0, r1
 800949e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80094a2:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80094a6:	fbb3 fef0 	udiv	lr, r3, r0
 80094aa:	fa1f f68c 	uxth.w	r6, ip
 80094ae:	fb00 331e 	mls	r3, r0, lr, r3
 80094b2:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80094b6:	fb0e f906 	mul.w	r9, lr, r6
 80094ba:	4599      	cmp	r9, r3
 80094bc:	fa02 f201 	lsl.w	r2, r2, r1
 80094c0:	d90b      	bls.n	80094da <__udivmoddi4+0x1aa>
 80094c2:	eb1c 0303 	adds.w	r3, ip, r3
 80094c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80094ca:	f080 8085 	bcs.w	80095d8 <__udivmoddi4+0x2a8>
 80094ce:	4599      	cmp	r9, r3
 80094d0:	f240 8082 	bls.w	80095d8 <__udivmoddi4+0x2a8>
 80094d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80094d8:	4463      	add	r3, ip
 80094da:	eba3 0909 	sub.w	r9, r3, r9
 80094de:	b2a4      	uxth	r4, r4
 80094e0:	fbb9 f3f0 	udiv	r3, r9, r0
 80094e4:	fb00 9913 	mls	r9, r0, r3, r9
 80094e8:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80094ec:	fb03 f606 	mul.w	r6, r3, r6
 80094f0:	42a6      	cmp	r6, r4
 80094f2:	d908      	bls.n	8009506 <__udivmoddi4+0x1d6>
 80094f4:	eb1c 0404 	adds.w	r4, ip, r4
 80094f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80094fc:	d268      	bcs.n	80095d0 <__udivmoddi4+0x2a0>
 80094fe:	42a6      	cmp	r6, r4
 8009500:	d966      	bls.n	80095d0 <__udivmoddi4+0x2a0>
 8009502:	3b02      	subs	r3, #2
 8009504:	4464      	add	r4, ip
 8009506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800950a:	1ba4      	subs	r4, r4, r6
 800950c:	fba0 e602 	umull	lr, r6, r0, r2
 8009510:	42b4      	cmp	r4, r6
 8009512:	4673      	mov	r3, lr
 8009514:	46b1      	mov	r9, r6
 8009516:	d352      	bcc.n	80095be <__udivmoddi4+0x28e>
 8009518:	d04f      	beq.n	80095ba <__udivmoddi4+0x28a>
 800951a:	b15d      	cbz	r5, 8009534 <__udivmoddi4+0x204>
 800951c:	ebb8 0203 	subs.w	r2, r8, r3
 8009520:	eb64 0409 	sbc.w	r4, r4, r9
 8009524:	fa04 f707 	lsl.w	r7, r4, r7
 8009528:	fa22 f301 	lsr.w	r3, r2, r1
 800952c:	431f      	orrs	r7, r3
 800952e:	40cc      	lsrs	r4, r1
 8009530:	e9c5 7400 	strd	r7, r4, [r5]
 8009534:	2100      	movs	r1, #0
 8009536:	e74c      	b.n	80093d2 <__udivmoddi4+0xa2>
 8009538:	f1c2 0120 	rsb	r1, r2, #32
 800953c:	fa20 f301 	lsr.w	r3, r0, r1
 8009540:	fa0c fc02 	lsl.w	ip, ip, r2
 8009544:	fa26 f101 	lsr.w	r1, r6, r1
 8009548:	4096      	lsls	r6, r2
 800954a:	4333      	orrs	r3, r6
 800954c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009550:	fa1f fe8c 	uxth.w	lr, ip
 8009554:	fbb1 f0f7 	udiv	r0, r1, r7
 8009558:	fb07 1610 	mls	r6, r7, r0, r1
 800955c:	0c19      	lsrs	r1, r3, #16
 800955e:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8009562:	fb00 f60e 	mul.w	r6, r0, lr
 8009566:	428e      	cmp	r6, r1
 8009568:	fa04 f402 	lsl.w	r4, r4, r2
 800956c:	d908      	bls.n	8009580 <__udivmoddi4+0x250>
 800956e:	eb1c 0101 	adds.w	r1, ip, r1
 8009572:	f100 38ff 	add.w	r8, r0, #4294967295
 8009576:	d22d      	bcs.n	80095d4 <__udivmoddi4+0x2a4>
 8009578:	428e      	cmp	r6, r1
 800957a:	d92b      	bls.n	80095d4 <__udivmoddi4+0x2a4>
 800957c:	3802      	subs	r0, #2
 800957e:	4461      	add	r1, ip
 8009580:	1b89      	subs	r1, r1, r6
 8009582:	b29b      	uxth	r3, r3
 8009584:	fbb1 f6f7 	udiv	r6, r1, r7
 8009588:	fb07 1116 	mls	r1, r7, r6, r1
 800958c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009590:	fb06 f10e 	mul.w	r1, r6, lr
 8009594:	4299      	cmp	r1, r3
 8009596:	d908      	bls.n	80095aa <__udivmoddi4+0x27a>
 8009598:	eb1c 0303 	adds.w	r3, ip, r3
 800959c:	f106 38ff 	add.w	r8, r6, #4294967295
 80095a0:	d214      	bcs.n	80095cc <__udivmoddi4+0x29c>
 80095a2:	4299      	cmp	r1, r3
 80095a4:	d912      	bls.n	80095cc <__udivmoddi4+0x29c>
 80095a6:	3e02      	subs	r6, #2
 80095a8:	4463      	add	r3, ip
 80095aa:	1a5b      	subs	r3, r3, r1
 80095ac:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 80095b0:	e736      	b.n	8009420 <__udivmoddi4+0xf0>
 80095b2:	4639      	mov	r1, r7
 80095b4:	e6ed      	b.n	8009392 <__udivmoddi4+0x62>
 80095b6:	4618      	mov	r0, r3
 80095b8:	e702      	b.n	80093c0 <__udivmoddi4+0x90>
 80095ba:	45f0      	cmp	r8, lr
 80095bc:	d2ad      	bcs.n	800951a <__udivmoddi4+0x1ea>
 80095be:	ebbe 0302 	subs.w	r3, lr, r2
 80095c2:	eb66 060c 	sbc.w	r6, r6, ip
 80095c6:	3801      	subs	r0, #1
 80095c8:	46b1      	mov	r9, r6
 80095ca:	e7a6      	b.n	800951a <__udivmoddi4+0x1ea>
 80095cc:	4646      	mov	r6, r8
 80095ce:	e7ec      	b.n	80095aa <__udivmoddi4+0x27a>
 80095d0:	4603      	mov	r3, r0
 80095d2:	e798      	b.n	8009506 <__udivmoddi4+0x1d6>
 80095d4:	4640      	mov	r0, r8
 80095d6:	e7d3      	b.n	8009580 <__udivmoddi4+0x250>
 80095d8:	46d6      	mov	lr, sl
 80095da:	e77e      	b.n	80094da <__udivmoddi4+0x1aa>
 80095dc:	4464      	add	r4, ip
 80095de:	3802      	subs	r0, #2
 80095e0:	e747      	b.n	8009472 <__udivmoddi4+0x142>
 80095e2:	4608      	mov	r0, r1
 80095e4:	e70d      	b.n	8009402 <__udivmoddi4+0xd2>
 80095e6:	3e02      	subs	r6, #2
 80095e8:	4463      	add	r3, ip
 80095ea:	e72d      	b.n	8009448 <__udivmoddi4+0x118>

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
