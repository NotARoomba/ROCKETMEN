
build/debug/Talos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000970c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080098a0  080098a0  0000a8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009d44  08009d44  0000ad44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009d4c  08009d4c  0000ad4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009d50  08009d50  0000ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08009d54  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
  8 .bss          00000330  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000504  20000504  0000b1d4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 11 .comment      00000045  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bb07  00000000  00000000  0000b249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c7  00000000  00000000  00036d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00012806  00000000  00000000  00039e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  0004c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000156e  00000000  00000000  0004e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7e8  00000000  00000000  0004f74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c299  00000000  00000000  00069f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000721c  00000000  00000000  000761d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000226  00000000  00000000  0007d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b80c 	b.w	8000c78 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f008 fcae 	bl	80095c8 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_idiv0>:
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <deregister_tm_clones>:
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <deregister_tm_clones+0x10>)
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <deregister_tm_clones+0x14>)
 8000c80:	4283      	cmp	r3, r0
 8000c82:	d002      	beq.n	8000c8a <deregister_tm_clones+0xe>
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <deregister_tm_clones+0x18>)
 8000c86:	b103      	cbz	r3, 8000c8a <deregister_tm_clones+0xe>
 8000c88:	4718      	bx	r3
 8000c8a:	4770      	bx	lr
 8000c8c:	200001d4 	.word	0x200001d4
 8000c90:	200001d4 	.word	0x200001d4
 8000c94:	00000000 	.word	0x00000000

08000c98 <register_tm_clones>:
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <register_tm_clones+0x18>)
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <register_tm_clones+0x1c>)
 8000c9c:	1a1b      	subs	r3, r3, r0
 8000c9e:	0fd9      	lsrs	r1, r3, #31
 8000ca0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000ca4:	1049      	asrs	r1, r1, #1
 8000ca6:	d002      	beq.n	8000cae <register_tm_clones+0x16>
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <register_tm_clones+0x20>)
 8000caa:	b103      	cbz	r3, 8000cae <register_tm_clones+0x16>
 8000cac:	4718      	bx	r3
 8000cae:	4770      	bx	lr
 8000cb0:	200001d4 	.word	0x200001d4
 8000cb4:	200001d4 	.word	0x200001d4
 8000cb8:	00000000 	.word	0x00000000

08000cbc <__do_global_dtors_aux>:
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4c06      	ldr	r4, [pc, #24]	@ (8000cd8 <__do_global_dtors_aux+0x1c>)
 8000cc0:	7823      	ldrb	r3, [r4, #0]
 8000cc2:	b943      	cbnz	r3, 8000cd6 <__do_global_dtors_aux+0x1a>
 8000cc4:	f7ff ffda 	bl	8000c7c <deregister_tm_clones>
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <__do_global_dtors_aux+0x20>)
 8000cca:	b113      	cbz	r3, 8000cd2 <__do_global_dtors_aux+0x16>
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <__do_global_dtors_aux+0x24>)
 8000cce:	f3af 8000 	nop.w
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	7023      	strb	r3, [r4, #0]
 8000cd6:	bd10      	pop	{r4, pc}
 8000cd8:	200001d4 	.word	0x200001d4
 8000cdc:	00000000 	.word	0x00000000
 8000ce0:	08009884 	.word	0x08009884

08000ce4 <frame_dummy>:
 8000ce4:	b508      	push	{r3, lr}
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <frame_dummy+0x18>)
 8000ce8:	b11b      	cbz	r3, 8000cf2 <frame_dummy+0xe>
 8000cea:	4905      	ldr	r1, [pc, #20]	@ (8000d00 <frame_dummy+0x1c>)
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <frame_dummy+0x20>)
 8000cee:	f3af 8000 	nop.w
 8000cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000cf6:	f7ff bfcf 	b.w	8000c98 <register_tm_clones>
 8000cfa:	bf00      	nop
 8000cfc:	00000000 	.word	0x00000000
 8000d00:	200001d8 	.word	0x200001d8
 8000d04:	08009884 	.word	0x08009884

08000d08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000d08:	b500      	push	{lr}
 8000d0a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	460a      	mov	r2, r1
 8000d12:	4601      	mov	r1, r0
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <BSP_SD_ReadBlocks+0x1c>)
 8000d16:	f002 fab5 	bl	8003284 <HAL_SD_ReadBlocks>
 8000d1a:	b100      	cbz	r0, 8000d1e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8000d1c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8000d1e:	b003      	add	sp, #12
 8000d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d24:	200002d8 	.word	0x200002d8

08000d28 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000d28:	b500      	push	{lr}
 8000d2a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	460a      	mov	r2, r1
 8000d32:	4601      	mov	r1, r0
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <BSP_SD_WriteBlocks+0x1c>)
 8000d36:	f002 fbcd 	bl	80034d4 <HAL_SD_WriteBlocks>
 8000d3a:	b100      	cbz	r0, 8000d3e <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8000d3c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8000d3e:	b003      	add	sp, #12
 8000d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d44:	200002d8 	.word	0x200002d8

08000d48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8000d48:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000d4a:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <BSP_SD_GetCardState+0x10>)
 8000d4c:	f002 fea5 	bl	8003a9a <HAL_SD_GetCardState>
}
 8000d50:	3804      	subs	r0, #4
 8000d52:	bf18      	it	ne
 8000d54:	2001      	movne	r0, #1
 8000d56:	bd08      	pop	{r3, pc}
 8000d58:	200002d8 	.word	0x200002d8

08000d5c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8000d5c:	b508      	push	{r3, lr}
 8000d5e:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8000d60:	4801      	ldr	r0, [pc, #4]	@ (8000d68 <BSP_SD_GetCardInfo+0xc>)
 8000d62:	f002 fe88 	bl	8003a76 <HAL_SD_GetCardInfo>
}
 8000d66:	bd08      	pop	{r3, pc}
 8000d68:	200002d8 	.word	0x200002d8

08000d6c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8000d6c:	b500      	push	{lr}
 8000d6e:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8000d76:	f000 f825 	bl	8000dc4 <BSP_PlatformIsDetected>
 8000d7a:	b910      	cbnz	r0, 8000d82 <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8000d82:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8000d86:	b003      	add	sp, #12
 8000d88:	f85d fb04 	ldr.w	pc, [sp], #4

08000d8c <BSP_SD_Init>:
{
 8000d8c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8000d8e:	f7ff ffed 	bl	8000d6c <BSP_SD_IsDetected>
 8000d92:	2801      	cmp	r0, #1
 8000d94:	d001      	beq.n	8000d9a <BSP_SD_Init+0xe>
    return MSD_ERROR;
 8000d96:	2001      	movs	r0, #1
}
 8000d98:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 8000d9a:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <BSP_SD_Init+0x18>)
 8000d9c:	f002 fe50 	bl	8003a40 <HAL_SD_Init>
  return sd_state;
 8000da0:	e7fa      	b.n	8000d98 <BSP_SD_Init+0xc>
 8000da2:	bf00      	nop
 8000da4:	200002d8 	.word	0x200002d8

08000da8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000da8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8000daa:	4903      	ldr	r1, [pc, #12]	@ (8000db8 <MX_FATFS_Init+0x10>)
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <MX_FATFS_Init+0x14>)
 8000dae:	f000 f83f 	bl	8000e30 <FATFS_LinkDriver>
 8000db2:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <MX_FATFS_Init+0x18>)
 8000db4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000db6:	bd08      	pop	{r3, pc}
 8000db8:	200001f0 	.word	0x200001f0
 8000dbc:	080098ec 	.word	0x080098ec
 8000dc0:	200001f4 	.word	0x200001f4

08000dc4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8000dc4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <BSP_PlatformIsDetected+0x14>)
 8000dca:	f001 f99d 	bl	8002108 <HAL_GPIO_ReadPin>
 8000dce:	b908      	cbnz	r0, 8000dd4 <BSP_PlatformIsDetected+0x10>
    uint8_t status = SD_PRESENT;
 8000dd0:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8000dd2:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e7fc      	b.n	8000dd2 <BSP_PlatformIsDetected+0xe>
 8000dd8:	40020000 	.word	0x40020000

08000ddc <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <FATFS_LinkDriverEx+0x50>)
 8000dde:	7a5b      	ldrb	r3, [r3, #9]
 8000de0:	bb13      	cbnz	r3, 8000e28 <FATFS_LinkDriverEx+0x4c>
{
 8000de2:	b510      	push	{r4, lr}
 8000de4:	4604      	mov	r4, r0
 8000de6:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <FATFS_LinkDriverEx+0x50>)
 8000dec:	f893 c009 	ldrb.w	ip, [r3, #9]
 8000df0:	fa5f fc8c 	uxtb.w	ip, ip
 8000df4:	f04f 0e00 	mov.w	lr, #0
 8000df8:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8000dfc:	f893 c009 	ldrb.w	ip, [r3, #9]
 8000e00:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000e04:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8000e08:	7a5c      	ldrb	r4, [r3, #9]
 8000e0a:	441c      	add	r4, r3
 8000e0c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8000e0e:	7a5a      	ldrb	r2, [r3, #9]
 8000e10:	1c54      	adds	r4, r2, #1
 8000e12:	b2e4      	uxtb	r4, r4
 8000e14:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8000e16:	3230      	adds	r2, #48	@ 0x30
 8000e18:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8000e1a:	233a      	movs	r3, #58	@ 0x3a
 8000e1c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8000e1e:	232f      	movs	r3, #47	@ 0x2f
 8000e20:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8000e22:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8000e26:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8000e28:	2001      	movs	r0, #1
}
 8000e2a:	4770      	bx	lr
 8000e2c:	200001f8 	.word	0x200001f8

08000e30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8000e30:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f7ff ffd2 	bl	8000ddc <FATFS_LinkDriverEx>
}
 8000e38:	bd08      	pop	{r3, pc}

08000e3a <llcc68_hal_write>:
 */
llcc68_hal_status_t llcc68_hal_write( const llcc68_ctx_t *context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ) {
                                        int32_t ret;

  if (context == NULL)
 8000e3a:	b160      	cbz	r0, 8000e56 <llcc68_hal_write+0x1c>
                                      const uint8_t* data, const uint16_t data_length ) {
 8000e3c:	b510      	push	{r4, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	4684      	mov	ip, r0
  {
    return -1;
  }

  ret = context->write_reg(context->handle, command, command_length, data, data_length);
 8000e42:	6804      	ldr	r4, [r0, #0]
 8000e44:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8000e48:	9000      	str	r0, [sp, #0]
 8000e4a:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8000e4e:	47a0      	blx	r4

  return ret;
 8000e50:	b2c0      	uxtb	r0, r0
                                      }
 8000e52:	b002      	add	sp, #8
 8000e54:	bd10      	pop	{r4, pc}
    return -1;
 8000e56:	20ff      	movs	r0, #255	@ 0xff
                                      }
 8000e58:	4770      	bx	lr

08000e5a <llcc68_hal_read>:
 */
llcc68_hal_status_t llcc68_hal_read( const llcc68_ctx_t *context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length ) {
                                        int32_t ret;

  if (context == NULL)
 8000e5a:	b160      	cbz	r0, 8000e76 <llcc68_hal_read+0x1c>
                                     uint8_t* data, const uint16_t data_length ) {
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	4684      	mov	ip, r0
  {
    return -1;
  }

  ret = context->read_reg(context->handle, command, command_length, data, data_length);
 8000e62:	6844      	ldr	r4, [r0, #4]
 8000e64:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8000e68:	9000      	str	r0, [sp, #0]
 8000e6a:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8000e6e:	47a0      	blx	r4

  return ret;
 8000e70:	b2c0      	uxtb	r0, r0
                                     }
 8000e72:	b002      	add	sp, #8
 8000e74:	bd10      	pop	{r4, pc}
    return -1;
 8000e76:	20ff      	movs	r0, #255	@ 0xff
                                     }
 8000e78:	4770      	bx	lr

08000e7a <llcc68_hal_reset>:
 * @returns Operation status
 */
llcc68_hal_status_t llcc68_hal_reset( const llcc68_ctx_t *context ) {
                                        int32_t ret;

  if (context == NULL)
 8000e7a:	b128      	cbz	r0, 8000e88 <llcc68_hal_reset+0xe>
llcc68_hal_status_t llcc68_hal_reset( const llcc68_ctx_t *context ) {
 8000e7c:	b508      	push	{r3, lr}
  {
    return -1;
  }

  ret = context->reset(context->handle);
 8000e7e:	6882      	ldr	r2, [r0, #8]
 8000e80:	6900      	ldr	r0, [r0, #16]
 8000e82:	4790      	blx	r2

  return ret;
 8000e84:	b2c0      	uxtb	r0, r0
}
 8000e86:	bd08      	pop	{r3, pc}
    return -1;
 8000e88:	20ff      	movs	r0, #255	@ 0xff
}
 8000e8a:	4770      	bx	lr

08000e8c <llcc68_set_standby>:

    return ( llcc68_status_t ) llcc68_hal_write( context, buf, LLCC68_SIZE_SET_SLEEP, 0, 0 );
}

llcc68_status_t llcc68_set_standby( const void* context, const llcc68_standby_cfg_t cfg )
{
 8000e8c:	b500      	push	{lr}
 8000e8e:	b085      	sub	sp, #20
    const uint8_t buf[LLCC68_SIZE_SET_STANDBY] = {
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	f88d 300c 	strb.w	r3, [sp, #12]
 8000e96:	f88d 100d 	strb.w	r1, [sp, #13]
        LLCC68_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( llcc68_status_t ) llcc68_hal_write( context, buf, LLCC68_SIZE_SET_STANDBY, 0, 0 );
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	a903      	add	r1, sp, #12
 8000ea2:	f7ff ffca 	bl	8000e3a <llcc68_hal_write>
}
 8000ea6:	b005      	add	sp, #20
 8000ea8:	f85d fb04 	ldr.w	pc, [sp], #4

08000eac <llcc68_set_tx_with_timeout_in_rtc_step>:

    return llcc68_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
}

llcc68_status_t llcc68_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8000eac:	b500      	push	{lr}
 8000eae:	b085      	sub	sp, #20
    const uint8_t buf[LLCC68_SIZE_SET_TX] = {
 8000eb0:	2383      	movs	r3, #131	@ 0x83
 8000eb2:	f88d 300c 	strb.w	r3, [sp, #12]
        LLCC68_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 8000eb6:	f3c1 4307 	ubfx	r3, r1, #16, #8
    const uint8_t buf[LLCC68_SIZE_SET_TX] = {
 8000eba:	f88d 300d 	strb.w	r3, [sp, #13]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 8000ebe:	f3c1 2307 	ubfx	r3, r1, #8, #8
    const uint8_t buf[LLCC68_SIZE_SET_TX] = {
 8000ec2:	f88d 300e 	strb.w	r3, [sp, #14]
 8000ec6:	f88d 100f 	strb.w	r1, [sp, #15]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
    };

    return ( llcc68_status_t ) llcc68_hal_write( context, buf, LLCC68_SIZE_SET_TX, 0, 0 );
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	a903      	add	r1, sp, #12
 8000ed2:	f7ff ffb2 	bl	8000e3a <llcc68_hal_write>
}
 8000ed6:	b005      	add	sp, #20
 8000ed8:	f85d fb04 	ldr.w	pc, [sp], #4

08000edc <llcc68_set_pa_cfg>:

    return llcc68_cal_img( context, freq1, freq2 );
}

llcc68_status_t llcc68_set_pa_cfg( const void* context, const llcc68_pa_cfg_params_t* params )
{
 8000edc:	b500      	push	{lr}
 8000ede:	b085      	sub	sp, #20
    const uint8_t buf[LLCC68_SIZE_SET_PA_CFG] = {
 8000ee0:	2395      	movs	r3, #149	@ 0x95
 8000ee2:	f88d 3008 	strb.w	r3, [sp, #8]
        LLCC68_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000ee6:	780b      	ldrb	r3, [r1, #0]
    const uint8_t buf[LLCC68_SIZE_SET_PA_CFG] = {
 8000ee8:	f88d 3009 	strb.w	r3, [sp, #9]
        LLCC68_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000eec:	784b      	ldrb	r3, [r1, #1]
    const uint8_t buf[LLCC68_SIZE_SET_PA_CFG] = {
 8000eee:	f88d 300a 	strb.w	r3, [sp, #10]
        LLCC68_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000ef2:	788b      	ldrb	r3, [r1, #2]
    const uint8_t buf[LLCC68_SIZE_SET_PA_CFG] = {
 8000ef4:	f88d 300b 	strb.w	r3, [sp, #11]
        LLCC68_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 8000ef8:	78cb      	ldrb	r3, [r1, #3]
    const uint8_t buf[LLCC68_SIZE_SET_PA_CFG] = {
 8000efa:	f88d 300c 	strb.w	r3, [sp, #12]
    };

    return ( llcc68_status_t ) llcc68_hal_write( context, buf, LLCC68_SIZE_SET_PA_CFG, 0, 0 );
 8000efe:	2300      	movs	r3, #0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2205      	movs	r2, #5
 8000f04:	a902      	add	r1, sp, #8
 8000f06:	f7ff ff98 	bl	8000e3a <llcc68_hal_write>
}
 8000f0a:	b005      	add	sp, #20
 8000f0c:	f85d fb04 	ldr.w	pc, [sp], #4

08000f10 <llcc68_set_rf_freq_in_pll_steps>:

    return llcc68_set_rf_freq_in_pll_steps( context, freq );
}

llcc68_status_t llcc68_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8000f10:	b500      	push	{lr}
 8000f12:	b085      	sub	sp, #20
    const uint8_t buf[LLCC68_SIZE_SET_RF_FREQUENCY] = {
 8000f14:	2386      	movs	r3, #134	@ 0x86
 8000f16:	f88d 3008 	strb.w	r3, [sp, #8]
        LLCC68_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000f1a:	0e0b      	lsrs	r3, r1, #24
    const uint8_t buf[LLCC68_SIZE_SET_RF_FREQUENCY] = {
 8000f1c:	f88d 3009 	strb.w	r3, [sp, #9]
        LLCC68_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8000f20:	f3c1 4307 	ubfx	r3, r1, #16, #8
    const uint8_t buf[LLCC68_SIZE_SET_RF_FREQUENCY] = {
 8000f24:	f88d 300a 	strb.w	r3, [sp, #10]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8000f28:	f3c1 2307 	ubfx	r3, r1, #8, #8
    const uint8_t buf[LLCC68_SIZE_SET_RF_FREQUENCY] = {
 8000f2c:	f88d 300b 	strb.w	r3, [sp, #11]
 8000f30:	f88d 100c 	strb.w	r1, [sp, #12]
    };

    return ( llcc68_status_t ) llcc68_hal_write( context, buf, LLCC68_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2205      	movs	r2, #5
 8000f3a:	a902      	add	r1, sp, #8
 8000f3c:	f7ff ff7d 	bl	8000e3a <llcc68_hal_write>
}
 8000f40:	b005      	add	sp, #20
 8000f42:	f85d fb04 	ldr.w	pc, [sp], #4

08000f46 <llcc68_set_pkt_type>:

llcc68_status_t llcc68_set_pkt_type( const void* context, const llcc68_pkt_type_t pkt_type )
{
 8000f46:	b500      	push	{lr}
 8000f48:	b085      	sub	sp, #20
    const uint8_t buf[LLCC68_SIZE_SET_PKT_TYPE] = {
 8000f4a:	238a      	movs	r3, #138	@ 0x8a
 8000f4c:	f88d 300c 	strb.w	r3, [sp, #12]
 8000f50:	f88d 100d 	strb.w	r1, [sp, #13]
        LLCC68_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( llcc68_status_t ) llcc68_hal_write( context, buf, LLCC68_SIZE_SET_PKT_TYPE, 0, 0 );
 8000f54:	2300      	movs	r3, #0
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	a903      	add	r1, sp, #12
 8000f5c:	f7ff ff6d 	bl	8000e3a <llcc68_hal_write>
}
 8000f60:	b005      	add	sp, #20
 8000f62:	f85d fb04 	ldr.w	pc, [sp], #4

08000f66 <llcc68_set_tx_params>:

    return ( llcc68_status_t ) llcc68_hal_read( context, buf, LLCC68_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
}

llcc68_status_t llcc68_set_tx_params( const void* context, const int8_t pwr_in_dbm, const llcc68_ramp_time_t ramp_time )
{
 8000f66:	b500      	push	{lr}
 8000f68:	b085      	sub	sp, #20
    const uint8_t buf[LLCC68_SIZE_SET_TX_PARAMS] = {
 8000f6a:	238e      	movs	r3, #142	@ 0x8e
 8000f6c:	f88d 300c 	strb.w	r3, [sp, #12]
 8000f70:	f88d 100d 	strb.w	r1, [sp, #13]
 8000f74:	f88d 200e 	strb.w	r2, [sp, #14]
        LLCC68_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
        ( uint8_t ) ramp_time,
    };

    return ( llcc68_status_t ) llcc68_hal_write( context, buf, LLCC68_SIZE_SET_TX_PARAMS, 0, 0 );
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	a903      	add	r1, sp, #12
 8000f80:	f7ff ff5b 	bl	8000e3a <llcc68_hal_write>
}
 8000f84:	b005      	add	sp, #20
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4

08000f8a <llcc68_get_status>:
//
// Communication Status Information
//

llcc68_status_t llcc68_get_status( const void* context, llcc68_chip_status_t* radio_status )
{
 8000f8a:	b510      	push	{r4, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	460c      	mov	r4, r1
    const uint8_t buf[LLCC68_SIZE_GET_STATUS] = {
 8000f90:	23c0      	movs	r3, #192	@ 0xc0
 8000f92:	f88d 300c 	strb.w	r3, [sp, #12]
        LLCC68_GET_STATUS,
    };
    uint8_t status_local = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f88d 300b 	strb.w	r3, [sp, #11]

    const llcc68_status_t status =
        ( llcc68_status_t ) llcc68_hal_read( context, buf, LLCC68_SIZE_GET_STATUS, &status_local, 1 );
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	9200      	str	r2, [sp, #0]
 8000fa0:	f10d 030b 	add.w	r3, sp, #11
 8000fa4:	a903      	add	r1, sp, #12
 8000fa6:	f7ff ff58 	bl	8000e5a <llcc68_hal_read>

    if( status == LLCC68_STATUS_OK )
 8000faa:	b938      	cbnz	r0, 8000fbc <llcc68_get_status+0x32>
    {
        radio_status->cmd_status =
            ( llcc68_cmd_status_t )( ( status_local & LLCC68_CMD_STATUS_MASK ) >> LLCC68_CMD_STATUS_POS );
 8000fac:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000fb0:	f3c3 0242 	ubfx	r2, r3, #1, #3
        radio_status->cmd_status =
 8000fb4:	7022      	strb	r2, [r4, #0]
        radio_status->chip_mode =
            ( llcc68_chip_modes_t )( ( status_local & LLCC68_CHIP_MODES_MASK ) >> LLCC68_CHIP_MODES_POS );
 8000fb6:	f3c3 1302 	ubfx	r3, r3, #4, #3
        radio_status->chip_mode =
 8000fba:	7063      	strb	r3, [r4, #1]
    }

    return status;
}
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd10      	pop	{r4, pc}

08000fc0 <llcc68_reset>:
//
// Miscellaneous
//

llcc68_status_t llcc68_reset( const void* context )
{
 8000fc0:	b508      	push	{r3, lr}
    return ( llcc68_status_t ) llcc68_hal_reset( context );
 8000fc2:	f7ff ff5a 	bl	8000e7a <llcc68_hal_reset>
}
 8000fc6:	bd08      	pop	{r3, pc}

08000fc8 <llcc68_convert_freq_in_hz_to_pll_step>:
{
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / LLCC68_PLL_STEP_SCALED;
 8000fc8:	4908      	ldr	r1, [pc, #32]	@ (8000fec <llcc68_convert_freq_in_hz_to_pll_step+0x24>)
 8000fca:	fba1 3200 	umull	r3, r2, r1, r0
 8000fce:	0b12      	lsrs	r2, r2, #12
    steps_frac = freq_in_hz - ( steps_int * LLCC68_PLL_STEP_SCALED );

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << LLCC68_PLL_STEP_SHIFT_AMOUNT ) +
           ( ( ( steps_frac << LLCC68_PLL_STEP_SHIFT_AMOUNT ) + ( LLCC68_PLL_STEP_SCALED >> 1 ) ) /
 8000fd0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8000fd4:	fb03 0012 	mls	r0, r3, r2, r0
 8000fd8:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8000fdc:	eb03 3380 	add.w	r3, r3, r0, lsl #14
 8000fe0:	fba1 1303 	umull	r1, r3, r1, r3
 8000fe4:	0b1b      	lsrs	r3, r3, #12
             LLCC68_PLL_STEP_SCALED );
}
 8000fe6:	eb03 3082 	add.w	r0, r3, r2, lsl #14
 8000fea:	4770      	bx	lr
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <llcc68_set_rf_freq>:
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	4604      	mov	r4, r0
    const uint32_t freq = llcc68_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	f7ff ffe7 	bl	8000fc8 <llcc68_convert_freq_in_hz_to_pll_step>
 8000ffa:	4601      	mov	r1, r0
    return llcc68_set_rf_freq_in_pll_steps( context, freq );
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff ff87 	bl	8000f10 <llcc68_set_rf_freq_in_pll_steps>
}
 8001002:	bd10      	pop	{r4, pc}

08001004 <llcc68_convert_timeout_in_ms_to_rtc_step>:

uint32_t llcc68_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
    return ( uint32_t )( timeout_in_ms * ( LLCC68_RTC_FREQ_IN_HZ / 1000 ) );
}
 8001004:	0180      	lsls	r0, r0, #6
 8001006:	4770      	bx	lr

08001008 <llcc68_set_tx>:
    if( timeout_in_ms > LLCC68_MAX_TIMEOUT_IN_MS )
 8001008:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 800100c:	d209      	bcs.n	8001022 <llcc68_set_tx+0x1a>
{
 800100e:	b510      	push	{r4, lr}
 8001010:	4604      	mov	r4, r0
 8001012:	4608      	mov	r0, r1
    const uint32_t timeout_in_rtc_step = llcc68_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8001014:	f7ff fff6 	bl	8001004 <llcc68_convert_timeout_in_ms_to_rtc_step>
 8001018:	4601      	mov	r1, r0
    return llcc68_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff ff46 	bl	8000eac <llcc68_set_tx_with_timeout_in_rtc_step>
}
 8001020:	bd10      	pop	{r4, pc}
        return LLCC68_STATUS_UNKNOWN_VALUE;
 8001022:	2002      	movs	r0, #2
}
 8001024:	4770      	bx	lr

08001026 <lsm6dsm_read_reg>:
                                uint8_t *data,
                                uint16_t len)
{
  int32_t ret;

  if (ctx == NULL)
 8001026:	b120      	cbz	r0, 8001032 <lsm6dsm_read_reg+0xc>
{
 8001028:	b510      	push	{r4, lr}
  {
    return -1;
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800102a:	6844      	ldr	r4, [r0, #4]
 800102c:	68c0      	ldr	r0, [r0, #12]
 800102e:	47a0      	blx	r4

  return ret;
}
 8001030:	bd10      	pop	{r4, pc}
    return -1;
 8001032:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001036:	4770      	bx	lr

08001038 <lsm6dsm_write_reg>:
                                 uint8_t *data,
                                 uint16_t len)
{
  int32_t ret;

  if (ctx == NULL)
 8001038:	b120      	cbz	r0, 8001044 <lsm6dsm_write_reg+0xc>
{
 800103a:	b510      	push	{r4, lr}
  {
    return -1;
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800103c:	6804      	ldr	r4, [r0, #0]
 800103e:	68c0      	ldr	r0, [r0, #12]
 8001040:	47a0      	blx	r4

  return ret;
}
 8001042:	bd10      	pop	{r4, pc}
    return -1;
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001048:	4770      	bx	lr
	...

0800104c <lsm6dsm_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsm_from_fs2g_to_mg(int16_t lsb)
{
 800104c:	ee07 0a90 	vmov	s15, r0
  return ((float_t)lsb * 0.061f);
 8001050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001054:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001060 <lsm6dsm_from_fs2g_to_mg+0x14>
 8001058:	ee27 0a80 	vmul.f32	s0, s15, s0
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	3d79db23 	.word	0x3d79db23

08001064 <lsm6dsm_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsm_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001064:	ee07 0a90 	vmov	s15, r0
  return ((float_t)lsb * 70.0f);
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800106c:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001078 <lsm6dsm_from_fs2000dps_to_mdps+0x14>
 8001070:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	428c0000 	.word	0x428c0000

0800107c <lsm6dsm_from_lsb_to_celsius>:

float_t lsm6dsm_from_lsb_to_celsius(int16_t lsb)
{
 800107c:	ee07 0a90 	vmov	s15, r0
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001098 <lsm6dsm_from_lsb_to_celsius+0x1c>
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800108c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8001090:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	3b800000 	.word	0x3b800000

0800109c <lsm6dsm_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsm_fs_xl_t val)
{
 800109c:	b530      	push	{r4, r5, lr}
 800109e:	b083      	sub	sp, #12
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010a4:	2301      	movs	r3, #1
 80010a6:	aa01      	add	r2, sp, #4
 80010a8:	2110      	movs	r1, #16
 80010aa:	f7ff ffbc 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 80010ae:	b108      	cbz	r0, 80010b4 <lsm6dsm_xl_full_scale_set+0x18>
    ctrl1_xl.fs_xl = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80010b0:	b003      	add	sp, #12
 80010b2:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.fs_xl = (uint8_t) val;
 80010b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010b8:	f365 0383 	bfi	r3, r5, #2, #2
 80010bc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010c0:	2301      	movs	r3, #1
 80010c2:	aa01      	add	r2, sp, #4
 80010c4:	2110      	movs	r1, #16
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff ffb6 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 80010cc:	e7f0      	b.n	80010b0 <lsm6dsm_xl_full_scale_set+0x14>

080010ce <lsm6dsm_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsm_odr_xl_t val)
{
 80010ce:	b530      	push	{r4, r5, lr}
 80010d0:	b083      	sub	sp, #12
 80010d2:	4604      	mov	r4, r0
 80010d4:	460d      	mov	r5, r1
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010d6:	2301      	movs	r3, #1
 80010d8:	aa01      	add	r2, sp, #4
 80010da:	2110      	movs	r1, #16
 80010dc:	f7ff ffa3 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 80010e0:	b108      	cbz	r0, 80010e6 <lsm6dsm_xl_data_rate_set+0x18>
    ctrl1_xl.odr_xl = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80010e2:	b003      	add	sp, #12
 80010e4:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.odr_xl = (uint8_t) val;
 80010e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010ea:	f365 1307 	bfi	r3, r5, #4, #4
 80010ee:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010f2:	2301      	movs	r3, #1
 80010f4:	aa01      	add	r2, sp, #4
 80010f6:	2110      	movs	r1, #16
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff ff9d 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 80010fe:	e7f0      	b.n	80010e2 <lsm6dsm_xl_data_rate_set+0x14>

08001100 <lsm6dsm_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsm_fs_g_t val)
{
 8001100:	b530      	push	{r4, r5, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	4604      	mov	r4, r0
 8001106:	460d      	mov	r5, r1
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001108:	2301      	movs	r3, #1
 800110a:	aa01      	add	r2, sp, #4
 800110c:	2111      	movs	r1, #17
 800110e:	f7ff ff8a 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 8001112:	b108      	cbz	r0, 8001118 <lsm6dsm_gy_full_scale_set+0x18>
    ctrl2_g.fs_g = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8001114:	b003      	add	sp, #12
 8001116:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.fs_g = (uint8_t) val;
 8001118:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800111c:	f365 0343 	bfi	r3, r5, #1, #3
 8001120:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001124:	2301      	movs	r3, #1
 8001126:	aa01      	add	r2, sp, #4
 8001128:	2111      	movs	r1, #17
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff ff84 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 8001130:	e7f0      	b.n	8001114 <lsm6dsm_gy_full_scale_set+0x14>

08001132 <lsm6dsm_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsm_odr_g_t val)
{
 8001132:	b530      	push	{r4, r5, lr}
 8001134:	b083      	sub	sp, #12
 8001136:	4604      	mov	r4, r0
 8001138:	460d      	mov	r5, r1
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800113a:	2301      	movs	r3, #1
 800113c:	aa01      	add	r2, sp, #4
 800113e:	2111      	movs	r1, #17
 8001140:	f7ff ff71 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 8001144:	b108      	cbz	r0, 800114a <lsm6dsm_gy_data_rate_set+0x18>
    ctrl2_g.odr_g = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
}
 8001146:	b003      	add	sp, #12
 8001148:	bd30      	pop	{r4, r5, pc}
    ctrl2_g.odr_g = (uint8_t) val;
 800114a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800114e:	f365 1307 	bfi	r3, r5, #4, #4
 8001152:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001156:	2301      	movs	r3, #1
 8001158:	aa01      	add	r2, sp, #4
 800115a:	2111      	movs	r1, #17
 800115c:	4620      	mov	r0, r4
 800115e:	f7ff ff6b 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 8001162:	e7f0      	b.n	8001146 <lsm6dsm_gy_data_rate_set+0x14>

08001164 <lsm6dsm_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001164:	b530      	push	{r4, r5, lr}
 8001166:	b083      	sub	sp, #12
 8001168:	4604      	mov	r4, r0
 800116a:	460d      	mov	r5, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800116c:	2301      	movs	r3, #1
 800116e:	aa01      	add	r2, sp, #4
 8001170:	2112      	movs	r1, #18
 8001172:	f7ff ff58 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 8001176:	b108      	cbz	r0, 800117c <lsm6dsm_block_data_update_set+0x18>
    ctrl3_c.bdu = val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8001178:	b003      	add	sp, #12
 800117a:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.bdu = val;
 800117c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001180:	f365 1386 	bfi	r3, r5, #6, #1
 8001184:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001188:	2301      	movs	r3, #1
 800118a:	aa01      	add	r2, sp, #4
 800118c:	2112      	movs	r1, #18
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff ff52 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 8001194:	e7f0      	b.n	8001178 <lsm6dsm_block_data_update_set+0x14>

08001196 <lsm6dsm_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_status_reg_get(const stmdev_ctx_t *ctx,
                               lsm6dsm_status_reg_t *val)
{
 8001196:	b508      	push	{r3, lr}
 8001198:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_STATUS_REG, (uint8_t *) val, 1);
 800119a:	2301      	movs	r3, #1
 800119c:	211e      	movs	r1, #30
 800119e:	f7ff ff42 	bl	8001026 <lsm6dsm_read_reg>

  return ret;
}
 80011a2:	bd08      	pop	{r3, pc}

080011a4 <lsm6dsm_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80011a4:	b510      	push	{r4, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUT_TEMP_L, buff, 2);
 80011aa:	2302      	movs	r3, #2
 80011ac:	aa01      	add	r2, sp, #4
 80011ae:	2120      	movs	r1, #32
 80011b0:	f7ff ff39 	bl	8001026 <lsm6dsm_read_reg>
  val[0] = (int16_t)buff[1];
 80011b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011b8:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80011ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011c2:	8023      	strh	r3, [r4, #0]

  return ret;
}
 80011c4:	b002      	add	sp, #8
 80011c6:	bd10      	pop	{r4, pc}

080011c8 <lsm6dsm_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80011c8:	b510      	push	{r4, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_G, buff, 6);
 80011ce:	2306      	movs	r3, #6
 80011d0:	466a      	mov	r2, sp
 80011d2:	2122      	movs	r1, #34	@ 0x22
 80011d4:	f7ff ff27 	bl	8001026 <lsm6dsm_read_reg>
  val[0] = (int16_t)buff[1];
 80011d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80011dc:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80011de:	f89d 3000 	ldrb.w	r3, [sp]
 80011e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011e6:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 80011e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80011ec:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80011ee:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80011f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011f6:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 80011f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011fc:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80011fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001202:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001206:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8001208:	b002      	add	sp, #8
 800120a:	bd10      	pop	{r4, pc}

0800120c <lsm6dsm_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800120c:	b510      	push	{r4, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_XL, buff, 6);
 8001212:	2306      	movs	r3, #6
 8001214:	466a      	mov	r2, sp
 8001216:	2128      	movs	r1, #40	@ 0x28
 8001218:	f7ff ff05 	bl	8001026 <lsm6dsm_read_reg>
  val[0] = (int16_t)buff[1];
 800121c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001220:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001222:	f89d 3000 	ldrb.w	r3, [sp]
 8001226:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800122a:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 800122c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001230:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001232:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001236:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800123a:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 800123c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001240:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001242:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001246:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800124a:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 800124c:	b002      	add	sp, #8
 800124e:	bd10      	pop	{r4, pc}

08001250 <lsm6dsm_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001250:	b508      	push	{r3, lr}
 8001252:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_WHO_AM_I, buff, 1);
 8001254:	2301      	movs	r3, #1
 8001256:	210f      	movs	r1, #15
 8001258:	f7ff fee5 	bl	8001026 <lsm6dsm_read_reg>

  return ret;
}
 800125c:	bd08      	pop	{r3, pc}

0800125e <lsm6dsm_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800125e:	b510      	push	{r4, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	460c      	mov	r4, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001264:	2301      	movs	r3, #1
 8001266:	aa01      	add	r2, sp, #4
 8001268:	2112      	movs	r1, #18
 800126a:	f7ff fedc 	bl	8001026 <lsm6dsm_read_reg>
  *val = ctrl3_c.sw_reset;
 800126e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001272:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001276:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001278:	b002      	add	sp, #8
 800127a:	bd10      	pop	{r4, pc}

0800127c <lsm6dsm_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800127c:	b530      	push	{r4, r5, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	4604      	mov	r4, r0
 8001282:	460d      	mov	r5, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001284:	2301      	movs	r3, #1
 8001286:	aa01      	add	r2, sp, #4
 8001288:	2112      	movs	r1, #18
 800128a:	f7ff fecc 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 800128e:	b108      	cbz	r0, 8001294 <lsm6dsm_auto_increment_set+0x18>
    ctrl3_c.if_inc = val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 8001290:	b003      	add	sp, #12
 8001292:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.if_inc = val;
 8001294:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001298:	f365 0382 	bfi	r3, r5, #2, #1
 800129c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80012a0:	2301      	movs	r3, #1
 80012a2:	aa01      	add	r2, sp, #4
 80012a4:	2112      	movs	r1, #18
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff fec6 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 80012ac:	e7f0      	b.n	8001290 <lsm6dsm_auto_increment_set+0x14>

080012ae <lsm6dsm_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_filter_analog_set(const stmdev_ctx_t *ctx,
                                     lsm6dsm_bw0_xl_t val)
{
 80012ae:	b530      	push	{r4, r5, lr}
 80012b0:	b083      	sub	sp, #12
 80012b2:	4604      	mov	r4, r0
 80012b4:	460d      	mov	r5, r1
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80012b6:	2301      	movs	r3, #1
 80012b8:	aa01      	add	r2, sp, #4
 80012ba:	2110      	movs	r1, #16
 80012bc:	f7ff feb3 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 80012c0:	b108      	cbz	r0, 80012c6 <lsm6dsm_xl_filter_analog_set+0x18>
    ctrl1_xl.bw0_xl = (uint8_t) val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
}
 80012c2:	b003      	add	sp, #12
 80012c4:	bd30      	pop	{r4, r5, pc}
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80012c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012ca:	f365 0300 	bfi	r3, r5, #0, #1
 80012ce:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80012d2:	2301      	movs	r3, #1
 80012d4:	aa01      	add	r2, sp, #4
 80012d6:	2110      	movs	r1, #16
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff fead 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 80012de:	e7f0      	b.n	80012c2 <lsm6dsm_xl_filter_analog_set+0x14>

080012e0 <lsm6dsm_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_lp2_bandwidth_set(const stmdev_ctx_t *ctx,
                                     lsm6dsm_input_composite_t val)
{
 80012e0:	b530      	push	{r4, r5, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
  lsm6dsm_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80012e8:	2301      	movs	r3, #1
 80012ea:	aa01      	add	r2, sp, #4
 80012ec:	2117      	movs	r1, #23
 80012ee:	f7ff fe9a 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 80012f2:	b108      	cbz	r0, 80012f8 <lsm6dsm_xl_lp2_bandwidth_set+0x18>
    ctrl8_xl.hp_slope_xl_en = 0;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
}
 80012f4:	b003      	add	sp, #12
 80012f6:	bd30      	pop	{r4, r5, pc}
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80012f8:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80012fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001300:	f362 03c3 	bfi	r3, r2, #3, #1
 8001304:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f364 1346 	bfi	r3, r4, #5, #2
 800130e:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl8_xl.lpf2_xl_en = 1;
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001318:	f88d 3004 	strb.w	r3, [sp, #4]
    ctrl8_xl.hp_slope_xl_en = 0;
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f023 0304 	bic.w	r3, r3, #4
 8001322:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001326:	2301      	movs	r3, #1
 8001328:	aa01      	add	r2, sp, #4
 800132a:	2117      	movs	r1, #23
 800132c:	4628      	mov	r0, r5
 800132e:	f7ff fe83 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 8001332:	e7df      	b.n	80012f4 <lsm6dsm_xl_lp2_bandwidth_set+0x14>

08001334 <lsm6dsm_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_band_pass_set(const stmdev_ctx_t *ctx,
                                 lsm6dsm_lpf1_sel_g_t val)
{
 8001334:	b530      	push	{r4, r5, lr}
 8001336:	b085      	sub	sp, #20
 8001338:	4605      	mov	r5, r0
 800133a:	460c      	mov	r4, r1
  lsm6dsm_ctrl4_c_t ctrl4_c;
  lsm6dsm_ctrl6_c_t ctrl6_c;
  lsm6dsm_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800133c:	2301      	movs	r3, #1
 800133e:	aa01      	add	r2, sp, #4
 8001340:	2116      	movs	r1, #22
 8001342:	f7ff fe70 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 8001346:	b108      	cbz	r0, 800134c <lsm6dsm_gy_band_pass_set+0x18>
      }
    }
  }

  return ret;
}
 8001348:	b005      	add	sp, #20
 800134a:	bd30      	pop	{r4, r5, pc}
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800134c:	f3c4 1301 	ubfx	r3, r4, #4, #2
 8001350:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001354:	f363 1205 	bfi	r2, r3, #4, #2
 8001358:	f88d 2004 	strb.w	r2, [sp, #4]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800135c:	09e3      	lsrs	r3, r4, #7
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	f363 1286 	bfi	r2, r3, #6, #1
 8001364:	f88d 2004 	strb.w	r2, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001368:	2301      	movs	r3, #1
 800136a:	aa01      	add	r2, sp, #4
 800136c:	2116      	movs	r1, #22
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fe62 	bl	8001038 <lsm6dsm_write_reg>
    if (ret == 0)
 8001374:	2800      	cmp	r0, #0
 8001376:	d1e7      	bne.n	8001348 <lsm6dsm_gy_band_pass_set+0x14>
      ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001378:	2301      	movs	r3, #1
 800137a:	aa02      	add	r2, sp, #8
 800137c:	2115      	movs	r1, #21
 800137e:	4628      	mov	r0, r5
 8001380:	f7ff fe51 	bl	8001026 <lsm6dsm_read_reg>
      if (ret == 0)
 8001384:	2800      	cmp	r0, #0
 8001386:	d1df      	bne.n	8001348 <lsm6dsm_gy_band_pass_set+0x14>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001388:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800138c:	f364 0301 	bfi	r3, r4, #0, #2
 8001390:	f88d 3008 	strb.w	r3, [sp, #8]
        ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001394:	2301      	movs	r3, #1
 8001396:	aa02      	add	r2, sp, #8
 8001398:	2115      	movs	r1, #21
 800139a:	4628      	mov	r0, r5
 800139c:	f7ff fe4c 	bl	8001038 <lsm6dsm_write_reg>
        if (ret == 0)
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d1d1      	bne.n	8001348 <lsm6dsm_gy_band_pass_set+0x14>
          ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL4_C,
 80013a4:	2301      	movs	r3, #1
 80013a6:	aa03      	add	r2, sp, #12
 80013a8:	2113      	movs	r1, #19
 80013aa:	4628      	mov	r0, r5
 80013ac:	f7ff fe3b 	bl	8001026 <lsm6dsm_read_reg>
          if (ret == 0)
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1c9      	bne.n	8001348 <lsm6dsm_gy_band_pass_set+0x14>
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80013b4:	f3c4 01c0 	ubfx	r1, r4, #3, #1
 80013b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80013bc:	f361 0341 	bfi	r3, r1, #1, #1
 80013c0:	f88d 300c 	strb.w	r3, [sp, #12]
            ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL4_C,
 80013c4:	2301      	movs	r3, #1
 80013c6:	aa03      	add	r2, sp, #12
 80013c8:	2113      	movs	r1, #19
 80013ca:	4628      	mov	r0, r5
 80013cc:	f7ff fe34 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 80013d0:	e7ba      	b.n	8001348 <lsm6dsm_gy_band_pass_set+0x14>

080013d2 <lsm6dsm_spi_mode_set>:
  * @param  val    Change the values of sim in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_spi_mode_set(const stmdev_ctx_t *ctx, lsm6dsm_sim_t val)
{
 80013d2:	b530      	push	{r4, r5, lr}
 80013d4:	b083      	sub	sp, #12
 80013d6:	4604      	mov	r4, r0
 80013d8:	460d      	mov	r5, r1
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80013da:	2301      	movs	r3, #1
 80013dc:	aa01      	add	r2, sp, #4
 80013de:	2112      	movs	r1, #18
 80013e0:	f7ff fe21 	bl	8001026 <lsm6dsm_read_reg>

  if (ret == 0)
 80013e4:	b108      	cbz	r0, 80013ea <lsm6dsm_spi_mode_set+0x18>
    ctrl3_c.sim = (uint8_t)val;
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
}
 80013e6:	b003      	add	sp, #12
 80013e8:	bd30      	pop	{r4, r5, pc}
    ctrl3_c.sim = (uint8_t)val;
 80013ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013ee:	f365 03c3 	bfi	r3, r5, #3, #1
 80013f2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80013f6:	2301      	movs	r3, #1
 80013f8:	aa01      	add	r2, sp, #4
 80013fa:	2112      	movs	r1, #18
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fe1b 	bl	8001038 <lsm6dsm_write_reg>
  return ret;
 8001402:	e7f0      	b.n	80013e6 <lsm6dsm_spi_mode_set+0x14>

08001404 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <MX_SDIO_SD_Init+0x18>)
 8001406:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <MX_SDIO_SD_Init+0x1c>)
 8001408:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800140e:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001410:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001412:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001414:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001416:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200002d8 	.word	0x200002d8
 8001420:	40012c00 	.word	0x40012c00

08001424 <llcc68_platform_reset>:
	  HAL_SPI_Receive(handle, bufp, len, 1000);
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
  return 0;
}

static int32_t llcc68_platform_reset(void *handle) {
 8001424:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(RF_RESET_GPIO_Port, RF_RESET_Pin, GPIO_PIN_RESET);
 8001426:	4c09      	ldr	r4, [pc, #36]	@ (800144c <llcc68_platform_reset+0x28>)
 8001428:	2200      	movs	r2, #0
 800142a:	2180      	movs	r1, #128	@ 0x80
 800142c:	4620      	mov	r0, r4
 800142e:	f000 fe72 	bl	8002116 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 fcf4 	bl	8001e20 <HAL_Delay>
  HAL_GPIO_WritePin(RF_RESET_GPIO_Port, RF_RESET_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2180      	movs	r1, #128	@ 0x80
 800143c:	4620      	mov	r0, r4
 800143e:	f000 fe6a 	bl	8002116 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fcec 	bl	8001e20 <HAL_Delay>
  return 0;
}
 8001448:	2000      	movs	r0, #0
 800144a:	bd10      	pop	{r4, pc}
 800144c:	40020800 	.word	0x40020800

08001450 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001450:	b508      	push	{r3, lr}
  HAL_Delay(ms);
 8001452:	f000 fce5 	bl	8001e20 <HAL_Delay>
}
 8001456:	bd08      	pop	{r3, pc}

08001458 <llcc68_platform_write>:
	  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_SET);
  return 0;
}

static int32_t llcc68_platform_write(void *handle, const uint8_t* command, const uint16_t command_length,
                                     const uint8_t* data, const uint16_t data_length ) {
 8001458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145c:	460d      	mov	r5, r1
 800145e:	4616      	mov	r6, r2
 8001460:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_RESET);
 8001462:	4f0f      	ldr	r7, [pc, #60]	@ (80014a0 <llcc68_platform_write+0x48>)
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	4638      	mov	r0, r7
 800146a:	f000 fe54 	bl	8002116 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, command, command_length, 1000);
 800146e:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 80014a4 <llcc68_platform_write+0x4c>
 8001472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001476:	4632      	mov	r2, r6
 8001478:	4629      	mov	r1, r5
 800147a:	4640      	mov	r0, r8
 800147c:	f002 fc67 	bl	8003d4e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, data, data_length, 1000);
 8001480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001484:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001488:	4621      	mov	r1, r4
 800148a:	4640      	mov	r0, r8
 800148c:	f002 fc5f 	bl	8003d4e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	2110      	movs	r1, #16
 8001494:	4638      	mov	r0, r7
 8001496:	f000 fe3e 	bl	8002116 <HAL_GPIO_WritePin>
  return 0;
}
 800149a:	2000      	movs	r0, #0
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014a0:	40020000 	.word	0x40020000
 80014a4:	20000280 	.word	0x20000280

080014a8 <lsm6dsm_platform_write>:
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	4604      	mov	r4, r0
 80014ae:	4615      	mov	r5, r2
 80014b0:	461e      	mov	r6, r3
 80014b2:	f88d 1007 	strb.w	r1, [sp, #7]
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_RESET);
 80014b6:	4f0e      	ldr	r7, [pc, #56]	@ (80014f0 <lsm6dsm_platform_write+0x48>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	2108      	movs	r1, #8
 80014bc:	4638      	mov	r0, r7
 80014be:	f000 fe2a 	bl	8002116 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80014c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c6:	2201      	movs	r2, #1
 80014c8:	f10d 0107 	add.w	r1, sp, #7
 80014cc:	4620      	mov	r0, r4
 80014ce:	f002 fc3e 	bl	8003d4e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	4632      	mov	r2, r6
 80014d8:	4629      	mov	r1, r5
 80014da:	4620      	mov	r0, r4
 80014dc:	f002 fc37 	bl	8003d4e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2108      	movs	r1, #8
 80014e4:	4638      	mov	r0, r7
 80014e6:	f000 fe16 	bl	8002116 <HAL_GPIO_WritePin>
}
 80014ea:	2000      	movs	r0, #0
 80014ec:	b003      	add	sp, #12
 80014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f0:	40020000 	.word	0x40020000

080014f4 <llcc68_platform_read>:
                                     uint8_t* data, const uint16_t data_length ) {
 80014f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f8:	460d      	mov	r5, r1
 80014fa:	4616      	mov	r6, r2
 80014fc:	461c      	mov	r4, r3
  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_RESET);
 80014fe:	4f0f      	ldr	r7, [pc, #60]	@ (800153c <llcc68_platform_read+0x48>)
 8001500:	2200      	movs	r2, #0
 8001502:	2110      	movs	r1, #16
 8001504:	4638      	mov	r0, r7
 8001506:	f000 fe06 	bl	8002116 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, command, command_length, 1000);
 800150a:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 8001540 <llcc68_platform_read+0x4c>
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	4632      	mov	r2, r6
 8001514:	4629      	mov	r1, r5
 8001516:	4640      	mov	r0, r8
 8001518:	f002 fc19 	bl	8003d4e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, data, data_length, 1000);
 800151c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001520:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001524:	4621      	mov	r1, r4
 8001526:	4640      	mov	r0, r8
 8001528:	f002 fe1d 	bl	8004166 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_WIRELESS_GPIO_Port, CS_WIRELESS_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2110      	movs	r1, #16
 8001530:	4638      	mov	r0, r7
 8001532:	f000 fdf0 	bl	8002116 <HAL_GPIO_WritePin>
}
 8001536:	2000      	movs	r0, #0
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800153c:	40020000 	.word	0x40020000
 8001540:	20000280 	.word	0x20000280

08001544 <lsm6dsm_platform_read>:
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b083      	sub	sp, #12
 8001548:	4604      	mov	r4, r0
 800154a:	4615      	mov	r5, r2
 800154c:	461e      	mov	r6, r3
 800154e:	f88d 1007 	strb.w	r1, [sp, #7]
	  reg |= 0x80;
 8001552:	b2cb      	uxtb	r3, r1
 8001554:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001558:	f88d 3007 	strb.w	r3, [sp, #7]
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_RESET);
 800155c:	4f0e      	ldr	r7, [pc, #56]	@ (8001598 <lsm6dsm_platform_read+0x54>)
 800155e:	2200      	movs	r2, #0
 8001560:	2108      	movs	r1, #8
 8001562:	4638      	mov	r0, r7
 8001564:	f000 fdd7 	bl	8002116 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156c:	2201      	movs	r2, #1
 800156e:	f10d 0107 	add.w	r1, sp, #7
 8001572:	4620      	mov	r0, r4
 8001574:	f002 fbeb 	bl	8003d4e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(handle, bufp, len, 1000);
 8001578:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157c:	4632      	mov	r2, r6
 800157e:	4629      	mov	r1, r5
 8001580:	4620      	mov	r0, r4
 8001582:	f002 fdf0 	bl	8004166 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(CS_GYRO_GPIO_Port, CS_GYRO_Pin, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2108      	movs	r1, #8
 800158a:	4638      	mov	r0, r7
 800158c:	f000 fdc3 	bl	8002116 <HAL_GPIO_WritePin>
}
 8001590:	2000      	movs	r0, #0
 8001592:	b003      	add	sp, #12
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001596:	bf00      	nop
 8001598:	40020000 	.word	0x40020000

0800159c <MX_GPIO_Init>:
{
 800159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a0:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	2400      	movs	r4, #0
 80015a4:	9405      	str	r4, [sp, #20]
 80015a6:	9406      	str	r4, [sp, #24]
 80015a8:	9407      	str	r4, [sp, #28]
 80015aa:	9408      	str	r4, [sp, #32]
 80015ac:	9409      	str	r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	9400      	str	r4, [sp, #0]
 80015b0:	4b3d      	ldr	r3, [pc, #244]	@ (80016a8 <MX_GPIO_Init+0x10c>)
 80015b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015bc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80015c0:	9200      	str	r2, [sp, #0]
 80015c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	9401      	str	r4, [sp, #4]
 80015c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c8:	f042 0204 	orr.w	r2, r2, #4
 80015cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015d0:	f002 0204 	and.w	r2, r2, #4
 80015d4:	9201      	str	r2, [sp, #4]
 80015d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	9402      	str	r4, [sp, #8]
 80015da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015dc:	f042 0201 	orr.w	r2, r2, #1
 80015e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80015e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e4:	f002 0201 	and.w	r2, r2, #1
 80015e8:	9202      	str	r2, [sp, #8]
 80015ea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	9403      	str	r4, [sp, #12]
 80015ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f0:	f042 0208 	orr.w	r2, r2, #8
 80015f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015f8:	f002 0208 	and.w	r2, r2, #8
 80015fc:	9203      	str	r2, [sp, #12]
 80015fe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	9404      	str	r4, [sp, #16]
 8001602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001604:	f042 0202 	orr.w	r2, r2, #2
 8001608:	631a      	str	r2, [r3, #48]	@ 0x30
 800160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	9304      	str	r3, [sp, #16]
 8001612:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin, GPIO_PIN_RESET);
 8001614:	4d25      	ldr	r5, [pc, #148]	@ (80016ac <MX_GPIO_Init+0x110>)
 8001616:	4622      	mov	r2, r4
 8001618:	2187      	movs	r1, #135	@ 0x87
 800161a:	4628      	mov	r0, r5
 800161c:	f000 fd7b 	bl	8002116 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin, GPIO_PIN_RESET);
 8001620:	4e23      	ldr	r6, [pc, #140]	@ (80016b0 <MX_GPIO_Init+0x114>)
 8001622:	4622      	mov	r2, r4
 8001624:	211c      	movs	r1, #28
 8001626:	4630      	mov	r0, r6
 8001628:	f000 fd75 	bl	8002116 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin;
 800162c:	2387      	movs	r3, #135	@ 0x87
 800162e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2701      	movs	r7, #1
 8001632:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	a905      	add	r1, sp, #20
 800163a:	4628      	mov	r0, r5
 800163c:	f000 fc6e 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_INT_Pin|PRESSURE_INT_Pin;
 8001640:	2348      	movs	r3, #72	@ 0x48
 8001642:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	f04f 0802 	mov.w	r8, #2
 8001648:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8001650:	230f      	movs	r3, #15
 8001652:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	a905      	add	r1, sp, #20
 8001656:	4628      	mov	r0, r5
 8001658:	f000 fc60 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_CD_Pin;
 800165c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001664:	a905      	add	r1, sp, #20
 8001666:	4630      	mov	r0, r6
 8001668:	f000 fc58 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin;
 800166c:	231c      	movs	r3, #28
 800166e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	a905      	add	r1, sp, #20
 8001678:	4630      	mov	r0, r6
 800167a:	f000 fc4f 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUSY_Pin;
 800167e:	2310      	movs	r3, #16
 8001680:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8001686:	a905      	add	r1, sp, #20
 8001688:	4628      	mov	r0, r5
 800168a:	f000 fc47 	bl	8001f1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ANTENNA_IRQ_Pin;
 800168e:	2320      	movs	r3, #32
 8001690:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001692:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001696:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ANTENNA_IRQ_GPIO_Port, &GPIO_InitStruct);
 800169a:	a905      	add	r1, sp, #20
 800169c:	4628      	mov	r0, r5
 800169e:	f000 fc3d 	bl	8001f1c <HAL_GPIO_Init>
}
 80016a2:	b00a      	add	sp, #40	@ 0x28
 80016a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020000 	.word	0x40020000

080016b4 <_write>:
int _write(int fd, char* ptr, int len) {
 80016b4:	b510      	push	{r4, lr}
 80016b6:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 0xffffff);
 80016b8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80016bc:	b292      	uxth	r2, r2
 80016be:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <_write+0x14>)
 80016c0:	f002 ff3f 	bl	8004542 <HAL_UART_Transmit>
}
 80016c4:	4620      	mov	r0, r4
 80016c6:	bd10      	pop	{r4, pc}
 80016c8:	20000238 	.word	0x20000238

080016cc <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ce:	e7fe      	b.n	80016ce <Error_Handler+0x2>

080016d0 <MX_USART1_UART_Init>:
{
 80016d0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80016d2:	480a      	ldr	r0, [pc, #40]	@ (80016fc <MX_USART1_UART_Init+0x2c>)
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <MX_USART1_UART_Init+0x30>)
 80016d6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80016d8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80016dc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	2300      	movs	r3, #0
 80016e0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e6:	220c      	movs	r2, #12
 80016e8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ee:	f002 fef8 	bl	80044e2 <HAL_UART_Init>
 80016f2:	b900      	cbnz	r0, 80016f6 <MX_USART1_UART_Init+0x26>
}
 80016f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016f6:	f7ff ffe9 	bl	80016cc <Error_Handler>
 80016fa:	bf00      	nop
 80016fc:	20000238 	.word	0x20000238
 8001700:	40011000 	.word	0x40011000

08001704 <MX_I2C1_Init>:
{
 8001704:	b500      	push	{lr}
 8001706:	b085      	sub	sp, #20
  hi2c1.Instance = I2C1;
 8001708:	4819      	ldr	r0, [pc, #100]	@ (8001770 <MX_I2C1_Init+0x6c>)
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_I2C1_Init+0x70>)
 800170c:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001710:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001712:	2300      	movs	r3, #0
 8001714:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 130;
 8001716:	2282      	movs	r2, #130	@ 0x82
 8001718:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800171e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001722:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001726:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001728:	f000 fea0 	bl	800246c <HAL_I2C_Init>
 800172c:	b988      	cbnz	r0, 8001752 <MX_I2C1_Init+0x4e>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x41 << 1, 2, 1000) != HAL_OK) {
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	2202      	movs	r2, #2
 8001734:	2182      	movs	r1, #130	@ 0x82
 8001736:	480e      	ldr	r0, [pc, #56]	@ (8001770 <MX_I2C1_Init+0x6c>)
 8001738:	f001 f828 	bl	800278c <HAL_I2C_IsDeviceReady>
 800173c:	b158      	cbz	r0, 8001756 <MX_I2C1_Init+0x52>
      HAL_UART_Transmit(&huart1, (uint8_t*)"Temperature not ready\r\n", 32, 1000);
 800173e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001742:	2220      	movs	r2, #32
 8001744:	490d      	ldr	r1, [pc, #52]	@ (800177c <MX_I2C1_Init+0x78>)
 8001746:	480e      	ldr	r0, [pc, #56]	@ (8001780 <MX_I2C1_Init+0x7c>)
 8001748:	f002 fefb 	bl	8004542 <HAL_UART_Transmit>
}
 800174c:	b005      	add	sp, #20
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001752:	f7ff ffbb 	bl	80016cc <Error_Handler>
      HAL_I2C_Mem_Write(&hi2c1, 0x41 << 1, 0x04, 1, (uint8_t*)0x00, 1, 1000);
 8001756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	2301      	movs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	2204      	movs	r2, #4
 8001766:	2182      	movs	r1, #130	@ 0x82
 8001768:	4801      	ldr	r0, [pc, #4]	@ (8001770 <MX_I2C1_Init+0x6c>)
 800176a:	f000 ff5d 	bl	8002628 <HAL_I2C_Mem_Write>
}
 800176e:	e7ed      	b.n	800174c <MX_I2C1_Init+0x48>
 8001770:	2000035c 	.word	0x2000035c
 8001774:	40005400 	.word	0x40005400
 8001778:	000186a0 	.word	0x000186a0
 800177c:	080098a4 	.word	0x080098a4
 8001780:	20000238 	.word	0x20000238

08001784 <MX_SPI1_Init>:
{
 8001784:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001786:	480d      	ldr	r0, [pc, #52]	@ (80017bc <MX_SPI1_Init+0x38>)
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <MX_SPI1_Init+0x3c>)
 800178a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001790:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001792:	2300      	movs	r3, #0
 8001794:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001796:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001798:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800179c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017a2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a6:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017aa:	230a      	movs	r3, #10
 80017ac:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ae:	f002 fa6f 	bl	8003c90 <HAL_SPI_Init>
 80017b2:	b900      	cbnz	r0, 80017b6 <MX_SPI1_Init+0x32>
}
 80017b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80017b6:	f7ff ff89 	bl	80016cc <Error_Handler>
 80017ba:	bf00      	nop
 80017bc:	20000280 	.word	0x20000280
 80017c0:	40013000 	.word	0x40013000

080017c4 <SystemClock_Config>:
{
 80017c4:	b500      	push	{lr}
 80017c6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c8:	2230      	movs	r2, #48	@ 0x30
 80017ca:	2100      	movs	r1, #0
 80017cc:	a808      	add	r0, sp, #32
 80017ce:	f004 fb91 	bl	8005ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d2:	2300      	movs	r3, #0
 80017d4:	9303      	str	r3, [sp, #12]
 80017d6:	9304      	str	r3, [sp, #16]
 80017d8:	9305      	str	r3, [sp, #20]
 80017da:	9306      	str	r3, [sp, #24]
 80017dc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <SystemClock_Config+0x90>)
 80017e2:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80017e4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80017e8:	6411      	str	r1, [r2, #64]	@ 0x40
 80017ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017ec:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <SystemClock_Config+0x94>)
 80017f8:	6811      	ldr	r1, [r2, #0]
 80017fa:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80017fe:	6011      	str	r1, [r2, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001806:	9202      	str	r2, [sp, #8]
 8001808:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180a:	2202      	movs	r2, #2
 800180c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180e:	2101      	movs	r1, #1
 8001810:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001812:	2110      	movs	r1, #16
 8001814:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001816:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001818:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800181a:	9110      	str	r1, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800181c:	23c0      	movs	r3, #192	@ 0xc0
 800181e:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001822:	2304      	movs	r3, #4
 8001824:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001826:	a808      	add	r0, sp, #32
 8001828:	f001 f990 	bl	8002b4c <HAL_RCC_OscConfig>
 800182c:	b968      	cbnz	r0, 800184a <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001832:	2100      	movs	r1, #0
 8001834:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001836:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001838:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183a:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800183c:	a803      	add	r0, sp, #12
 800183e:	f001 fbd5 	bl	8002fec <HAL_RCC_ClockConfig>
 8001842:	b920      	cbnz	r0, 800184e <SystemClock_Config+0x8a>
}
 8001844:	b015      	add	sp, #84	@ 0x54
 8001846:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800184a:	f7ff ff3f 	bl	80016cc <Error_Handler>
    Error_Handler();
 800184e:	f7ff ff3d 	bl	80016cc <Error_Handler>
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <main>:
{
 800185c:	b530      	push	{r4, r5, lr}
 800185e:	ed2d 8b04 	vpush	{d8-d9}
 8001862:	b091      	sub	sp, #68	@ 0x44
  HAL_Init();
 8001864:	f000 fab0 	bl	8001dc8 <HAL_Init>
  SystemClock_Config();
 8001868:	f7ff ffac 	bl	80017c4 <SystemClock_Config>
  MX_GPIO_Init();
 800186c:	f7ff fe96 	bl	800159c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001870:	f7ff fdc8 	bl	8001404 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8001874:	f7ff ff2c 	bl	80016d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001878:	f7ff ff44 	bl	8001704 <MX_I2C1_Init>
  MX_FATFS_Init();
 800187c:	f7ff fa94 	bl	8000da8 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001880:	f7ff ff80 	bl	8001784 <MX_SPI1_Init>
  dev_ctx.write_reg = lsm6dsm_platform_write;
 8001884:	4bd0      	ldr	r3, [pc, #832]	@ (8001bc8 <main+0x36c>)
 8001886:	930c      	str	r3, [sp, #48]	@ 0x30
  dev_ctx.read_reg = lsm6dsm_platform_read;
 8001888:	4bd0      	ldr	r3, [pc, #832]	@ (8001bcc <main+0x370>)
 800188a:	930d      	str	r3, [sp, #52]	@ 0x34
  dev_ctx.handle = &hspi1;
 800188c:	4bd0      	ldr	r3, [pc, #832]	@ (8001bd0 <main+0x374>)
 800188e:	930f      	str	r3, [sp, #60]	@ 0x3c
  radio_ctx.write_reg = llcc68_platform_write;
 8001890:	4ad0      	ldr	r2, [pc, #832]	@ (8001bd4 <main+0x378>)
 8001892:	9207      	str	r2, [sp, #28]
  radio_ctx.read_reg = llcc68_platform_read;
 8001894:	4ad0      	ldr	r2, [pc, #832]	@ (8001bd8 <main+0x37c>)
 8001896:	9208      	str	r2, [sp, #32]
  radio_ctx.reset = llcc68_platform_reset;
 8001898:	4ad0      	ldr	r2, [pc, #832]	@ (8001bdc <main+0x380>)
 800189a:	9209      	str	r2, [sp, #36]	@ 0x24
  radio_ctx.handle = &hspi1;
 800189c:	930b      	str	r3, [sp, #44]	@ 0x2c
  radio_ctx.gpio = CS_WIRELESS_GPIO_Port;
 800189e:	4bd0      	ldr	r3, [pc, #832]	@ (8001be0 <main+0x384>)
 80018a0:	930a      	str	r3, [sp, #40]	@ 0x28
  platform_delay(1000);
 80018a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a6:	f7ff fdd3 	bl	8001450 <platform_delay>
  lsm6dsm_spi_mode_set(&dev_ctx,LSM6DSM_SPI_3_WIRE);
 80018aa:	2101      	movs	r1, #1
 80018ac:	a80c      	add	r0, sp, #48	@ 0x30
 80018ae:	f7ff fd90 	bl	80013d2 <lsm6dsm_spi_mode_set>
  lsm6dsm_auto_increment_set(&dev_ctx, 1);
 80018b2:	2101      	movs	r1, #1
 80018b4:	a80c      	add	r0, sp, #48	@ 0x30
 80018b6:	f7ff fce1 	bl	800127c <lsm6dsm_auto_increment_set>
  lsm6dsm_device_id_get(&dev_ctx, &whoamI);
 80018ba:	4cca      	ldr	r4, [pc, #808]	@ (8001be4 <main+0x388>)
 80018bc:	4621      	mov	r1, r4
 80018be:	a80c      	add	r0, sp, #48	@ 0x30
 80018c0:	f7ff fcc6 	bl	8001250 <lsm6dsm_device_id_get>
  if (whoamI != LSM6DSM_ID)
 80018c4:	7823      	ldrb	r3, [r4, #0]
 80018c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80018c8:	d000      	beq.n	80018cc <main+0x70>
    while (1) {
 80018ca:	e7fe      	b.n	80018ca <main+0x6e>
    lsm6dsm_reset_get(&dev_ctx, &rst);
 80018cc:	4cc6      	ldr	r4, [pc, #792]	@ (8001be8 <main+0x38c>)
 80018ce:	4621      	mov	r1, r4
 80018d0:	a80c      	add	r0, sp, #48	@ 0x30
 80018d2:	f7ff fcc4 	bl	800125e <lsm6dsm_reset_get>
  } while (rst);
 80018d6:	7823      	ldrb	r3, [r4, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f7      	bne.n	80018cc <main+0x70>
  lsm6dsm_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80018dc:	2101      	movs	r1, #1
 80018de:	a80c      	add	r0, sp, #48	@ 0x30
 80018e0:	f7ff fc40 	bl	8001164 <lsm6dsm_block_data_update_set>
  lsm6dsm_xl_data_rate_set(&dev_ctx, LSM6DSM_XL_ODR_6k66Hz);
 80018e4:	210a      	movs	r1, #10
 80018e6:	a80c      	add	r0, sp, #48	@ 0x30
 80018e8:	f7ff fbf1 	bl	80010ce <lsm6dsm_xl_data_rate_set>
  lsm6dsm_gy_data_rate_set(&dev_ctx, LSM6DSM_XL_ODR_6k66Hz);
 80018ec:	210a      	movs	r1, #10
 80018ee:	a80c      	add	r0, sp, #48	@ 0x30
 80018f0:	f7ff fc1f 	bl	8001132 <lsm6dsm_gy_data_rate_set>
  lsm6dsm_xl_full_scale_set(&dev_ctx, LSM6DSM_2g);
 80018f4:	2100      	movs	r1, #0
 80018f6:	a80c      	add	r0, sp, #48	@ 0x30
 80018f8:	f7ff fbd0 	bl	800109c <lsm6dsm_xl_full_scale_set>
  lsm6dsm_gy_full_scale_set(&dev_ctx, LSM6DSM_2000dps);
 80018fc:	2106      	movs	r1, #6
 80018fe:	a80c      	add	r0, sp, #48	@ 0x30
 8001900:	f7ff fbfe 	bl	8001100 <lsm6dsm_gy_full_scale_set>
  lsm6dsm_xl_filter_analog_set(&dev_ctx, LSM6DSM_XL_ANA_BW_400Hz);
 8001904:	2101      	movs	r1, #1
 8001906:	a80c      	add	r0, sp, #48	@ 0x30
 8001908:	f7ff fcd1 	bl	80012ae <lsm6dsm_xl_filter_analog_set>
  lsm6dsm_xl_lp2_bandwidth_set(&dev_ctx,
 800190c:	2103      	movs	r1, #3
 800190e:	a80c      	add	r0, sp, #48	@ 0x30
 8001910:	f7ff fce6 	bl	80012e0 <lsm6dsm_xl_lp2_bandwidth_set>
  lsm6dsm_gy_band_pass_set(&dev_ctx, LSM6DSM_HP_DISABLE_LP1_AGGRESSIVE);
 8001914:	210b      	movs	r1, #11
 8001916:	a80c      	add	r0, sp, #48	@ 0x30
 8001918:	f7ff fd0c 	bl	8001334 <lsm6dsm_gy_band_pass_set>
  platform_delay(2000);
 800191c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001920:	f7ff fd96 	bl	8001450 <platform_delay>
  int16_t acc_bias[3] = {0, 0, 0};
 8001924:	2400      	movs	r4, #0
 8001926:	f8ad 4014 	strh.w	r4, [sp, #20]
 800192a:	f8ad 4016 	strh.w	r4, [sp, #22]
 800192e:	f8ad 4018 	strh.w	r4, [sp, #24]
  int i = 0;
 8001932:	e002      	b.n	800193a <main+0xde>
  } while (i < SAMPLE_SIZE);
 8001934:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8001938:	da48      	bge.n	80019cc <main+0x170>
      lsm6dsm_status_reg_get(&dev_ctx, &reg.status_reg);
 800193a:	a901      	add	r1, sp, #4
 800193c:	a80c      	add	r0, sp, #48	@ 0x30
 800193e:	f7ff fc2a 	bl	8001196 <lsm6dsm_status_reg_get>
      if (reg.status_reg.xlda) {
 8001942:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001946:	f013 0f01 	tst.w	r3, #1
 800194a:	d0f3      	beq.n	8001934 <main+0xd8>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800194c:	4da7      	ldr	r5, [pc, #668]	@ (8001bec <main+0x390>)
 800194e:	2300      	movs	r3, #0
 8001950:	602b      	str	r3, [r5, #0]
 8001952:	80ab      	strh	r3, [r5, #4]
        lsm6dsm_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001954:	4629      	mov	r1, r5
 8001956:	a80c      	add	r0, sp, #48	@ 0x30
 8001958:	f7ff fc58 	bl	800120c <lsm6dsm_acceleration_raw_get>
        acc_bias[0] += lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[0]);
 800195c:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001960:	f7ff fb74 	bl	800104c <lsm6dsm_from_fs2g_to_mg>
 8001964:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001970:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001978:	ee17 3a90 	vmov	r3, s15
 800197c:	f8ad 3014 	strh.w	r3, [sp, #20]
        acc_bias[1] += lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[1]);
 8001980:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001984:	f7ff fb62 	bl	800104c <lsm6dsm_from_fs2g_to_mg>
 8001988:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	f8ad 3016 	strh.w	r3, [sp, #22]
        acc_bias[2] += lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[2]);
 80019a4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80019a8:	f7ff fb50 	bl	800104c <lsm6dsm_from_fs2g_to_mg>
 80019ac:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80019bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c0:	ee17 3a90 	vmov	r3, s15
 80019c4:	f8ad 3018 	strh.w	r3, [sp, #24]
        i++;
 80019c8:	3401      	adds	r4, #1
 80019ca:	e7b3      	b.n	8001934 <main+0xd8>
  acc_bias[0] /= SAMPLE_SIZE;
 80019cc:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80019d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d4:	fb92 f2f3 	sdiv	r2, r2, r3
 80019d8:	ee08 2a10 	vmov	s16, r2
 80019dc:	f8ad 2014 	strh.w	r2, [sp, #20]
  acc_bias[1] /= SAMPLE_SIZE;
 80019e0:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80019e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80019e8:	ee08 2a90 	vmov	s17, r2
 80019ec:	f8ad 2016 	strh.w	r2, [sp, #22]
  acc_bias[2] /= SAMPLE_SIZE;
 80019f0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80019f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80019f8:	ee09 3a10 	vmov	s18, r3
 80019fc:	f8ad 3018 	strh.w	r3, [sp, #24]
  int16_t gyro_bias[3] = {0, 0, 0};
 8001a00:	2400      	movs	r4, #0
 8001a02:	f8ad 400c 	strh.w	r4, [sp, #12]
 8001a06:	f8ad 400e 	strh.w	r4, [sp, #14]
 8001a0a:	f8ad 4010 	strh.w	r4, [sp, #16]
  i = 0;
 8001a0e:	e002      	b.n	8001a16 <main+0x1ba>
  } while (i < SAMPLE_SIZE);
 8001a10:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8001a14:	da48      	bge.n	8001aa8 <main+0x24c>
	    lsm6dsm_status_reg_get(&dev_ctx, &reg.status_reg);
 8001a16:	a901      	add	r1, sp, #4
 8001a18:	a80c      	add	r0, sp, #48	@ 0x30
 8001a1a:	f7ff fbbc 	bl	8001196 <lsm6dsm_status_reg_get>
      if (reg.status_reg.gda) {
 8001a1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a22:	f013 0f02 	tst.w	r3, #2
 8001a26:	d0f3      	beq.n	8001a10 <main+0x1b4>
        memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001a28:	4d71      	ldr	r5, [pc, #452]	@ (8001bf0 <main+0x394>)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	602b      	str	r3, [r5, #0]
 8001a2e:	80ab      	strh	r3, [r5, #4]
        lsm6dsm_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001a30:	4629      	mov	r1, r5
 8001a32:	a80c      	add	r0, sp, #48	@ 0x30
 8001a34:	f7ff fbc8 	bl	80011c8 <lsm6dsm_angular_rate_raw_get>
        gyro_bias[0] += lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001a38:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001a3c:	f7ff fb12 	bl	8001064 <lsm6dsm_from_fs2000dps_to_mdps>
 8001a40:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	f8ad 300c 	strh.w	r3, [sp, #12]
        gyro_bias[1] += lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001a5c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001a60:	f7ff fb00 	bl	8001064 <lsm6dsm_from_fs2000dps_to_mdps>
 8001a64:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a70:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a78:	ee17 3a90 	vmov	r3, s15
 8001a7c:	f8ad 300e 	strh.w	r3, [sp, #14]
        gyro_bias[2] += lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001a80:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8001a84:	f7ff faee 	bl	8001064 <lsm6dsm_from_fs2000dps_to_mdps>
 8001a88:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9c:	ee17 3a90 	vmov	r3, s15
 8001aa0:	f8ad 3010 	strh.w	r3, [sp, #16]
        i++;
 8001aa4:	3401      	adds	r4, #1
 8001aa6:	e7b3      	b.n	8001a10 <main+0x1b4>
  gyro_bias[0] /= SAMPLE_SIZE;
 8001aa8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001aac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ab4:	f8ad 300c 	strh.w	r3, [sp, #12]
  gyro_bias[1] /= SAMPLE_SIZE;
 8001ab8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8001abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ac0:	f8ad 300e 	strh.w	r3, [sp, #14]
  gyro_bias[2] /= SAMPLE_SIZE;
 8001ac4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8001ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8001acc:	f8ad 3010 	strh.w	r3, [sp, #16]
  gyro_bias[0] = 0;
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	f8ad 400c 	strh.w	r4, [sp, #12]
  gyro_bias[1] = 0;
 8001ad6:	f8ad 400e 	strh.w	r4, [sp, #14]
  gyro_bias[2] = 0;
 8001ada:	f8ad 4010 	strh.w	r4, [sp, #16]
  llcc68_reset(&radio_ctx);
 8001ade:	a807      	add	r0, sp, #28
 8001ae0:	f7ff fa6e 	bl	8000fc0 <llcc68_reset>
  platform_delay(100);
 8001ae4:	2064      	movs	r0, #100	@ 0x64
 8001ae6:	f7ff fcb3 	bl	8001450 <platform_delay>
    llcc68_set_standby(&radio_ctx, LLCC68_STANDBY_CFG_RC);
 8001aea:	4621      	mov	r1, r4
 8001aec:	a807      	add	r0, sp, #28
 8001aee:	f7ff f9cd 	bl	8000e8c <llcc68_set_standby>
    llcc68_set_pkt_type(&radio_ctx, LLCC68_PKT_TYPE_LORA);
 8001af2:	2101      	movs	r1, #1
 8001af4:	a807      	add	r0, sp, #28
 8001af6:	f7ff fa26 	bl	8000f46 <llcc68_set_pkt_type>
    llcc68_set_rf_freq(&radio_ctx, 433000000);
 8001afa:	493e      	ldr	r1, [pc, #248]	@ (8001bf4 <main+0x398>)
 8001afc:	a807      	add	r0, sp, #28
 8001afe:	f7ff fa77 	bl	8000ff0 <llcc68_set_rf_freq>
    const llcc68_pa_cfg_params_t pa_cfg = {0x03,
 8001b02:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <main+0x39c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	9302      	str	r3, [sp, #8]
    llcc68_set_pa_cfg(&radio_ctx, &pa_cfg);
 8001b08:	a902      	add	r1, sp, #8
 8001b0a:	a807      	add	r0, sp, #28
 8001b0c:	f7ff f9e6 	bl	8000edc <llcc68_set_pa_cfg>
    llcc68_set_tx_params(&radio_ctx, 0x16, LLCC68_RAMP_200_US);
 8001b10:	2204      	movs	r2, #4
 8001b12:	2116      	movs	r1, #22
 8001b14:	a807      	add	r0, sp, #28
 8001b16:	f7ff fa26 	bl	8000f66 <llcc68_set_tx_params>
     platform_delay(100);
 8001b1a:	2064      	movs	r0, #100	@ 0x64
 8001b1c:	f7ff fc98 	bl	8001450 <platform_delay>
 8001b20:	e07a      	b.n	8001c18 <main+0x3bc>
	      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001b22:	4c32      	ldr	r4, [pc, #200]	@ (8001bec <main+0x390>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	6023      	str	r3, [r4, #0]
 8001b28:	80a3      	strh	r3, [r4, #4]
	      lsm6dsm_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	a80c      	add	r0, sp, #48	@ 0x30
 8001b2e:	f7ff fb6d 	bl	800120c <lsm6dsm_acceleration_raw_get>
	        lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[0]) - acc_bias[0];
 8001b32:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001b36:	f7ff fa89 	bl	800104c <lsm6dsm_from_fs2g_to_mg>
 8001b3a:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8001b3e:	ee30 0a67 	vsub.f32	s0, s0, s15
	      acceleration_mg[0] =
 8001b42:	4d2e      	ldr	r5, [pc, #184]	@ (8001bfc <main+0x3a0>)
 8001b44:	ed85 0a00 	vstr	s0, [r5]
	        lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[1]) - acc_bias[1];
 8001b48:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8001b4c:	f7ff fa7e 	bl	800104c <lsm6dsm_from_fs2g_to_mg>
 8001b50:	eef8 7ae8 	vcvt.f32.s32	s15, s17
 8001b54:	ee30 0a67 	vsub.f32	s0, s0, s15
	      acceleration_mg[1] =
 8001b58:	ed85 0a01 	vstr	s0, [r5, #4]
	        lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[2]) - acc_bias[2];
 8001b5c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001b60:	f7ff fa74 	bl	800104c <lsm6dsm_from_fs2g_to_mg>
 8001b64:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 8001b68:	ee30 0a67 	vsub.f32	s0, s0, s15
	      acceleration_mg[2] =
 8001b6c:	ed85 0a02 	vstr	s0, [r5, #8]
 8001b70:	e05c      	b.n	8001c2c <main+0x3d0>
	      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001b72:	4c1f      	ldr	r4, [pc, #124]	@ (8001bf0 <main+0x394>)
 8001b74:	2300      	movs	r3, #0
 8001b76:	6023      	str	r3, [r4, #0]
 8001b78:	80a3      	strh	r3, [r4, #4]
	      lsm6dsm_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	a80c      	add	r0, sp, #48	@ 0x30
 8001b7e:	f7ff fb23 	bl	80011c8 <lsm6dsm_angular_rate_raw_get>
	        lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) - gyro_bias[0];
 8001b82:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001b86:	f7ff fa6d 	bl	8001064 <lsm6dsm_from_fs2000dps_to_mdps>
	      angular_rate_mdps[0] =
 8001b8a:	4d1d      	ldr	r5, [pc, #116]	@ (8001c00 <main+0x3a4>)
 8001b8c:	ed85 0a00 	vstr	s0, [r5]
	        lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) - gyro_bias[1];
 8001b90:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8001b94:	f7ff fa66 	bl	8001064 <lsm6dsm_from_fs2000dps_to_mdps>
	      angular_rate_mdps[1] =
 8001b98:	ed85 0a01 	vstr	s0, [r5, #4]
	        lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) - gyro_bias[2];
 8001b9c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001ba0:	f7ff fa60 	bl	8001064 <lsm6dsm_from_fs2000dps_to_mdps>
	      angular_rate_mdps[2] =
 8001ba4:	ed85 0a02 	vstr	s0, [r5, #8]
 8001ba8:	e045      	b.n	8001c36 <main+0x3da>
	      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001baa:	4c16      	ldr	r4, [pc, #88]	@ (8001c04 <main+0x3a8>)
 8001bac:	2300      	movs	r3, #0
 8001bae:	8023      	strh	r3, [r4, #0]
	      lsm6dsm_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	a80c      	add	r0, sp, #48	@ 0x30
 8001bb4:	f7ff faf6 	bl	80011a4 <lsm6dsm_temperature_raw_get>
	      temperature_degC = lsm6dsm_from_lsb_to_celsius(
 8001bb8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001bbc:	f7ff fa5e 	bl	800107c <lsm6dsm_from_lsb_to_celsius>
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <main+0x3ac>)
 8001bc2:	ed83 0a00 	vstr	s0, [r3]
 8001bc6:	e03b      	b.n	8001c40 <main+0x3e4>
 8001bc8:	080014a9 	.word	0x080014a9
 8001bcc:	08001545 	.word	0x08001545
 8001bd0:	20000280 	.word	0x20000280
 8001bd4:	08001459 	.word	0x08001459
 8001bd8:	080014f5 	.word	0x080014f5
 8001bdc:	08001425 	.word	0x08001425
 8001be0:	40020000 	.word	0x40020000
 8001be4:	20000205 	.word	0x20000205
 8001be8:	20000204 	.word	0x20000204
 8001bec:	20000230 	.word	0x20000230
 8001bf0:	20000228 	.word	0x20000228
 8001bf4:	19cf0e40 	.word	0x19cf0e40
 8001bf8:	080098a0 	.word	0x080098a0
 8001bfc:	20000218 	.word	0x20000218
 8001c00:	2000020c 	.word	0x2000020c
 8001c04:	20000224 	.word	0x20000224
 8001c08:	20000208 	.word	0x20000208
     HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == GPIO_PIN_SET ? printf("Busy\r\n") : printf("Not Busy\r\n");
 8001c0c:	481a      	ldr	r0, [pc, #104]	@ (8001c78 <main+0x41c>)
 8001c0e:	f004 f86f 	bl	8005cf0 <puts>
      platform_delay(100);
 8001c12:	2064      	movs	r0, #100	@ 0x64
 8001c14:	f7ff fc1c 	bl	8001450 <platform_delay>
	    lsm6dsm_status_reg_get(&dev_ctx, &reg.status_reg);
 8001c18:	4669      	mov	r1, sp
 8001c1a:	a80c      	add	r0, sp, #48	@ 0x30
 8001c1c:	f7ff fabb 	bl	8001196 <lsm6dsm_status_reg_get>
	    if (reg.status_reg.xlda) {
 8001c20:	f89d 3000 	ldrb.w	r3, [sp]
 8001c24:	f013 0f01 	tst.w	r3, #1
 8001c28:	f47f af7b 	bne.w	8001b22 <main+0x2c6>
	    if (reg.status_reg.gda) {
 8001c2c:	f89d 3000 	ldrb.w	r3, [sp]
 8001c30:	f013 0f02 	tst.w	r3, #2
 8001c34:	d19d      	bne.n	8001b72 <main+0x316>
	    if (reg.status_reg.tda) {
 8001c36:	f89d 3000 	ldrb.w	r3, [sp]
 8001c3a:	f013 0f04 	tst.w	r3, #4
 8001c3e:	d1b4      	bne.n	8001baa <main+0x34e>
    llcc68_set_tx(&radio_ctx, 100);
 8001c40:	2164      	movs	r1, #100	@ 0x64
 8001c42:	a807      	add	r0, sp, #28
 8001c44:	f7ff f9e0 	bl	8001008 <llcc68_set_tx>
    platform_delay(100);
 8001c48:	2064      	movs	r0, #100	@ 0x64
 8001c4a:	f7ff fc01 	bl	8001450 <platform_delay>
      llcc68_get_status(&radio_ctx, &chip_status);
 8001c4e:	a901      	add	r1, sp, #4
 8001c50:	a807      	add	r0, sp, #28
 8001c52:	f7ff f99a 	bl	8000f8a <llcc68_get_status>
      printf("Chip Mode: %d, Chip Status: %d\r\n", chip_status.chip_mode, chip_status.cmd_status);
 8001c56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001c5a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8001c5e:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <main+0x420>)
 8001c60:	f003 ffde 	bl	8005c20 <iprintf>
     HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin) == GPIO_PIN_SET ? printf("Busy\r\n") : printf("Not Busy\r\n");
 8001c64:	2110      	movs	r1, #16
 8001c66:	4806      	ldr	r0, [pc, #24]	@ (8001c80 <main+0x424>)
 8001c68:	f000 fa4e 	bl	8002108 <HAL_GPIO_ReadPin>
 8001c6c:	2801      	cmp	r0, #1
 8001c6e:	d1cd      	bne.n	8001c0c <main+0x3b0>
 8001c70:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <main+0x428>)
 8001c72:	f004 f83d 	bl	8005cf0 <puts>
 8001c76:	e7cc      	b.n	8001c12 <main+0x3b6>
 8001c78:	080098e0 	.word	0x080098e0
 8001c7c:	080098bc 	.word	0x080098bc
 8001c80:	40020800 	.word	0x40020800
 8001c84:	080098e4 	.word	0x080098e4

08001c88 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001c88:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <SD_CheckStatus+0x20>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8001c90:	f7ff f85a 	bl	8000d48 <BSP_SD_GetCardState>
 8001c94:	b920      	cbnz	r0, 8001ca0 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <SD_CheckStatus+0x20>)
 8001c98:	7813      	ldrb	r3, [r2, #0]
 8001c9a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001c9e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8001ca0:	4b01      	ldr	r3, [pc, #4]	@ (8001ca8 <SD_CheckStatus+0x20>)
 8001ca2:	7818      	ldrb	r0, [r3, #0]
}
 8001ca4:	bd08      	pop	{r3, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001cac:	b510      	push	{r4, lr}
 8001cae:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <SD_initialize+0x24>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8001cb6:	f7ff f869 	bl	8000d8c <BSP_SD_Init>
 8001cba:	b110      	cbz	r0, 8001cc2 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <SD_initialize+0x24>)
 8001cbe:	7818      	ldrb	r0, [r3, #0]
}
 8001cc0:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff ffe0 	bl	8001c88 <SD_CheckStatus>
 8001cc8:	4b01      	ldr	r3, [pc, #4]	@ (8001cd0 <SD_initialize+0x24>)
 8001cca:	7018      	strb	r0, [r3, #0]
 8001ccc:	e7f6      	b.n	8001cbc <SD_initialize+0x10>
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001cd4:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8001cd6:	f7ff ffd7 	bl	8001c88 <SD_CheckStatus>
}
 8001cda:	bd08      	pop	{r3, pc}

08001cdc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001cdc:	b508      	push	{r3, lr}
 8001cde:	4608      	mov	r0, r1
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	f7ff f80e 	bl	8000d08 <BSP_SD_ReadBlocks>
 8001cec:	b930      	cbnz	r0, 8001cfc <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8001cee:	f7ff f82b 	bl	8000d48 <BSP_SD_GetCardState>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d1fa      	bne.n	8001cee <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e7fb      	b.n	8001cf8 <SD_read+0x1c>

08001d00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001d00:	b508      	push	{r3, lr}
 8001d02:	4608      	mov	r0, r1
 8001d04:	4611      	mov	r1, r2
 8001d06:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	f7ff f80c 	bl	8000d28 <BSP_SD_WriteBlocks>
 8001d10:	b930      	cbnz	r0, 8001d20 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8001d12:	f7ff f819 	bl	8000d48 <BSP_SD_GetCardState>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d1fa      	bne.n	8001d12 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e7fb      	b.n	8001d1c <SD_write+0x1c>

08001d24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001d24:	b530      	push	{r4, r5, lr}
 8001d26:	b089      	sub	sp, #36	@ 0x24
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <SD_ioctl+0x54>)
 8001d2a:	7818      	ldrb	r0, [r3, #0]
 8001d2c:	f010 0401 	ands.w	r4, r0, #1
 8001d30:	d11b      	bne.n	8001d6a <SD_ioctl+0x46>
 8001d32:	4615      	mov	r5, r2

  switch (cmd)
 8001d34:	2903      	cmp	r1, #3
 8001d36:	d81c      	bhi.n	8001d72 <SD_ioctl+0x4e>
 8001d38:	e8df f001 	tbb	[pc, r1]
 8001d3c:	100a0402 	.word	0x100a0402
 8001d40:	460c      	mov	r4, r1
 8001d42:	e013      	b.n	8001d6c <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001d44:	4668      	mov	r0, sp
 8001d46:	f7ff f809 	bl	8000d5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001d4a:	9b06      	ldr	r3, [sp, #24]
 8001d4c:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8001d4e:	e00d      	b.n	8001d6c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001d50:	4668      	mov	r0, sp
 8001d52:	f7ff f803 	bl	8000d5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001d56:	9b07      	ldr	r3, [sp, #28]
 8001d58:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8001d5a:	e007      	b.n	8001d6c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001d5c:	4668      	mov	r0, sp
 8001d5e:	f7fe fffd 	bl	8000d5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8001d62:	9b07      	ldr	r3, [sp, #28]
 8001d64:	0a5b      	lsrs	r3, r3, #9
 8001d66:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8001d68:	e000      	b.n	8001d6c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d6a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	b009      	add	sp, #36	@ 0x24
 8001d70:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 8001d72:	2404      	movs	r4, #4
 8001d74:	e7fa      	b.n	8001d6c <SD_ioctl+0x48>
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d80:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <HAL_InitTick+0x40>)
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <HAL_InitTick+0x44>)
 8001d8e:	6810      	ldr	r0, [r2, #0]
 8001d90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d94:	f000 f8ae 	bl	8001ef4 <HAL_SYSTICK_Config>
 8001d98:	b968      	cbnz	r0, 8001db6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9a:	2c0f      	cmp	r4, #15
 8001d9c:	d901      	bls.n	8001da2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001d9e:	2001      	movs	r0, #1
 8001da0:	e00a      	b.n	8001db8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da2:	2200      	movs	r2, #0
 8001da4:	4621      	mov	r1, r4
 8001da6:	f04f 30ff 	mov.w	r0, #4294967295
 8001daa:	f000 f893 	bl	8001ed4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_InitTick+0x48>)
 8001db0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db2:	2000      	movs	r0, #0
 8001db4:	e000      	b.n	8001db8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001db6:	2001      	movs	r0, #1
}
 8001db8:	bd10      	pop	{r4, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000001 	.word	0x20000001
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_Init>:
{
 8001dc8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_Init+0x30>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dda:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 f863 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	200f      	movs	r0, #15
 8001dec:	f7ff ffc6 	bl	8001d7c <HAL_InitTick>
  HAL_MspInit();
 8001df0:	f000 fd96 	bl	8002920 <HAL_MspInit>
}
 8001df4:	2000      	movs	r0, #0
 8001df6:	bd08      	pop	{r3, pc}
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001dfc:	4a03      	ldr	r2, [pc, #12]	@ (8001e0c <HAL_IncTick+0x10>)
 8001dfe:	6811      	ldr	r1, [r2, #0]
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_IncTick+0x14>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	440b      	add	r3, r1
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	200003b0 	.word	0x200003b0
 8001e10:	20000001 	.word	0x20000001

08001e14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e14:	4b01      	ldr	r3, [pc, #4]	@ (8001e1c <HAL_GetTick+0x8>)
 8001e16:	6818      	ldr	r0, [r3, #0]
}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200003b0 	.word	0x200003b0

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b538      	push	{r3, r4, r5, lr}
 8001e22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff fff6 	bl	8001e14 <HAL_GetTick>
 8001e28:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001e2e:	d002      	beq.n	8001e36 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <HAL_Delay+0x24>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e36:	f7ff ffed 	bl	8001e14 <HAL_GetTick>
 8001e3a:	1b40      	subs	r0, r0, r5
 8001e3c:	42a0      	cmp	r0, r4
 8001e3e:	d3fa      	bcc.n	8001e36 <HAL_Delay+0x16>
  {
  }
}
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
 8001e42:	bf00      	nop
 8001e44:	20000001 	.word	0x20000001

08001e48 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	db08      	blt.n	8001e5e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	0109      	lsls	r1, r1, #4
 8001e4e:	b2c9      	uxtb	r1, r1
 8001e50:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001e54:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001e58:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001e5c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	f000 000f 	and.w	r0, r0, #15
 8001e62:	0109      	lsls	r1, r1, #4
 8001e64:	b2c9      	uxtb	r1, r1
 8001e66:	4b01      	ldr	r3, [pc, #4]	@ (8001e6c <__NVIC_SetPriority+0x24>)
 8001e68:	5419      	strb	r1, [r3, r0]
  }
}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed14 	.word	0xe000ed14

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e72:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e76:	f1c0 0c07 	rsb	ip, r0, #7
 8001e7a:	f1bc 0f04 	cmp.w	ip, #4
 8001e7e:	bf28      	it	cs
 8001e80:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e84:	1d03      	adds	r3, r0, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d90f      	bls.n	8001eaa <NVIC_EncodePriority+0x3a>
 8001e8a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 3eff 	mov.w	lr, #4294967295
 8001e90:	fa0e f00c 	lsl.w	r0, lr, ip
 8001e94:	ea21 0100 	bic.w	r1, r1, r0
 8001e98:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9a:	fa0e fe03 	lsl.w	lr, lr, r3
 8001e9e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001ea2:	ea41 0002 	orr.w	r0, r1, r2
 8001ea6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e7ee      	b.n	8001e8c <NVIC_EncodePriority+0x1c>
	...

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb0:	4a07      	ldr	r2, [pc, #28]	@ (8001ed0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001eb2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	0200      	lsls	r0, r0, #8
 8001ebe:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001ecc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_NVIC_SetPriority+0x1c>)
 8001eda:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001edc:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001ee0:	f7ff ffc6 	bl	8001e70 <NVIC_EncodePriority>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff ffae 	bl	8001e48 <__NVIC_SetPriority>
}
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	3801      	subs	r0, #1
 8001ef6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001efa:	d20b      	bcs.n	8001f14 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001f00:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	4a05      	ldr	r2, [pc, #20]	@ (8001f18 <HAL_SYSTICK_Config+0x24>)
 8001f04:	21f0      	movs	r1, #240	@ 0xf0
 8001f06:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	2207      	movs	r2, #7
 8001f10:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f12:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f14:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f200 80e9 	bhi.w	80020f6 <HAL_GPIO_Init+0x1da>
{
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	e065      	b.n	8001ff6 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f30:	2403      	movs	r4, #3
 8001f32:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f36:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3a:	68cc      	ldr	r4, [r1, #12]
 8001f3c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f40:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f42:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f46:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4a:	684a      	ldr	r2, [r1, #4]
 8001f4c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001f50:	409a      	lsls	r2, r3
 8001f52:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001f54:	6042      	str	r2, [r0, #4]
 8001f56:	e05c      	b.n	8002012 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f58:	08dc      	lsrs	r4, r3, #3
 8001f5a:	3408      	adds	r4, #8
 8001f5c:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f60:	f003 0507 	and.w	r5, r3, #7
 8001f64:	00ad      	lsls	r5, r5, #2
 8001f66:	f04f 0e0f 	mov.w	lr, #15
 8001f6a:	fa0e fe05 	lsl.w	lr, lr, r5
 8001f6e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f72:	690a      	ldr	r2, [r1, #16]
 8001f74:	40aa      	lsls	r2, r5
 8001f76:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001f7e:	e05c      	b.n	800203a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f80:	2207      	movs	r2, #7
 8001f82:	e000      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
 8001f84:	2200      	movs	r2, #0
 8001f86:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f8a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	3402      	adds	r4, #2
 8001f8e:	4d5a      	ldr	r5, [pc, #360]	@ (80020f8 <HAL_GPIO_Init+0x1dc>)
 8001f90:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f94:	4a59      	ldr	r2, [pc, #356]	@ (80020fc <HAL_GPIO_Init+0x1e0>)
 8001f96:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	ea6f 020c 	mvn.w	r2, ip
 8001f9c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa0:	684e      	ldr	r6, [r1, #4]
 8001fa2:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001fa6:	d001      	beq.n	8001fac <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001fa8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001fac:	4c53      	ldr	r4, [pc, #332]	@ (80020fc <HAL_GPIO_Init+0x1e0>)
 8001fae:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001fb0:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb6:	684e      	ldr	r6, [r1, #4]
 8001fb8:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001fbc:	d001      	beq.n	8001fc2 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001fbe:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001fc2:	4c4e      	ldr	r4, [pc, #312]	@ (80020fc <HAL_GPIO_Init+0x1e0>)
 8001fc4:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001fc6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fcc:	684e      	ldr	r6, [r1, #4]
 8001fce:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001fd2:	d001      	beq.n	8001fd8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001fd4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001fd8:	4c48      	ldr	r4, [pc, #288]	@ (80020fc <HAL_GPIO_Init+0x1e0>)
 8001fda:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fdc:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe0:	684d      	ldr	r5, [r1, #4]
 8001fe2:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001fe6:	d001      	beq.n	8001fec <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001fe8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001fec:	4c43      	ldr	r4, [pc, #268]	@ (80020fc <HAL_GPIO_Init+0x1e0>)
 8001fee:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	d87d      	bhi.n	80020f2 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	680c      	ldr	r4, [r1, #0]
 8001ffc:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002000:	ea32 0404 	bics.w	r4, r2, r4
 8002004:	d1f4      	bne.n	8001ff0 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	684c      	ldr	r4, [r1, #4]
 8002008:	f004 0403 	and.w	r4, r4, #3
 800200c:	3c01      	subs	r4, #1
 800200e:	2c01      	cmp	r4, #1
 8002010:	d98b      	bls.n	8001f2a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002012:	684a      	ldr	r2, [r1, #4]
 8002014:	f002 0203 	and.w	r2, r2, #3
 8002018:	2a03      	cmp	r2, #3
 800201a:	d009      	beq.n	8002030 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800201c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800201e:	005d      	lsls	r5, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	40aa      	lsls	r2, r5
 8002024:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002028:	688a      	ldr	r2, [r1, #8]
 800202a:	40aa      	lsls	r2, r5
 800202c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800202e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002030:	684a      	ldr	r2, [r1, #4]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	2a02      	cmp	r2, #2
 8002038:	d08e      	beq.n	8001f58 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800203a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f20e 	lsl.w	r2, r2, lr
 8002046:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204a:	684a      	ldr	r2, [r1, #4]
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	fa02 f20e 	lsl.w	r2, r2, lr
 8002054:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002056:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002058:	684a      	ldr	r2, [r1, #4]
 800205a:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800205e:	d0c7      	beq.n	8001ff0 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002060:	2200      	movs	r2, #0
 8002062:	9201      	str	r2, [sp, #4]
 8002064:	4a26      	ldr	r2, [pc, #152]	@ (8002100 <HAL_GPIO_Init+0x1e4>)
 8002066:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002068:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800206c:	6454      	str	r4, [r2, #68]	@ 0x44
 800206e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002070:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002078:	089c      	lsrs	r4, r3, #2
 800207a:	1ca5      	adds	r5, r4, #2
 800207c:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <HAL_GPIO_Init+0x1dc>)
 800207e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002082:	f003 0e03 	and.w	lr, r3, #3
 8002086:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f20e 	lsl.w	r2, r2, lr
 8002090:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002094:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <HAL_GPIO_Init+0x1e8>)
 8002096:	4290      	cmp	r0, r2
 8002098:	f43f af74 	beq.w	8001f84 <HAL_GPIO_Init+0x68>
 800209c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020a0:	4290      	cmp	r0, r2
 80020a2:	d01a      	beq.n	80020da <HAL_GPIO_Init+0x1be>
 80020a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020a8:	4290      	cmp	r0, r2
 80020aa:	d018      	beq.n	80020de <HAL_GPIO_Init+0x1c2>
 80020ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020b0:	4290      	cmp	r0, r2
 80020b2:	d016      	beq.n	80020e2 <HAL_GPIO_Init+0x1c6>
 80020b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020b8:	4290      	cmp	r0, r2
 80020ba:	d014      	beq.n	80020e6 <HAL_GPIO_Init+0x1ca>
 80020bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020c0:	4290      	cmp	r0, r2
 80020c2:	d012      	beq.n	80020ea <HAL_GPIO_Init+0x1ce>
 80020c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020c8:	4290      	cmp	r0, r2
 80020ca:	d010      	beq.n	80020ee <HAL_GPIO_Init+0x1d2>
 80020cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020d0:	4290      	cmp	r0, r2
 80020d2:	f43f af55 	beq.w	8001f80 <HAL_GPIO_Init+0x64>
 80020d6:	2208      	movs	r2, #8
 80020d8:	e755      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
 80020da:	2201      	movs	r2, #1
 80020dc:	e753      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
 80020de:	2202      	movs	r2, #2
 80020e0:	e751      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
 80020e2:	2203      	movs	r2, #3
 80020e4:	e74f      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
 80020e6:	2204      	movs	r2, #4
 80020e8:	e74d      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
 80020ea:	2205      	movs	r2, #5
 80020ec:	e74b      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
 80020ee:	2206      	movs	r2, #6
 80020f0:	e749      	b.n	8001f86 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80020f2:	b002      	add	sp, #8
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
 80020f6:	4770      	bx	lr
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40013c00 	.word	0x40013c00
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002108:	6903      	ldr	r3, [r0, #16]
 800210a:	4219      	tst	r1, r3
 800210c:	d001      	beq.n	8002112 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800210e:	2001      	movs	r0, #1
 8002110:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002114:	4770      	bx	lr

08002116 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002116:	b10a      	cbz	r2, 800211c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002118:	6181      	str	r1, [r0, #24]
 800211a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800211c:	0409      	lsls	r1, r1, #16
 800211e:	6181      	str	r1, [r0, #24]
  }
}
 8002120:	4770      	bx	lr

08002122 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800212a:	d101      	bne.n	8002130 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800212c:	2000      	movs	r0, #0
}
 800212e:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002130:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002134:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002136:	2300      	movs	r3, #0
 8002138:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800213a:	2220      	movs	r2, #32
 800213c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002140:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002144:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002146:	f042 0204 	orr.w	r2, r2, #4
 800214a:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 800214c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8002150:	2001      	movs	r0, #1
 8002152:	4770      	bx	lr

08002154 <I2C_WaitOnFlagUntilTimeout>:
{
 8002154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002158:	4606      	mov	r6, r0
 800215a:	460c      	mov	r4, r1
 800215c:	4617      	mov	r7, r2
 800215e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002160:	e03b      	b.n	80021da <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002162:	f7ff fe57 	bl	8001e14 <HAL_GetTick>
 8002166:	9b06      	ldr	r3, [sp, #24]
 8002168:	1ac0      	subs	r0, r0, r3
 800216a:	4540      	cmp	r0, r8
 800216c:	d802      	bhi.n	8002174 <I2C_WaitOnFlagUntilTimeout+0x20>
 800216e:	f1b8 0f00 	cmp.w	r8, #0
 8002172:	d132      	bne.n	80021da <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002174:	2d01      	cmp	r5, #1
 8002176:	d018      	beq.n	80021aa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002178:	6833      	ldr	r3, [r6, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	ea24 0303 	bic.w	r3, r4, r3
 8002180:	b29b      	uxth	r3, r3
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	429f      	cmp	r7, r3
 800218a:	d126      	bne.n	80021da <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800218c:	2300      	movs	r3, #0
 800218e:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002190:	2220      	movs	r2, #32
 8002192:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002196:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800219a:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80021a2:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 80021a6:	2001      	movs	r0, #1
 80021a8:	e027      	b.n	80021fa <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021aa:	6833      	ldr	r3, [r6, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	ea24 0303 	bic.w	r3, r4, r3
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	e7e5      	b.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021bc:	6833      	ldr	r3, [r6, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	ea24 0c03 	bic.w	ip, r4, r3
 80021c4:	fa1f fc8c 	uxth.w	ip, ip
 80021c8:	fabc fc8c 	clz	ip, ip
 80021cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80021d0:	4567      	cmp	r7, ip
 80021d2:	d111      	bne.n	80021f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80021d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80021d8:	d1c3      	bne.n	8002162 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021da:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80021de:	2d01      	cmp	r5, #1
 80021e0:	d0ec      	beq.n	80021bc <I2C_WaitOnFlagUntilTimeout+0x68>
 80021e2:	6833      	ldr	r3, [r6, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	ea24 0c03 	bic.w	ip, r4, r3
 80021ea:	fa1f fc8c 	uxth.w	ip, ip
 80021ee:	fabc fc8c 	clz	ip, ip
 80021f2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80021f6:	e7eb      	b.n	80021d0 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80021f8:	2000      	movs	r0, #0
}
 80021fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80021fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002202:	4605      	mov	r5, r0
 8002204:	460e      	mov	r6, r1
 8002206:	4690      	mov	r8, r2
 8002208:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220a:	e053      	b.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002212:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800221a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800221c:	2300      	movs	r3, #0
 800221e:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002220:	2220      	movs	r2, #32
 8002222:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002226:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800222a:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800222c:	f042 0204 	orr.w	r2, r2, #4
 8002230:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002232:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8002236:	2001      	movs	r0, #1
 8002238:	e04a      	b.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223a:	f7ff fdeb 	bl	8001e14 <HAL_GetTick>
 800223e:	eba0 0009 	sub.w	r0, r0, r9
 8002242:	4540      	cmp	r0, r8
 8002244:	d802      	bhi.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8002246:	f1b8 0f00 	cmp.w	r8, #0
 800224a:	d133      	bne.n	80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800224c:	2f01      	cmp	r7, #1
 800224e:	d017      	beq.n	8002280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	ea26 0303 	bic.w	r3, r6, r3
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b00      	subs	r3, #0
 800225c:	bf18      	it	ne
 800225e:	2301      	movne	r3, #1
 8002260:	b343      	cbz	r3, 80022b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002266:	2220      	movs	r2, #32
 8002268:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002278:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
 800227e:	e027      	b.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	ea26 0303 	bic.w	r3, r6, r3
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b00      	subs	r3, #0
 800228c:	bf18      	it	ne
 800228e:	2301      	movne	r3, #1
 8002290:	e7e6      	b.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	699c      	ldr	r4, [r3, #24]
 8002296:	ea26 0404 	bic.w	r4, r6, r4
 800229a:	b2a4      	uxth	r4, r4
 800229c:	3c00      	subs	r4, #0
 800229e:	bf18      	it	ne
 80022a0:	2401      	movne	r4, #1
 80022a2:	b1a4      	cbz	r4, 80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80022ac:	d1ae      	bne.n	800220c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80022ae:	f1b8 3fff 	cmp.w	r8, #4294967295
 80022b2:	d1c2      	bne.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022b4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80022b8:	2f01      	cmp	r7, #1
 80022ba:	d1ea      	bne.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80022bc:	682b      	ldr	r3, [r5, #0]
 80022be:	695c      	ldr	r4, [r3, #20]
 80022c0:	ea26 0404 	bic.w	r4, r6, r4
 80022c4:	b2a4      	uxth	r4, r4
 80022c6:	3c00      	subs	r4, #0
 80022c8:	bf18      	it	ne
 80022ca:	2401      	movne	r4, #1
 80022cc:	e7e9      	b.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 80022ce:	2000      	movs	r0, #0
}
 80022d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080022d4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	4604      	mov	r4, r0
 80022d8:	460d      	mov	r5, r1
 80022da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022e4:	d121      	bne.n	800232a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e6:	4620      	mov	r0, r4
 80022e8:	f7ff ff1b 	bl	8002122 <I2C_IsAcknowledgeFailed>
 80022ec:	b9f8      	cbnz	r0, 800232e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022f2:	d0f3      	beq.n	80022dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f4:	f7ff fd8e 	bl	8001e14 <HAL_GetTick>
 80022f8:	1b80      	subs	r0, r0, r6
 80022fa:	42a8      	cmp	r0, r5
 80022fc:	d801      	bhi.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80022fe:	2d00      	cmp	r5, #0
 8002300:	d1ec      	bne.n	80022dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800230a:	d1e7      	bne.n	80022dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800230c:	2300      	movs	r3, #0
 800230e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002310:	2220      	movs	r2, #32
 8002312:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002316:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002322:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002326:	2001      	movs	r0, #1
 8002328:	e000      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800232a:	2000      	movs	r0, #0
}
 800232c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
 8002330:	e7fc      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08002334 <I2C_RequestMemoryWrite>:
{
 8002334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002338:	b085      	sub	sp, #20
 800233a:	4604      	mov	r4, r0
 800233c:	460d      	mov	r5, r1
 800233e:	4691      	mov	r9, r2
 8002340:	461f      	mov	r7, r3
 8002342:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8002346:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002348:	6803      	ldr	r3, [r0, #0]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002350:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002352:	9600      	str	r6, [sp, #0]
 8002354:	4643      	mov	r3, r8
 8002356:	2200      	movs	r2, #0
 8002358:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800235c:	f7ff fefa 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 8002360:	b960      	cbnz	r0, 800237c <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002368:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236a:	4633      	mov	r3, r6
 800236c:	4642      	mov	r2, r8
 800236e:	4926      	ldr	r1, [pc, #152]	@ (8002408 <I2C_RequestMemoryWrite+0xd4>)
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff ff44 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002376:	b168      	cbz	r0, 8002394 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
 800237a:	e008      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002384:	d002      	beq.n	800238c <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002386:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800238a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
}
 800238e:	b005      	add	sp, #20
 8002390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	9303      	str	r3, [sp, #12]
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	9203      	str	r2, [sp, #12]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	9303      	str	r3, [sp, #12]
 80023a2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a4:	4632      	mov	r2, r6
 80023a6:	4641      	mov	r1, r8
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff ff93 	bl	80022d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ae:	b930      	cbnz	r0, 80023be <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023b0:	2f01      	cmp	r7, #1
 80023b2:	d10f      	bne.n	80023d4 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	fa5f f689 	uxtb.w	r6, r9
 80023ba:	611e      	str	r6, [r3, #16]
 80023bc:	e7e7      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d001      	beq.n	80023c8 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80023c4:	2001      	movs	r0, #1
 80023c6:	e7e2      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e7f7      	b.n	80023c4 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80023da:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023dc:	4632      	mov	r2, r6
 80023de:	4641      	mov	r1, r8
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff ff77 	bl	80022d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e6:	b920      	cbnz	r0, 80023f2 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	fa5f f689 	uxtb.w	r6, r9
 80023ee:	611e      	str	r6, [r3, #16]
 80023f0:	e7cd      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d001      	beq.n	80023fc <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
 80023fa:	e7c8      	b.n	800238e <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e7f7      	b.n	80023f8 <I2C_RequestMemoryWrite+0xc4>
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f013 0f04 	tst.w	r3, #4
 800241c:	d121      	bne.n	8002462 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fe7f 	bl	8002122 <I2C_IsAcknowledgeFailed>
 8002424:	b9f8      	cbnz	r0, 8002466 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002426:	f1b5 3fff 	cmp.w	r5, #4294967295
 800242a:	d0f3      	beq.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7ff fcf2 	bl	8001e14 <HAL_GetTick>
 8002430:	1b80      	subs	r0, r0, r6
 8002432:	42a8      	cmp	r0, r5
 8002434:	d801      	bhi.n	800243a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002436:	2d00      	cmp	r5, #0
 8002438:	d1ec      	bne.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f013 0f04 	tst.w	r3, #4
 8002442:	d1e7      	bne.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002448:	2220      	movs	r2, #32
 800244a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002454:	f042 0220 	orr.w	r2, r2, #32
 8002458:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800245a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800245e:	2001      	movs	r0, #1
 8002460:	e000      	b.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8002462:	2000      	movs	r0, #0
}
 8002464:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002466:	2001      	movs	r0, #1
 8002468:	e7fc      	b.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
	...

0800246c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800246c:	2800      	cmp	r0, #0
 800246e:	f000 80cc 	beq.w	800260a <HAL_I2C_Init+0x19e>
{
 8002472:	b570      	push	{r4, r5, r6, lr}
 8002474:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002476:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800247a:	2b00      	cmp	r3, #0
 800247c:	d077      	beq.n	800256e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800247e:	2324      	movs	r3, #36	@ 0x24
 8002480:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002484:	6822      	ldr	r2, [r4, #0]
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	6813      	ldr	r3, [r2, #0]
 8002492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002496:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002498:	6822      	ldr	r2, [r4, #0]
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80024a0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a2:	f000 fe59 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024a6:	6862      	ldr	r2, [r4, #4]
 80024a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002614 <HAL_I2C_Init+0x1a8>)
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d864      	bhi.n	8002578 <HAL_I2C_Init+0x10c>
 80024ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002618 <HAL_I2C_Init+0x1ac>)
 80024b0:	4298      	cmp	r0, r3
 80024b2:	bf8c      	ite	hi
 80024b4:	2300      	movhi	r3, #0
 80024b6:	2301      	movls	r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 80a8 	bne.w	800260e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80024be:	4957      	ldr	r1, [pc, #348]	@ (800261c <HAL_I2C_Init+0x1b0>)
 80024c0:	fba1 3100 	umull	r3, r1, r1, r0
 80024c4:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024c6:	6825      	ldr	r5, [r4, #0]
 80024c8:	686a      	ldr	r2, [r5, #4]
 80024ca:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80024ce:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80024d2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024d4:	6821      	ldr	r1, [r4, #0]
 80024d6:	6a0a      	ldr	r2, [r1, #32]
 80024d8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80024dc:	6866      	ldr	r6, [r4, #4]
 80024de:	4d4d      	ldr	r5, [pc, #308]	@ (8002614 <HAL_I2C_Init+0x1a8>)
 80024e0:	42ae      	cmp	r6, r5
 80024e2:	d84f      	bhi.n	8002584 <HAL_I2C_Init+0x118>
 80024e4:	3301      	adds	r3, #1
 80024e6:	4313      	orrs	r3, r2
 80024e8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ea:	6821      	ldr	r1, [r4, #0]
 80024ec:	69ca      	ldr	r2, [r1, #28]
 80024ee:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80024f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024f6:	6865      	ldr	r5, [r4, #4]
 80024f8:	4b46      	ldr	r3, [pc, #280]	@ (8002614 <HAL_I2C_Init+0x1a8>)
 80024fa:	429d      	cmp	r5, r3
 80024fc:	d84c      	bhi.n	8002598 <HAL_I2C_Init+0x12c>
 80024fe:	1e43      	subs	r3, r0, #1
 8002500:	006d      	lsls	r5, r5, #1
 8002502:	fbb3 f3f5 	udiv	r3, r3, r5
 8002506:	3301      	adds	r3, #1
 8002508:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800250c:	4203      	tst	r3, r0
 800250e:	d078      	beq.n	8002602 <HAL_I2C_Init+0x196>
 8002510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002514:	431a      	orrs	r2, r3
 8002516:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002518:	6821      	ldr	r1, [r4, #0]
 800251a:	680b      	ldr	r3, [r1, #0]
 800251c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002520:	69e2      	ldr	r2, [r4, #28]
 8002522:	6a20      	ldr	r0, [r4, #32]
 8002524:	4302      	orrs	r2, r0
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800252a:	6821      	ldr	r1, [r4, #0]
 800252c:	688b      	ldr	r3, [r1, #8]
 800252e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002536:	6922      	ldr	r2, [r4, #16]
 8002538:	68e0      	ldr	r0, [r4, #12]
 800253a:	4302      	orrs	r2, r0
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002540:	6821      	ldr	r1, [r4, #0]
 8002542:	68cb      	ldr	r3, [r1, #12]
 8002544:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002548:	6962      	ldr	r2, [r4, #20]
 800254a:	69a0      	ldr	r0, [r4, #24]
 800254c:	4302      	orrs	r2, r0
 800254e:	4313      	orrs	r3, r2
 8002550:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002552:	6822      	ldr	r2, [r4, #0]
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	2000      	movs	r0, #0
 800255e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002560:	2320      	movs	r3, #32
 8002562:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 800256c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800256e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002572:	f000 f9f1 	bl	8002958 <HAL_I2C_MspInit>
 8002576:	e782      	b.n	800247e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002578:	4b29      	ldr	r3, [pc, #164]	@ (8002620 <HAL_I2C_Init+0x1b4>)
 800257a:	4298      	cmp	r0, r3
 800257c:	bf8c      	ite	hi
 800257e:	2300      	movhi	r3, #0
 8002580:	2301      	movls	r3, #1
 8002582:	e799      	b.n	80024b8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002584:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002588:	fb05 f303 	mul.w	r3, r5, r3
 800258c:	4d25      	ldr	r5, [pc, #148]	@ (8002624 <HAL_I2C_Init+0x1b8>)
 800258e:	fba5 5303 	umull	r5, r3, r5, r3
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	3301      	adds	r3, #1
 8002596:	e7a6      	b.n	80024e6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002598:	68a6      	ldr	r6, [r4, #8]
 800259a:	b9be      	cbnz	r6, 80025cc <HAL_I2C_Init+0x160>
 800259c:	1e43      	subs	r3, r0, #1
 800259e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80025a2:	fbb3 f3fc 	udiv	r3, r3, ip
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	bb43      	cbnz	r3, 8002606 <HAL_I2C_Init+0x19a>
 80025b4:	b9c6      	cbnz	r6, 80025e8 <HAL_I2C_Init+0x17c>
 80025b6:	1e43      	subs	r3, r0, #1
 80025b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025bc:	fbb3 f3f5 	udiv	r3, r3, r5
 80025c0:	3301      	adds	r3, #1
 80025c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ca:	e7a3      	b.n	8002514 <HAL_I2C_Init+0xa8>
 80025cc:	1e43      	subs	r3, r0, #1
 80025ce:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80025d2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80025d6:	fbb3 f3fc 	udiv	r3, r3, ip
 80025da:	3301      	adds	r3, #1
 80025dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	e7e4      	b.n	80025b2 <HAL_I2C_Init+0x146>
 80025e8:	1e43      	subs	r3, r0, #1
 80025ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80025ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80025f2:	fbb3 f3f5 	udiv	r3, r3, r5
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002600:	e788      	b.n	8002514 <HAL_I2C_Init+0xa8>
 8002602:	2304      	movs	r3, #4
 8002604:	e786      	b.n	8002514 <HAL_I2C_Init+0xa8>
 8002606:	2301      	movs	r3, #1
 8002608:	e784      	b.n	8002514 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800260a:	2001      	movs	r0, #1
}
 800260c:	4770      	bx	lr
    return HAL_ERROR;
 800260e:	2001      	movs	r0, #1
 8002610:	e7ac      	b.n	800256c <HAL_I2C_Init+0x100>
 8002612:	bf00      	nop
 8002614:	000186a0 	.word	0x000186a0
 8002618:	001e847f 	.word	0x001e847f
 800261c:	431bde83 	.word	0x431bde83
 8002620:	003d08ff 	.word	0x003d08ff
 8002624:	10624dd3 	.word	0x10624dd3

08002628 <HAL_I2C_Mem_Write>:
{
 8002628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800262c:	b083      	sub	sp, #12
 800262e:	4604      	mov	r4, r0
 8002630:	460f      	mov	r7, r1
 8002632:	4690      	mov	r8, r2
 8002634:	4699      	mov	r9, r3
 8002636:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff fbec 	bl	8001e14 <HAL_GetTick>
 800263c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800263e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002642:	b2c0      	uxtb	r0, r0
 8002644:	2820      	cmp	r0, #32
 8002646:	d003      	beq.n	8002650 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002648:	2002      	movs	r0, #2
}
 800264a:	b003      	add	sp, #12
 800264c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002650:	9500      	str	r5, [sp, #0]
 8002652:	2319      	movs	r3, #25
 8002654:	2201      	movs	r2, #1
 8002656:	494b      	ldr	r1, [pc, #300]	@ (8002784 <HAL_I2C_Mem_Write+0x15c>)
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff fd7b 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 800265e:	2800      	cmp	r0, #0
 8002660:	f040 8089 	bne.w	8002776 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8002664:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	f000 8086 	beq.w	800277a <HAL_I2C_Mem_Write+0x152>
 800266e:	2301      	movs	r3, #1
 8002670:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f012 0f01 	tst.w	r2, #1
 800267c:	d103      	bne.n	8002686 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800268e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002690:	2321      	movs	r3, #33	@ 0x21
 8002692:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002696:	2340      	movs	r3, #64	@ 0x40
 8002698:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269c:	2300      	movs	r3, #0
 800269e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80026a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80026a2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026a4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80026a8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026ac:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ae:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <HAL_I2C_Mem_Write+0x160>)
 80026b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026b2:	9501      	str	r5, [sp, #4]
 80026b4:	9600      	str	r6, [sp, #0]
 80026b6:	464b      	mov	r3, r9
 80026b8:	4642      	mov	r2, r8
 80026ba:	4639      	mov	r1, r7
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff fe39 	bl	8002334 <I2C_RequestMemoryWrite>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d15b      	bne.n	800277e <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80026c6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d035      	beq.n	8002738 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026cc:	462a      	mov	r2, r5
 80026ce:	4631      	mov	r1, r6
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fdff 	bl	80022d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d6:	bb20      	cbnz	r0, 8002722 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80026e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026e2:	1c53      	adds	r3, r2, #1
 80026e4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80026e6:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80026e8:	3901      	subs	r1, #1
 80026ea:	b289      	uxth	r1, r1
 80026ec:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80026ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	6958      	ldr	r0, [r3, #20]
 80026fc:	f010 0f04 	tst.w	r0, #4
 8002700:	d0e1      	beq.n	80026c6 <HAL_I2C_Mem_Write+0x9e>
 8002702:	2900      	cmp	r1, #0
 8002704:	d0df      	beq.n	80026c6 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002706:	7852      	ldrb	r2, [r2, #1]
 8002708:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800270a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002710:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002716:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002720:	e7d1      	b.n	80026c6 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002722:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002724:	2b04      	cmp	r3, #4
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	e78e      	b.n	800264a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	6813      	ldr	r3, [r2, #0]
 8002730:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e7f7      	b.n	8002728 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	462a      	mov	r2, r5
 800273a:	4631      	mov	r1, r6
 800273c:	4620      	mov	r0, r4
 800273e:	f7ff fe65 	bl	800240c <I2C_WaitOnBTFFlagUntilTimeout>
 8002742:	b150      	cbz	r0, 800275a <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002744:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002746:	2b04      	cmp	r3, #4
 8002748:	d001      	beq.n	800274e <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
 800274c:	e77d      	b.n	800264a <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	6822      	ldr	r2, [r4, #0]
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e7f7      	b.n	800274a <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002762:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002764:	2320      	movs	r3, #32
 8002766:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	2300      	movs	r3, #0
 800276c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002770:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002774:	e769      	b.n	800264a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8002776:	2002      	movs	r0, #2
 8002778:	e767      	b.n	800264a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800277a:	2002      	movs	r0, #2
 800277c:	e765      	b.n	800264a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800277e:	2001      	movs	r0, #1
 8002780:	e763      	b.n	800264a <HAL_I2C_Mem_Write+0x22>
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000

0800278c <HAL_I2C_IsDeviceReady>:
{
 800278c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002790:	b085      	sub	sp, #20
 8002792:	4604      	mov	r4, r0
 8002794:	4688      	mov	r8, r1
 8002796:	4691      	mov	r9, r2
 8002798:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800279a:	f7ff fb3b 	bl	8001e14 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800279e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d003      	beq.n	80027b0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80027a8:	2002      	movs	r0, #2
}
 80027aa:	b005      	add	sp, #20
 80027ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027b0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b2:	9000      	str	r0, [sp, #0]
 80027b4:	2319      	movs	r3, #25
 80027b6:	2201      	movs	r2, #1
 80027b8:	4957      	ldr	r1, [pc, #348]	@ (8002918 <HAL_I2C_IsDeviceReady+0x18c>)
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff fcca 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	f040 80a0 	bne.w	8002906 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80027c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f000 809d 	beq.w	800290a <HAL_I2C_IsDeviceReady+0x17e>
 80027d0:	2301      	movs	r3, #1
 80027d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f012 0f01 	tst.w	r2, #1
 80027de:	d103      	bne.n	80027e8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	6813      	ldr	r3, [r2, #0]
 80027ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027f0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f2:	2324      	movs	r3, #36	@ 0x24
 80027f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	2700      	movs	r7, #0
 80027fa:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027fc:	4b47      	ldr	r3, [pc, #284]	@ (800291c <HAL_I2C_IsDeviceReady+0x190>)
 80027fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002800:	e040      	b.n	8002884 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800280a:	d002      	beq.n	8002812 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002810:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8002812:	2003      	movs	r0, #3
 8002814:	e7c9      	b.n	80027aa <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002816:	23a0      	movs	r3, #160	@ 0xa0
 8002818:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800281c:	6822      	ldr	r2, [r4, #0]
 800281e:	6953      	ldr	r3, [r2, #20]
 8002820:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002824:	6952      	ldr	r2, [r2, #20]
 8002826:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800282a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 800282e:	fa5f fc8c 	uxtb.w	ip, ip
 8002832:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8002836:	d009      	beq.n	800284c <HAL_I2C_IsDeviceReady+0xc0>
 8002838:	b943      	cbnz	r3, 800284c <HAL_I2C_IsDeviceReady+0xc0>
 800283a:	b93a      	cbnz	r2, 800284c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800283c:	f7ff faea 	bl	8001e14 <HAL_GetTick>
 8002840:	1b80      	subs	r0, r0, r6
 8002842:	42a8      	cmp	r0, r5
 8002844:	d8e7      	bhi.n	8002816 <HAL_I2C_IsDeviceReady+0x8a>
 8002846:	2d00      	cmp	r5, #0
 8002848:	d1e8      	bne.n	800281c <HAL_I2C_IsDeviceReady+0x90>
 800284a:	e7e4      	b.n	8002816 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 800284c:	2320      	movs	r3, #32
 800284e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	f012 0f02 	tst.w	r2, #2
 800285a:	d131      	bne.n	80028c0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002862:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800286a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800286c:	9600      	str	r6, [sp, #0]
 800286e:	2319      	movs	r3, #25
 8002870:	2201      	movs	r2, #1
 8002872:	4929      	ldr	r1, [pc, #164]	@ (8002918 <HAL_I2C_IsDeviceReady+0x18c>)
 8002874:	4620      	mov	r0, r4
 8002876:	f7ff fc6d 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 800287a:	2800      	cmp	r0, #0
 800287c:	d149      	bne.n	8002912 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 800287e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002880:	454f      	cmp	r7, r9
 8002882:	d238      	bcs.n	80028f6 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	9600      	str	r6, [sp, #0]
 8002890:	462b      	mov	r3, r5
 8002892:	2200      	movs	r2, #0
 8002894:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff fc5b 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 800289e:	2800      	cmp	r0, #0
 80028a0:	d1af      	bne.n	8002802 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 80028a8:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80028aa:	f7ff fab3 	bl	8001e14 <HAL_GetTick>
 80028ae:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028b0:	6822      	ldr	r2, [r4, #0]
 80028b2:	6953      	ldr	r3, [r2, #20]
 80028b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	6952      	ldr	r2, [r2, #20]
 80028ba:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028be:	e7b4      	b.n	800282a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c8:	2300      	movs	r3, #0
 80028ca:	9303      	str	r3, [sp, #12]
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	9203      	str	r2, [sp, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d8:	9600      	str	r6, [sp, #0]
 80028da:	2319      	movs	r3, #25
 80028dc:	2201      	movs	r2, #1
 80028de:	490e      	ldr	r1, [pc, #56]	@ (8002918 <HAL_I2C_IsDeviceReady+0x18c>)
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fc37 	bl	8002154 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	b990      	cbnz	r0, 800290e <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	2320      	movs	r3, #32
 80028ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80028ee:	2300      	movs	r3, #0
 80028f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80028f4:	e759      	b.n	80027aa <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	2320      	movs	r3, #32
 80028f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80028fc:	2300      	movs	r3, #0
 80028fe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8002902:	2001      	movs	r0, #1
 8002904:	e751      	b.n	80027aa <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8002906:	2002      	movs	r0, #2
 8002908:	e74f      	b.n	80027aa <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800290a:	2002      	movs	r0, #2
 800290c:	e74d      	b.n	80027aa <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800290e:	2001      	movs	r0, #1
 8002910:	e74b      	b.n	80027aa <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002912:	2001      	movs	r0, #1
 8002914:	e749      	b.n	80027aa <HAL_I2C_IsDeviceReady+0x1e>
 8002916:	bf00      	nop
 8002918:	00100002 	.word	0x00100002
 800291c:	ffff0000 	.word	0xffff0000

08002920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	2100      	movs	r1, #0
 8002924:	9100      	str	r1, [sp, #0]
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_MspInit+0x34>)
 8002928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800292a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800292e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002932:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002936:	9200      	str	r2, [sp, #0]
 8002938:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	9101      	str	r1, [sp, #4]
 800293c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800293e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002942:	641a      	str	r2, [r3, #64]	@ 0x40
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294e:	b002      	add	sp, #8
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002958:	b530      	push	{r4, r5, lr}
 800295a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	2300      	movs	r3, #0
 800295e:	9303      	str	r3, [sp, #12]
 8002960:	9304      	str	r3, [sp, #16]
 8002962:	9305      	str	r3, [sp, #20]
 8002964:	9306      	str	r3, [sp, #24]
 8002966:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8002968:	6802      	ldr	r2, [r0, #0]
 800296a:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <HAL_I2C_MspInit+0x64>)
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002970:	b009      	add	sp, #36	@ 0x24
 8002972:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	2500      	movs	r5, #0
 8002976:	9501      	str	r5, [sp, #4]
 8002978:	4c11      	ldr	r4, [pc, #68]	@ (80029c0 <HAL_I2C_MspInit+0x68>)
 800297a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6323      	str	r3, [r4, #48]	@ 0x30
 8002982:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800298c:	23c0      	movs	r3, #192	@ 0xc0
 800298e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002990:	2312      	movs	r3, #18
 8002992:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002998:	2304      	movs	r3, #4
 800299a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	a903      	add	r1, sp, #12
 800299e:	4809      	ldr	r0, [pc, #36]	@ (80029c4 <HAL_I2C_MspInit+0x6c>)
 80029a0:	f7ff fabc 	bl	8001f1c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a4:	9502      	str	r5, [sp, #8]
 80029a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029ac:	6423      	str	r3, [r4, #64]	@ 0x40
 80029ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b4:	9302      	str	r3, [sp, #8]
 80029b6:	9b02      	ldr	r3, [sp, #8]
}
 80029b8:	e7da      	b.n	8002970 <HAL_I2C_MspInit+0x18>
 80029ba:	bf00      	nop
 80029bc:	40005400 	.word	0x40005400
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020400 	.word	0x40020400

080029c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80029c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ca:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	2300      	movs	r3, #0
 80029ce:	9303      	str	r3, [sp, #12]
 80029d0:	9304      	str	r3, [sp, #16]
 80029d2:	9305      	str	r3, [sp, #20]
 80029d4:	9306      	str	r3, [sp, #24]
 80029d6:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 80029d8:	6802      	ldr	r2, [r0, #0]
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <HAL_SD_MspInit+0x94>)
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_SD_MspInit+0x1c>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80029e0:	b009      	add	sp, #36	@ 0x24
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 80029e4:	2400      	movs	r4, #0
 80029e6:	9400      	str	r4, [sp, #0]
 80029e8:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80029ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80029f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029fa:	9200      	str	r2, [sp, #0]
 80029fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	9401      	str	r4, [sp, #4]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a02:	f042 0204 	orr.w	r2, r2, #4
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0a:	f002 0204 	and.w	r2, r2, #4
 8002a0e:	9201      	str	r2, [sp, #4]
 8002a10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a12:	9402      	str	r4, [sp, #8]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a16:	f042 0208 	orr.w	r2, r2, #8
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	9302      	str	r3, [sp, #8]
 8002a24:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002a26:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002a2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2702      	movs	r7, #2
 8002a2e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2603      	movs	r6, #3
 8002a32:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a34:	250c      	movs	r5, #12
 8002a36:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a38:	eb0d 0105 	add.w	r1, sp, r5
 8002a3c:	4808      	ldr	r0, [pc, #32]	@ (8002a60 <HAL_SD_MspInit+0x98>)
 8002a3e:	f7ff fa6d 	bl	8001f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a42:	2304      	movs	r3, #4
 8002a44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a4c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4e:	eb0d 0105 	add.w	r1, sp, r5
 8002a52:	4804      	ldr	r0, [pc, #16]	@ (8002a64 <HAL_SD_MspInit+0x9c>)
 8002a54:	f7ff fa62 	bl	8001f1c <HAL_GPIO_Init>
}
 8002a58:	e7c2      	b.n	80029e0 <HAL_SD_MspInit+0x18>
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00

08002a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a68:	b500      	push	{lr}
 8002a6a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9303      	str	r3, [sp, #12]
 8002a70:	9304      	str	r3, [sp, #16]
 8002a72:	9305      	str	r3, [sp, #20]
 8002a74:	9306      	str	r3, [sp, #24]
 8002a76:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8002a78:	6802      	ldr	r2, [r0, #0]
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_SPI_MspInit+0x68>)
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d002      	beq.n	8002a86 <HAL_SPI_MspInit+0x1e>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a80:	b009      	add	sp, #36	@ 0x24
 8002a82:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a86:	2100      	movs	r1, #0
 8002a88:	9101      	str	r1, [sp, #4]
 8002a8a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a98:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002a9c:	9201      	str	r2, [sp, #4]
 8002a9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	9102      	str	r1, [sp, #8]
 8002aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8002ab4:	23e0      	movs	r3, #224	@ 0xe0
 8002ab6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ac0:	2305      	movs	r3, #5
 8002ac2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	a903      	add	r1, sp, #12
 8002ac6:	4803      	ldr	r0, [pc, #12]	@ (8002ad4 <HAL_SPI_MspInit+0x6c>)
 8002ac8:	f7ff fa28 	bl	8001f1c <HAL_GPIO_Init>
}
 8002acc:	e7d8      	b.n	8002a80 <HAL_SPI_MspInit+0x18>
 8002ace:	bf00      	nop
 8002ad0:	40013000 	.word	0x40013000
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad8:	b500      	push	{lr}
 8002ada:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	2300      	movs	r3, #0
 8002ade:	9303      	str	r3, [sp, #12]
 8002ae0:	9304      	str	r3, [sp, #16]
 8002ae2:	9305      	str	r3, [sp, #20]
 8002ae4:	9306      	str	r3, [sp, #24]
 8002ae6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8002ae8:	6802      	ldr	r2, [r0, #0]
 8002aea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002aee:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d002      	beq.n	8002afc <HAL_UART_MspInit+0x24>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002af6:	b009      	add	sp, #36	@ 0x24
 8002af8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002afc:	2100      	movs	r1, #0
 8002afe:	9101      	str	r1, [sp, #4]
 8002b00:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8002b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b06:	f042 0210 	orr.w	r2, r2, #16
 8002b0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b0e:	f002 0210 	and.w	r2, r2, #16
 8002b12:	9201      	str	r2, [sp, #4]
 8002b14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	9102      	str	r1, [sp, #8]
 8002b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	9302      	str	r3, [sp, #8]
 8002b28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TXD_Pin|RXD_Pin;
 8002b2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b38:	2307      	movs	r3, #7
 8002b3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	a903      	add	r1, sp, #12
 8002b3e:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <HAL_UART_MspInit+0x70>)
 8002b40:	f7ff f9ec 	bl	8001f1c <HAL_GPIO_Init>
}
 8002b44:	e7d7      	b.n	8002af6 <HAL_UART_MspInit+0x1e>
 8002b46:	bf00      	nop
 8002b48:	40020000 	.word	0x40020000

08002b4c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	f000 81e0 	beq.w	8002f12 <HAL_RCC_OscConfig+0x3c6>
{
 8002b52:	b570      	push	{r4, r5, r6, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	f013 0f01 	tst.w	r3, #1
 8002b5e:	d03b      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b60:	4b9f      	ldr	r3, [pc, #636]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d02c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d021      	beq.n	8002bbc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b78:	6863      	ldr	r3, [r4, #4]
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b7e:	d04f      	beq.n	8002c20 <HAL_RCC_OscConfig+0xd4>
 8002b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b84:	d052      	beq.n	8002c2c <HAL_RCC_OscConfig+0xe0>
 8002b86:	4b96      	ldr	r3, [pc, #600]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b98:	6863      	ldr	r3, [r4, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d050      	beq.n	8002c40 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7ff f939 	bl	8001e14 <HAL_GetTick>
 8002ba2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002bac:	d114      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bae:	f7ff f931 	bl	8001e14 <HAL_GetTick>
 8002bb2:	1b40      	subs	r0, r0, r5
 8002bb4:	2864      	cmp	r0, #100	@ 0x64
 8002bb6:	d9f5      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002bb8:	2003      	movs	r0, #3
 8002bba:	e1b1      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbc:	4b88      	ldr	r3, [pc, #544]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002bc4:	d0d8      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc6:	4b86      	ldr	r3, [pc, #536]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002bce:	d003      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x8c>
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 819f 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f013 0f02 	tst.w	r3, #2
 8002bde:	d054      	beq.n	8002c8a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002be0:	4b7f      	ldr	r3, [pc, #508]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f013 0f0c 	tst.w	r3, #12
 8002be8:	d03e      	beq.n	8002c68 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bea:	4b7d      	ldr	r3, [pc, #500]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d033      	beq.n	8002c5e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bf6:	68e3      	ldr	r3, [r4, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d068      	beq.n	8002cce <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfc:	4b79      	ldr	r3, [pc, #484]	@ (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7ff f907 	bl	8001e14 <HAL_GetTick>
 8002c06:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	4b75      	ldr	r3, [pc, #468]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f013 0f02 	tst.w	r3, #2
 8002c10:	d154      	bne.n	8002cbc <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff f8ff 	bl	8001e14 <HAL_GetTick>
 8002c16:	1b40      	subs	r0, r0, r5
 8002c18:	2802      	cmp	r0, #2
 8002c1a:	d9f5      	bls.n	8002c08 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	e17f      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c20:	4a6f      	ldr	r2, [pc, #444]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e7b5      	b.n	8002b98 <HAL_RCC_OscConfig+0x4c>
 8002c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e7ab      	b.n	8002b98 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002c40:	f7ff f8e8 	bl	8001e14 <HAL_GetTick>
 8002c44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	4b66      	ldr	r3, [pc, #408]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002c4e:	d0c3      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff f8e0 	bl	8001e14 <HAL_GetTick>
 8002c54:	1b40      	subs	r0, r0, r5
 8002c56:	2864      	cmp	r0, #100	@ 0x64
 8002c58:	d9f5      	bls.n	8002c46 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002c5a:	2003      	movs	r0, #3
 8002c5c:	e160      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b60      	ldr	r3, [pc, #384]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002c66:	d1c6      	bne.n	8002bf6 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c68:	4b5d      	ldr	r3, [pc, #372]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f013 0f02 	tst.w	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_OscConfig+0x12e>
 8002c72:	68e3      	ldr	r3, [r4, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 8150 	bne.w	8002f1a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4a59      	ldr	r2, [pc, #356]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002c82:	6921      	ldr	r1, [r4, #16]
 8002c84:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c88:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	f013 0f08 	tst.w	r3, #8
 8002c90:	d042      	beq.n	8002d18 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c92:	6963      	ldr	r3, [r4, #20]
 8002c94:	b36b      	cbz	r3, 8002cf2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c96:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7ff f8b9 	bl	8001e14 <HAL_GetTick>
 8002ca2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca4:	4b4e      	ldr	r3, [pc, #312]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca8:	f013 0f02 	tst.w	r3, #2
 8002cac:	d134      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cae:	f7ff f8b1 	bl	8001e14 <HAL_GetTick>
 8002cb2:	1b40      	subs	r0, r0, r5
 8002cb4:	2802      	cmp	r0, #2
 8002cb6:	d9f5      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002cb8:	2003      	movs	r0, #3
 8002cba:	e131      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4a48      	ldr	r2, [pc, #288]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002cbe:	6813      	ldr	r3, [r2, #0]
 8002cc0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002cc4:	6921      	ldr	r1, [r4, #16]
 8002cc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e7dd      	b.n	8002c8a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002cce:	4b45      	ldr	r3, [pc, #276]	@ (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f89e 	bl	8001e14 <HAL_GetTick>
 8002cd8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f013 0f02 	tst.w	r3, #2
 8002ce2:	d0d2      	beq.n	8002c8a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f896 	bl	8001e14 <HAL_GetTick>
 8002ce8:	1b40      	subs	r0, r0, r5
 8002cea:	2802      	cmp	r0, #2
 8002cec:	d9f5      	bls.n	8002cda <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002cee:	2003      	movs	r0, #3
 8002cf0:	e116      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8002de4 <HAL_RCC_OscConfig+0x298>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff f88b 	bl	8001e14 <HAL_GetTick>
 8002cfe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d04:	f013 0f02 	tst.w	r3, #2
 8002d08:	d006      	beq.n	8002d18 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7ff f883 	bl	8001e14 <HAL_GetTick>
 8002d0e:	1b40      	subs	r0, r0, r5
 8002d10:	2802      	cmp	r0, #2
 8002d12:	d9f5      	bls.n	8002d00 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002d14:	2003      	movs	r0, #3
 8002d16:	e103      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f013 0f04 	tst.w	r3, #4
 8002d1e:	d077      	beq.n	8002e10 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d20:	4b2f      	ldr	r3, [pc, #188]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002d28:	d133      	bne.n	8002d92 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d32:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d42:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <HAL_RCC_OscConfig+0x29c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002d4c:	d023      	beq.n	8002d96 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	68a3      	ldr	r3, [r4, #8]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d034      	beq.n	8002dbe <HAL_RCC_OscConfig+0x272>
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d038      	beq.n	8002dca <HAL_RCC_OscConfig+0x27e>
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002d5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	671a      	str	r2, [r3, #112]	@ 0x70
 8002d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d64:	f022 0204 	bic.w	r2, r2, #4
 8002d68:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d6a:	68a3      	ldr	r3, [r4, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03d      	beq.n	8002dec <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7ff f850 	bl	8001e14 <HAL_GetTick>
 8002d74:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	f013 0f02 	tst.w	r3, #2
 8002d7e:	d146      	bne.n	8002e0e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7ff f848 	bl	8001e14 <HAL_GetTick>
 8002d84:	1b80      	subs	r0, r0, r6
 8002d86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d8a:	4298      	cmp	r0, r3
 8002d8c:	d9f3      	bls.n	8002d76 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002d8e:	2003      	movs	r0, #3
 8002d90:	e0c6      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2500      	movs	r5, #0
 8002d94:	e7d6      	b.n	8002d44 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4a14      	ldr	r2, [pc, #80]	@ (8002de8 <HAL_RCC_OscConfig+0x29c>)
 8002d98:	6813      	ldr	r3, [r2, #0]
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002da0:	f7ff f838 	bl	8001e14 <HAL_GetTick>
 8002da4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b10      	ldr	r3, [pc, #64]	@ (8002de8 <HAL_RCC_OscConfig+0x29c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002dae:	d1ce      	bne.n	8002d4e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db0:	f7ff f830 	bl	8001e14 <HAL_GetTick>
 8002db4:	1b80      	subs	r0, r0, r6
 8002db6:	2802      	cmp	r0, #2
 8002db8:	d9f5      	bls.n	8002da6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002dba:	2003      	movs	r0, #3
 8002dbc:	e0b0      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	4a08      	ldr	r2, [pc, #32]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002dc0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc8:	e7cf      	b.n	8002d6a <HAL_RCC_OscConfig+0x21e>
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_OscConfig+0x294>)
 8002dcc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dce:	f042 0204 	orr.w	r2, r2, #4
 8002dd2:	671a      	str	r2, [r3, #112]	@ 0x70
 8002dd4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	671a      	str	r2, [r3, #112]	@ 0x70
 8002ddc:	e7c5      	b.n	8002d6a <HAL_RCC_OscConfig+0x21e>
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470000 	.word	0x42470000
 8002de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7ff f812 	bl	8001e14 <HAL_GetTick>
 8002df0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	4b52      	ldr	r3, [pc, #328]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	f013 0f02 	tst.w	r3, #2
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f80a 	bl	8001e14 <HAL_GetTick>
 8002e00:	1b80      	subs	r0, r0, r6
 8002e02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e06:	4298      	cmp	r0, r3
 8002e08:	d9f3      	bls.n	8002df2 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002e0a:	2003      	movs	r0, #3
 8002e0c:	e088      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e0e:	b9ed      	cbnz	r5, 8002e4c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e10:	69a3      	ldr	r3, [r4, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8083 	beq.w	8002f1e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e18:	4a48      	ldr	r2, [pc, #288]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002e1a:	6892      	ldr	r2, [r2, #8]
 8002e1c:	f002 020c 	and.w	r2, r2, #12
 8002e20:	2a08      	cmp	r2, #8
 8002e22:	d051      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d017      	beq.n	8002e58 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b45      	ldr	r3, [pc, #276]	@ (8002f40 <HAL_RCC_OscConfig+0x3f4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fff1 	bl	8001e14 <HAL_GetTick>
 8002e32:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e34:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002e3c:	d042      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe ffe9 	bl	8001e14 <HAL_GetTick>
 8002e42:	1b00      	subs	r0, r0, r4
 8002e44:	2802      	cmp	r0, #2
 8002e46:	d9f5      	bls.n	8002e34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e48:	2003      	movs	r0, #3
 8002e4a:	e069      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002e4e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e56:	e7db      	b.n	8002e10 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b39      	ldr	r3, [pc, #228]	@ (8002f40 <HAL_RCC_OscConfig+0x3f4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002e5e:	f7fe ffd9 	bl	8001e14 <HAL_GetTick>
 8002e62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e64:	4b35      	ldr	r3, [pc, #212]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002e6c:	d006      	beq.n	8002e7c <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe ffd1 	bl	8001e14 <HAL_GetTick>
 8002e72:	1b40      	subs	r0, r0, r5
 8002e74:	2802      	cmp	r0, #2
 8002e76:	d9f5      	bls.n	8002e64 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002e78:	2003      	movs	r0, #3
 8002e7a:	e051      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7c:	69e3      	ldr	r3, [r4, #28]
 8002e7e:	6a22      	ldr	r2, [r4, #32]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002e84:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e88:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002e8a:	0852      	lsrs	r2, r2, #1
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002e94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e98:	4a28      	ldr	r2, [pc, #160]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002e9a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <HAL_RCC_OscConfig+0x3f4>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002ea2:	f7fe ffb7 	bl	8001e14 <HAL_GetTick>
 8002ea6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea8:	4b24      	ldr	r3, [pc, #144]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fe ffaf 	bl	8001e14 <HAL_GetTick>
 8002eb6:	1b00      	subs	r0, r0, r4
 8002eb8:	2802      	cmp	r0, #2
 8002eba:	d9f5      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	e02f      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	e02d      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	e02b      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d02b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x3f0>)
 8002ece:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002ed4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed6:	4291      	cmp	r1, r2
 8002ed8:	d126      	bne.n	8002f28 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ede:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	428a      	cmp	r2, r1
 8002ee2:	d123      	bne.n	8002f2c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002eea:	401a      	ands	r2, r3
 8002eec:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ef0:	d11e      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002ef6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ef8:	0852      	lsrs	r2, r2, #1
 8002efa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002f00:	d118      	bne.n	8002f34 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f02:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002f06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002f0c:	d114      	bne.n	8002f38 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e006      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002f12:	2001      	movs	r0, #1
}
 8002f14:	4770      	bx	lr
        return HAL_ERROR;
 8002f16:	2001      	movs	r0, #1
 8002f18:	e002      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002f1e:	2000      	movs	r0, #0
}
 8002f20:	b002      	add	sp, #8
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002f24:	2001      	movs	r0, #1
 8002f26:	e7fb      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002f28:	2001      	movs	r0, #1
 8002f2a:	e7f9      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	e7f7      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
 8002f30:	2001      	movs	r0, #1
 8002f32:	e7f5      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
 8002f34:	2001      	movs	r0, #1
 8002f36:	e7f3      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
 8002f38:	2001      	movs	r0, #1
 8002f3a:	e7f1      	b.n	8002f20 <HAL_RCC_OscConfig+0x3d4>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000

08002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f46:	4b26      	ldr	r3, [pc, #152]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d041      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x92>
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d141      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f56:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002f64:	d012      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f66:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f6e:	481d      	ldr	r0, [pc, #116]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f70:	2300      	movs	r3, #0
 8002f72:	fba1 0100 	umull	r0, r1, r1, r0
 8002f76:	f7fd fe67 	bl	8000c48 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f7a:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002f86:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f8a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f8e:	6858      	ldr	r0, [r3, #4]
 8002f90:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f94:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002f98:	ebbc 0c00 	subs.w	ip, ip, r0
 8002f9c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002fa0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002fa4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002fa8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002fac:	ebb1 010c 	subs.w	r1, r1, ip
 8002fb0:	eb63 030e 	sbc.w	r3, r3, lr
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fba:	00c9      	lsls	r1, r1, #3
 8002fbc:	eb11 0c00 	adds.w	ip, r1, r0
 8002fc0:	f143 0300 	adc.w	r3, r3, #0
 8002fc4:	0299      	lsls	r1, r3, #10
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002fcc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002fd0:	f7fd fe3a 	bl	8000c48 <__aeabi_uldivmod>
 8002fd4:	e7d1      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002fd6:	4803      	ldr	r0, [pc, #12]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fd8:	e7d7      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fda:	4803      	ldr	r0, [pc, #12]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002fdc:	e7d5      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x46>
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	017d7840 	.word	0x017d7840
 8002fe8:	00f42400 	.word	0x00f42400

08002fec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f000 809b 	beq.w	8003128 <HAL_RCC_ClockConfig+0x13c>
{
 8002ff2:	b570      	push	{r4, r5, r6, lr}
 8002ff4:	460d      	mov	r5, r1
 8002ff6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8003138 <HAL_RCC_ClockConfig+0x14c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	428b      	cmp	r3, r1
 8003002:	d208      	bcs.n	8003016 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003004:	b2cb      	uxtb	r3, r1
 8003006:	4a4c      	ldr	r2, [pc, #304]	@ (8003138 <HAL_RCC_ClockConfig+0x14c>)
 8003008:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	428b      	cmp	r3, r1
 8003012:	f040 808b 	bne.w	800312c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	f013 0f02 	tst.w	r3, #2
 800301c:	d017      	beq.n	800304e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301e:	f013 0f04 	tst.w	r3, #4
 8003022:	d004      	beq.n	800302e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003024:	4a45      	ldr	r2, [pc, #276]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 8003026:	6893      	ldr	r3, [r2, #8]
 8003028:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800302c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	f013 0f08 	tst.w	r3, #8
 8003034:	d004      	beq.n	8003040 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003036:	4a41      	ldr	r2, [pc, #260]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 8003038:	6893      	ldr	r3, [r2, #8]
 800303a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4a3e      	ldr	r2, [pc, #248]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 8003042:	6893      	ldr	r3, [r2, #8]
 8003044:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003048:	68a1      	ldr	r1, [r4, #8]
 800304a:	430b      	orrs	r3, r1
 800304c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	f013 0f01 	tst.w	r3, #1
 8003054:	d032      	beq.n	80030bc <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d021      	beq.n	80030a0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305c:	1e9a      	subs	r2, r3, #2
 800305e:	2a01      	cmp	r2, #1
 8003060:	d925      	bls.n	80030ae <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003062:	4a36      	ldr	r2, [pc, #216]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	f012 0f02 	tst.w	r2, #2
 800306a:	d061      	beq.n	8003130 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306c:	4933      	ldr	r1, [pc, #204]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 800306e:	688a      	ldr	r2, [r1, #8]
 8003070:	f022 0203 	bic.w	r2, r2, #3
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003078:	f7fe fecc 	bl	8001e14 <HAL_GetTick>
 800307c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800308c:	d016      	beq.n	80030bc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308e:	f7fe fec1 	bl	8001e14 <HAL_GetTick>
 8003092:	1b80      	subs	r0, r0, r6
 8003094:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003098:	4298      	cmp	r0, r3
 800309a:	d9f0      	bls.n	800307e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800309c:	2003      	movs	r0, #3
 800309e:	e042      	b.n	8003126 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a0:	4a26      	ldr	r2, [pc, #152]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80030a8:	d1e0      	bne.n	800306c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80030aa:	2001      	movs	r0, #1
 80030ac:	e03b      	b.n	8003126 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ae:	4a23      	ldr	r2, [pc, #140]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80030b6:	d1d9      	bne.n	800306c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80030b8:	2001      	movs	r0, #1
 80030ba:	e034      	b.n	8003126 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <HAL_RCC_ClockConfig+0x14c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	42ab      	cmp	r3, r5
 80030c6:	d907      	bls.n	80030d8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c8:	b2ea      	uxtb	r2, r5
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCC_ClockConfig+0x14c>)
 80030cc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	42ab      	cmp	r3, r5
 80030d6:	d12d      	bne.n	8003134 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f013 0f04 	tst.w	r3, #4
 80030de:	d006      	beq.n	80030ee <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4a16      	ldr	r2, [pc, #88]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 80030e2:	6893      	ldr	r3, [r2, #8]
 80030e4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80030e8:	68e1      	ldr	r1, [r4, #12]
 80030ea:	430b      	orrs	r3, r1
 80030ec:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	f013 0f08 	tst.w	r3, #8
 80030f4:	d007      	beq.n	8003106 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f6:	4a11      	ldr	r2, [pc, #68]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 80030f8:	6893      	ldr	r3, [r2, #8]
 80030fa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80030fe:	6921      	ldr	r1, [r4, #16]
 8003100:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003104:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003106:	f7ff ff1d 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_RCC_ClockConfig+0x150>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003112:	4a0b      	ldr	r2, [pc, #44]	@ (8003140 <HAL_RCC_ClockConfig+0x154>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	40d8      	lsrs	r0, r3
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <HAL_RCC_ClockConfig+0x158>)
 800311a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800311c:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <HAL_RCC_ClockConfig+0x15c>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	f7fe fe2c 	bl	8001d7c <HAL_InitTick>
  return HAL_OK;
 8003124:	2000      	movs	r0, #0
}
 8003126:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003128:	2001      	movs	r0, #1
}
 800312a:	4770      	bx	lr
      return HAL_ERROR;
 800312c:	2001      	movs	r0, #1
 800312e:	e7fa      	b.n	8003126 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003130:	2001      	movs	r0, #1
 8003132:	e7f8      	b.n	8003126 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003134:	2001      	movs	r0, #1
 8003136:	e7f6      	b.n	8003126 <HAL_RCC_ClockConfig+0x13a>
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	08009908 	.word	0x08009908
 8003144:	20000008 	.word	0x20000008
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800314c:	4b01      	ldr	r3, [pc, #4]	@ (8003154 <HAL_RCC_GetHCLKFreq+0x8>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000008 	.word	0x20000008

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800315a:	f7ff fff7 	bl	800314c <HAL_RCC_GetHCLKFreq>
 800315e:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003166:	4a03      	ldr	r2, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
}
 800316a:	40d8      	lsrs	r0, r3
 800316c:	bd08      	pop	{r3, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	08009900 	.word	0x08009900

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800317a:	f7ff ffe7 	bl	800314c <HAL_RCC_GetHCLKFreq>
 800317e:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003186:	4a03      	ldr	r2, [pc, #12]	@ (8003194 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003188:	5cd3      	ldrb	r3, [r2, r3]
}
 800318a:	40d8      	lsrs	r0, r3
 800318c:	bd08      	pop	{r3, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	08009900 	.word	0x08009900

08003198 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	f001 faad 	bl	8004702 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80031a8:	4605      	mov	r5, r0
 80031aa:	b110      	cbz	r0, 80031b2 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 80031ac:	4628      	mov	r0, r5
 80031ae:	b002      	add	sp, #8
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80031b2:	6820      	ldr	r0, [r4, #0]
 80031b4:	f001 fd6e 	bl	8004c94 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80031b8:	b938      	cbnz	r0, 80031ca <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80031ba:	2301      	movs	r3, #1
 80031bc:	64a3      	str	r3, [r4, #72]	@ 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80031be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d00b      	beq.n	80031dc <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80031c4:	462e      	mov	r6, r5
 80031c6:	4628      	mov	r0, r5
 80031c8:	e014      	b.n	80031f4 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80031ca:	2300      	movs	r3, #0
 80031cc:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80031ce:	6820      	ldr	r0, [r4, #0]
 80031d0:	f001 fa97 	bl	8004702 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d0f2      	beq.n	80031be <SD_PowerON+0x26>
      return errorstate;
 80031d8:	4605      	mov	r5, r0
 80031da:	e7e7      	b.n	80031ac <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80031dc:	2100      	movs	r1, #0
 80031de:	6820      	ldr	r0, [r4, #0]
 80031e0:	f001 fbf6 	bl	80049d0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d0ed      	beq.n	80031c4 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80031ec:	e7de      	b.n	80031ac <SD_PowerON+0x14>
    count++;
 80031ee:	9b01      	ldr	r3, [sp, #4]
 80031f0:	3301      	adds	r3, #1
 80031f2:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80031f4:	9a01      	ldr	r2, [sp, #4]
 80031f6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d813      	bhi.n	8003226 <SD_PowerON+0x8e>
 80031fe:	b996      	cbnz	r6, 8003226 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003200:	2100      	movs	r1, #0
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	f001 fbe4 	bl	80049d0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003208:	b9e0      	cbnz	r0, 8003244 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800320a:	4912      	ldr	r1, [pc, #72]	@ (8003254 <SD_PowerON+0xbc>)
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	f001 fc8d 	bl	8004b2c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003212:	4606      	mov	r6, r0
 8003214:	b9c0      	cbnz	r0, 8003248 <SD_PowerON+0xb0>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003216:	2100      	movs	r1, #0
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	f001 fa5d 	bl	80046d8 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800321e:	0fc3      	lsrs	r3, r0, #31
 8003220:	d0e5      	beq.n	80031ee <SD_PowerON+0x56>
 8003222:	461e      	mov	r6, r3
 8003224:	e7e3      	b.n	80031ee <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003226:	9a01      	ldr	r2, [sp, #4]
 8003228:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800322c:	429a      	cmp	r2, r3
 800322e:	d80e      	bhi.n	800324e <SD_PowerON+0xb6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003230:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 8003234:	d002      	beq.n	800323c <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003236:	2301      	movs	r3, #1
 8003238:	6463      	str	r3, [r4, #68]	@ 0x44
 800323a:	e7b7      	b.n	80031ac <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDSC;
 800323c:	2200      	movs	r2, #0
 800323e:	6462      	str	r2, [r4, #68]	@ 0x44
  return HAL_SD_ERROR_NONE;
 8003240:	461d      	mov	r5, r3
 8003242:	e7b3      	b.n	80031ac <SD_PowerON+0x14>
      return errorstate;
 8003244:	4605      	mov	r5, r0
 8003246:	e7b1      	b.n	80031ac <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003248:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800324c:	e7ae      	b.n	80031ac <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800324e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8003252:	e7ab      	b.n	80031ac <SD_PowerON+0x14>
 8003254:	c1100000 	.word	0xc1100000

08003258 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003258:	b570      	push	{r4, r5, r6, lr}
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800325a:	b181      	cbz	r1, 800327e <SD_SendStatus+0x26>
 800325c:	4604      	mov	r4, r0
 800325e:	460e      	mov	r6, r1
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003260:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003262:	0409      	lsls	r1, r1, #16
 8003264:	6800      	ldr	r0, [r0, #0]
 8003266:	f001 fbcb 	bl	8004a00 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800326a:	4605      	mov	r5, r0
 800326c:	b108      	cbz	r0, 8003272 <SD_SendStatus+0x1a>

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);

  return HAL_SD_ERROR_NONE;
}
 800326e:	4628      	mov	r0, r5
 8003270:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003272:	2100      	movs	r1, #0
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	f001 fa2f 	bl	80046d8 <SDIO_GetResponse>
 800327a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800327c:	e7f7      	b.n	800326e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800327e:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 8003282:	e7f4      	b.n	800326e <SD_SendStatus+0x16>

08003284 <HAL_SD_ReadBlocks>:
{
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	b087      	sub	sp, #28
 800328a:	4605      	mov	r5, r0
 800328c:	460c      	mov	r4, r1
 800328e:	4616      	mov	r6, r2
 8003290:	469b      	mov	fp, r3
 8003292:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8003296:	f7fe fdbd 	bl	8001e14 <HAL_GetTick>
  if(NULL == pData)
 800329a:	2c00      	cmp	r4, #0
 800329c:	d036      	beq.n	800330c <HAL_SD_ReadBlocks+0x88>
 800329e:	4681      	mov	r9, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80032a0:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 80032a4:	b2ff      	uxtb	r7, r7
 80032a6:	2f01      	cmp	r7, #1
 80032a8:	f040 8109 	bne.w	80034be <HAL_SD_ReadBlocks+0x23a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032b0:	eb06 030b 	add.w	r3, r6, fp
 80032b4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d82e      	bhi.n	8003318 <HAL_SD_ReadBlocks+0x94>
    hsd->State = HAL_SD_STATE_BUSY;
 80032ba:	2303      	movs	r3, #3
 80032bc:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 80032c0:	682b      	ldr	r3, [r5, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032c6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d000      	beq.n	80032ce <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 80032cc:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032d4:	ea4f 234b 	mov.w	r3, fp, lsl #9
 80032d8:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032da:	2390      	movs	r3, #144	@ 0x90
 80032dc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80032de:	2302      	movs	r3, #2
 80032e0:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80032ea:	4669      	mov	r1, sp
 80032ec:	6828      	ldr	r0, [r5, #0]
 80032ee:	f001 f9f6 	bl	80046de <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80032f2:	f1bb 0f01 	cmp.w	fp, #1
 80032f6:	d914      	bls.n	8003322 <HAL_SD_ReadBlocks+0x9e>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80032f8:	2302      	movs	r3, #2
 80032fa:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80032fc:	4631      	mov	r1, r6
 80032fe:	6828      	ldr	r0, [r5, #0]
 8003300:	f001 faec 	bl	80048dc <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003304:	b9a0      	cbnz	r0, 8003330 <HAL_SD_ReadBlocks+0xac>
    dataremaining = config.DataLength;
 8003306:	f8dd 8004 	ldr.w	r8, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800330a:	e038      	b.n	800337e <HAL_SD_ReadBlocks+0xfa>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800330c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800330e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003312:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8003314:	2701      	movs	r7, #1
 8003316:	e0d7      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003318:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800331a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800331e:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 8003320:	e0d2      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003322:	2301      	movs	r3, #1
 8003324:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003326:	4631      	mov	r1, r6
 8003328:	6828      	ldr	r0, [r5, #0]
 800332a:	f001 fabf 	bl	80048ac <SDMMC_CmdReadSingleBlock>
 800332e:	e7e9      	b.n	8003304 <HAL_SD_ReadBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	4a67      	ldr	r2, [pc, #412]	@ (80034d0 <HAL_SD_ReadBlocks+0x24c>)
 8003334:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003336:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003338:	4303      	orrs	r3, r0
 800333a:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800333c:	2301      	movs	r3, #1
 800333e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003342:	2300      	movs	r3, #0
 8003344:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8003346:	e0bf      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
          data = SDIO_ReadFIFO(hsd->Instance);
 8003348:	6828      	ldr	r0, [r5, #0]
 800334a:	f001 f9a2 	bl	8004692 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800334e:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003350:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003354:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003356:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800335a:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800335c:	0e00      	lsrs	r0, r0, #24
 800335e:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8003360:	3404      	adds	r4, #4
          dataremaining--;
 8003362:	f1a8 0804 	sub.w	r8, r8, #4
        for(count = 0U; count < 8U; count++)
 8003366:	3601      	adds	r6, #1
 8003368:	2e07      	cmp	r6, #7
 800336a:	d9ed      	bls.n	8003348 <HAL_SD_ReadBlocks+0xc4>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800336c:	f7fe fd52 	bl	8001e14 <HAL_GetTick>
 8003370:	eba0 0009 	sub.w	r0, r0, r9
 8003374:	4550      	cmp	r0, sl
 8003376:	d210      	bcs.n	800339a <HAL_SD_ReadBlocks+0x116>
 8003378:	f1ba 0f00 	cmp.w	sl, #0
 800337c:	d00d      	beq.n	800339a <HAL_SD_ReadBlocks+0x116>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800337e:	6828      	ldr	r0, [r5, #0]
 8003380:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8003382:	f240 332a 	movw	r3, #810	@ 0x32a
 8003386:	401e      	ands	r6, r3
 8003388:	d115      	bne.n	80033b6 <HAL_SD_ReadBlocks+0x132>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800338a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800338c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003390:	d0ec      	beq.n	800336c <HAL_SD_ReadBlocks+0xe8>
 8003392:	f1b8 0f00 	cmp.w	r8, #0
 8003396:	d0e9      	beq.n	800336c <HAL_SD_ReadBlocks+0xe8>
 8003398:	e7e6      	b.n	8003368 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	4a4c      	ldr	r2, [pc, #304]	@ (80034d0 <HAL_SD_ReadBlocks+0x24c>)
 800339e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80033a0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80033a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033a6:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 80033b2:	2703      	movs	r7, #3
 80033b4:	e088      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80033b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80033bc:	d005      	beq.n	80033ca <HAL_SD_ReadBlocks+0x146>
 80033be:	f1bb 0f01 	cmp.w	fp, #1
 80033c2:	d902      	bls.n	80033ca <HAL_SD_ReadBlocks+0x146>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80033c4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d13c      	bne.n	8003444 <HAL_SD_ReadBlocks+0x1c0>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ce:	f012 0f08 	tst.w	r2, #8
 80033d2:	d148      	bne.n	8003466 <HAL_SD_ReadBlocks+0x1e2>
 80033d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d6:	f412 7f00 	tst.w	r2, #512	@ 0x200
 80033da:	d144      	bne.n	8003466 <HAL_SD_ReadBlocks+0x1e2>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80033dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033de:	f012 0f02 	tst.w	r2, #2
 80033e2:	d14c      	bne.n	800347e <HAL_SD_ReadBlocks+0x1fa>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80033e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e6:	f012 0f20 	tst.w	r2, #32
 80033ea:	d154      	bne.n	8003496 <HAL_SD_ReadBlocks+0x212>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80033ec:	6828      	ldr	r0, [r5, #0]
 80033ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80033f0:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80033f4:	d05b      	beq.n	80034ae <HAL_SD_ReadBlocks+0x22a>
 80033f6:	f1b8 0f00 	cmp.w	r8, #0
 80033fa:	d058      	beq.n	80034ae <HAL_SD_ReadBlocks+0x22a>
      data = SDIO_ReadFIFO(hsd->Instance);
 80033fc:	f001 f949 	bl	8004692 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003400:	7020      	strb	r0, [r4, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003402:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003406:	7063      	strb	r3, [r4, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003408:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800340c:	70a3      	strb	r3, [r4, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800340e:	0e00      	lsrs	r0, r0, #24
 8003410:	70e0      	strb	r0, [r4, #3]
      tempbuff++;
 8003412:	3404      	adds	r4, #4
      dataremaining--;
 8003414:	f1a8 0804 	sub.w	r8, r8, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003418:	f7fe fcfc 	bl	8001e14 <HAL_GetTick>
 800341c:	eba0 0009 	sub.w	r0, r0, r9
 8003420:	4550      	cmp	r0, sl
 8003422:	d202      	bcs.n	800342a <HAL_SD_ReadBlocks+0x1a6>
 8003424:	f1ba 0f00 	cmp.w	sl, #0
 8003428:	d1e0      	bne.n	80033ec <HAL_SD_ReadBlocks+0x168>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	4a28      	ldr	r2, [pc, #160]	@ (80034d0 <HAL_SD_ReadBlocks+0x24c>)
 800342e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003430:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003436:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003438:	2301      	movs	r3, #1
 800343a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800343e:	2300      	movs	r3, #0
 8003440:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_ERROR;
 8003442:	e041      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003444:	f001 fa92 	bl	800496c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003448:	4603      	mov	r3, r0
 800344a:	2800      	cmp	r0, #0
 800344c:	d0bd      	beq.n	80033ca <HAL_SD_ReadBlocks+0x146>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800344e:	682a      	ldr	r2, [r5, #0]
 8003450:	491f      	ldr	r1, [pc, #124]	@ (80034d0 <HAL_SD_ReadBlocks+0x24c>)
 8003452:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003454:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003456:	4313      	orrs	r3, r2
 8003458:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800345a:	2301      	movs	r3, #1
 800345c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003460:	2300      	movs	r3, #0
 8003462:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 8003464:	e030      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003466:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <HAL_SD_ReadBlocks+0x24c>)
 8003468:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800346a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003472:	2301      	movs	r3, #1
 8003474:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003478:	2300      	movs	r3, #0
 800347a:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800347c:	e024      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800347e:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <HAL_SD_ReadBlocks+0x24c>)
 8003480:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003482:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800348a:	2301      	movs	r3, #1
 800348c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003490:	2300      	movs	r3, #0
 8003492:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8003494:	e018      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003496:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <HAL_SD_ReadBlocks+0x24c>)
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800349a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800349c:	f043 0320 	orr.w	r3, r3, #32
 80034a0:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80034ac:	e00c      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034ae:	f240 533a 	movw	r3, #1338	@ 0x53a
 80034b2:	6383      	str	r3, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 80034ba:	2700      	movs	r7, #0
 80034bc:	e004      	b.n	80034c8 <HAL_SD_ReadBlocks+0x244>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80034be:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80034c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034c4:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 80034c6:	2701      	movs	r7, #1
}
 80034c8:	4638      	mov	r0, r7
 80034ca:	b007      	add	sp, #28
 80034cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d0:	004005ff 	.word	0x004005ff

080034d4 <HAL_SD_WriteBlocks>:
{
 80034d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d8:	b08b      	sub	sp, #44	@ 0x2c
 80034da:	4605      	mov	r5, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	4616      	mov	r6, r2
 80034e0:	469b      	mov	fp, r3
 80034e2:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
  uint32_t tickstart = HAL_GetTick();
 80034e6:	f7fe fc95 	bl	8001e14 <HAL_GetTick>
  if(NULL == pData)
 80034ea:	2c00      	cmp	r4, #0
 80034ec:	d037      	beq.n	800355e <HAL_SD_WriteBlocks+0x8a>
 80034ee:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80034f0:	f895 7034 	ldrb.w	r7, [r5, #52]	@ 0x34
 80034f4:	b2ff      	uxtb	r7, r7
 80034f6:	2f01      	cmp	r7, #1
 80034f8:	f040 80e6 	bne.w	80036c8 <HAL_SD_WriteBlocks+0x1f4>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	63ab      	str	r3, [r5, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003500:	eb06 030b 	add.w	r3, r6, fp
 8003504:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003506:	4293      	cmp	r3, r2
 8003508:	d82f      	bhi.n	800356a <HAL_SD_WriteBlocks+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 800350a:	2303      	movs	r3, #3
 800350c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hsd->Instance->DCTRL = 0U;
 8003510:	682b      	ldr	r3, [r5, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003516:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003518:	2b01      	cmp	r3, #1
 800351a:	d000      	beq.n	800351e <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 800351c:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003524:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8003528:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800352a:	2390      	movs	r3, #144	@ 0x90
 800352c:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800352e:	2300      	movs	r3, #0
 8003530:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003532:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003534:	2301      	movs	r3, #1
 8003536:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003538:	a904      	add	r1, sp, #16
 800353a:	6828      	ldr	r0, [r5, #0]
 800353c:	f001 f8cf 	bl	80046de <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8003540:	f1bb 0f01 	cmp.w	fp, #1
 8003544:	d916      	bls.n	8003574 <HAL_SD_WriteBlocks+0xa0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003546:	2320      	movs	r3, #32
 8003548:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800354a:	4631      	mov	r1, r6
 800354c:	6828      	ldr	r0, [r5, #0]
 800354e:	f001 f9f5 	bl	800493c <SDMMC_CmdWriteMultiBlock>
 8003552:	9001      	str	r0, [sp, #4]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003554:	9b01      	ldr	r3, [sp, #4]
 8003556:	b9ab      	cbnz	r3, 8003584 <HAL_SD_WriteBlocks+0xb0>
    dataremaining = config.DataLength;
 8003558:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800355c:	e040      	b.n	80035e0 <HAL_SD_WriteBlocks+0x10c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800355e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003560:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003564:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 8003566:	2701      	movs	r7, #1
 8003568:	e0b3      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800356a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800356c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003570:	63ab      	str	r3, [r5, #56]	@ 0x38
      return HAL_ERROR;
 8003572:	e0ae      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003574:	2310      	movs	r3, #16
 8003576:	632b      	str	r3, [r5, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003578:	4631      	mov	r1, r6
 800357a:	6828      	ldr	r0, [r5, #0]
 800357c:	f001 f9c6 	bl	800490c <SDMMC_CmdWriteSingleBlock>
 8003580:	9001      	str	r0, [sp, #4]
 8003582:	e7e7      	b.n	8003554 <HAL_SD_WriteBlocks+0x80>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	4a55      	ldr	r2, [pc, #340]	@ (80036dc <HAL_SD_WriteBlocks+0x208>)
 8003588:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800358a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800358c:	9a01      	ldr	r2, [sp, #4]
 800358e:	4313      	orrs	r3, r2
 8003590:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003592:	2301      	movs	r3, #1
 8003594:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003598:	2300      	movs	r3, #0
 800359a:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800359c:	e099      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
          data = (uint32_t)(*tempbuff);
 800359e:	7823      	ldrb	r3, [r4, #0]
 80035a0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 80035a2:	7862      	ldrb	r2, [r4, #1]
 80035a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80035a8:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 80035aa:	78a2      	ldrb	r2, [r4, #2]
 80035ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035b0:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80035b2:	78e2      	ldrb	r2, [r4, #3]
 80035b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80035b8:	9303      	str	r3, [sp, #12]
          tempbuff++;
 80035ba:	3404      	adds	r4, #4
          dataremaining--;
 80035bc:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80035c0:	a903      	add	r1, sp, #12
 80035c2:	6828      	ldr	r0, [r5, #0]
 80035c4:	f001 f868 	bl	8004698 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80035c8:	3601      	adds	r6, #1
 80035ca:	2e07      	cmp	r6, #7
 80035cc:	d9e7      	bls.n	800359e <HAL_SD_WriteBlocks+0xca>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035ce:	f7fe fc21 	bl	8001e14 <HAL_GetTick>
 80035d2:	eba0 0008 	sub.w	r0, r0, r8
 80035d6:	4550      	cmp	r0, sl
 80035d8:	d210      	bcs.n	80035fc <HAL_SD_WriteBlocks+0x128>
 80035da:	f1ba 0f00 	cmp.w	sl, #0
 80035de:	d00d      	beq.n	80035fc <HAL_SD_WriteBlocks+0x128>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80035e0:	6828      	ldr	r0, [r5, #0]
 80035e2:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80035e4:	f240 331a 	movw	r3, #794	@ 0x31a
 80035e8:	401e      	ands	r6, r3
 80035ea:	d115      	bne.n	8003618 <HAL_SD_WriteBlocks+0x144>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80035ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80035ee:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80035f2:	d0ec      	beq.n	80035ce <HAL_SD_WriteBlocks+0xfa>
 80035f4:	f1b9 0f00 	cmp.w	r9, #0
 80035f8:	d0e9      	beq.n	80035ce <HAL_SD_WriteBlocks+0xfa>
 80035fa:	e7e6      	b.n	80035ca <HAL_SD_WriteBlocks+0xf6>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	4a37      	ldr	r2, [pc, #220]	@ (80036dc <HAL_SD_WriteBlocks+0x208>)
 8003600:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003602:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003604:	9a01      	ldr	r2, [sp, #4]
 8003606:	4313      	orrs	r3, r2
 8003608:	63ab      	str	r3, [r5, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800360a:	2301      	movs	r3, #1
 800360c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003610:	2300      	movs	r3, #0
 8003612:	632b      	str	r3, [r5, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003614:	2703      	movs	r7, #3
 8003616:	e05c      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003618:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800361a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800361e:	d005      	beq.n	800362c <HAL_SD_WriteBlocks+0x158>
 8003620:	f1bb 0f01 	cmp.w	fp, #1
 8003624:	d902      	bls.n	800362c <HAL_SD_WriteBlocks+0x158>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003626:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003628:	2b03      	cmp	r3, #3
 800362a:	d11c      	bne.n	8003666 <HAL_SD_WriteBlocks+0x192>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003630:	f012 0f08 	tst.w	r2, #8
 8003634:	d128      	bne.n	8003688 <HAL_SD_WriteBlocks+0x1b4>
 8003636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003638:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800363c:	d124      	bne.n	8003688 <HAL_SD_WriteBlocks+0x1b4>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800363e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003640:	f012 0f02 	tst.w	r2, #2
 8003644:	d12c      	bne.n	80036a0 <HAL_SD_WriteBlocks+0x1cc>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003648:	f012 0f10 	tst.w	r2, #16
 800364c:	d034      	beq.n	80036b8 <HAL_SD_WriteBlocks+0x1e4>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800364e:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <HAL_SD_WriteBlocks+0x208>)
 8003650:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003652:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8003654:	f043 0310 	orr.w	r3, r3, #16
 8003658:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800365a:	2301      	movs	r3, #1
 800365c:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003660:	2300      	movs	r3, #0
 8003662:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 8003664:	e035      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003666:	f001 f981 	bl	800496c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800366a:	4603      	mov	r3, r0
 800366c:	2800      	cmp	r0, #0
 800366e:	d0dd      	beq.n	800362c <HAL_SD_WriteBlocks+0x158>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003670:	682a      	ldr	r2, [r5, #0]
 8003672:	491a      	ldr	r1, [pc, #104]	@ (80036dc <HAL_SD_WriteBlocks+0x208>)
 8003674:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003676:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8003678:	4313      	orrs	r3, r2
 800367a:	63ab      	str	r3, [r5, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800367c:	2301      	movs	r3, #1
 800367e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003682:	2300      	movs	r3, #0
 8003684:	632b      	str	r3, [r5, #48]	@ 0x30
          return HAL_ERROR;
 8003686:	e024      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003688:	4a14      	ldr	r2, [pc, #80]	@ (80036dc <HAL_SD_WriteBlocks+0x208>)
 800368a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800368c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003694:	2301      	movs	r3, #1
 8003696:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800369a:	2300      	movs	r3, #0
 800369c:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 800369e:	e018      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036a0:	4a0e      	ldr	r2, [pc, #56]	@ (80036dc <HAL_SD_WriteBlocks+0x208>)
 80036a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036a4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	63ab      	str	r3, [r5, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	632b      	str	r3, [r5, #48]	@ 0x30
      return HAL_ERROR;
 80036b6:	e00c      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80036b8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80036bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036be:	2301      	movs	r3, #1
 80036c0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_OK;
 80036c4:	2700      	movs	r7, #0
 80036c6:	e004      	b.n	80036d2 <HAL_SD_WriteBlocks+0x1fe>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036c8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80036ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036ce:	63ab      	str	r3, [r5, #56]	@ 0x38
    return HAL_ERROR;
 80036d0:	2701      	movs	r7, #1
}
 80036d2:	4638      	mov	r0, r7
 80036d4:	b00b      	add	sp, #44	@ 0x2c
 80036d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	004005ff 	.word	0x004005ff

080036e0 <HAL_SD_GetCardCSD>:
{
 80036e0:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80036e2:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80036e4:	0f92      	lsrs	r2, r2, #30
 80036e6:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80036e8:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80036ea:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80036ee:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80036f0:	f890 2067 	ldrb.w	r2, [r0, #103]	@ 0x67
 80036f4:	f002 0203 	and.w	r2, r2, #3
 80036f8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80036fa:	f890 2066 	ldrb.w	r2, [r0, #102]	@ 0x66
 80036fe:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003700:	f890 2065 	ldrb.w	r2, [r0, #101]	@ 0x65
 8003704:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003706:	f890 2064 	ldrb.w	r2, [r0, #100]	@ 0x64
 800370a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800370c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800370e:	0d12      	lsrs	r2, r2, #20
 8003710:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003712:	f8b0 206a 	ldrh.w	r2, [r0, #106]	@ 0x6a
 8003716:	f002 020f 	and.w	r2, r2, #15
 800371a:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800371c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800371e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003722:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003724:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8003726:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800372a:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800372c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800372e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003732:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003734:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8003736:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800373a:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800373c:	2200      	movs	r2, #0
 800373e:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003740:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003742:	2a00      	cmp	r2, #0
 8003744:	f040 8086 	bne.w	8003854 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003748:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800374a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800374e:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8003752:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8003754:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8003758:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800375a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800375c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8003760:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003762:	f893 206f 	ldrb.w	r2, [r3, #111]	@ 0x6f
 8003766:	f002 0207 	and.w	r2, r2, #7
 800376a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800376c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800376e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8003772:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003774:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003776:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800377a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800377c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800377e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8003782:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003784:	690a      	ldr	r2, [r1, #16]
 8003786:	3201      	adds	r2, #1
 8003788:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800378a:	7e08      	ldrb	r0, [r1, #24]
 800378c:	f000 0007 	and.w	r0, r0, #7
 8003790:	3002      	adds	r0, #2
 8003792:	4082      	lsls	r2, r0
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003796:	f891 c008 	ldrb.w	ip, [r1, #8]
 800379a:	f00c 0c0f 	and.w	ip, ip, #15
 800379e:	2001      	movs	r0, #1
 80037a0:	fa00 f00c 	lsl.w	r0, r0, ip
 80037a4:	6598      	str	r0, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80037a6:	0a40      	lsrs	r0, r0, #9
 80037a8:	fb00 f202 	mul.w	r2, r0, r2
 80037ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80037ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b2:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80037b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80037b6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80037ba:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80037bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80037be:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80037c2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80037c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80037c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ca:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80037cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037ce:	0fd2      	lsrs	r2, r2, #31
 80037d0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80037d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037d4:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80037d8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80037da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037dc:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80037e0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80037e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037e4:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80037e8:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80037ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037ec:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80037f0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80037f4:	2000      	movs	r0, #0
 80037f6:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80037fa:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 80037fe:	f002 0201 	and.w	r2, r2, #1
 8003802:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003806:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003808:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800380c:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003810:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003812:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8003816:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800381a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800381c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003820:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003824:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003826:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800382a:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800382e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003830:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8003834:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003838:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800383a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800383e:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003848:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8003852:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003854:	2a01      	cmp	r2, #1
 8003856:	d111      	bne.n	800387c <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003858:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800385a:	0412      	lsls	r2, r2, #16
 800385c:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8003860:	f8b0 006e 	ldrh.w	r0, [r0, #110]	@ 0x6e
 8003864:	4302      	orrs	r2, r0
 8003866:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003868:	690a      	ldr	r2, [r1, #16]
 800386a:	3201      	adds	r2, #1
 800386c:	0292      	lsls	r2, r2, #10
 800386e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003870:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003876:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60
 800387a:	e79b      	b.n	80037b4 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800387c:	6802      	ldr	r2, [r0, #0]
 800387e:	4905      	ldr	r1, [pc, #20]	@ (8003894 <HAL_SD_GetCardCSD+0x1b4>)
 8003880:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003882:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8003884:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003888:	6382      	str	r2, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800388a:	2001      	movs	r0, #1
 800388c:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	004005ff 	.word	0x004005ff

08003898 <SD_InitCard>:
{
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	b090      	sub	sp, #64	@ 0x40
 800389c:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800389e:	2301      	movs	r3, #1
 80038a0:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80038a4:	6800      	ldr	r0, [r0, #0]
 80038a6:	f000 ff00 	bl	80046aa <SDIO_GetPowerState>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d06c      	beq.n	8003988 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80038ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d145      	bne.n	8003940 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80038b4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d15d      	bne.n	8003976 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80038ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d01d      	beq.n	80038fc <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80038c0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80038c4:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038c6:	0409      	lsls	r1, r1, #16
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	f001 f8f4 	bl	8004ab6 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ce:	4605      	mov	r5, r0
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d15b      	bne.n	800398c <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038d4:	2100      	movs	r1, #0
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	f000 fefe 	bl	80046d8 <SDIO_GetResponse>
 80038dc:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80038de:	2104      	movs	r1, #4
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	f000 fef9 	bl	80046d8 <SDIO_GetResponse>
 80038e6:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80038e8:	2108      	movs	r1, #8
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	f000 fef4 	bl	80046d8 <SDIO_GetResponse>
 80038f0:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80038f2:	210c      	movs	r1, #12
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	f000 feef 	bl	80046d8 <SDIO_GetResponse>
 80038fa:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80038fc:	2104      	movs	r1, #4
 80038fe:	6820      	ldr	r0, [r4, #0]
 8003900:	f000 feea 	bl	80046d8 <SDIO_GetResponse>
 8003904:	0d00      	lsrs	r0, r0, #20
 8003906:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003908:	a905      	add	r1, sp, #20
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff fee8 	bl	80036e0 <HAL_SD_GetCardCSD>
 8003910:	2800      	cmp	r0, #0
 8003912:	d13e      	bne.n	8003992 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003914:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003916:	0412      	lsls	r2, r2, #16
 8003918:	2300      	movs	r3, #0
 800391a:	6820      	ldr	r0, [r4, #0]
 800391c:	f001 f840 	bl	80049a0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003920:	4605      	mov	r5, r0
 8003922:	bb98      	cbnz	r0, 800398c <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003924:	4623      	mov	r3, r4
 8003926:	f853 6b10 	ldr.w	r6, [r3], #16
 800392a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800392e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003932:	3404      	adds	r4, #4
 8003934:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003938:	4630      	mov	r0, r6
 800393a:	f000 fe91 	bl	8004660 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 800393e:	e025      	b.n	800398c <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003940:	6820      	ldr	r0, [r4, #0]
 8003942:	f001 f8a3 	bl	8004a8c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003946:	4605      	mov	r5, r0
 8003948:	bb00      	cbnz	r0, 800398c <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800394a:	2100      	movs	r1, #0
 800394c:	6820      	ldr	r0, [r4, #0]
 800394e:	f000 fec3 	bl	80046d8 <SDIO_GetResponse>
 8003952:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003954:	2104      	movs	r1, #4
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	f000 febe 	bl	80046d8 <SDIO_GetResponse>
 800395c:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800395e:	2108      	movs	r1, #8
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	f000 feb9 	bl	80046d8 <SDIO_GetResponse>
 8003966:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003968:	210c      	movs	r1, #12
 800396a:	6820      	ldr	r0, [r4, #0]
 800396c:	f000 feb4 	bl	80046d8 <SDIO_GetResponse>
 8003970:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 8003974:	e79e      	b.n	80038b4 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003976:	f10d 0112 	add.w	r1, sp, #18
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	f001 f940 	bl	8004c00 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003980:	4605      	mov	r5, r0
 8003982:	2800      	cmp	r0, #0
 8003984:	d099      	beq.n	80038ba <SD_InitCard+0x22>
 8003986:	e001      	b.n	800398c <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003988:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
}
 800398c:	4628      	mov	r0, r5
 800398e:	b010      	add	sp, #64	@ 0x40
 8003990:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003992:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8003996:	e7f9      	b.n	800398c <SD_InitCard+0xf4>

08003998 <HAL_SD_InitCard>:
{
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	4604      	mov	r4, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800399e:	2300      	movs	r3, #0
 80039a0:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80039a2:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80039a4:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80039a6:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80039a8:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80039aa:	2376      	movs	r3, #118	@ 0x76
 80039ac:	9309      	str	r3, [sp, #36]	@ 0x24
  status = SDIO_Init(hsd->Instance, Init);
 80039ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80039b0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80039b4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80039b8:	ab04      	add	r3, sp, #16
 80039ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	f000 fe4f 	bl	8004660 <SDIO_Init>
  if(status != HAL_OK)
 80039c2:	b118      	cbz	r0, 80039cc <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80039c4:	2501      	movs	r5, #1
}
 80039c6:	4628      	mov	r0, r5
 80039c8:	b00a      	add	sp, #40	@ 0x28
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	4605      	mov	r5, r0
  __HAL_SD_DISABLE(hsd);
 80039ce:	4e1a      	ldr	r6, [pc, #104]	@ (8003a38 <HAL_SD_InitCard+0xa0>)
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	f000 fe63 	bl	80046a2 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80039dc:	2301      	movs	r3, #1
 80039de:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
  HAL_Delay(2);
 80039e2:	2002      	movs	r0, #2
 80039e4:	f7fe fa1c 	bl	8001e20 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7ff fbd5 	bl	8003198 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80039ee:	b130      	cbz	r0, 80039fe <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 80039f0:	2501      	movs	r5, #1
 80039f2:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80039f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80039f8:	4303      	orrs	r3, r0
 80039fa:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80039fc:	e7e3      	b.n	80039c6 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7ff ff4a 	bl	8003898 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a04:	b130      	cbz	r0, 8003a14 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8003a06:	2501      	movs	r5, #1
 8003a08:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003a0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a0e:	4303      	orrs	r3, r0
 8003a10:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8003a12:	e7d8      	b.n	80039c6 <HAL_SD_InitCard+0x2e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	f000 ff2f 	bl	800487c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0d1      	beq.n	80039c6 <HAL_SD_InitCard+0x2e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	4905      	ldr	r1, [pc, #20]	@ (8003a3c <HAL_SD_InitCard+0xa4>)
 8003a26:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003a28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a2a:	4303      	orrs	r3, r0
 8003a2c:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a2e:	2501      	movs	r5, #1
 8003a30:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003a34:	e7c7      	b.n	80039c6 <HAL_SD_InitCard+0x2e>
 8003a36:	bf00      	nop
 8003a38:	42258000 	.word	0x42258000
 8003a3c:	004005ff 	.word	0x004005ff

08003a40 <HAL_SD_Init>:
  if(hsd == NULL)
 8003a40:	b1a8      	cbz	r0, 8003a6e <HAL_SD_Init+0x2e>
{
 8003a42:	b510      	push	{r4, lr}
 8003a44:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003a46:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8003a4a:	b163      	cbz	r3, 8003a66 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7ff ffa0 	bl	8003998 <HAL_SD_InitCard>
 8003a58:	b958      	cbnz	r0, 8003a72 <HAL_SD_Init+0x32>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a5a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003a5c:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003a64:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003a66:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003a68:	f7fe ffae 	bl	80029c8 <HAL_SD_MspInit>
 8003a6c:	e7ee      	b.n	8003a4c <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
}
 8003a70:	4770      	bx	lr
    return HAL_ERROR;
 8003a72:	2001      	movs	r0, #1
 8003a74:	e7f6      	b.n	8003a64 <HAL_SD_Init+0x24>

08003a76 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a76:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003a78:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a7a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003a7c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a7e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003a80:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003a82:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003a84:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003a86:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003a88:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003a8a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003a8c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003a8e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003a90:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003a92:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003a94:	61cb      	str	r3, [r1, #28]
}
 8003a96:	2000      	movs	r0, #0
 8003a98:	4770      	bx	lr

08003a9a <HAL_SD_GetCardState>:
{
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8003aa4:	a901      	add	r1, sp, #4
 8003aa6:	f7ff fbd7 	bl	8003258 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aaa:	b110      	cbz	r0, 8003ab2 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8003aac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003aae:	4303      	orrs	r3, r0
 8003ab0:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8003ab2:	9801      	ldr	r0, [sp, #4]
 8003ab4:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd10      	pop	{r4, pc}

08003abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	4688      	mov	r8, r1
 8003ac6:	4617      	mov	r7, r2
 8003ac8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aca:	f7fe f9a3 	bl	8001e14 <HAL_GetTick>
 8003ace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ad0:	1a1b      	subs	r3, r3, r0
 8003ad2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003ad6:	f7fe f99d 	bl	8001e14 <HAL_GetTick>
 8003ada:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003adc:	4b28      	ldr	r3, [pc, #160]	@ (8003b80 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003ae4:	fb09 f303 	mul.w	r3, r9, r3
 8003ae8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	689c      	ldr	r4, [r3, #8]
 8003aee:	ea38 0404 	bics.w	r4, r8, r4
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	42bb      	cmp	r3, r7
 8003afa:	d03d      	beq.n	8003b78 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003afc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003b00:	d0f3      	beq.n	8003aea <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b02:	f7fe f987 	bl	8001e14 <HAL_GetTick>
 8003b06:	eba0 000a 	sub.w	r0, r0, sl
 8003b0a:	4548      	cmp	r0, r9
 8003b0c:	d207      	bcs.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b0e:	9a01      	ldr	r2, [sp, #4]
 8003b10:	b102      	cbz	r2, 8003b14 <SPI_WaitFlagStateUntilTimeout+0x58>
 8003b12:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003b14:	9b01      	ldr	r3, [sp, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	4691      	mov	r9, r2
 8003b1c:	e7e5      	b.n	8003aea <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b1e:	682a      	ldr	r2, [r5, #0]
 8003b20:	6853      	ldr	r3, [r2, #4]
 8003b22:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003b26:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b28:	686b      	ldr	r3, [r5, #4]
 8003b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2e:	d00b      	beq.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b30:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b36:	d014      	beq.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b44:	2003      	movs	r0, #3
 8003b46:	e018      	b.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b48:	68ab      	ldr	r3, [r5, #8]
 8003b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4e:	d002      	beq.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b54:	d1ec      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8003b56:	682a      	ldr	r2, [r5, #0]
 8003b58:	6813      	ldr	r3, [r2, #0]
 8003b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e7e6      	b.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003b62:	682a      	ldr	r2, [r5, #0]
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	682a      	ldr	r2, [r5, #0]
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e7df      	b.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003b78:	2000      	movs	r0, #0
}
 8003b7a:	b002      	add	sp, #8
 8003b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b80:	20000008 	.word	0x20000008

08003b84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	4604      	mov	r4, r0
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	9200      	str	r2, [sp, #0]
 8003b90:	460b      	mov	r3, r1
 8003b92:	2201      	movs	r2, #1
 8003b94:	2102      	movs	r1, #2
 8003b96:	f7ff ff91 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003b9a:	b9d0      	cbnz	r0, 8003bd2 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b9c:	4b17      	ldr	r3, [pc, #92]	@ (8003bfc <SPI_EndRxTxTransaction+0x78>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a17      	ldr	r2, [pc, #92]	@ (8003c00 <SPI_EndRxTxTransaction+0x7c>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0d5b      	lsrs	r3, r3, #21
 8003ba8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	6863      	ldr	r3, [r4, #4]
 8003bb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb8:	d011      	beq.n	8003bde <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bba:	9b03      	ldr	r3, [sp, #12]
 8003bbc:	b13b      	cbz	r3, 8003bce <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003bcc:	d1f5      	bne.n	8003bba <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003bd4:	f043 0320 	orr.w	r3, r3, #32
 8003bd8:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bda:	2003      	movs	r0, #3
 8003bdc:	e7f7      	b.n	8003bce <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bde:	9600      	str	r6, [sp, #0]
 8003be0:	462b      	mov	r3, r5
 8003be2:	2200      	movs	r2, #0
 8003be4:	2180      	movs	r1, #128	@ 0x80
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7ff ff68 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d0ee      	beq.n	8003bce <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003bf2:	f043 0320 	orr.w	r3, r3, #32
 8003bf6:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bf8:	2003      	movs	r0, #3
 8003bfa:	e7e8      	b.n	8003bce <SPI_EndRxTxTransaction+0x4a>
 8003bfc:	20000008 	.word	0x20000008
 8003c00:	165e9f81 	.word	0x165e9f81

08003c04 <SPI_EndRxTransaction>:
{
 8003c04:	b510      	push	{r4, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	4604      	mov	r4, r0
 8003c0a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0c:	6841      	ldr	r1, [r0, #4]
 8003c0e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8003c12:	d014      	beq.n	8003c3e <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c14:	6861      	ldr	r1, [r4, #4]
 8003c16:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8003c1a:	d12a      	bne.n	8003c72 <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c1c:	68a1      	ldr	r1, [r4, #8]
 8003c1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003c22:	d019      	beq.n	8003c58 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c24:	9200      	str	r2, [sp, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2180      	movs	r1, #128	@ 0x80
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff ff46 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003c30:	b330      	cbz	r0, 8003c80 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c34:	f043 0320 	orr.w	r3, r3, #32
 8003c38:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c3a:	2003      	movs	r0, #3
 8003c3c:	e020      	b.n	8003c80 <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3e:	6881      	ldr	r1, [r0, #8]
 8003c40:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003c44:	d002      	beq.n	8003c4c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c46:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003c4a:	d1e3      	bne.n	8003c14 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	6801      	ldr	r1, [r0, #0]
 8003c50:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8003c54:	6001      	str	r1, [r0, #0]
 8003c56:	e7dd      	b.n	8003c14 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c58:	9200      	str	r2, [sp, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7ff ff2c 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003c64:	b160      	cbz	r0, 8003c80 <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c68:	f043 0320 	orr.w	r3, r3, #32
 8003c6c:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003c6e:	2003      	movs	r0, #3
 8003c70:	e006      	b.n	8003c80 <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	9200      	str	r2, [sp, #0]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2101      	movs	r1, #1
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff ff1f 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003c7e:	b908      	cbnz	r0, 8003c84 <SPI_EndRxTransaction+0x80>
}
 8003c80:	b002      	add	sp, #8
 8003c82:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c84:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c86:	f043 0320 	orr.w	r3, r3, #32
 8003c8a:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c8c:	2003      	movs	r0, #3
 8003c8e:	e7f7      	b.n	8003c80 <SPI_EndRxTransaction+0x7c>

08003c90 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d05a      	beq.n	8003d4a <HAL_SPI_Init+0xba>
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c98:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003c9a:	b933      	cbnz	r3, 8003caa <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9c:	6843      	ldr	r3, [r0, #4]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ca2:	d005      	beq.n	8003cb0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61c3      	str	r3, [r0, #28]
 8003ca8:	e002      	b.n	8003cb0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cae:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cb4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d040      	beq.n	8003d3e <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	6813      	ldr	r3, [r2, #0]
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cca:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003cd2:	68a2      	ldr	r2, [r4, #8]
 8003cd4:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	68e2      	ldr	r2, [r4, #12]
 8003cdc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	6922      	ldr	r2, [r4, #16]
 8003ce4:	f002 0202 	and.w	r2, r2, #2
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	6962      	ldr	r2, [r4, #20]
 8003cec:	f002 0201 	and.w	r2, r2, #1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	69a2      	ldr	r2, [r4, #24]
 8003cf4:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	69e2      	ldr	r2, [r4, #28]
 8003cfc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003d00:	4313      	orrs	r3, r2
 8003d02:	6a22      	ldr	r2, [r4, #32]
 8003d04:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003d0c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d10:	6821      	ldr	r1, [r4, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d16:	8b63      	ldrh	r3, [r4, #26]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003d1e:	f002 0210 	and.w	r2, r2, #16
 8003d22:	6821      	ldr	r1, [r4, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	69d3      	ldr	r3, [r2, #28]
 8003d2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d30:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d32:	2000      	movs	r0, #0
 8003d34:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003d3c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003d3e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7fe fe90 	bl	8002a68 <HAL_SPI_MspInit>
 8003d48:	e7b8      	b.n	8003cbc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003d4a:	2001      	movs	r0, #1
}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_SPI_Transmit>:
{
 8003d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d52:	b083      	sub	sp, #12
 8003d54:	4604      	mov	r4, r0
 8003d56:	4689      	mov	r9, r1
 8003d58:	4690      	mov	r8, r2
 8003d5a:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8003d5c:	f7fe f85a 	bl	8001e14 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d60:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8003d64:	b2f6      	uxtb	r6, r6
 8003d66:	2e01      	cmp	r6, #1
 8003d68:	f040 80cc 	bne.w	8003f04 <HAL_SPI_Transmit+0x1b6>
 8003d6c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8003d6e:	f1b9 0f00 	cmp.w	r9, #0
 8003d72:	f000 80c8 	beq.w	8003f06 <HAL_SPI_Transmit+0x1b8>
 8003d76:	f1b8 0f00 	cmp.w	r8, #0
 8003d7a:	f000 80c4 	beq.w	8003f06 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8003d7e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	f000 80c3 	beq.w	8003f0e <HAL_SPI_Transmit+0x1c0>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d98:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d9c:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003da0:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003da4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003da6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003da8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003daa:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003dac:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db4:	d01e      	beq.n	8003df4 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003dbe:	d103      	bne.n	8003dc8 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dc8:	68e3      	ldr	r3, [r4, #12]
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dce:	d01c      	beq.n	8003e0a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	b113      	cbz	r3, 8003dda <HAL_SPI_Transmit+0x8c>
 8003dd4:	f1b8 0f01 	cmp.w	r8, #1
 8003dd8:	d15f      	bne.n	8003e9a <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dda:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003de4:	3301      	adds	r3, #1
 8003de6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003de8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003df2:	e052      	b.n	8003e9a <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8003df4:	6822      	ldr	r2, [r4, #0]
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dfc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	e7d5      	b.n	8003db6 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	b113      	cbz	r3, 8003e14 <HAL_SPI_Transmit+0xc6>
 8003e0e:	f1b8 0f01 	cmp.w	r8, #1
 8003e12:	d115      	bne.n	8003e40 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e14:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	8812      	ldrh	r2, [r2, #0]
 8003e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e1e:	3302      	adds	r3, #2
 8003e20:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e22:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003e2c:	e008      	b.n	8003e40 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2e:	f7fd fff1 	bl	8001e14 <HAL_GetTick>
 8003e32:	1bc0      	subs	r0, r0, r7
 8003e34:	42a8      	cmp	r0, r5
 8003e36:	d302      	bcc.n	8003e3e <HAL_SPI_Transmit+0xf0>
 8003e38:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e3c:	d115      	bne.n	8003e6a <HAL_SPI_Transmit+0x11c>
 8003e3e:	b1a5      	cbz	r5, 8003e6a <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8003e40:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d042      	beq.n	8003ece <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	f012 0f02 	tst.w	r2, #2
 8003e50:	d0ed      	beq.n	8003e2e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e52:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e54:	8812      	ldrh	r2, [r2, #0]
 8003e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e5e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8003e68:	e7ea      	b.n	8003e40 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e70:	2300      	movs	r3, #0
 8003e72:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e76:	2603      	movs	r6, #3
 8003e78:	e045      	b.n	8003f06 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e7a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e82:	3301      	adds	r3, #1
 8003e84:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e86:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8003e8a:	fa1f fc8c 	uxth.w	ip, ip
 8003e8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003e92:	fa1f fc8c 	uxth.w	ip, ip
 8003e96:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003e9a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	b1b3      	cbz	r3, 8003ece <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	f012 0f02 	tst.w	r2, #2
 8003ea8:	d1e7      	bne.n	8003e7a <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eaa:	f7fd ffb3 	bl	8001e14 <HAL_GetTick>
 8003eae:	1bc0      	subs	r0, r0, r7
 8003eb0:	42a8      	cmp	r0, r5
 8003eb2:	d302      	bcc.n	8003eba <HAL_SPI_Transmit+0x16c>
 8003eb4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003eb8:	d101      	bne.n	8003ebe <HAL_SPI_Transmit+0x170>
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	d1ed      	bne.n	8003e9a <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003eca:	2603      	movs	r6, #3
 8003ecc:	e01b      	b.n	8003f06 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ece:	463a      	mov	r2, r7
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7ff fe56 	bl	8003b84 <SPI_EndRxTxTransaction>
 8003ed8:	b108      	cbz	r0, 8003ede <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eda:	2320      	movs	r3, #32
 8003edc:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	b933      	cbnz	r3, 8003ef0 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	9201      	str	r2, [sp, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003efc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003efe:	b913      	cbnz	r3, 8003f06 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8003f00:	2600      	movs	r6, #0
 8003f02:	e000      	b.n	8003f06 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8003f04:	2602      	movs	r6, #2
}
 8003f06:	4630      	mov	r0, r6
 8003f08:	b003      	add	sp, #12
 8003f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8003f0e:	2602      	movs	r6, #2
 8003f10:	e7f9      	b.n	8003f06 <HAL_SPI_Transmit+0x1b8>

08003f12 <HAL_SPI_TransmitReceive>:
{
 8003f12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f16:	b083      	sub	sp, #12
 8003f18:	4604      	mov	r4, r0
 8003f1a:	4688      	mov	r8, r1
 8003f1c:	4691      	mov	r9, r2
 8003f1e:	461f      	mov	r7, r3
 8003f20:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003f22:	f7fd ff77 	bl	8001e14 <HAL_GetTick>
 8003f26:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003f28:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003f2c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003f2e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d00a      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x38>
 8003f34:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003f38:	f040 8105 	bne.w	8004146 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f3c:	68a2      	ldr	r2, [r4, #8]
 8003f3e:	2a00      	cmp	r2, #0
 8003f40:	f040 8105 	bne.w	800414e <HAL_SPI_TransmitReceive+0x23c>
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	f040 8104 	bne.w	8004152 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f4a:	f1b8 0f00 	cmp.w	r8, #0
 8003f4e:	f000 8102 	beq.w	8004156 <HAL_SPI_TransmitReceive+0x244>
 8003f52:	f1b9 0f00 	cmp.w	r9, #0
 8003f56:	f000 8100 	beq.w	800415a <HAL_SPI_TransmitReceive+0x248>
 8003f5a:	2f00      	cmp	r7, #0
 8003f5c:	f000 80ff 	beq.w	800415e <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8003f60:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	f000 80fc 	beq.w	8004162 <HAL_SPI_TransmitReceive+0x250>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f70:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d002      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f7a:	2305      	movs	r3, #5
 8003f7c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f84:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f88:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f8a:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f8c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f90:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f92:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8003f94:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f96:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003fa0:	d103      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb0:	d011      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb2:	6863      	ldr	r3, [r4, #4]
 8003fb4:	b10b      	cbz	r3, 8003fba <HAL_SPI_TransmitReceive+0xa8>
 8003fb6:	2f01      	cmp	r7, #1
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fba:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	7812      	ldrb	r2, [r2, #0]
 8003fc0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fc8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003fd2:	2701      	movs	r7, #1
 8003fd4:	e071      	b.n	80040ba <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	b10b      	cbz	r3, 8003fde <HAL_SPI_TransmitReceive+0xcc>
 8003fda:	2f01      	cmp	r7, #1
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fde:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	8812      	ldrh	r2, [r2, #0]
 8003fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fe8:	3302      	adds	r3, #2
 8003fea:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fec:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003ff6:	2701      	movs	r7, #1
 8003ff8:	e01b      	b.n	8004032 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	f012 0f01 	tst.w	r2, #1
 8004002:	d00e      	beq.n	8004022 <HAL_SPI_TransmitReceive+0x110>
 8004004:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004006:	b292      	uxth	r2, r2
 8004008:	b15a      	cbz	r2, 8004022 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800400e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004010:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004012:	3302      	adds	r3, #2
 8004014:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8004016:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004020:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004022:	f7fd fef7 	bl	8001e14 <HAL_GetTick>
 8004026:	1b80      	subs	r0, r0, r6
 8004028:	42a8      	cmp	r0, r5
 800402a:	d302      	bcc.n	8004032 <HAL_SPI_TransmitReceive+0x120>
 800402c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004030:	d11e      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004032:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	b91b      	cbnz	r3, 8004040 <HAL_SPI_TransmitReceive+0x12e>
 8004038:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d062      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	f012 0f02 	tst.w	r2, #2
 8004048:	d0d7      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0xe8>
 800404a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800404c:	b292      	uxth	r2, r2
 800404e:	2a00      	cmp	r2, #0
 8004050:	d0d3      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0xe8>
 8004052:	2f00      	cmp	r7, #0
 8004054:	d0d1      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004056:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800405e:	3302      	adds	r3, #2
 8004060:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004062:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800406c:	2700      	movs	r7, #0
 800406e:	e7c4      	b.n	8003ffa <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8004070:	2301      	movs	r3, #1
 8004072:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004076:	2300      	movs	r3, #0
 8004078:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 800407c:	2003      	movs	r0, #3
 800407e:	e063      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	f012 0f01 	tst.w	r2, #1
 8004088:	d00e      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0x196>
 800408a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800408c:	b292      	uxth	r2, r2
 800408e:	b15a      	cbz	r2, 80040a8 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004096:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004098:	3301      	adds	r3, #1
 800409a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800409c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80040a6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040a8:	f7fd feb4 	bl	8001e14 <HAL_GetTick>
 80040ac:	1b83      	subs	r3, r0, r6
 80040ae:	42ab      	cmp	r3, r5
 80040b0:	d302      	bcc.n	80040b8 <HAL_SPI_TransmitReceive+0x1a6>
 80040b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80040b6:	d11e      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x1e4>
 80040b8:	b1ed      	cbz	r5, 80040f6 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	b913      	cbnz	r3, 80040c6 <HAL_SPI_TransmitReceive+0x1b4>
 80040c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b1fb      	cbz	r3, 8004106 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	f012 0f02 	tst.w	r2, #2
 80040ce:	d0d7      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x16e>
 80040d0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80040d2:	b292      	uxth	r2, r2
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d0d3      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x16e>
 80040d8:	2f00      	cmp	r7, #0
 80040da:	d0d1      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80040e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80040e4:	3301      	adds	r3, #1
 80040e6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80040e8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80040f2:	2700      	movs	r7, #0
 80040f4:	e7c4      	b.n	8004080 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80040fc:	2300      	movs	r3, #0
 80040fe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004102:	2003      	movs	r0, #3
 8004104:	e020      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004106:	4632      	mov	r2, r6
 8004108:	4629      	mov	r1, r5
 800410a:	4620      	mov	r0, r4
 800410c:	f7ff fd3a 	bl	8003b84 <SPI_EndRxTxTransaction>
 8004110:	b990      	cbnz	r0, 8004138 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	b933      	cbnz	r3, 8004124 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004124:	2301      	movs	r3, #1
 8004126:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800412a:	2300      	movs	r3, #0
 800412c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004130:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004132:	b14b      	cbz	r3, 8004148 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8004134:	2001      	movs	r0, #1
 8004136:	e007      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004138:	2320      	movs	r3, #32
 800413a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800413c:	2300      	movs	r3, #0
 800413e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8004142:	2001      	movs	r0, #1
 8004144:	e000      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 8004146:	2002      	movs	r0, #2
}
 8004148:	b003      	add	sp, #12
 800414a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800414e:	2002      	movs	r0, #2
 8004150:	e7fa      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
 8004152:	2002      	movs	r0, #2
 8004154:	e7f8      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 8004156:	2001      	movs	r0, #1
 8004158:	e7f6      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
 800415a:	2001      	movs	r0, #1
 800415c:	e7f4      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
 800415e:	2001      	movs	r0, #1
 8004160:	e7f2      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 8004162:	2002      	movs	r0, #2
 8004164:	e7f0      	b.n	8004148 <HAL_SPI_TransmitReceive+0x236>

08004166 <HAL_SPI_Receive>:
{
 8004166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800416a:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 800416c:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 8004170:	b2f6      	uxtb	r6, r6
 8004172:	2e01      	cmp	r6, #1
 8004174:	f040 80b4 	bne.w	80042e0 <HAL_SPI_Receive+0x17a>
 8004178:	4604      	mov	r4, r0
 800417a:	4689      	mov	r9, r1
 800417c:	4690      	mov	r8, r2
 800417e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004180:	6843      	ldr	r3, [r0, #4]
 8004182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004186:	d101      	bne.n	800418c <HAL_SPI_Receive+0x26>
 8004188:	6883      	ldr	r3, [r0, #8]
 800418a:	b393      	cbz	r3, 80041f2 <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 800418c:	f7fd fe42 	bl	8001e14 <HAL_GetTick>
 8004190:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8004192:	f1b9 0f00 	cmp.w	r9, #0
 8004196:	f000 80a4 	beq.w	80042e2 <HAL_SPI_Receive+0x17c>
 800419a:	f1b8 0f00 	cmp.w	r8, #0
 800419e:	f000 80a0 	beq.w	80042e2 <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 80041a2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f000 809f 	beq.w	80042ea <HAL_SPI_Receive+0x184>
 80041ac:	2301      	movs	r3, #1
 80041ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041b2:	2304      	movs	r3, #4
 80041b4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041bc:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80041c0:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80041c4:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041c8:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80041ca:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80041cc:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80041ce:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041d0:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d8:	d015      	beq.n	8004206 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80041e2:	d103      	bne.n	80041ec <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ea:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041ec:	68e3      	ldr	r3, [r4, #12]
 80041ee:	b1f3      	cbz	r3, 800422e <HAL_SPI_Receive+0xc8>
 80041f0:	e043      	b.n	800427a <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041f2:	2304      	movs	r3, #4
 80041f4:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041f8:	9500      	str	r5, [sp, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	460a      	mov	r2, r1
 80041fe:	f7ff fe88 	bl	8003f12 <HAL_SPI_TransmitReceive>
 8004202:	4606      	mov	r6, r0
 8004204:	e06d      	b.n	80042e2 <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	6813      	ldr	r3, [r2, #0]
 800420a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800420e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	6813      	ldr	r3, [r2, #0]
 8004214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e7de      	b.n	80041da <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421c:	f7fd fdfa 	bl	8001e14 <HAL_GetTick>
 8004220:	1bc0      	subs	r0, r0, r7
 8004222:	42a8      	cmp	r0, r5
 8004224:	d302      	bcc.n	800422c <HAL_SPI_Receive+0xc6>
 8004226:	f1b5 3fff 	cmp.w	r5, #4294967295
 800422a:	d115      	bne.n	8004258 <HAL_SPI_Receive+0xf2>
 800422c:	b1a5      	cbz	r5, 8004258 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 800422e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d042      	beq.n	80042bc <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	f012 0f01 	tst.w	r2, #1
 800423e:	d0ed      	beq.n	800421c <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004240:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004242:	7b1b      	ldrb	r3, [r3, #12]
 8004244:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004246:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004248:	3301      	adds	r3, #1
 800424a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800424c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004256:	e7ea      	b.n	800422e <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 8004258:	2301      	movs	r3, #1
 800425a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800425e:	2300      	movs	r3, #0
 8004260:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004264:	2603      	movs	r6, #3
 8004266:	e03c      	b.n	80042e2 <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004268:	f7fd fdd4 	bl	8001e14 <HAL_GetTick>
 800426c:	1bc0      	subs	r0, r0, r7
 800426e:	42a8      	cmp	r0, r5
 8004270:	d302      	bcc.n	8004278 <HAL_SPI_Receive+0x112>
 8004272:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004276:	d119      	bne.n	80042ac <HAL_SPI_Receive+0x146>
 8004278:	b1c5      	cbz	r5, 80042ac <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 800427a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	b1eb      	cbz	r3, 80042bc <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	f012 0f01 	tst.w	r2, #1
 8004288:	d0ee      	beq.n	8004268 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800428e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004290:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004292:	3302      	adds	r3, #2
 8004294:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8004296:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 800429a:	fa1f fc8c 	uxth.w	ip, ip
 800429e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80042a2:	fa1f fc8c 	uxth.w	ip, ip
 80042a6:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 80042aa:	e7e6      	b.n	800427a <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042b2:	2300      	movs	r3, #0
 80042b4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042b8:	2603      	movs	r6, #3
 80042ba:	e012      	b.n	80042e2 <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042bc:	463a      	mov	r2, r7
 80042be:	4629      	mov	r1, r5
 80042c0:	4620      	mov	r0, r4
 80042c2:	f7ff fc9f 	bl	8003c04 <SPI_EndRxTransaction>
 80042c6:	b108      	cbz	r0, 80042cc <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c8:	2320      	movs	r3, #32
 80042ca:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80042d2:	2300      	movs	r3, #0
 80042d4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80042da:	b913      	cbnz	r3, 80042e2 <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 80042dc:	2600      	movs	r6, #0
 80042de:	e000      	b.n	80042e2 <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 80042e0:	2602      	movs	r6, #2
}
 80042e2:	4630      	mov	r0, r6
 80042e4:	b003      	add	sp, #12
 80042e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80042ea:	2602      	movs	r6, #2
 80042ec:	e7f9      	b.n	80042e2 <HAL_SPI_Receive+0x17c>

080042ee <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	f102 030c 	add.w	r3, r2, #12
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	320c      	adds	r2, #12
 80042fe:	e842 3100 	strex	r1, r3, [r2]
 8004302:	2900      	cmp	r1, #0
 8004304:	d1f3      	bne.n	80042ee <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004306:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	f102 0314 	add.w	r3, r2, #20
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	3214      	adds	r2, #20
 8004316:	e842 3100 	strex	r1, r3, [r2]
 800431a:	2900      	cmp	r1, #0
 800431c:	d1f3      	bne.n	8004306 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004320:	2b01      	cmp	r3, #1
 8004322:	d005      	beq.n	8004330 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	2320      	movs	r3, #32
 8004326:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	2300      	movs	r3, #0
 800432c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800432e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	f102 030c 	add.w	r3, r2, #12
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	320c      	adds	r2, #12
 8004340:	e842 3100 	strex	r1, r3, [r2]
 8004344:	2900      	cmp	r1, #0
 8004346:	d1f3      	bne.n	8004330 <UART_EndRxTransfer+0x42>
 8004348:	e7ec      	b.n	8004324 <UART_EndRxTransfer+0x36>
	...

0800434c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	b510      	push	{r4, lr}
 800434e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004350:	6802      	ldr	r2, [r0, #0]
 8004352:	6913      	ldr	r3, [r2, #16]
 8004354:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004358:	68c1      	ldr	r1, [r0, #12]
 800435a:	430b      	orrs	r3, r1
 800435c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800435e:	6883      	ldr	r3, [r0, #8]
 8004360:	6902      	ldr	r2, [r0, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	6943      	ldr	r3, [r0, #20]
 8004366:	431a      	orrs	r2, r3
 8004368:	69c3      	ldr	r3, [r0, #28]
 800436a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800436c:	6801      	ldr	r1, [r0, #0]
 800436e:	68cb      	ldr	r3, [r1, #12]
 8004370:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004374:	f023 030c 	bic.w	r3, r3, #12
 8004378:	4313      	orrs	r3, r2
 800437a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800437c:	6802      	ldr	r2, [r0, #0]
 800437e:	6953      	ldr	r3, [r2, #20]
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	6981      	ldr	r1, [r0, #24]
 8004386:	430b      	orrs	r3, r1
 8004388:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800438a:	6803      	ldr	r3, [r0, #0]
 800438c:	4a31      	ldr	r2, [pc, #196]	@ (8004454 <UART_SetConfig+0x108>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d006      	beq.n	80043a0 <UART_SetConfig+0x54>
 8004392:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004396:	4293      	cmp	r3, r2
 8004398:	d002      	beq.n	80043a0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800439a:	f7fe fedd 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 800439e:	e001      	b.n	80043a4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043a0:	f7fe feea 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a4:	69e3      	ldr	r3, [r4, #28]
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043aa:	d029      	beq.n	8004400 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ac:	2100      	movs	r1, #0
 80043ae:	1803      	adds	r3, r0, r0
 80043b0:	4149      	adcs	r1, r1
 80043b2:	181b      	adds	r3, r3, r0
 80043b4:	f141 0100 	adc.w	r1, r1, #0
 80043b8:	00c9      	lsls	r1, r1, #3
 80043ba:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	1818      	adds	r0, r3, r0
 80043c2:	6863      	ldr	r3, [r4, #4]
 80043c4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80043c8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80043cc:	f141 0100 	adc.w	r1, r1, #0
 80043d0:	f7fc fc3a 	bl	8000c48 <__aeabi_uldivmod>
 80043d4:	4a20      	ldr	r2, [pc, #128]	@ (8004458 <UART_SetConfig+0x10c>)
 80043d6:	fba2 3100 	umull	r3, r1, r2, r0
 80043da:	0949      	lsrs	r1, r1, #5
 80043dc:	2364      	movs	r3, #100	@ 0x64
 80043de:	fb03 0311 	mls	r3, r3, r1, r0
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	3332      	adds	r3, #50	@ 0x32
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	6821      	ldr	r1, [r4, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }
}
 80043fe:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004400:	2300      	movs	r3, #0
 8004402:	1802      	adds	r2, r0, r0
 8004404:	eb43 0103 	adc.w	r1, r3, r3
 8004408:	1812      	adds	r2, r2, r0
 800440a:	f141 0100 	adc.w	r1, r1, #0
 800440e:	00c9      	lsls	r1, r1, #3
 8004410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004414:	00d2      	lsls	r2, r2, #3
 8004416:	1810      	adds	r0, r2, r0
 8004418:	f141 0100 	adc.w	r1, r1, #0
 800441c:	6862      	ldr	r2, [r4, #4]
 800441e:	1892      	adds	r2, r2, r2
 8004420:	415b      	adcs	r3, r3
 8004422:	f7fc fc11 	bl	8000c48 <__aeabi_uldivmod>
 8004426:	4a0c      	ldr	r2, [pc, #48]	@ (8004458 <UART_SetConfig+0x10c>)
 8004428:	fba2 3100 	umull	r3, r1, r2, r0
 800442c:	0949      	lsrs	r1, r1, #5
 800442e:	2364      	movs	r3, #100	@ 0x64
 8004430:	fb03 0311 	mls	r3, r3, r1, r0
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	3332      	adds	r3, #50	@ 0x32
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	005a      	lsls	r2, r3, #1
 8004440:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8004444:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	4413      	add	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
 8004452:	e7d4      	b.n	80043fe <UART_SetConfig+0xb2>
 8004454:	40011000 	.word	0x40011000
 8004458:	51eb851f 	.word	0x51eb851f

0800445c <UART_WaitOnFlagUntilTimeout>:
{
 800445c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004460:	b083      	sub	sp, #12
 8004462:	4605      	mov	r5, r0
 8004464:	460e      	mov	r6, r1
 8004466:	4617      	mov	r7, r2
 8004468:	4699      	mov	r9, r3
 800446a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	682b      	ldr	r3, [r5, #0]
 8004470:	681c      	ldr	r4, [r3, #0]
 8004472:	ea36 0404 	bics.w	r4, r6, r4
 8004476:	bf0c      	ite	eq
 8004478:	2401      	moveq	r4, #1
 800447a:	2400      	movne	r4, #0
 800447c:	42bc      	cmp	r4, r7
 800447e:	d128      	bne.n	80044d2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8004480:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004484:	d0f3      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004486:	f7fd fcc5 	bl	8001e14 <HAL_GetTick>
 800448a:	eba0 0009 	sub.w	r0, r0, r9
 800448e:	4540      	cmp	r0, r8
 8004490:	d823      	bhi.n	80044da <UART_WaitOnFlagUntilTimeout+0x7e>
 8004492:	f1b8 0f00 	cmp.w	r8, #0
 8004496:	d022      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	f012 0f04 	tst.w	r2, #4
 80044a0:	d0e5      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
 80044a2:	2e80      	cmp	r6, #128	@ 0x80
 80044a4:	d0e3      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
 80044a6:	2e40      	cmp	r6, #64	@ 0x40
 80044a8:	d0e1      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f012 0f08 	tst.w	r2, #8
 80044b0:	d0dd      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044b2:	2400      	movs	r4, #0
 80044b4:	9401      	str	r4, [sp, #4]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	9201      	str	r2, [sp, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80044c0:	4628      	mov	r0, r5
 80044c2:	f7ff ff14 	bl	80042ee <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044c6:	2308      	movs	r3, #8
 80044c8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80044ca:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80044ce:	2001      	movs	r0, #1
 80044d0:	e000      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80044d2:	2000      	movs	r0, #0
}
 80044d4:	b003      	add	sp, #12
 80044d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80044da:	2003      	movs	r0, #3
 80044dc:	e7fa      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x78>
 80044de:	2003      	movs	r0, #3
 80044e0:	e7f8      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x78>

080044e2 <HAL_UART_Init>:
  if (huart == NULL)
 80044e2:	b360      	cbz	r0, 800453e <HAL_UART_Init+0x5c>
{
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80044e8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80044ec:	b313      	cbz	r3, 8004534 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80044ee:	2324      	movs	r3, #36	@ 0x24
 80044f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	68d3      	ldr	r3, [r2, #12]
 80044f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80044fe:	4620      	mov	r0, r4
 8004500:	f7ff ff24 	bl	800434c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	6913      	ldr	r3, [r2, #16]
 8004508:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800450c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	6953      	ldr	r3, [r2, #20]
 8004512:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004516:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	68d3      	ldr	r3, [r2, #12]
 800451c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004520:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	2000      	movs	r0, #0
 8004524:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004526:	2320      	movs	r3, #32
 8004528:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004530:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004532:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004534:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004538:	f7fe face 	bl	8002ad8 <HAL_UART_MspInit>
 800453c:	e7d7      	b.n	80044ee <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800453e:	2001      	movs	r0, #1
}
 8004540:	4770      	bx	lr

08004542 <HAL_UART_Transmit>:
{
 8004542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800454a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b20      	cmp	r3, #32
 8004552:	d156      	bne.n	8004602 <HAL_UART_Transmit+0xc0>
 8004554:	4604      	mov	r4, r0
 8004556:	460d      	mov	r5, r1
 8004558:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800455a:	2900      	cmp	r1, #0
 800455c:	d055      	beq.n	800460a <HAL_UART_Transmit+0xc8>
 800455e:	b90a      	cbnz	r2, 8004564 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8004560:	2001      	movs	r0, #1
 8004562:	e04f      	b.n	8004604 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	2300      	movs	r3, #0
 8004566:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004568:	2321      	movs	r3, #33	@ 0x21
 800456a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800456e:	f7fd fc51 	bl	8001e14 <HAL_GetTick>
 8004572:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004574:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004578:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	d002      	beq.n	800458a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8004584:	f04f 0800 	mov.w	r8, #0
 8004588:	e014      	b.n	80045b4 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458a:	6923      	ldr	r3, [r4, #16]
 800458c:	b32b      	cbz	r3, 80045da <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800458e:	f04f 0800 	mov.w	r8, #0
 8004592:	e00f      	b.n	80045b4 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8004594:	2320      	movs	r3, #32
 8004596:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800459a:	2003      	movs	r0, #3
 800459c:	e032      	b.n	8004604 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800459e:	f838 3b02 	ldrh.w	r3, [r8], #2
 80045a2:	6822      	ldr	r2, [r4, #0]
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80045aa:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80045ac:	b292      	uxth	r2, r2
 80045ae:	3a01      	subs	r2, #1
 80045b0:	b292      	uxth	r2, r2
 80045b2:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045b4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	b193      	cbz	r3, 80045e0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ba:	9600      	str	r6, [sp, #0]
 80045bc:	463b      	mov	r3, r7
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	@ 0x80
 80045c2:	4620      	mov	r0, r4
 80045c4:	f7ff ff4a 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d1e3      	bne.n	8004594 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	d0e6      	beq.n	800459e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045d0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045d8:	e7e7      	b.n	80045aa <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80045da:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80045dc:	2500      	movs	r5, #0
 80045de:	e7e9      	b.n	80045b4 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e0:	9600      	str	r6, [sp, #0]
 80045e2:	463b      	mov	r3, r7
 80045e4:	2200      	movs	r2, #0
 80045e6:	2140      	movs	r1, #64	@ 0x40
 80045e8:	4620      	mov	r0, r4
 80045ea:	f7ff ff37 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 80045ee:	b918      	cbnz	r0, 80045f8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80045f0:	2320      	movs	r3, #32
 80045f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80045f6:	e005      	b.n	8004604 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80045f8:	2320      	movs	r3, #32
 80045fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80045fe:	2003      	movs	r0, #3
 8004600:	e000      	b.n	8004604 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8004602:	2002      	movs	r0, #2
}
 8004604:	b002      	add	sp, #8
 8004606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800460a:	2001      	movs	r0, #1
 800460c:	e7fa      	b.n	8004604 <HAL_UART_Transmit+0xc2>

0800460e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800460e:	e7fe      	b.n	800460e <NMI_Handler>

08004610 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004610:	e7fe      	b.n	8004610 <HardFault_Handler>

08004612 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004612:	e7fe      	b.n	8004612 <MemManage_Handler>

08004614 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004614:	e7fe      	b.n	8004614 <BusFault_Handler>

08004616 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004616:	e7fe      	b.n	8004616 <UsageFault_Handler>

08004618 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004618:	4770      	bx	lr

0800461a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800461a:	4770      	bx	lr

0800461c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800461c:	4770      	bx	lr

0800461e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800461e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004620:	f7fd fbec 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004624:	bd08      	pop	{r3, pc}
	...

08004628 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <SDMMC_GetCmdError+0x30>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0b      	ldr	r2, [pc, #44]	@ (800465c <SDMMC_GetCmdError+0x34>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a5b      	lsrs	r3, r3, #9
 8004634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004638:	fb02 f303 	mul.w	r3, r2, r3
  
  do
  {
    if (count-- == 0U)
 800463c:	461a      	mov	r2, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b13a      	cbz	r2, 8004652 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004642:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8004644:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004648:	d0f8      	beq.n	800463c <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800464a:	23c5      	movs	r3, #197	@ 0xc5
 800464c:	6383      	str	r3, [r0, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800464e:	2000      	movs	r0, #0
 8004650:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004652:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004656:	4770      	bx	lr
 8004658:	20000008 	.word	0x20000008
 800465c:	10624dd3 	.word	0x10624dd3

08004660 <SDIO_Init>:
{
 8004660:	b084      	sub	sp, #16
 8004662:	f10d 0c04 	add.w	ip, sp, #4
 8004666:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800466e:	9a03      	ldr	r2, [sp, #12]
             Init.ClockBypass         |\
 8004670:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8004672:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 8004674:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8004676:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 8004678:	4313      	orrs	r3, r2
             Init.ClockDiv
 800467a:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 800467c:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800467e:	6842      	ldr	r2, [r0, #4]
 8004680:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
 8004684:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8004688:	4313      	orrs	r3, r2
 800468a:	6043      	str	r3, [r0, #4]
}
 800468c:	2000      	movs	r0, #0
 800468e:	b004      	add	sp, #16
 8004690:	4770      	bx	lr

08004692 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8004692:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8004696:	4770      	bx	lr

08004698 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8004698:	680b      	ldr	r3, [r1, #0]
 800469a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 800469e:	2000      	movs	r0, #0
 80046a0:	4770      	bx	lr

080046a2 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80046a2:	2303      	movs	r3, #3
 80046a4:	6003      	str	r3, [r0, #0]
}
 80046a6:	2000      	movs	r0, #0
 80046a8:	4770      	bx	lr

080046aa <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80046aa:	6800      	ldr	r0, [r0, #0]
}
 80046ac:	f000 0003 	and.w	r0, r0, #3
 80046b0:	4770      	bx	lr

080046b2 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80046b2:	680b      	ldr	r3, [r1, #0]
 80046b4:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046b6:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 80046b8:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046ba:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80046bc:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80046be:	4313      	orrs	r3, r2
                       Command->CPSM);
 80046c0:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80046c2:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80046c4:	68c2      	ldr	r2, [r0, #12]
 80046c6:	f36f 020b 	bfc	r2, #0, #12
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60c3      	str	r3, [r0, #12]
}
 80046ce:	2000      	movs	r0, #0
 80046d0:	4770      	bx	lr

080046d2 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 80046d2:	6900      	ldr	r0, [r0, #16]
}
 80046d4:	b2c0      	uxtb	r0, r0
 80046d6:	4770      	bx	lr

080046d8 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80046d8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80046da:	5840      	ldr	r0, [r0, r1]
}  
 80046dc:	4770      	bx	lr

080046de <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80046de:	680b      	ldr	r3, [r1, #0]
 80046e0:	6243      	str	r3, [r0, #36]	@ 0x24
  SDIOx->DLEN = Data->DataLength;
 80046e2:	684b      	ldr	r3, [r1, #4]
 80046e4:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046e6:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 80046e8:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046ea:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 80046ec:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 80046ee:	4313      	orrs	r3, r2
                       Data->DPSM);
 80046f0:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 80046f2:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80046f4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80046f6:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
 80046fa:	4313      	orrs	r3, r2
 80046fc:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 80046fe:	2000      	movs	r0, #0
 8004700:	4770      	bx	lr

08004702 <SDMMC_CmdGoIdleState>:
{
 8004702:	b510      	push	{r4, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800470c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800470e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004710:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004716:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004718:	a901      	add	r1, sp, #4
 800471a:	f7ff ffca 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff ff82 	bl	8004628 <SDMMC_GetCmdError>
}
 8004724:	b006      	add	sp, #24
 8004726:	bd10      	pop	{r4, pc}

08004728 <SDMMC_GetCmdResp1>:
{
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4604      	mov	r4, r0
 800472c:	460d      	mov	r5, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800472e:	4b50      	ldr	r3, [pc, #320]	@ (8004870 <SDMMC_GetCmdResp1+0x148>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4950      	ldr	r1, [pc, #320]	@ (8004874 <SDMMC_GetCmdResp1+0x14c>)
 8004734:	fba1 1303 	umull	r1, r3, r1, r3
 8004738:	0a5b      	lsrs	r3, r3, #9
 800473a:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800473e:	4613      	mov	r3, r2
 8004740:	3a01      	subs	r2, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d05d      	beq.n	8004802 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8004746:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004748:	f013 0f45 	tst.w	r3, #69	@ 0x45
 800474c:	d0f7      	beq.n	800473e <SDMMC_GetCmdResp1+0x16>
 800474e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004752:	d1f4      	bne.n	800473e <SDMMC_GetCmdResp1+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004756:	f013 0f04 	tst.w	r3, #4
 800475a:	d106      	bne.n	800476a <SDMMC_GetCmdResp1+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800475c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800475e:	f013 0f01 	tst.w	r3, #1
 8004762:	d005      	beq.n	8004770 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004764:	2001      	movs	r0, #1
 8004766:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004768:	e04d      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800476a:	2004      	movs	r0, #4
 800476c:	63a0      	str	r0, [r4, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800476e:	e04a      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004770:	23c5      	movs	r3, #197	@ 0xc5
 8004772:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004774:	4620      	mov	r0, r4
 8004776:	f7ff ffac 	bl	80046d2 <SDIO_GetCommandResponse>
 800477a:	42a8      	cmp	r0, r5
 800477c:	d001      	beq.n	8004782 <SDMMC_GetCmdResp1+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800477e:	2001      	movs	r0, #1
 8004780:	e041      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004782:	2100      	movs	r1, #0
 8004784:	4620      	mov	r0, r4
 8004786:	f7ff ffa7 	bl	80046d8 <SDIO_GetResponse>
 800478a:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800478c:	483a      	ldr	r0, [pc, #232]	@ (8004878 <SDMMC_GetCmdResp1+0x150>)
 800478e:	4018      	ands	r0, r3
 8004790:	b3c8      	cbz	r0, 8004806 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004792:	2b00      	cmp	r3, #0
 8004794:	db38      	blt.n	8004808 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004796:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800479a:	d138      	bne.n	800480e <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800479c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80047a0:	d137      	bne.n	8004812 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80047a2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80047a6:	d136      	bne.n	8004816 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80047a8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80047ac:	d136      	bne.n	800481c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80047ae:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80047b2:	d136      	bne.n	8004822 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80047b4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80047b8:	d136      	bne.n	8004828 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80047ba:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80047be:	d136      	bne.n	800482e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80047c0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80047c4:	d136      	bne.n	8004834 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80047c6:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80047ca:	d136      	bne.n	800483a <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80047cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80047d0:	d136      	bne.n	8004840 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80047d2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80047d6:	d136      	bne.n	8004846 <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80047d8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80047dc:	d136      	bne.n	800484c <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80047de:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80047e2:	d136      	bne.n	8004852 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80047e4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80047e8:	d136      	bne.n	8004858 <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80047ea:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80047ee:	d136      	bne.n	800485e <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80047f0:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80047f4:	d136      	bne.n	8004864 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80047f6:	f013 0f08 	tst.w	r3, #8
 80047fa:	d036      	beq.n	800486a <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80047fc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004800:	e001      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8004802:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004806:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004808:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800480c:	e7fb      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800480e:	2040      	movs	r0, #64	@ 0x40
 8004810:	e7f9      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004812:	2080      	movs	r0, #128	@ 0x80
 8004814:	e7f7      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004816:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800481a:	e7f4      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800481c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004820:	e7f1      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004822:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004826:	e7ee      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004828:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800482c:	e7eb      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800482e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004832:	e7e8      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004834:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004838:	e7e5      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800483a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800483e:	e7e2      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8004840:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004844:	e7df      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004846:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800484a:	e7dc      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800484c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004850:	e7d9      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004852:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004856:	e7d6      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004858:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800485c:	e7d3      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800485e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004862:	e7d0      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8004864:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004868:	e7cd      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800486a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800486e:	e7ca      	b.n	8004806 <SDMMC_GetCmdResp1+0xde>
 8004870:	20000008 	.word	0x20000008
 8004874:	10624dd3 	.word	0x10624dd3
 8004878:	fdffe008 	.word	0xfdffe008

0800487c <SDMMC_CmdBlockLength>:
{
 800487c:	b530      	push	{r4, r5, lr}
 800487e:	b087      	sub	sp, #28
 8004880:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004882:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004884:	2510      	movs	r5, #16
 8004886:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004888:	2340      	movs	r3, #64	@ 0x40
 800488a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800488c:	2300      	movs	r3, #0
 800488e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004894:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004896:	a901      	add	r1, sp, #4
 8004898:	f7ff ff0b 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800489c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a0:	4629      	mov	r1, r5
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7ff ff40 	bl	8004728 <SDMMC_GetCmdResp1>
}
 80048a8:	b007      	add	sp, #28
 80048aa:	bd30      	pop	{r4, r5, pc}

080048ac <SDMMC_CmdReadSingleBlock>:
{
 80048ac:	b530      	push	{r4, r5, lr}
 80048ae:	b087      	sub	sp, #28
 80048b0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048b2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80048b4:	2511      	movs	r5, #17
 80048b6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048b8:	2340      	movs	r3, #64	@ 0x40
 80048ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048bc:	2300      	movs	r3, #0
 80048be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048c4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048c6:	a901      	add	r1, sp, #4
 80048c8:	f7ff fef3 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80048cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d0:	4629      	mov	r1, r5
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7ff ff28 	bl	8004728 <SDMMC_GetCmdResp1>
}
 80048d8:	b007      	add	sp, #28
 80048da:	bd30      	pop	{r4, r5, pc}

080048dc <SDMMC_CmdReadMultiBlock>:
{
 80048dc:	b530      	push	{r4, r5, lr}
 80048de:	b087      	sub	sp, #28
 80048e0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048e2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80048e4:	2512      	movs	r5, #18
 80048e6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048e8:	2340      	movs	r3, #64	@ 0x40
 80048ea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ec:	2300      	movs	r3, #0
 80048ee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048f4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048f6:	a901      	add	r1, sp, #4
 80048f8:	f7ff fedb 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80048fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004900:	4629      	mov	r1, r5
 8004902:	4620      	mov	r0, r4
 8004904:	f7ff ff10 	bl	8004728 <SDMMC_GetCmdResp1>
}
 8004908:	b007      	add	sp, #28
 800490a:	bd30      	pop	{r4, r5, pc}

0800490c <SDMMC_CmdWriteSingleBlock>:
{
 800490c:	b530      	push	{r4, r5, lr}
 800490e:	b087      	sub	sp, #28
 8004910:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004912:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004914:	2518      	movs	r5, #24
 8004916:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004918:	2340      	movs	r3, #64	@ 0x40
 800491a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800491c:	2300      	movs	r3, #0
 800491e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004924:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004926:	a901      	add	r1, sp, #4
 8004928:	f7ff fec3 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800492c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004930:	4629      	mov	r1, r5
 8004932:	4620      	mov	r0, r4
 8004934:	f7ff fef8 	bl	8004728 <SDMMC_GetCmdResp1>
}
 8004938:	b007      	add	sp, #28
 800493a:	bd30      	pop	{r4, r5, pc}

0800493c <SDMMC_CmdWriteMultiBlock>:
{
 800493c:	b530      	push	{r4, r5, lr}
 800493e:	b087      	sub	sp, #28
 8004940:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004942:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004944:	2519      	movs	r5, #25
 8004946:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004948:	2340      	movs	r3, #64	@ 0x40
 800494a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800494c:	2300      	movs	r3, #0
 800494e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004954:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004956:	a901      	add	r1, sp, #4
 8004958:	f7ff feab 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800495c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004960:	4629      	mov	r1, r5
 8004962:	4620      	mov	r0, r4
 8004964:	f7ff fee0 	bl	8004728 <SDMMC_GetCmdResp1>
}
 8004968:	b007      	add	sp, #28
 800496a:	bd30      	pop	{r4, r5, pc}

0800496c <SDMMC_CmdStopTransfer>:
{
 800496c:	b530      	push	{r4, r5, lr}
 800496e:	b087      	sub	sp, #28
 8004970:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004976:	250c      	movs	r5, #12
 8004978:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800497a:	2240      	movs	r2, #64	@ 0x40
 800497c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800497e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004984:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004986:	a901      	add	r1, sp, #4
 8004988:	f7ff fe93 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800498c:	4a03      	ldr	r2, [pc, #12]	@ (800499c <SDMMC_CmdStopTransfer+0x30>)
 800498e:	4629      	mov	r1, r5
 8004990:	4620      	mov	r0, r4
 8004992:	f7ff fec9 	bl	8004728 <SDMMC_GetCmdResp1>
}
 8004996:	b007      	add	sp, #28
 8004998:	bd30      	pop	{r4, r5, pc}
 800499a:	bf00      	nop
 800499c:	05f5e100 	.word	0x05f5e100

080049a0 <SDMMC_CmdSelDesel>:
{
 80049a0:	b530      	push	{r4, r5, lr}
 80049a2:	b087      	sub	sp, #28
 80049a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80049a6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80049a8:	2507      	movs	r5, #7
 80049aa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049ac:	2340      	movs	r3, #64	@ 0x40
 80049ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049b0:	2300      	movs	r3, #0
 80049b2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049b8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ba:	a901      	add	r1, sp, #4
 80049bc:	f7ff fe79 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80049c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c4:	4629      	mov	r1, r5
 80049c6:	4620      	mov	r0, r4
 80049c8:	f7ff feae 	bl	8004728 <SDMMC_GetCmdResp1>
}
 80049cc:	b007      	add	sp, #28
 80049ce:	bd30      	pop	{r4, r5, pc}

080049d0 <SDMMC_CmdAppCommand>:
{
 80049d0:	b530      	push	{r4, r5, lr}
 80049d2:	b087      	sub	sp, #28
 80049d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80049d6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80049d8:	2537      	movs	r5, #55	@ 0x37
 80049da:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049dc:	2340      	movs	r3, #64	@ 0x40
 80049de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049e0:	2300      	movs	r3, #0
 80049e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049e8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ea:	a901      	add	r1, sp, #4
 80049ec:	f7ff fe61 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80049f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f4:	4629      	mov	r1, r5
 80049f6:	4620      	mov	r0, r4
 80049f8:	f7ff fe96 	bl	8004728 <SDMMC_GetCmdResp1>
}
 80049fc:	b007      	add	sp, #28
 80049fe:	bd30      	pop	{r4, r5, pc}

08004a00 <SDMMC_CmdSendStatus>:
{
 8004a00:	b530      	push	{r4, r5, lr}
 8004a02:	b087      	sub	sp, #28
 8004a04:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004a06:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a08:	250d      	movs	r5, #13
 8004a0a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a0c:	2340      	movs	r3, #64	@ 0x40
 8004a0e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a10:	2300      	movs	r3, #0
 8004a12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a18:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a1a:	a901      	add	r1, sp, #4
 8004a1c:	f7ff fe49 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a24:	4629      	mov	r1, r5
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff fe7e 	bl	8004728 <SDMMC_GetCmdResp1>
}
 8004a2c:	b007      	add	sp, #28
 8004a2e:	bd30      	pop	{r4, r5, pc}

08004a30 <SDMMC_GetCmdResp2>:
{
 8004a30:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <SDMMC_GetCmdResp2+0x54>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a14      	ldr	r2, [pc, #80]	@ (8004a88 <SDMMC_GetCmdResp2+0x58>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	0a5b      	lsrs	r3, r3, #9
 8004a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004a46:	461a      	mov	r2, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b1ba      	cbz	r2, 8004a7c <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDIOx->STA;
 8004a4c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a4e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8004a52:	d0f8      	beq.n	8004a46 <SDMMC_GetCmdResp2+0x16>
 8004a54:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004a58:	d1f5      	bne.n	8004a46 <SDMMC_GetCmdResp2+0x16>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a5a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004a5c:	f013 0f04 	tst.w	r3, #4
 8004a60:	d106      	bne.n	8004a70 <SDMMC_GetCmdResp2+0x40>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a62:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004a64:	f010 0001 	ands.w	r0, r0, #1
 8004a68:	d105      	bne.n	8004a76 <SDMMC_GetCmdResp2+0x46>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a6a:	23c5      	movs	r3, #197	@ 0xc5
 8004a6c:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004a6e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a70:	2004      	movs	r0, #4
 8004a72:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a74:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a76:	2001      	movs	r0, #1
 8004a78:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a7a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004a7c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000008 	.word	0x20000008
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <SDMMC_CmdSendCID>:
{
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004a96:	2202      	movs	r2, #2
 8004a98:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004a9a:	22c0      	movs	r2, #192	@ 0xc0
 8004a9c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a9e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aa4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aa6:	a901      	add	r1, sp, #4
 8004aa8:	f7ff fe03 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff ffbf 	bl	8004a30 <SDMMC_GetCmdResp2>
}
 8004ab2:	b006      	add	sp, #24
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <SDMMC_CmdSendCSD>:
{
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004abc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004abe:	2309      	movs	r3, #9
 8004ac0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ac2:	23c0      	movs	r3, #192	@ 0xc0
 8004ac4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ace:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ad0:	a901      	add	r1, sp, #4
 8004ad2:	f7ff fdee 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff ffaa 	bl	8004a30 <SDMMC_GetCmdResp2>
}
 8004adc:	b006      	add	sp, #24
 8004ade:	bd10      	pop	{r4, pc}

08004ae0 <SDMMC_GetCmdResp3>:
{
 8004ae0:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <SDMMC_GetCmdResp3+0x44>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a10      	ldr	r2, [pc, #64]	@ (8004b28 <SDMMC_GetCmdResp3+0x48>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	0a5b      	lsrs	r3, r3, #9
 8004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004af6:	461a      	mov	r2, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b182      	cbz	r2, 8004b1e <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDIOx->STA;
 8004afc:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004afe:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8004b02:	d0f8      	beq.n	8004af6 <SDMMC_GetCmdResp3+0x16>
 8004b04:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004b08:	d1f5      	bne.n	8004af6 <SDMMC_GetCmdResp3+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b0a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004b0c:	f010 0004 	ands.w	r0, r0, #4
 8004b10:	d102      	bne.n	8004b18 <SDMMC_GetCmdResp3+0x38>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b12:	23c5      	movs	r3, #197	@ 0xc5
 8004b14:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004b16:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b18:	2004      	movs	r0, #4
 8004b1a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b1c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004b1e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004b22:	4770      	bx	lr
 8004b24:	20000008 	.word	0x20000008
 8004b28:	10624dd3 	.word	0x10624dd3

08004b2c <SDMMC_CmdAppOperCommand>:
{
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b32:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8004b36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004b3a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b3c:	2329      	movs	r3, #41	@ 0x29
 8004b3e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b40:	2340      	movs	r3, #64	@ 0x40
 8004b42:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b44:	2300      	movs	r3, #0
 8004b46:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b4c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b4e:	a901      	add	r1, sp, #4
 8004b50:	f7ff fdaf 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff ffc3 	bl	8004ae0 <SDMMC_GetCmdResp3>
}
 8004b5a:	b006      	add	sp, #24
 8004b5c:	bd10      	pop	{r4, pc}
	...

08004b60 <SDMMC_GetCmdResp6>:
{
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	4605      	mov	r5, r0
 8004b64:	460e      	mov	r6, r1
 8004b66:	4617      	mov	r7, r2
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b68:	4b23      	ldr	r3, [pc, #140]	@ (8004bf8 <SDMMC_GetCmdResp6+0x98>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a23      	ldr	r2, [pc, #140]	@ (8004bfc <SDMMC_GetCmdResp6+0x9c>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0a5b      	lsrs	r3, r3, #9
 8004b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b38a      	cbz	r2, 8004be6 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDIOx->STA;
 8004b82:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b84:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8004b88:	d0f8      	beq.n	8004b7c <SDMMC_GetCmdResp6+0x1c>
 8004b8a:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8004b8e:	d1f5      	bne.n	8004b7c <SDMMC_GetCmdResp6+0x1c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b90:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004b92:	f013 0f04 	tst.w	r3, #4
 8004b96:	d106      	bne.n	8004ba6 <SDMMC_GetCmdResp6+0x46>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b98:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004b9a:	f013 0f01 	tst.w	r3, #1
 8004b9e:	d005      	beq.n	8004bac <SDMMC_GetCmdResp6+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ba4:	e021      	b.n	8004bea <SDMMC_GetCmdResp6+0x8a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ba6:	2004      	movs	r0, #4
 8004ba8:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004baa:	e01e      	b.n	8004bea <SDMMC_GetCmdResp6+0x8a>
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004bac:	4628      	mov	r0, r5
 8004bae:	f7ff fd90 	bl	80046d2 <SDIO_GetCommandResponse>
 8004bb2:	42b0      	cmp	r0, r6
 8004bb4:	d001      	beq.n	8004bba <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bb6:	2001      	movs	r0, #1
 8004bb8:	e017      	b.n	8004bea <SDMMC_GetCmdResp6+0x8a>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004bba:	23c5      	movs	r3, #197	@ 0xc5
 8004bbc:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f7ff fd89 	bl	80046d8 <SDIO_GetResponse>
 8004bc6:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004bc8:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 8004bcc:	d008      	beq.n	8004be0 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004bce:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004bd2:	d10b      	bne.n	8004bec <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004bd4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004bd8:	d00b      	beq.n	8004bf2 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004bda:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004bde:	e004      	b.n	8004bea <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 8004be4:	e001      	b.n	8004bea <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 8004be6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004bec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004bf0:	e7fb      	b.n	8004bea <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bf2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004bf6:	e7f8      	b.n	8004bea <SDMMC_GetCmdResp6+0x8a>
 8004bf8:	20000008 	.word	0x20000008
 8004bfc:	10624dd3 	.word	0x10624dd3

08004c00 <SDMMC_CmdSetRelAdd>:
{
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	4604      	mov	r4, r0
 8004c06:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004c0c:	2603      	movs	r6, #3
 8004c0e:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c10:	2240      	movs	r2, #64	@ 0x40
 8004c12:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c14:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c1c:	a901      	add	r1, sp, #4
 8004c1e:	f7ff fd48 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004c22:	462a      	mov	r2, r5
 8004c24:	4631      	mov	r1, r6
 8004c26:	4620      	mov	r0, r4
 8004c28:	f7ff ff9a 	bl	8004b60 <SDMMC_GetCmdResp6>
}
 8004c2c:	b006      	add	sp, #24
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}

08004c30 <SDMMC_GetCmdResp7>:
{
 8004c30:	4601      	mov	r1, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c32:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <SDMMC_GetCmdResp7+0x5c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a16      	ldr	r2, [pc, #88]	@ (8004c90 <SDMMC_GetCmdResp7+0x60>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 8004c46:	461a      	mov	r2, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b1e2      	cbz	r2, 8004c86 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDIOx->STA;
 8004c4c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c4e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8004c52:	d0f8      	beq.n	8004c46 <SDMMC_GetCmdResp7+0x16>
 8004c54:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004c58:	d1f5      	bne.n	8004c46 <SDMMC_GetCmdResp7+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c5a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004c5c:	f013 0f04 	tst.w	r3, #4
 8004c60:	d10b      	bne.n	8004c7a <SDMMC_GetCmdResp7+0x4a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c62:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8004c64:	f013 0301 	ands.w	r3, r3, #1
 8004c68:	d10a      	bne.n	8004c80 <SDMMC_GetCmdResp7+0x50>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004c6a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004c6c:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8004c70:	d00b      	beq.n	8004c8a <SDMMC_GetCmdResp7+0x5a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004c72:	2240      	movs	r2, #64	@ 0x40
 8004c74:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004c76:	4618      	mov	r0, r3
 8004c78:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c7a:	2004      	movs	r0, #4
 8004c7c:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c7e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c80:	2001      	movs	r0, #1
 8004c82:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c84:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004c86:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004c8a:	4770      	bx	lr
 8004c8c:	20000008 	.word	0x20000008
 8004c90:	10624dd3 	.word	0x10624dd3

08004c94 <SDMMC_CmdOperCond>:
{
 8004c94:	b510      	push	{r4, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004c9a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004c9e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ca4:	2340      	movs	r3, #64	@ 0x40
 8004ca6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cb0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cb2:	a901      	add	r1, sp, #4
 8004cb4:	f7ff fcfd 	bl	80046b2 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f7ff ffb9 	bl	8004c30 <SDMMC_GetCmdResp7>
}
 8004cbe:	b006      	add	sp, #24
 8004cc0:	bd10      	pop	{r4, pc}

08004cc2 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	4770      	bx	lr

08004cc6 <_kill>:

int _kill(int pid, int sig)
{
 8004cc6:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cc8:	f001 f966 	bl	8005f98 <__errno>
 8004ccc:	2316      	movs	r3, #22
 8004cce:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	bd08      	pop	{r3, pc}

08004cd6 <_exit>:

void _exit (int status)
{
 8004cd6:	b508      	push	{r3, lr}
  _kill(status, -1);
 8004cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cdc:	f7ff fff3 	bl	8004cc6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ce0:	e7fe      	b.n	8004ce0 <_exit+0xa>

08004ce2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ce2:	b570      	push	{r4, r5, r6, lr}
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce8:	2500      	movs	r5, #0
 8004cea:	e006      	b.n	8004cfa <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8004cec:	f3af 8000 	nop.w
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cf6:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8004cf8:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cfa:	42b5      	cmp	r5, r6
 8004cfc:	dbf6      	blt.n	8004cec <_read+0xa>
  }

  return len;
}
 8004cfe:	4630      	mov	r0, r6
 8004d00:	bd70      	pop	{r4, r5, r6, pc}

08004d02 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004d02:	f04f 30ff 	mov.w	r0, #4294967295
 8004d06:	4770      	bx	lr

08004d08 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d0c:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004d0e:	2000      	movs	r0, #0
 8004d10:	4770      	bx	lr

08004d12 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004d12:	2001      	movs	r0, #1
 8004d14:	4770      	bx	lr

08004d16 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004d16:	2000      	movs	r0, #0
 8004d18:	4770      	bx	lr
	...

08004d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d20:	4a0c      	ldr	r2, [pc, #48]	@ (8004d54 <_sbrk+0x38>)
 8004d22:	490d      	ldr	r1, [pc, #52]	@ (8004d58 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d24:	480d      	ldr	r0, [pc, #52]	@ (8004d5c <_sbrk+0x40>)
 8004d26:	6800      	ldr	r0, [r0, #0]
 8004d28:	b140      	cbz	r0, 8004d3c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d2a:	480c      	ldr	r0, [pc, #48]	@ (8004d5c <_sbrk+0x40>)
 8004d2c:	6800      	ldr	r0, [r0, #0]
 8004d2e:	4403      	add	r3, r0
 8004d30:	1a52      	subs	r2, r2, r1
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d806      	bhi.n	8004d44 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004d36:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <_sbrk+0x40>)
 8004d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004d3a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004d3c:	4807      	ldr	r0, [pc, #28]	@ (8004d5c <_sbrk+0x40>)
 8004d3e:	4c08      	ldr	r4, [pc, #32]	@ (8004d60 <_sbrk+0x44>)
 8004d40:	6004      	str	r4, [r0, #0]
 8004d42:	e7f2      	b.n	8004d2a <_sbrk+0xe>
    errno = ENOMEM;
 8004d44:	f001 f928 	bl	8005f98 <__errno>
 8004d48:	230c      	movs	r3, #12
 8004d4a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	e7f3      	b.n	8004d3a <_sbrk+0x1e>
 8004d52:	bf00      	nop
 8004d54:	20020000 	.word	0x20020000
 8004d58:	00000400 	.word	0x00000400
 8004d5c:	200003b4 	.word	0x200003b4
 8004d60:	20000508 	.word	0x20000508

08004d64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d64:	4a03      	ldr	r2, [pc, #12]	@ (8004d74 <SystemInit+0x10>)
 8004d66:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004d6a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004d7c:	f7ff fff2 	bl	8004d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d80:	480c      	ldr	r0, [pc, #48]	@ (8004db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d82:	490d      	ldr	r1, [pc, #52]	@ (8004db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d84:	4a0d      	ldr	r2, [pc, #52]	@ (8004dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d88:	e002      	b.n	8004d90 <LoopCopyDataInit>

08004d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d8e:	3304      	adds	r3, #4

08004d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d94:	d3f9      	bcc.n	8004d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d96:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d98:	4c0a      	ldr	r4, [pc, #40]	@ (8004dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d9c:	e001      	b.n	8004da2 <LoopFillZerobss>

08004d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004da0:	3204      	adds	r2, #4

08004da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004da4:	d3fb      	bcc.n	8004d9e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004da6:	f001 f8fd 	bl	8005fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004daa:	f7fc fd57 	bl	800185c <main>
  bx  lr    
 8004dae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004db8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004dbc:	08009d54 	.word	0x08009d54
  ldr r2, =_sbss
 8004dc0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004dc4:	20000504 	.word	0x20000504

08004dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dc8:	e7fe      	b.n	8004dc8 <ADC_IRQHandler>

08004dca <__cvt>:
 8004dca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dce:	ec57 6b10 	vmov	r6, r7, d0
 8004dd2:	2f00      	cmp	r7, #0
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	463b      	mov	r3, r7
 8004dda:	bfbb      	ittet	lt
 8004ddc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004de0:	461f      	movlt	r7, r3
 8004de2:	2300      	movge	r3, #0
 8004de4:	232d      	movlt	r3, #45	@ 0x2d
 8004de6:	700b      	strb	r3, [r1, #0]
 8004de8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dea:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004dee:	4691      	mov	r9, r2
 8004df0:	f023 0820 	bic.w	r8, r3, #32
 8004df4:	bfbc      	itt	lt
 8004df6:	4632      	movlt	r2, r6
 8004df8:	4616      	movlt	r6, r2
 8004dfa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dfe:	d005      	beq.n	8004e0c <__cvt+0x42>
 8004e00:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e04:	d100      	bne.n	8004e08 <__cvt+0x3e>
 8004e06:	3401      	adds	r4, #1
 8004e08:	2102      	movs	r1, #2
 8004e0a:	e000      	b.n	8004e0e <__cvt+0x44>
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	ab03      	add	r3, sp, #12
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	ab02      	add	r3, sp, #8
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	ec47 6b10 	vmov	d0, r6, r7
 8004e1a:	4653      	mov	r3, sl
 8004e1c:	4622      	mov	r2, r4
 8004e1e:	f001 f977 	bl	8006110 <_dtoa_r>
 8004e22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e26:	4605      	mov	r5, r0
 8004e28:	d119      	bne.n	8004e5e <__cvt+0x94>
 8004e2a:	f019 0f01 	tst.w	r9, #1
 8004e2e:	d00e      	beq.n	8004e4e <__cvt+0x84>
 8004e30:	eb00 0904 	add.w	r9, r0, r4
 8004e34:	2200      	movs	r2, #0
 8004e36:	2300      	movs	r3, #0
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fe24 	bl	8000a88 <__aeabi_dcmpeq>
 8004e40:	b108      	cbz	r0, 8004e46 <__cvt+0x7c>
 8004e42:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e46:	2230      	movs	r2, #48	@ 0x30
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	454b      	cmp	r3, r9
 8004e4c:	d31e      	bcc.n	8004e8c <__cvt+0xc2>
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e52:	1b5b      	subs	r3, r3, r5
 8004e54:	4628      	mov	r0, r5
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	b004      	add	sp, #16
 8004e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e62:	eb00 0904 	add.w	r9, r0, r4
 8004e66:	d1e5      	bne.n	8004e34 <__cvt+0x6a>
 8004e68:	7803      	ldrb	r3, [r0, #0]
 8004e6a:	2b30      	cmp	r3, #48	@ 0x30
 8004e6c:	d10a      	bne.n	8004e84 <__cvt+0xba>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2300      	movs	r3, #0
 8004e72:	4630      	mov	r0, r6
 8004e74:	4639      	mov	r1, r7
 8004e76:	f7fb fe07 	bl	8000a88 <__aeabi_dcmpeq>
 8004e7a:	b918      	cbnz	r0, 8004e84 <__cvt+0xba>
 8004e7c:	f1c4 0401 	rsb	r4, r4, #1
 8004e80:	f8ca 4000 	str.w	r4, [sl]
 8004e84:	f8da 3000 	ldr.w	r3, [sl]
 8004e88:	4499      	add	r9, r3
 8004e8a:	e7d3      	b.n	8004e34 <__cvt+0x6a>
 8004e8c:	1c59      	adds	r1, r3, #1
 8004e8e:	9103      	str	r1, [sp, #12]
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	e7d9      	b.n	8004e48 <__cvt+0x7e>

08004e94 <__exponent>:
 8004e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e96:	2900      	cmp	r1, #0
 8004e98:	bfba      	itte	lt
 8004e9a:	4249      	neglt	r1, r1
 8004e9c:	232d      	movlt	r3, #45	@ 0x2d
 8004e9e:	232b      	movge	r3, #43	@ 0x2b
 8004ea0:	2909      	cmp	r1, #9
 8004ea2:	7002      	strb	r2, [r0, #0]
 8004ea4:	7043      	strb	r3, [r0, #1]
 8004ea6:	dd29      	ble.n	8004efc <__exponent+0x68>
 8004ea8:	f10d 0307 	add.w	r3, sp, #7
 8004eac:	461d      	mov	r5, r3
 8004eae:	270a      	movs	r7, #10
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	fbb1 f6f7 	udiv	r6, r1, r7
 8004eb6:	fb07 1416 	mls	r4, r7, r6, r1
 8004eba:	3430      	adds	r4, #48	@ 0x30
 8004ebc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	2c63      	cmp	r4, #99	@ 0x63
 8004ec4:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ec8:	4631      	mov	r1, r6
 8004eca:	dcf1      	bgt.n	8004eb0 <__exponent+0x1c>
 8004ecc:	3130      	adds	r1, #48	@ 0x30
 8004ece:	1e94      	subs	r4, r2, #2
 8004ed0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ed4:	1c41      	adds	r1, r0, #1
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	d30a      	bcc.n	8004ef2 <__exponent+0x5e>
 8004edc:	f10d 0309 	add.w	r3, sp, #9
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	42ac      	cmp	r4, r5
 8004ee4:	bf88      	it	hi
 8004ee6:	2300      	movhi	r3, #0
 8004ee8:	3302      	adds	r3, #2
 8004eea:	4403      	add	r3, r0
 8004eec:	1a18      	subs	r0, r3, r0
 8004eee:	b003      	add	sp, #12
 8004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ef6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004efa:	e7ed      	b.n	8004ed8 <__exponent+0x44>
 8004efc:	2330      	movs	r3, #48	@ 0x30
 8004efe:	3130      	adds	r1, #48	@ 0x30
 8004f00:	7083      	strb	r3, [r0, #2]
 8004f02:	70c1      	strb	r1, [r0, #3]
 8004f04:	1d03      	adds	r3, r0, #4
 8004f06:	e7f1      	b.n	8004eec <__exponent+0x58>

08004f08 <_printf_float>:
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	b08d      	sub	sp, #52	@ 0x34
 8004f0e:	460c      	mov	r4, r1
 8004f10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004f14:	4616      	mov	r6, r2
 8004f16:	461f      	mov	r7, r3
 8004f18:	4605      	mov	r5, r0
 8004f1a:	f000 fff3 	bl	8005f04 <_localeconv_r>
 8004f1e:	6803      	ldr	r3, [r0, #0]
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fb f984 	bl	8000230 <strlen>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f30:	9005      	str	r0, [sp, #20]
 8004f32:	3307      	adds	r3, #7
 8004f34:	f023 0307 	bic.w	r3, r3, #7
 8004f38:	f103 0208 	add.w	r2, r3, #8
 8004f3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f40:	f8d4 b000 	ldr.w	fp, [r4]
 8004f44:	f8c8 2000 	str.w	r2, [r8]
 8004f48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f50:	9307      	str	r3, [sp, #28]
 8004f52:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80051d0 <_printf_float+0x2c8>)
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	f7fb fdc2 	bl	8000aec <__aeabi_dcmpun>
 8004f68:	bb70      	cbnz	r0, 8004fc8 <_printf_float+0xc0>
 8004f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f6e:	4b98      	ldr	r3, [pc, #608]	@ (80051d0 <_printf_float+0x2c8>)
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	f7fb fd9c 	bl	8000ab0 <__aeabi_dcmple>
 8004f78:	bb30      	cbnz	r0, 8004fc8 <_printf_float+0xc0>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f7fb fd8b 	bl	8000a9c <__aeabi_dcmplt>
 8004f86:	b110      	cbz	r0, 8004f8e <_printf_float+0x86>
 8004f88:	232d      	movs	r3, #45	@ 0x2d
 8004f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f8e:	4a91      	ldr	r2, [pc, #580]	@ (80051d4 <_printf_float+0x2cc>)
 8004f90:	4b91      	ldr	r3, [pc, #580]	@ (80051d8 <_printf_float+0x2d0>)
 8004f92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f96:	bf8c      	ite	hi
 8004f98:	4690      	movhi	r8, r2
 8004f9a:	4698      	movls	r8, r3
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	6123      	str	r3, [r4, #16]
 8004fa0:	f02b 0304 	bic.w	r3, fp, #4
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	f04f 0900 	mov.w	r9, #0
 8004faa:	9700      	str	r7, [sp, #0]
 8004fac:	4633      	mov	r3, r6
 8004fae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 f9d2 	bl	800535c <_printf_common>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f040 808d 	bne.w	80050d8 <_printf_float+0x1d0>
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	b00d      	add	sp, #52	@ 0x34
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fb fd8c 	bl	8000aec <__aeabi_dcmpun>
 8004fd4:	b140      	cbz	r0, 8004fe8 <_printf_float+0xe0>
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfbc      	itt	lt
 8004fdc:	232d      	movlt	r3, #45	@ 0x2d
 8004fde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80051dc <_printf_float+0x2d4>)
 8004fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80051e0 <_printf_float+0x2d8>)
 8004fe6:	e7d4      	b.n	8004f92 <_printf_float+0x8a>
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004fee:	9206      	str	r2, [sp, #24]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	d13b      	bne.n	800506c <_printf_float+0x164>
 8004ff4:	2306      	movs	r3, #6
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6022      	str	r2, [r4, #0]
 8005000:	9303      	str	r3, [sp, #12]
 8005002:	ab0a      	add	r3, sp, #40	@ 0x28
 8005004:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005008:	ab09      	add	r3, sp, #36	@ 0x24
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	6861      	ldr	r1, [r4, #4]
 800500e:	ec49 8b10 	vmov	d0, r8, r9
 8005012:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005016:	4628      	mov	r0, r5
 8005018:	f7ff fed7 	bl	8004dca <__cvt>
 800501c:	9b06      	ldr	r3, [sp, #24]
 800501e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005020:	2b47      	cmp	r3, #71	@ 0x47
 8005022:	4680      	mov	r8, r0
 8005024:	d129      	bne.n	800507a <_printf_float+0x172>
 8005026:	1cc8      	adds	r0, r1, #3
 8005028:	db02      	blt.n	8005030 <_printf_float+0x128>
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	4299      	cmp	r1, r3
 800502e:	dd41      	ble.n	80050b4 <_printf_float+0x1ac>
 8005030:	f1aa 0a02 	sub.w	sl, sl, #2
 8005034:	fa5f fa8a 	uxtb.w	sl, sl
 8005038:	3901      	subs	r1, #1
 800503a:	4652      	mov	r2, sl
 800503c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005040:	9109      	str	r1, [sp, #36]	@ 0x24
 8005042:	f7ff ff27 	bl	8004e94 <__exponent>
 8005046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005048:	1813      	adds	r3, r2, r0
 800504a:	2a01      	cmp	r2, #1
 800504c:	4681      	mov	r9, r0
 800504e:	6123      	str	r3, [r4, #16]
 8005050:	dc02      	bgt.n	8005058 <_printf_float+0x150>
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	07d2      	lsls	r2, r2, #31
 8005056:	d501      	bpl.n	800505c <_printf_float+0x154>
 8005058:	3301      	adds	r3, #1
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0a2      	beq.n	8004faa <_printf_float+0xa2>
 8005064:	232d      	movs	r3, #45	@ 0x2d
 8005066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800506a:	e79e      	b.n	8004faa <_printf_float+0xa2>
 800506c:	9a06      	ldr	r2, [sp, #24]
 800506e:	2a47      	cmp	r2, #71	@ 0x47
 8005070:	d1c2      	bne.n	8004ff8 <_printf_float+0xf0>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1c0      	bne.n	8004ff8 <_printf_float+0xf0>
 8005076:	2301      	movs	r3, #1
 8005078:	e7bd      	b.n	8004ff6 <_printf_float+0xee>
 800507a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800507e:	d9db      	bls.n	8005038 <_printf_float+0x130>
 8005080:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005084:	d118      	bne.n	80050b8 <_printf_float+0x1b0>
 8005086:	2900      	cmp	r1, #0
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	dd0b      	ble.n	80050a4 <_printf_float+0x19c>
 800508c:	6121      	str	r1, [r4, #16]
 800508e:	b913      	cbnz	r3, 8005096 <_printf_float+0x18e>
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	07d0      	lsls	r0, r2, #31
 8005094:	d502      	bpl.n	800509c <_printf_float+0x194>
 8005096:	3301      	adds	r3, #1
 8005098:	440b      	add	r3, r1
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800509e:	f04f 0900 	mov.w	r9, #0
 80050a2:	e7db      	b.n	800505c <_printf_float+0x154>
 80050a4:	b913      	cbnz	r3, 80050ac <_printf_float+0x1a4>
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	07d2      	lsls	r2, r2, #31
 80050aa:	d501      	bpl.n	80050b0 <_printf_float+0x1a8>
 80050ac:	3302      	adds	r3, #2
 80050ae:	e7f4      	b.n	800509a <_printf_float+0x192>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e7f2      	b.n	800509a <_printf_float+0x192>
 80050b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80050b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050ba:	4299      	cmp	r1, r3
 80050bc:	db05      	blt.n	80050ca <_printf_float+0x1c2>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	6121      	str	r1, [r4, #16]
 80050c2:	07d8      	lsls	r0, r3, #31
 80050c4:	d5ea      	bpl.n	800509c <_printf_float+0x194>
 80050c6:	1c4b      	adds	r3, r1, #1
 80050c8:	e7e7      	b.n	800509a <_printf_float+0x192>
 80050ca:	2900      	cmp	r1, #0
 80050cc:	bfd4      	ite	le
 80050ce:	f1c1 0202 	rsble	r2, r1, #2
 80050d2:	2201      	movgt	r2, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	e7e0      	b.n	800509a <_printf_float+0x192>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	055a      	lsls	r2, r3, #21
 80050dc:	d407      	bmi.n	80050ee <_printf_float+0x1e6>
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	4642      	mov	r2, r8
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b8      	blx	r7
 80050e8:	3001      	adds	r0, #1
 80050ea:	d12b      	bne.n	8005144 <_printf_float+0x23c>
 80050ec:	e767      	b.n	8004fbe <_printf_float+0xb6>
 80050ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050f2:	f240 80dd 	bls.w	80052b0 <_printf_float+0x3a8>
 80050f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050fa:	2200      	movs	r2, #0
 80050fc:	2300      	movs	r3, #0
 80050fe:	f7fb fcc3 	bl	8000a88 <__aeabi_dcmpeq>
 8005102:	2800      	cmp	r0, #0
 8005104:	d033      	beq.n	800516e <_printf_float+0x266>
 8005106:	4a37      	ldr	r2, [pc, #220]	@ (80051e4 <_printf_float+0x2dc>)
 8005108:	2301      	movs	r3, #1
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	f43f af54 	beq.w	8004fbe <_printf_float+0xb6>
 8005116:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800511a:	4543      	cmp	r3, r8
 800511c:	db02      	blt.n	8005124 <_printf_float+0x21c>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	07d8      	lsls	r0, r3, #31
 8005122:	d50f      	bpl.n	8005144 <_printf_float+0x23c>
 8005124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	f43f af45 	beq.w	8004fbe <_printf_float+0xb6>
 8005134:	f04f 0900 	mov.w	r9, #0
 8005138:	f108 38ff 	add.w	r8, r8, #4294967295
 800513c:	f104 0a1a 	add.w	sl, r4, #26
 8005140:	45c8      	cmp	r8, r9
 8005142:	dc09      	bgt.n	8005158 <_printf_float+0x250>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	079b      	lsls	r3, r3, #30
 8005148:	f100 8103 	bmi.w	8005352 <_printf_float+0x44a>
 800514c:	68e0      	ldr	r0, [r4, #12]
 800514e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005150:	4298      	cmp	r0, r3
 8005152:	bfb8      	it	lt
 8005154:	4618      	movlt	r0, r3
 8005156:	e734      	b.n	8004fc2 <_printf_float+0xba>
 8005158:	2301      	movs	r3, #1
 800515a:	4652      	mov	r2, sl
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f af2b 	beq.w	8004fbe <_printf_float+0xb6>
 8005168:	f109 0901 	add.w	r9, r9, #1
 800516c:	e7e8      	b.n	8005140 <_printf_float+0x238>
 800516e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	dc39      	bgt.n	80051e8 <_printf_float+0x2e0>
 8005174:	4a1b      	ldr	r2, [pc, #108]	@ (80051e4 <_printf_float+0x2dc>)
 8005176:	2301      	movs	r3, #1
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	f43f af1d 	beq.w	8004fbe <_printf_float+0xb6>
 8005184:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005188:	ea59 0303 	orrs.w	r3, r9, r3
 800518c:	d102      	bne.n	8005194 <_printf_float+0x28c>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	07d9      	lsls	r1, r3, #31
 8005192:	d5d7      	bpl.n	8005144 <_printf_float+0x23c>
 8005194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005198:	4631      	mov	r1, r6
 800519a:	4628      	mov	r0, r5
 800519c:	47b8      	blx	r7
 800519e:	3001      	adds	r0, #1
 80051a0:	f43f af0d 	beq.w	8004fbe <_printf_float+0xb6>
 80051a4:	f04f 0a00 	mov.w	sl, #0
 80051a8:	f104 0b1a 	add.w	fp, r4, #26
 80051ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ae:	425b      	negs	r3, r3
 80051b0:	4553      	cmp	r3, sl
 80051b2:	dc01      	bgt.n	80051b8 <_printf_float+0x2b0>
 80051b4:	464b      	mov	r3, r9
 80051b6:	e793      	b.n	80050e0 <_printf_float+0x1d8>
 80051b8:	2301      	movs	r3, #1
 80051ba:	465a      	mov	r2, fp
 80051bc:	4631      	mov	r1, r6
 80051be:	4628      	mov	r0, r5
 80051c0:	47b8      	blx	r7
 80051c2:	3001      	adds	r0, #1
 80051c4:	f43f aefb 	beq.w	8004fbe <_printf_float+0xb6>
 80051c8:	f10a 0a01 	add.w	sl, sl, #1
 80051cc:	e7ee      	b.n	80051ac <_printf_float+0x2a4>
 80051ce:	bf00      	nop
 80051d0:	7fefffff 	.word	0x7fefffff
 80051d4:	0800991c 	.word	0x0800991c
 80051d8:	08009918 	.word	0x08009918
 80051dc:	08009924 	.word	0x08009924
 80051e0:	08009920 	.word	0x08009920
 80051e4:	08009928 	.word	0x08009928
 80051e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051ee:	4553      	cmp	r3, sl
 80051f0:	bfa8      	it	ge
 80051f2:	4653      	movge	r3, sl
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	4699      	mov	r9, r3
 80051f8:	dc36      	bgt.n	8005268 <_printf_float+0x360>
 80051fa:	f04f 0b00 	mov.w	fp, #0
 80051fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005202:	f104 021a 	add.w	r2, r4, #26
 8005206:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005208:	9306      	str	r3, [sp, #24]
 800520a:	eba3 0309 	sub.w	r3, r3, r9
 800520e:	455b      	cmp	r3, fp
 8005210:	dc31      	bgt.n	8005276 <_printf_float+0x36e>
 8005212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005214:	459a      	cmp	sl, r3
 8005216:	dc3a      	bgt.n	800528e <_printf_float+0x386>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	07da      	lsls	r2, r3, #31
 800521c:	d437      	bmi.n	800528e <_printf_float+0x386>
 800521e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005220:	ebaa 0903 	sub.w	r9, sl, r3
 8005224:	9b06      	ldr	r3, [sp, #24]
 8005226:	ebaa 0303 	sub.w	r3, sl, r3
 800522a:	4599      	cmp	r9, r3
 800522c:	bfa8      	it	ge
 800522e:	4699      	movge	r9, r3
 8005230:	f1b9 0f00 	cmp.w	r9, #0
 8005234:	dc33      	bgt.n	800529e <_printf_float+0x396>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800523e:	f104 0b1a 	add.w	fp, r4, #26
 8005242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005244:	ebaa 0303 	sub.w	r3, sl, r3
 8005248:	eba3 0309 	sub.w	r3, r3, r9
 800524c:	4543      	cmp	r3, r8
 800524e:	f77f af79 	ble.w	8005144 <_printf_float+0x23c>
 8005252:	2301      	movs	r3, #1
 8005254:	465a      	mov	r2, fp
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	f43f aeae 	beq.w	8004fbe <_printf_float+0xb6>
 8005262:	f108 0801 	add.w	r8, r8, #1
 8005266:	e7ec      	b.n	8005242 <_printf_float+0x33a>
 8005268:	4642      	mov	r2, r8
 800526a:	4631      	mov	r1, r6
 800526c:	4628      	mov	r0, r5
 800526e:	47b8      	blx	r7
 8005270:	3001      	adds	r0, #1
 8005272:	d1c2      	bne.n	80051fa <_printf_float+0x2f2>
 8005274:	e6a3      	b.n	8004fbe <_printf_float+0xb6>
 8005276:	2301      	movs	r3, #1
 8005278:	4631      	mov	r1, r6
 800527a:	4628      	mov	r0, r5
 800527c:	9206      	str	r2, [sp, #24]
 800527e:	47b8      	blx	r7
 8005280:	3001      	adds	r0, #1
 8005282:	f43f ae9c 	beq.w	8004fbe <_printf_float+0xb6>
 8005286:	9a06      	ldr	r2, [sp, #24]
 8005288:	f10b 0b01 	add.w	fp, fp, #1
 800528c:	e7bb      	b.n	8005206 <_printf_float+0x2fe>
 800528e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	d1c0      	bne.n	800521e <_printf_float+0x316>
 800529c:	e68f      	b.n	8004fbe <_printf_float+0xb6>
 800529e:	9a06      	ldr	r2, [sp, #24]
 80052a0:	464b      	mov	r3, r9
 80052a2:	4442      	add	r2, r8
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	d1c3      	bne.n	8005236 <_printf_float+0x32e>
 80052ae:	e686      	b.n	8004fbe <_printf_float+0xb6>
 80052b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052b4:	f1ba 0f01 	cmp.w	sl, #1
 80052b8:	dc01      	bgt.n	80052be <_printf_float+0x3b6>
 80052ba:	07db      	lsls	r3, r3, #31
 80052bc:	d536      	bpl.n	800532c <_printf_float+0x424>
 80052be:	2301      	movs	r3, #1
 80052c0:	4642      	mov	r2, r8
 80052c2:	4631      	mov	r1, r6
 80052c4:	4628      	mov	r0, r5
 80052c6:	47b8      	blx	r7
 80052c8:	3001      	adds	r0, #1
 80052ca:	f43f ae78 	beq.w	8004fbe <_printf_float+0xb6>
 80052ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f ae70 	beq.w	8004fbe <_printf_float+0xb6>
 80052de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ea:	f7fb fbcd 	bl	8000a88 <__aeabi_dcmpeq>
 80052ee:	b9c0      	cbnz	r0, 8005322 <_printf_float+0x41a>
 80052f0:	4653      	mov	r3, sl
 80052f2:	f108 0201 	add.w	r2, r8, #1
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	d10c      	bne.n	800531a <_printf_float+0x412>
 8005300:	e65d      	b.n	8004fbe <_printf_float+0xb6>
 8005302:	2301      	movs	r3, #1
 8005304:	465a      	mov	r2, fp
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	47b8      	blx	r7
 800530c:	3001      	adds	r0, #1
 800530e:	f43f ae56 	beq.w	8004fbe <_printf_float+0xb6>
 8005312:	f108 0801 	add.w	r8, r8, #1
 8005316:	45d0      	cmp	r8, sl
 8005318:	dbf3      	blt.n	8005302 <_printf_float+0x3fa>
 800531a:	464b      	mov	r3, r9
 800531c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005320:	e6df      	b.n	80050e2 <_printf_float+0x1da>
 8005322:	f04f 0800 	mov.w	r8, #0
 8005326:	f104 0b1a 	add.w	fp, r4, #26
 800532a:	e7f4      	b.n	8005316 <_printf_float+0x40e>
 800532c:	2301      	movs	r3, #1
 800532e:	4642      	mov	r2, r8
 8005330:	e7e1      	b.n	80052f6 <_printf_float+0x3ee>
 8005332:	2301      	movs	r3, #1
 8005334:	464a      	mov	r2, r9
 8005336:	4631      	mov	r1, r6
 8005338:	4628      	mov	r0, r5
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	f43f ae3e 	beq.w	8004fbe <_printf_float+0xb6>
 8005342:	f108 0801 	add.w	r8, r8, #1
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800534a:	1a5b      	subs	r3, r3, r1
 800534c:	4543      	cmp	r3, r8
 800534e:	dcf0      	bgt.n	8005332 <_printf_float+0x42a>
 8005350:	e6fc      	b.n	800514c <_printf_float+0x244>
 8005352:	f04f 0800 	mov.w	r8, #0
 8005356:	f104 0919 	add.w	r9, r4, #25
 800535a:	e7f4      	b.n	8005346 <_printf_float+0x43e>

0800535c <_printf_common>:
 800535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005360:	4616      	mov	r6, r2
 8005362:	4698      	mov	r8, r3
 8005364:	688a      	ldr	r2, [r1, #8]
 8005366:	690b      	ldr	r3, [r1, #16]
 8005368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800536c:	4293      	cmp	r3, r2
 800536e:	bfb8      	it	lt
 8005370:	4613      	movlt	r3, r2
 8005372:	6033      	str	r3, [r6, #0]
 8005374:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005378:	4607      	mov	r7, r0
 800537a:	460c      	mov	r4, r1
 800537c:	b10a      	cbz	r2, 8005382 <_printf_common+0x26>
 800537e:	3301      	adds	r3, #1
 8005380:	6033      	str	r3, [r6, #0]
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	0699      	lsls	r1, r3, #26
 8005386:	bf42      	ittt	mi
 8005388:	6833      	ldrmi	r3, [r6, #0]
 800538a:	3302      	addmi	r3, #2
 800538c:	6033      	strmi	r3, [r6, #0]
 800538e:	6825      	ldr	r5, [r4, #0]
 8005390:	f015 0506 	ands.w	r5, r5, #6
 8005394:	d106      	bne.n	80053a4 <_printf_common+0x48>
 8005396:	f104 0a19 	add.w	sl, r4, #25
 800539a:	68e3      	ldr	r3, [r4, #12]
 800539c:	6832      	ldr	r2, [r6, #0]
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	dc26      	bgt.n	80053f2 <_printf_common+0x96>
 80053a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	3b00      	subs	r3, #0
 80053ac:	bf18      	it	ne
 80053ae:	2301      	movne	r3, #1
 80053b0:	0692      	lsls	r2, r2, #26
 80053b2:	d42b      	bmi.n	800540c <_printf_common+0xb0>
 80053b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053b8:	4641      	mov	r1, r8
 80053ba:	4638      	mov	r0, r7
 80053bc:	47c8      	blx	r9
 80053be:	3001      	adds	r0, #1
 80053c0:	d01e      	beq.n	8005400 <_printf_common+0xa4>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	6922      	ldr	r2, [r4, #16]
 80053c6:	f003 0306 	and.w	r3, r3, #6
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	bf02      	ittt	eq
 80053ce:	68e5      	ldreq	r5, [r4, #12]
 80053d0:	6833      	ldreq	r3, [r6, #0]
 80053d2:	1aed      	subeq	r5, r5, r3
 80053d4:	68a3      	ldr	r3, [r4, #8]
 80053d6:	bf0c      	ite	eq
 80053d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053dc:	2500      	movne	r5, #0
 80053de:	4293      	cmp	r3, r2
 80053e0:	bfc4      	itt	gt
 80053e2:	1a9b      	subgt	r3, r3, r2
 80053e4:	18ed      	addgt	r5, r5, r3
 80053e6:	2600      	movs	r6, #0
 80053e8:	341a      	adds	r4, #26
 80053ea:	42b5      	cmp	r5, r6
 80053ec:	d11a      	bne.n	8005424 <_printf_common+0xc8>
 80053ee:	2000      	movs	r0, #0
 80053f0:	e008      	b.n	8005404 <_printf_common+0xa8>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4652      	mov	r2, sl
 80053f6:	4641      	mov	r1, r8
 80053f8:	4638      	mov	r0, r7
 80053fa:	47c8      	blx	r9
 80053fc:	3001      	adds	r0, #1
 80053fe:	d103      	bne.n	8005408 <_printf_common+0xac>
 8005400:	f04f 30ff 	mov.w	r0, #4294967295
 8005404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005408:	3501      	adds	r5, #1
 800540a:	e7c6      	b.n	800539a <_printf_common+0x3e>
 800540c:	18e1      	adds	r1, r4, r3
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	2030      	movs	r0, #48	@ 0x30
 8005412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005416:	4422      	add	r2, r4
 8005418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800541c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005420:	3302      	adds	r3, #2
 8005422:	e7c7      	b.n	80053b4 <_printf_common+0x58>
 8005424:	2301      	movs	r3, #1
 8005426:	4622      	mov	r2, r4
 8005428:	4641      	mov	r1, r8
 800542a:	4638      	mov	r0, r7
 800542c:	47c8      	blx	r9
 800542e:	3001      	adds	r0, #1
 8005430:	d0e6      	beq.n	8005400 <_printf_common+0xa4>
 8005432:	3601      	adds	r6, #1
 8005434:	e7d9      	b.n	80053ea <_printf_common+0x8e>
	...

08005438 <_printf_i>:
 8005438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	7e0f      	ldrb	r7, [r1, #24]
 800543e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005440:	2f78      	cmp	r7, #120	@ 0x78
 8005442:	4691      	mov	r9, r2
 8005444:	4680      	mov	r8, r0
 8005446:	460c      	mov	r4, r1
 8005448:	469a      	mov	sl, r3
 800544a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800544e:	d807      	bhi.n	8005460 <_printf_i+0x28>
 8005450:	2f62      	cmp	r7, #98	@ 0x62
 8005452:	d80a      	bhi.n	800546a <_printf_i+0x32>
 8005454:	2f00      	cmp	r7, #0
 8005456:	f000 80d1 	beq.w	80055fc <_printf_i+0x1c4>
 800545a:	2f58      	cmp	r7, #88	@ 0x58
 800545c:	f000 80b8 	beq.w	80055d0 <_printf_i+0x198>
 8005460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005468:	e03a      	b.n	80054e0 <_printf_i+0xa8>
 800546a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800546e:	2b15      	cmp	r3, #21
 8005470:	d8f6      	bhi.n	8005460 <_printf_i+0x28>
 8005472:	a101      	add	r1, pc, #4	@ (adr r1, 8005478 <_printf_i+0x40>)
 8005474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005478:	080054d1 	.word	0x080054d1
 800547c:	080054e5 	.word	0x080054e5
 8005480:	08005461 	.word	0x08005461
 8005484:	08005461 	.word	0x08005461
 8005488:	08005461 	.word	0x08005461
 800548c:	08005461 	.word	0x08005461
 8005490:	080054e5 	.word	0x080054e5
 8005494:	08005461 	.word	0x08005461
 8005498:	08005461 	.word	0x08005461
 800549c:	08005461 	.word	0x08005461
 80054a0:	08005461 	.word	0x08005461
 80054a4:	080055e3 	.word	0x080055e3
 80054a8:	0800550f 	.word	0x0800550f
 80054ac:	0800559d 	.word	0x0800559d
 80054b0:	08005461 	.word	0x08005461
 80054b4:	08005461 	.word	0x08005461
 80054b8:	08005605 	.word	0x08005605
 80054bc:	08005461 	.word	0x08005461
 80054c0:	0800550f 	.word	0x0800550f
 80054c4:	08005461 	.word	0x08005461
 80054c8:	08005461 	.word	0x08005461
 80054cc:	080055a5 	.word	0x080055a5
 80054d0:	6833      	ldr	r3, [r6, #0]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6032      	str	r2, [r6, #0]
 80054d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054e0:	2301      	movs	r3, #1
 80054e2:	e09c      	b.n	800561e <_printf_i+0x1e6>
 80054e4:	6833      	ldr	r3, [r6, #0]
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	1d19      	adds	r1, r3, #4
 80054ea:	6031      	str	r1, [r6, #0]
 80054ec:	0606      	lsls	r6, r0, #24
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0xbc>
 80054f0:	681d      	ldr	r5, [r3, #0]
 80054f2:	e003      	b.n	80054fc <_printf_i+0xc4>
 80054f4:	0645      	lsls	r5, r0, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0xb8>
 80054f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	da03      	bge.n	8005508 <_printf_i+0xd0>
 8005500:	232d      	movs	r3, #45	@ 0x2d
 8005502:	426d      	negs	r5, r5
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005508:	4858      	ldr	r0, [pc, #352]	@ (800566c <_printf_i+0x234>)
 800550a:	230a      	movs	r3, #10
 800550c:	e011      	b.n	8005532 <_printf_i+0xfa>
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	6833      	ldr	r3, [r6, #0]
 8005512:	0608      	lsls	r0, r1, #24
 8005514:	f853 5b04 	ldr.w	r5, [r3], #4
 8005518:	d402      	bmi.n	8005520 <_printf_i+0xe8>
 800551a:	0649      	lsls	r1, r1, #25
 800551c:	bf48      	it	mi
 800551e:	b2ad      	uxthmi	r5, r5
 8005520:	2f6f      	cmp	r7, #111	@ 0x6f
 8005522:	4852      	ldr	r0, [pc, #328]	@ (800566c <_printf_i+0x234>)
 8005524:	6033      	str	r3, [r6, #0]
 8005526:	bf14      	ite	ne
 8005528:	230a      	movne	r3, #10
 800552a:	2308      	moveq	r3, #8
 800552c:	2100      	movs	r1, #0
 800552e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005532:	6866      	ldr	r6, [r4, #4]
 8005534:	60a6      	str	r6, [r4, #8]
 8005536:	2e00      	cmp	r6, #0
 8005538:	db05      	blt.n	8005546 <_printf_i+0x10e>
 800553a:	6821      	ldr	r1, [r4, #0]
 800553c:	432e      	orrs	r6, r5
 800553e:	f021 0104 	bic.w	r1, r1, #4
 8005542:	6021      	str	r1, [r4, #0]
 8005544:	d04b      	beq.n	80055de <_printf_i+0x1a6>
 8005546:	4616      	mov	r6, r2
 8005548:	fbb5 f1f3 	udiv	r1, r5, r3
 800554c:	fb03 5711 	mls	r7, r3, r1, r5
 8005550:	5dc7      	ldrb	r7, [r0, r7]
 8005552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005556:	462f      	mov	r7, r5
 8005558:	42bb      	cmp	r3, r7
 800555a:	460d      	mov	r5, r1
 800555c:	d9f4      	bls.n	8005548 <_printf_i+0x110>
 800555e:	2b08      	cmp	r3, #8
 8005560:	d10b      	bne.n	800557a <_printf_i+0x142>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	07df      	lsls	r7, r3, #31
 8005566:	d508      	bpl.n	800557a <_printf_i+0x142>
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	6861      	ldr	r1, [r4, #4]
 800556c:	4299      	cmp	r1, r3
 800556e:	bfde      	ittt	le
 8005570:	2330      	movle	r3, #48	@ 0x30
 8005572:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005576:	f106 36ff 	addle.w	r6, r6, #4294967295
 800557a:	1b92      	subs	r2, r2, r6
 800557c:	6122      	str	r2, [r4, #16]
 800557e:	f8cd a000 	str.w	sl, [sp]
 8005582:	464b      	mov	r3, r9
 8005584:	aa03      	add	r2, sp, #12
 8005586:	4621      	mov	r1, r4
 8005588:	4640      	mov	r0, r8
 800558a:	f7ff fee7 	bl	800535c <_printf_common>
 800558e:	3001      	adds	r0, #1
 8005590:	d14a      	bne.n	8005628 <_printf_i+0x1f0>
 8005592:	f04f 30ff 	mov.w	r0, #4294967295
 8005596:	b004      	add	sp, #16
 8005598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f043 0320 	orr.w	r3, r3, #32
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	4832      	ldr	r0, [pc, #200]	@ (8005670 <_printf_i+0x238>)
 80055a6:	2778      	movs	r7, #120	@ 0x78
 80055a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	6831      	ldr	r1, [r6, #0]
 80055b0:	061f      	lsls	r7, r3, #24
 80055b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80055b6:	d402      	bmi.n	80055be <_printf_i+0x186>
 80055b8:	065f      	lsls	r7, r3, #25
 80055ba:	bf48      	it	mi
 80055bc:	b2ad      	uxthmi	r5, r5
 80055be:	6031      	str	r1, [r6, #0]
 80055c0:	07d9      	lsls	r1, r3, #31
 80055c2:	bf44      	itt	mi
 80055c4:	f043 0320 	orrmi.w	r3, r3, #32
 80055c8:	6023      	strmi	r3, [r4, #0]
 80055ca:	b11d      	cbz	r5, 80055d4 <_printf_i+0x19c>
 80055cc:	2310      	movs	r3, #16
 80055ce:	e7ad      	b.n	800552c <_printf_i+0xf4>
 80055d0:	4826      	ldr	r0, [pc, #152]	@ (800566c <_printf_i+0x234>)
 80055d2:	e7e9      	b.n	80055a8 <_printf_i+0x170>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	f023 0320 	bic.w	r3, r3, #32
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	e7f6      	b.n	80055cc <_printf_i+0x194>
 80055de:	4616      	mov	r6, r2
 80055e0:	e7bd      	b.n	800555e <_printf_i+0x126>
 80055e2:	6833      	ldr	r3, [r6, #0]
 80055e4:	6825      	ldr	r5, [r4, #0]
 80055e6:	6961      	ldr	r1, [r4, #20]
 80055e8:	1d18      	adds	r0, r3, #4
 80055ea:	6030      	str	r0, [r6, #0]
 80055ec:	062e      	lsls	r6, r5, #24
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	d501      	bpl.n	80055f6 <_printf_i+0x1be>
 80055f2:	6019      	str	r1, [r3, #0]
 80055f4:	e002      	b.n	80055fc <_printf_i+0x1c4>
 80055f6:	0668      	lsls	r0, r5, #25
 80055f8:	d5fb      	bpl.n	80055f2 <_printf_i+0x1ba>
 80055fa:	8019      	strh	r1, [r3, #0]
 80055fc:	2300      	movs	r3, #0
 80055fe:	6123      	str	r3, [r4, #16]
 8005600:	4616      	mov	r6, r2
 8005602:	e7bc      	b.n	800557e <_printf_i+0x146>
 8005604:	6833      	ldr	r3, [r6, #0]
 8005606:	1d1a      	adds	r2, r3, #4
 8005608:	6032      	str	r2, [r6, #0]
 800560a:	681e      	ldr	r6, [r3, #0]
 800560c:	6862      	ldr	r2, [r4, #4]
 800560e:	2100      	movs	r1, #0
 8005610:	4630      	mov	r0, r6
 8005612:	f7fa fdbd 	bl	8000190 <memchr>
 8005616:	b108      	cbz	r0, 800561c <_printf_i+0x1e4>
 8005618:	1b80      	subs	r0, r0, r6
 800561a:	6060      	str	r0, [r4, #4]
 800561c:	6863      	ldr	r3, [r4, #4]
 800561e:	6123      	str	r3, [r4, #16]
 8005620:	2300      	movs	r3, #0
 8005622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005626:	e7aa      	b.n	800557e <_printf_i+0x146>
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	4632      	mov	r2, r6
 800562c:	4649      	mov	r1, r9
 800562e:	4640      	mov	r0, r8
 8005630:	47d0      	blx	sl
 8005632:	3001      	adds	r0, #1
 8005634:	d0ad      	beq.n	8005592 <_printf_i+0x15a>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	079b      	lsls	r3, r3, #30
 800563a:	d413      	bmi.n	8005664 <_printf_i+0x22c>
 800563c:	68e0      	ldr	r0, [r4, #12]
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	4298      	cmp	r0, r3
 8005642:	bfb8      	it	lt
 8005644:	4618      	movlt	r0, r3
 8005646:	e7a6      	b.n	8005596 <_printf_i+0x15e>
 8005648:	2301      	movs	r3, #1
 800564a:	4632      	mov	r2, r6
 800564c:	4649      	mov	r1, r9
 800564e:	4640      	mov	r0, r8
 8005650:	47d0      	blx	sl
 8005652:	3001      	adds	r0, #1
 8005654:	d09d      	beq.n	8005592 <_printf_i+0x15a>
 8005656:	3501      	adds	r5, #1
 8005658:	68e3      	ldr	r3, [r4, #12]
 800565a:	9903      	ldr	r1, [sp, #12]
 800565c:	1a5b      	subs	r3, r3, r1
 800565e:	42ab      	cmp	r3, r5
 8005660:	dcf2      	bgt.n	8005648 <_printf_i+0x210>
 8005662:	e7eb      	b.n	800563c <_printf_i+0x204>
 8005664:	2500      	movs	r5, #0
 8005666:	f104 0619 	add.w	r6, r4, #25
 800566a:	e7f5      	b.n	8005658 <_printf_i+0x220>
 800566c:	0800992a 	.word	0x0800992a
 8005670:	0800993b 	.word	0x0800993b

08005674 <_scanf_float>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	b087      	sub	sp, #28
 800567a:	4617      	mov	r7, r2
 800567c:	9303      	str	r3, [sp, #12]
 800567e:	688b      	ldr	r3, [r1, #8]
 8005680:	1e5a      	subs	r2, r3, #1
 8005682:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005686:	bf81      	itttt	hi
 8005688:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800568c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005690:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005694:	608b      	strhi	r3, [r1, #8]
 8005696:	680b      	ldr	r3, [r1, #0]
 8005698:	460a      	mov	r2, r1
 800569a:	f04f 0500 	mov.w	r5, #0
 800569e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80056a2:	f842 3b1c 	str.w	r3, [r2], #28
 80056a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80056aa:	4680      	mov	r8, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	bf98      	it	ls
 80056b0:	f04f 0b00 	movls.w	fp, #0
 80056b4:	9201      	str	r2, [sp, #4]
 80056b6:	4616      	mov	r6, r2
 80056b8:	46aa      	mov	sl, r5
 80056ba:	46a9      	mov	r9, r5
 80056bc:	9502      	str	r5, [sp, #8]
 80056be:	68a2      	ldr	r2, [r4, #8]
 80056c0:	b152      	cbz	r2, 80056d8 <_scanf_float+0x64>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80056c8:	d864      	bhi.n	8005794 <_scanf_float+0x120>
 80056ca:	2b40      	cmp	r3, #64	@ 0x40
 80056cc:	d83c      	bhi.n	8005748 <_scanf_float+0xd4>
 80056ce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80056d2:	b2c8      	uxtb	r0, r1
 80056d4:	280e      	cmp	r0, #14
 80056d6:	d93a      	bls.n	800574e <_scanf_float+0xda>
 80056d8:	f1b9 0f00 	cmp.w	r9, #0
 80056dc:	d003      	beq.n	80056e6 <_scanf_float+0x72>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ea:	f1ba 0f01 	cmp.w	sl, #1
 80056ee:	f200 8117 	bhi.w	8005920 <_scanf_float+0x2ac>
 80056f2:	9b01      	ldr	r3, [sp, #4]
 80056f4:	429e      	cmp	r6, r3
 80056f6:	f200 8108 	bhi.w	800590a <_scanf_float+0x296>
 80056fa:	2001      	movs	r0, #1
 80056fc:	b007      	add	sp, #28
 80056fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005702:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005706:	2a0d      	cmp	r2, #13
 8005708:	d8e6      	bhi.n	80056d8 <_scanf_float+0x64>
 800570a:	a101      	add	r1, pc, #4	@ (adr r1, 8005710 <_scanf_float+0x9c>)
 800570c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005710:	08005857 	.word	0x08005857
 8005714:	080056d9 	.word	0x080056d9
 8005718:	080056d9 	.word	0x080056d9
 800571c:	080056d9 	.word	0x080056d9
 8005720:	080058b7 	.word	0x080058b7
 8005724:	0800588f 	.word	0x0800588f
 8005728:	080056d9 	.word	0x080056d9
 800572c:	080056d9 	.word	0x080056d9
 8005730:	08005865 	.word	0x08005865
 8005734:	080056d9 	.word	0x080056d9
 8005738:	080056d9 	.word	0x080056d9
 800573c:	080056d9 	.word	0x080056d9
 8005740:	080056d9 	.word	0x080056d9
 8005744:	0800581d 	.word	0x0800581d
 8005748:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800574c:	e7db      	b.n	8005706 <_scanf_float+0x92>
 800574e:	290e      	cmp	r1, #14
 8005750:	d8c2      	bhi.n	80056d8 <_scanf_float+0x64>
 8005752:	a001      	add	r0, pc, #4	@ (adr r0, 8005758 <_scanf_float+0xe4>)
 8005754:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005758:	0800580d 	.word	0x0800580d
 800575c:	080056d9 	.word	0x080056d9
 8005760:	0800580d 	.word	0x0800580d
 8005764:	080058a3 	.word	0x080058a3
 8005768:	080056d9 	.word	0x080056d9
 800576c:	080057b5 	.word	0x080057b5
 8005770:	080057f3 	.word	0x080057f3
 8005774:	080057f3 	.word	0x080057f3
 8005778:	080057f3 	.word	0x080057f3
 800577c:	080057f3 	.word	0x080057f3
 8005780:	080057f3 	.word	0x080057f3
 8005784:	080057f3 	.word	0x080057f3
 8005788:	080057f3 	.word	0x080057f3
 800578c:	080057f3 	.word	0x080057f3
 8005790:	080057f3 	.word	0x080057f3
 8005794:	2b6e      	cmp	r3, #110	@ 0x6e
 8005796:	d809      	bhi.n	80057ac <_scanf_float+0x138>
 8005798:	2b60      	cmp	r3, #96	@ 0x60
 800579a:	d8b2      	bhi.n	8005702 <_scanf_float+0x8e>
 800579c:	2b54      	cmp	r3, #84	@ 0x54
 800579e:	d07b      	beq.n	8005898 <_scanf_float+0x224>
 80057a0:	2b59      	cmp	r3, #89	@ 0x59
 80057a2:	d199      	bne.n	80056d8 <_scanf_float+0x64>
 80057a4:	2d07      	cmp	r5, #7
 80057a6:	d197      	bne.n	80056d8 <_scanf_float+0x64>
 80057a8:	2508      	movs	r5, #8
 80057aa:	e02c      	b.n	8005806 <_scanf_float+0x192>
 80057ac:	2b74      	cmp	r3, #116	@ 0x74
 80057ae:	d073      	beq.n	8005898 <_scanf_float+0x224>
 80057b0:	2b79      	cmp	r3, #121	@ 0x79
 80057b2:	e7f6      	b.n	80057a2 <_scanf_float+0x12e>
 80057b4:	6821      	ldr	r1, [r4, #0]
 80057b6:	05c8      	lsls	r0, r1, #23
 80057b8:	d51b      	bpl.n	80057f2 <_scanf_float+0x17e>
 80057ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80057be:	6021      	str	r1, [r4, #0]
 80057c0:	f109 0901 	add.w	r9, r9, #1
 80057c4:	f1bb 0f00 	cmp.w	fp, #0
 80057c8:	d003      	beq.n	80057d2 <_scanf_float+0x15e>
 80057ca:	3201      	adds	r2, #1
 80057cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057d0:	60a2      	str	r2, [r4, #8]
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	60a3      	str	r3, [r4, #8]
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	3301      	adds	r3, #1
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	f340 8087 	ble.w	80058f8 <_scanf_float+0x284>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	e765      	b.n	80056be <_scanf_float+0x4a>
 80057f2:	eb1a 0105 	adds.w	r1, sl, r5
 80057f6:	f47f af6f 	bne.w	80056d8 <_scanf_float+0x64>
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005800:	6022      	str	r2, [r4, #0]
 8005802:	460d      	mov	r5, r1
 8005804:	468a      	mov	sl, r1
 8005806:	f806 3b01 	strb.w	r3, [r6], #1
 800580a:	e7e2      	b.n	80057d2 <_scanf_float+0x15e>
 800580c:	6822      	ldr	r2, [r4, #0]
 800580e:	0610      	lsls	r0, r2, #24
 8005810:	f57f af62 	bpl.w	80056d8 <_scanf_float+0x64>
 8005814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005818:	6022      	str	r2, [r4, #0]
 800581a:	e7f4      	b.n	8005806 <_scanf_float+0x192>
 800581c:	f1ba 0f00 	cmp.w	sl, #0
 8005820:	d10e      	bne.n	8005840 <_scanf_float+0x1cc>
 8005822:	f1b9 0f00 	cmp.w	r9, #0
 8005826:	d10e      	bne.n	8005846 <_scanf_float+0x1d2>
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800582e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005832:	d108      	bne.n	8005846 <_scanf_float+0x1d2>
 8005834:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005838:	6022      	str	r2, [r4, #0]
 800583a:	f04f 0a01 	mov.w	sl, #1
 800583e:	e7e2      	b.n	8005806 <_scanf_float+0x192>
 8005840:	f1ba 0f02 	cmp.w	sl, #2
 8005844:	d055      	beq.n	80058f2 <_scanf_float+0x27e>
 8005846:	2d01      	cmp	r5, #1
 8005848:	d002      	beq.n	8005850 <_scanf_float+0x1dc>
 800584a:	2d04      	cmp	r5, #4
 800584c:	f47f af44 	bne.w	80056d8 <_scanf_float+0x64>
 8005850:	3501      	adds	r5, #1
 8005852:	b2ed      	uxtb	r5, r5
 8005854:	e7d7      	b.n	8005806 <_scanf_float+0x192>
 8005856:	f1ba 0f01 	cmp.w	sl, #1
 800585a:	f47f af3d 	bne.w	80056d8 <_scanf_float+0x64>
 800585e:	f04f 0a02 	mov.w	sl, #2
 8005862:	e7d0      	b.n	8005806 <_scanf_float+0x192>
 8005864:	b97d      	cbnz	r5, 8005886 <_scanf_float+0x212>
 8005866:	f1b9 0f00 	cmp.w	r9, #0
 800586a:	f47f af38 	bne.w	80056de <_scanf_float+0x6a>
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005874:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005878:	f040 8108 	bne.w	8005a8c <_scanf_float+0x418>
 800587c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005880:	6022      	str	r2, [r4, #0]
 8005882:	2501      	movs	r5, #1
 8005884:	e7bf      	b.n	8005806 <_scanf_float+0x192>
 8005886:	2d03      	cmp	r5, #3
 8005888:	d0e2      	beq.n	8005850 <_scanf_float+0x1dc>
 800588a:	2d05      	cmp	r5, #5
 800588c:	e7de      	b.n	800584c <_scanf_float+0x1d8>
 800588e:	2d02      	cmp	r5, #2
 8005890:	f47f af22 	bne.w	80056d8 <_scanf_float+0x64>
 8005894:	2503      	movs	r5, #3
 8005896:	e7b6      	b.n	8005806 <_scanf_float+0x192>
 8005898:	2d06      	cmp	r5, #6
 800589a:	f47f af1d 	bne.w	80056d8 <_scanf_float+0x64>
 800589e:	2507      	movs	r5, #7
 80058a0:	e7b1      	b.n	8005806 <_scanf_float+0x192>
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	0591      	lsls	r1, r2, #22
 80058a6:	f57f af17 	bpl.w	80056d8 <_scanf_float+0x64>
 80058aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80058b4:	e7a7      	b.n	8005806 <_scanf_float+0x192>
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80058bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80058c0:	d006      	beq.n	80058d0 <_scanf_float+0x25c>
 80058c2:	0550      	lsls	r0, r2, #21
 80058c4:	f57f af08 	bpl.w	80056d8 <_scanf_float+0x64>
 80058c8:	f1b9 0f00 	cmp.w	r9, #0
 80058cc:	f000 80de 	beq.w	8005a8c <_scanf_float+0x418>
 80058d0:	0591      	lsls	r1, r2, #22
 80058d2:	bf58      	it	pl
 80058d4:	9902      	ldrpl	r1, [sp, #8]
 80058d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80058da:	bf58      	it	pl
 80058dc:	eba9 0101 	subpl.w	r1, r9, r1
 80058e0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80058e4:	bf58      	it	pl
 80058e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80058ea:	6022      	str	r2, [r4, #0]
 80058ec:	f04f 0900 	mov.w	r9, #0
 80058f0:	e789      	b.n	8005806 <_scanf_float+0x192>
 80058f2:	f04f 0a03 	mov.w	sl, #3
 80058f6:	e786      	b.n	8005806 <_scanf_float+0x192>
 80058f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80058fc:	4639      	mov	r1, r7
 80058fe:	4640      	mov	r0, r8
 8005900:	4798      	blx	r3
 8005902:	2800      	cmp	r0, #0
 8005904:	f43f aedb 	beq.w	80056be <_scanf_float+0x4a>
 8005908:	e6e6      	b.n	80056d8 <_scanf_float+0x64>
 800590a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800590e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005912:	463a      	mov	r2, r7
 8005914:	4640      	mov	r0, r8
 8005916:	4798      	blx	r3
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	3b01      	subs	r3, #1
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	e6e8      	b.n	80056f2 <_scanf_float+0x7e>
 8005920:	1e6b      	subs	r3, r5, #1
 8005922:	2b06      	cmp	r3, #6
 8005924:	d824      	bhi.n	8005970 <_scanf_float+0x2fc>
 8005926:	2d02      	cmp	r5, #2
 8005928:	d836      	bhi.n	8005998 <_scanf_float+0x324>
 800592a:	9b01      	ldr	r3, [sp, #4]
 800592c:	429e      	cmp	r6, r3
 800592e:	f67f aee4 	bls.w	80056fa <_scanf_float+0x86>
 8005932:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005936:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800593a:	463a      	mov	r2, r7
 800593c:	4640      	mov	r0, r8
 800593e:	4798      	blx	r3
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	3b01      	subs	r3, #1
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	e7f0      	b.n	800592a <_scanf_float+0x2b6>
 8005948:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800594c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005950:	463a      	mov	r2, r7
 8005952:	4640      	mov	r0, r8
 8005954:	4798      	blx	r3
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	3b01      	subs	r3, #1
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005960:	fa5f fa8a 	uxtb.w	sl, sl
 8005964:	f1ba 0f02 	cmp.w	sl, #2
 8005968:	d1ee      	bne.n	8005948 <_scanf_float+0x2d4>
 800596a:	3d03      	subs	r5, #3
 800596c:	b2ed      	uxtb	r5, r5
 800596e:	1b76      	subs	r6, r6, r5
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	05da      	lsls	r2, r3, #23
 8005974:	d530      	bpl.n	80059d8 <_scanf_float+0x364>
 8005976:	055b      	lsls	r3, r3, #21
 8005978:	d511      	bpl.n	800599e <_scanf_float+0x32a>
 800597a:	9b01      	ldr	r3, [sp, #4]
 800597c:	429e      	cmp	r6, r3
 800597e:	f67f aebc 	bls.w	80056fa <_scanf_float+0x86>
 8005982:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005986:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800598a:	463a      	mov	r2, r7
 800598c:	4640      	mov	r0, r8
 800598e:	4798      	blx	r3
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	3b01      	subs	r3, #1
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	e7f0      	b.n	800597a <_scanf_float+0x306>
 8005998:	46aa      	mov	sl, r5
 800599a:	46b3      	mov	fp, r6
 800599c:	e7de      	b.n	800595c <_scanf_float+0x2e8>
 800599e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	2965      	cmp	r1, #101	@ 0x65
 80059a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80059aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	d00c      	beq.n	80059cc <_scanf_float+0x358>
 80059b2:	2945      	cmp	r1, #69	@ 0x45
 80059b4:	d00a      	beq.n	80059cc <_scanf_float+0x358>
 80059b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059ba:	463a      	mov	r2, r7
 80059bc:	4640      	mov	r0, r8
 80059be:	4798      	blx	r3
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	1eb5      	subs	r5, r6, #2
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059d0:	463a      	mov	r2, r7
 80059d2:	4640      	mov	r0, r8
 80059d4:	4798      	blx	r3
 80059d6:	462e      	mov	r6, r5
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	f012 0210 	ands.w	r2, r2, #16
 80059de:	d001      	beq.n	80059e4 <_scanf_float+0x370>
 80059e0:	2000      	movs	r0, #0
 80059e2:	e68b      	b.n	80056fc <_scanf_float+0x88>
 80059e4:	7032      	strb	r2, [r6, #0]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059f0:	d11c      	bne.n	8005a2c <_scanf_float+0x3b8>
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	4599      	cmp	r9, r3
 80059f6:	eba3 0209 	sub.w	r2, r3, r9
 80059fa:	d123      	bne.n	8005a44 <_scanf_float+0x3d0>
 80059fc:	9901      	ldr	r1, [sp, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	4640      	mov	r0, r8
 8005a02:	f002 fced 	bl	80083e0 <_strtod_r>
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	6821      	ldr	r1, [r4, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f011 0f02 	tst.w	r1, #2
 8005a10:	ec57 6b10 	vmov	r6, r7, d0
 8005a14:	f103 0204 	add.w	r2, r3, #4
 8005a18:	d01f      	beq.n	8005a5a <_scanf_float+0x3e6>
 8005a1a:	9903      	ldr	r1, [sp, #12]
 8005a1c:	600a      	str	r2, [r1, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	e9c3 6700 	strd	r6, r7, [r3]
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60e3      	str	r3, [r4, #12]
 8005a2a:	e7d9      	b.n	80059e0 <_scanf_float+0x36c>
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0e4      	beq.n	80059fc <_scanf_float+0x388>
 8005a32:	9905      	ldr	r1, [sp, #20]
 8005a34:	230a      	movs	r3, #10
 8005a36:	3101      	adds	r1, #1
 8005a38:	4640      	mov	r0, r8
 8005a3a:	f002 fd51 	bl	80084e0 <_strtol_r>
 8005a3e:	9b04      	ldr	r3, [sp, #16]
 8005a40:	9e05      	ldr	r6, [sp, #20]
 8005a42:	1ac2      	subs	r2, r0, r3
 8005a44:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005a48:	429e      	cmp	r6, r3
 8005a4a:	bf28      	it	cs
 8005a4c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005a50:	4910      	ldr	r1, [pc, #64]	@ (8005a94 <_scanf_float+0x420>)
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f954 	bl	8005d00 <siprintf>
 8005a58:	e7d0      	b.n	80059fc <_scanf_float+0x388>
 8005a5a:	f011 0f04 	tst.w	r1, #4
 8005a5e:	9903      	ldr	r1, [sp, #12]
 8005a60:	600a      	str	r2, [r1, #0]
 8005a62:	d1dc      	bne.n	8005a1e <_scanf_float+0x3aa>
 8005a64:	681d      	ldr	r5, [r3, #0]
 8005a66:	4632      	mov	r2, r6
 8005a68:	463b      	mov	r3, r7
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	f7fb f83d 	bl	8000aec <__aeabi_dcmpun>
 8005a72:	b128      	cbz	r0, 8005a80 <_scanf_float+0x40c>
 8005a74:	4808      	ldr	r0, [pc, #32]	@ (8005a98 <_scanf_float+0x424>)
 8005a76:	f000 fabd 	bl	8005ff4 <nanf>
 8005a7a:	ed85 0a00 	vstr	s0, [r5]
 8005a7e:	e7d1      	b.n	8005a24 <_scanf_float+0x3b0>
 8005a80:	4630      	mov	r0, r6
 8005a82:	4639      	mov	r1, r7
 8005a84:	f7fb f890 	bl	8000ba8 <__aeabi_d2f>
 8005a88:	6028      	str	r0, [r5, #0]
 8005a8a:	e7cb      	b.n	8005a24 <_scanf_float+0x3b0>
 8005a8c:	f04f 0900 	mov.w	r9, #0
 8005a90:	e629      	b.n	80056e6 <_scanf_float+0x72>
 8005a92:	bf00      	nop
 8005a94:	0800994c 	.word	0x0800994c
 8005a98:	08009a8f 	.word	0x08009a8f

08005a9c <std>:
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8005aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aaa:	6083      	str	r3, [r0, #8]
 8005aac:	8181      	strh	r1, [r0, #12]
 8005aae:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ab0:	81c2      	strh	r2, [r0, #14]
 8005ab2:	6183      	str	r3, [r0, #24]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	305c      	adds	r0, #92	@ 0x5c
 8005aba:	f000 fa1b 	bl	8005ef4 <memset>
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <std+0x58>)
 8005ac0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <std+0x5c>)
 8005ac4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <std+0x60>)
 8005ac8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <std+0x64>)
 8005acc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <std+0x68>)
 8005ad0:	6224      	str	r4, [r4, #32]
 8005ad2:	429c      	cmp	r4, r3
 8005ad4:	d006      	beq.n	8005ae4 <std+0x48>
 8005ad6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ada:	4294      	cmp	r4, r2
 8005adc:	d002      	beq.n	8005ae4 <std+0x48>
 8005ade:	33d0      	adds	r3, #208	@ 0xd0
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d105      	bne.n	8005af0 <std+0x54>
 8005ae4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aec:	f000 ba7e 	b.w	8005fec <__retarget_lock_init_recursive>
 8005af0:	bd10      	pop	{r4, pc}
 8005af2:	bf00      	nop
 8005af4:	08005d45 	.word	0x08005d45
 8005af8:	08005d67 	.word	0x08005d67
 8005afc:	08005d9f 	.word	0x08005d9f
 8005b00:	08005dc3 	.word	0x08005dc3
 8005b04:	200003b8 	.word	0x200003b8

08005b08 <stdio_exit_handler>:
 8005b08:	4a02      	ldr	r2, [pc, #8]	@ (8005b14 <stdio_exit_handler+0xc>)
 8005b0a:	4903      	ldr	r1, [pc, #12]	@ (8005b18 <stdio_exit_handler+0x10>)
 8005b0c:	4803      	ldr	r0, [pc, #12]	@ (8005b1c <stdio_exit_handler+0x14>)
 8005b0e:	f000 b869 	b.w	8005be4 <_fwalk_sglue>
 8005b12:	bf00      	nop
 8005b14:	2000000c 	.word	0x2000000c
 8005b18:	08008b21 	.word	0x08008b21
 8005b1c:	2000001c 	.word	0x2000001c

08005b20 <cleanup_stdio>:
 8005b20:	6841      	ldr	r1, [r0, #4]
 8005b22:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <cleanup_stdio+0x34>)
 8005b24:	4299      	cmp	r1, r3
 8005b26:	b510      	push	{r4, lr}
 8005b28:	4604      	mov	r4, r0
 8005b2a:	d001      	beq.n	8005b30 <cleanup_stdio+0x10>
 8005b2c:	f002 fff8 	bl	8008b20 <_fflush_r>
 8005b30:	68a1      	ldr	r1, [r4, #8]
 8005b32:	4b09      	ldr	r3, [pc, #36]	@ (8005b58 <cleanup_stdio+0x38>)
 8005b34:	4299      	cmp	r1, r3
 8005b36:	d002      	beq.n	8005b3e <cleanup_stdio+0x1e>
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f002 fff1 	bl	8008b20 <_fflush_r>
 8005b3e:	68e1      	ldr	r1, [r4, #12]
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <cleanup_stdio+0x3c>)
 8005b42:	4299      	cmp	r1, r3
 8005b44:	d004      	beq.n	8005b50 <cleanup_stdio+0x30>
 8005b46:	4620      	mov	r0, r4
 8005b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4c:	f002 bfe8 	b.w	8008b20 <_fflush_r>
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	bf00      	nop
 8005b54:	200003b8 	.word	0x200003b8
 8005b58:	20000420 	.word	0x20000420
 8005b5c:	20000488 	.word	0x20000488

08005b60 <global_stdio_init.part.0>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <global_stdio_init.part.0+0x30>)
 8005b64:	4c0b      	ldr	r4, [pc, #44]	@ (8005b94 <global_stdio_init.part.0+0x34>)
 8005b66:	4a0c      	ldr	r2, [pc, #48]	@ (8005b98 <global_stdio_init.part.0+0x38>)
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2104      	movs	r1, #4
 8005b70:	f7ff ff94 	bl	8005a9c <std>
 8005b74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b78:	2201      	movs	r2, #1
 8005b7a:	2109      	movs	r1, #9
 8005b7c:	f7ff ff8e 	bl	8005a9c <std>
 8005b80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b84:	2202      	movs	r2, #2
 8005b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b8a:	2112      	movs	r1, #18
 8005b8c:	f7ff bf86 	b.w	8005a9c <std>
 8005b90:	200004f0 	.word	0x200004f0
 8005b94:	200003b8 	.word	0x200003b8
 8005b98:	08005b09 	.word	0x08005b09

08005b9c <__sfp_lock_acquire>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	@ (8005ba4 <__sfp_lock_acquire+0x8>)
 8005b9e:	f000 ba26 	b.w	8005fee <__retarget_lock_acquire_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	200004f9 	.word	0x200004f9

08005ba8 <__sfp_lock_release>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	@ (8005bb0 <__sfp_lock_release+0x8>)
 8005baa:	f000 ba21 	b.w	8005ff0 <__retarget_lock_release_recursive>
 8005bae:	bf00      	nop
 8005bb0:	200004f9 	.word	0x200004f9

08005bb4 <__sinit>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	f7ff fff0 	bl	8005b9c <__sfp_lock_acquire>
 8005bbc:	6a23      	ldr	r3, [r4, #32]
 8005bbe:	b11b      	cbz	r3, 8005bc8 <__sinit+0x14>
 8005bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc4:	f7ff bff0 	b.w	8005ba8 <__sfp_lock_release>
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <__sinit+0x28>)
 8005bca:	6223      	str	r3, [r4, #32]
 8005bcc:	4b04      	ldr	r3, [pc, #16]	@ (8005be0 <__sinit+0x2c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f5      	bne.n	8005bc0 <__sinit+0xc>
 8005bd4:	f7ff ffc4 	bl	8005b60 <global_stdio_init.part.0>
 8005bd8:	e7f2      	b.n	8005bc0 <__sinit+0xc>
 8005bda:	bf00      	nop
 8005bdc:	08005b21 	.word	0x08005b21
 8005be0:	200004f0 	.word	0x200004f0

08005be4 <_fwalk_sglue>:
 8005be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be8:	4607      	mov	r7, r0
 8005bea:	4688      	mov	r8, r1
 8005bec:	4614      	mov	r4, r2
 8005bee:	2600      	movs	r6, #0
 8005bf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bf4:	f1b9 0901 	subs.w	r9, r9, #1
 8005bf8:	d505      	bpl.n	8005c06 <_fwalk_sglue+0x22>
 8005bfa:	6824      	ldr	r4, [r4, #0]
 8005bfc:	2c00      	cmp	r4, #0
 8005bfe:	d1f7      	bne.n	8005bf0 <_fwalk_sglue+0xc>
 8005c00:	4630      	mov	r0, r6
 8005c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d907      	bls.n	8005c1c <_fwalk_sglue+0x38>
 8005c0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c10:	3301      	adds	r3, #1
 8005c12:	d003      	beq.n	8005c1c <_fwalk_sglue+0x38>
 8005c14:	4629      	mov	r1, r5
 8005c16:	4638      	mov	r0, r7
 8005c18:	47c0      	blx	r8
 8005c1a:	4306      	orrs	r6, r0
 8005c1c:	3568      	adds	r5, #104	@ 0x68
 8005c1e:	e7e9      	b.n	8005bf4 <_fwalk_sglue+0x10>

08005c20 <iprintf>:
 8005c20:	b40f      	push	{r0, r1, r2, r3}
 8005c22:	b507      	push	{r0, r1, r2, lr}
 8005c24:	4906      	ldr	r1, [pc, #24]	@ (8005c40 <iprintf+0x20>)
 8005c26:	ab04      	add	r3, sp, #16
 8005c28:	6808      	ldr	r0, [r1, #0]
 8005c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2e:	6881      	ldr	r1, [r0, #8]
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	f002 fdd9 	bl	80087e8 <_vfiprintf_r>
 8005c36:	b003      	add	sp, #12
 8005c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c3c:	b004      	add	sp, #16
 8005c3e:	4770      	bx	lr
 8005c40:	20000018 	.word	0x20000018

08005c44 <_puts_r>:
 8005c44:	6a03      	ldr	r3, [r0, #32]
 8005c46:	b570      	push	{r4, r5, r6, lr}
 8005c48:	6884      	ldr	r4, [r0, #8]
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	b90b      	cbnz	r3, 8005c54 <_puts_r+0x10>
 8005c50:	f7ff ffb0 	bl	8005bb4 <__sinit>
 8005c54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c56:	07db      	lsls	r3, r3, #31
 8005c58:	d405      	bmi.n	8005c66 <_puts_r+0x22>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	0598      	lsls	r0, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_puts_r+0x22>
 8005c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c62:	f000 f9c4 	bl	8005fee <__retarget_lock_acquire_recursive>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	0719      	lsls	r1, r3, #28
 8005c6a:	d502      	bpl.n	8005c72 <_puts_r+0x2e>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d135      	bne.n	8005cde <_puts_r+0x9a>
 8005c72:	4621      	mov	r1, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 f8e7 	bl	8005e48 <__swsetup_r>
 8005c7a:	b380      	cbz	r0, 8005cde <_puts_r+0x9a>
 8005c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c82:	07da      	lsls	r2, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_puts_r+0x4e>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	059b      	lsls	r3, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_puts_r+0x4e>
 8005c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c8e:	f000 f9af 	bl	8005ff0 <__retarget_lock_release_recursive>
 8005c92:	4628      	mov	r0, r5
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da04      	bge.n	8005ca4 <_puts_r+0x60>
 8005c9a:	69a2      	ldr	r2, [r4, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	dc17      	bgt.n	8005cd0 <_puts_r+0x8c>
 8005ca0:	290a      	cmp	r1, #10
 8005ca2:	d015      	beq.n	8005cd0 <_puts_r+0x8c>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	7019      	strb	r1, [r3, #0]
 8005cac:	68a3      	ldr	r3, [r4, #8]
 8005cae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	d1ed      	bne.n	8005c96 <_puts_r+0x52>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da11      	bge.n	8005ce2 <_puts_r+0x9e>
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	210a      	movs	r1, #10
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 f881 	bl	8005dca <__swbuf_r>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d0d7      	beq.n	8005c7c <_puts_r+0x38>
 8005ccc:	250a      	movs	r5, #10
 8005cce:	e7d7      	b.n	8005c80 <_puts_r+0x3c>
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 f879 	bl	8005dca <__swbuf_r>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d1e7      	bne.n	8005cac <_puts_r+0x68>
 8005cdc:	e7ce      	b.n	8005c7c <_puts_r+0x38>
 8005cde:	3e01      	subs	r6, #1
 8005ce0:	e7e4      	b.n	8005cac <_puts_r+0x68>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	220a      	movs	r2, #10
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e7ee      	b.n	8005ccc <_puts_r+0x88>
	...

08005cf0 <puts>:
 8005cf0:	4b02      	ldr	r3, [pc, #8]	@ (8005cfc <puts+0xc>)
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	f7ff bfa5 	b.w	8005c44 <_puts_r>
 8005cfa:	bf00      	nop
 8005cfc:	20000018 	.word	0x20000018

08005d00 <siprintf>:
 8005d00:	b40e      	push	{r1, r2, r3}
 8005d02:	b510      	push	{r4, lr}
 8005d04:	b09d      	sub	sp, #116	@ 0x74
 8005d06:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d08:	9002      	str	r0, [sp, #8]
 8005d0a:	9006      	str	r0, [sp, #24]
 8005d0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d10:	480a      	ldr	r0, [pc, #40]	@ (8005d3c <siprintf+0x3c>)
 8005d12:	9107      	str	r1, [sp, #28]
 8005d14:	9104      	str	r1, [sp, #16]
 8005d16:	490a      	ldr	r1, [pc, #40]	@ (8005d40 <siprintf+0x40>)
 8005d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1c:	9105      	str	r1, [sp, #20]
 8005d1e:	2400      	movs	r4, #0
 8005d20:	a902      	add	r1, sp, #8
 8005d22:	6800      	ldr	r0, [r0, #0]
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d28:	f002 fc38 	bl	800859c <_svfiprintf_r>
 8005d2c:	9b02      	ldr	r3, [sp, #8]
 8005d2e:	701c      	strb	r4, [r3, #0]
 8005d30:	b01d      	add	sp, #116	@ 0x74
 8005d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d36:	b003      	add	sp, #12
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000018 	.word	0x20000018
 8005d40:	ffff0208 	.word	0xffff0208

08005d44 <__sread>:
 8005d44:	b510      	push	{r4, lr}
 8005d46:	460c      	mov	r4, r1
 8005d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4c:	f000 f900 	bl	8005f50 <_read_r>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	bfab      	itete	ge
 8005d54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d56:	89a3      	ldrhlt	r3, [r4, #12]
 8005d58:	181b      	addge	r3, r3, r0
 8005d5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d5e:	bfac      	ite	ge
 8005d60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d62:	81a3      	strhlt	r3, [r4, #12]
 8005d64:	bd10      	pop	{r4, pc}

08005d66 <__swrite>:
 8005d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	898b      	ldrh	r3, [r1, #12]
 8005d6e:	05db      	lsls	r3, r3, #23
 8005d70:	4605      	mov	r5, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	4616      	mov	r6, r2
 8005d76:	d505      	bpl.n	8005d84 <__swrite+0x1e>
 8005d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f000 f8d4 	bl	8005f2c <_lseek_r>
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d8e:	81a3      	strh	r3, [r4, #12]
 8005d90:	4632      	mov	r2, r6
 8005d92:	463b      	mov	r3, r7
 8005d94:	4628      	mov	r0, r5
 8005d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9a:	f000 b8eb 	b.w	8005f74 <_write_r>

08005d9e <__sseek>:
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	460c      	mov	r4, r1
 8005da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da6:	f000 f8c1 	bl	8005f2c <_lseek_r>
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	bf15      	itete	ne
 8005db0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005db2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005db6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dba:	81a3      	strheq	r3, [r4, #12]
 8005dbc:	bf18      	it	ne
 8005dbe:	81a3      	strhne	r3, [r4, #12]
 8005dc0:	bd10      	pop	{r4, pc}

08005dc2 <__sclose>:
 8005dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc6:	f000 b8a1 	b.w	8005f0c <_close_r>

08005dca <__swbuf_r>:
 8005dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dcc:	460e      	mov	r6, r1
 8005dce:	4614      	mov	r4, r2
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	b118      	cbz	r0, 8005ddc <__swbuf_r+0x12>
 8005dd4:	6a03      	ldr	r3, [r0, #32]
 8005dd6:	b90b      	cbnz	r3, 8005ddc <__swbuf_r+0x12>
 8005dd8:	f7ff feec 	bl	8005bb4 <__sinit>
 8005ddc:	69a3      	ldr	r3, [r4, #24]
 8005dde:	60a3      	str	r3, [r4, #8]
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	071a      	lsls	r2, r3, #28
 8005de4:	d501      	bpl.n	8005dea <__swbuf_r+0x20>
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	b943      	cbnz	r3, 8005dfc <__swbuf_r+0x32>
 8005dea:	4621      	mov	r1, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 f82b 	bl	8005e48 <__swsetup_r>
 8005df2:	b118      	cbz	r0, 8005dfc <__swbuf_r+0x32>
 8005df4:	f04f 37ff 	mov.w	r7, #4294967295
 8005df8:	4638      	mov	r0, r7
 8005dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	6922      	ldr	r2, [r4, #16]
 8005e00:	1a98      	subs	r0, r3, r2
 8005e02:	6963      	ldr	r3, [r4, #20]
 8005e04:	b2f6      	uxtb	r6, r6
 8005e06:	4283      	cmp	r3, r0
 8005e08:	4637      	mov	r7, r6
 8005e0a:	dc05      	bgt.n	8005e18 <__swbuf_r+0x4e>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f002 fe86 	bl	8008b20 <_fflush_r>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1ed      	bne.n	8005df4 <__swbuf_r+0x2a>
 8005e18:	68a3      	ldr	r3, [r4, #8]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60a3      	str	r3, [r4, #8]
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	701e      	strb	r6, [r3, #0]
 8005e26:	6962      	ldr	r2, [r4, #20]
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d004      	beq.n	8005e38 <__swbuf_r+0x6e>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	07db      	lsls	r3, r3, #31
 8005e32:	d5e1      	bpl.n	8005df8 <__swbuf_r+0x2e>
 8005e34:	2e0a      	cmp	r6, #10
 8005e36:	d1df      	bne.n	8005df8 <__swbuf_r+0x2e>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f002 fe70 	bl	8008b20 <_fflush_r>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d0d9      	beq.n	8005df8 <__swbuf_r+0x2e>
 8005e44:	e7d6      	b.n	8005df4 <__swbuf_r+0x2a>
	...

08005e48 <__swsetup_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4b29      	ldr	r3, [pc, #164]	@ (8005ef0 <__swsetup_r+0xa8>)
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	460c      	mov	r4, r1
 8005e52:	b118      	cbz	r0, 8005e5c <__swsetup_r+0x14>
 8005e54:	6a03      	ldr	r3, [r0, #32]
 8005e56:	b90b      	cbnz	r3, 8005e5c <__swsetup_r+0x14>
 8005e58:	f7ff feac 	bl	8005bb4 <__sinit>
 8005e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e60:	0719      	lsls	r1, r3, #28
 8005e62:	d422      	bmi.n	8005eaa <__swsetup_r+0x62>
 8005e64:	06da      	lsls	r2, r3, #27
 8005e66:	d407      	bmi.n	8005e78 <__swsetup_r+0x30>
 8005e68:	2209      	movs	r2, #9
 8005e6a:	602a      	str	r2, [r5, #0]
 8005e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	f04f 30ff 	mov.w	r0, #4294967295
 8005e76:	e033      	b.n	8005ee0 <__swsetup_r+0x98>
 8005e78:	0758      	lsls	r0, r3, #29
 8005e7a:	d512      	bpl.n	8005ea2 <__swsetup_r+0x5a>
 8005e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e7e:	b141      	cbz	r1, 8005e92 <__swsetup_r+0x4a>
 8005e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d002      	beq.n	8005e8e <__swsetup_r+0x46>
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f000 fefb 	bl	8006c84 <_free_r>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6063      	str	r3, [r4, #4]
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	f043 0308 	orr.w	r3, r3, #8
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	b94b      	cbnz	r3, 8005ec2 <__swsetup_r+0x7a>
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb8:	d003      	beq.n	8005ec2 <__swsetup_r+0x7a>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f002 fe7d 	bl	8008bbc <__smakebuf_r>
 8005ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec6:	f013 0201 	ands.w	r2, r3, #1
 8005eca:	d00a      	beq.n	8005ee2 <__swsetup_r+0x9a>
 8005ecc:	2200      	movs	r2, #0
 8005ece:	60a2      	str	r2, [r4, #8]
 8005ed0:	6962      	ldr	r2, [r4, #20]
 8005ed2:	4252      	negs	r2, r2
 8005ed4:	61a2      	str	r2, [r4, #24]
 8005ed6:	6922      	ldr	r2, [r4, #16]
 8005ed8:	b942      	cbnz	r2, 8005eec <__swsetup_r+0xa4>
 8005eda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ede:	d1c5      	bne.n	8005e6c <__swsetup_r+0x24>
 8005ee0:	bd38      	pop	{r3, r4, r5, pc}
 8005ee2:	0799      	lsls	r1, r3, #30
 8005ee4:	bf58      	it	pl
 8005ee6:	6962      	ldrpl	r2, [r4, #20]
 8005ee8:	60a2      	str	r2, [r4, #8]
 8005eea:	e7f4      	b.n	8005ed6 <__swsetup_r+0x8e>
 8005eec:	2000      	movs	r0, #0
 8005eee:	e7f7      	b.n	8005ee0 <__swsetup_r+0x98>
 8005ef0:	20000018 	.word	0x20000018

08005ef4 <memset>:
 8005ef4:	4402      	add	r2, r0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d100      	bne.n	8005efe <memset+0xa>
 8005efc:	4770      	bx	lr
 8005efe:	f803 1b01 	strb.w	r1, [r3], #1
 8005f02:	e7f9      	b.n	8005ef8 <memset+0x4>

08005f04 <_localeconv_r>:
 8005f04:	4800      	ldr	r0, [pc, #0]	@ (8005f08 <_localeconv_r+0x4>)
 8005f06:	4770      	bx	lr
 8005f08:	20000158 	.word	0x20000158

08005f0c <_close_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d06      	ldr	r5, [pc, #24]	@ (8005f28 <_close_r+0x1c>)
 8005f10:	2300      	movs	r3, #0
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	f7fe fef3 	bl	8004d02 <_close>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d102      	bne.n	8005f26 <_close_r+0x1a>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	b103      	cbz	r3, 8005f26 <_close_r+0x1a>
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	200004f4 	.word	0x200004f4

08005f2c <_lseek_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d07      	ldr	r5, [pc, #28]	@ (8005f4c <_lseek_r+0x20>)
 8005f30:	4604      	mov	r4, r0
 8005f32:	4608      	mov	r0, r1
 8005f34:	4611      	mov	r1, r2
 8005f36:	2200      	movs	r2, #0
 8005f38:	602a      	str	r2, [r5, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f7fe feeb 	bl	8004d16 <_lseek>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_lseek_r+0x1e>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_lseek_r+0x1e>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	200004f4 	.word	0x200004f4

08005f50 <_read_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	@ (8005f70 <_read_r+0x20>)
 8005f54:	4604      	mov	r4, r0
 8005f56:	4608      	mov	r0, r1
 8005f58:	4611      	mov	r1, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	602a      	str	r2, [r5, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fe febf 	bl	8004ce2 <_read>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_read_r+0x1e>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_read_r+0x1e>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	200004f4 	.word	0x200004f4

08005f74 <_write_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d07      	ldr	r5, [pc, #28]	@ (8005f94 <_write_r+0x20>)
 8005f78:	4604      	mov	r4, r0
 8005f7a:	4608      	mov	r0, r1
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	602a      	str	r2, [r5, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f7fb fb96 	bl	80016b4 <_write>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_write_r+0x1e>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_write_r+0x1e>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	200004f4 	.word	0x200004f4

08005f98 <__errno>:
 8005f98:	4b01      	ldr	r3, [pc, #4]	@ (8005fa0 <__errno+0x8>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000018 	.word	0x20000018

08005fa4 <__libc_init_array>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8005fdc <__libc_init_array+0x38>)
 8005fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8005fe0 <__libc_init_array+0x3c>)
 8005faa:	1b64      	subs	r4, r4, r5
 8005fac:	10a4      	asrs	r4, r4, #2
 8005fae:	2600      	movs	r6, #0
 8005fb0:	42a6      	cmp	r6, r4
 8005fb2:	d109      	bne.n	8005fc8 <__libc_init_array+0x24>
 8005fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8005fe4 <__libc_init_array+0x40>)
 8005fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe8 <__libc_init_array+0x44>)
 8005fb8:	f003 fc64 	bl	8009884 <_init>
 8005fbc:	1b64      	subs	r4, r4, r5
 8005fbe:	10a4      	asrs	r4, r4, #2
 8005fc0:	2600      	movs	r6, #0
 8005fc2:	42a6      	cmp	r6, r4
 8005fc4:	d105      	bne.n	8005fd2 <__libc_init_array+0x2e>
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fcc:	4798      	blx	r3
 8005fce:	3601      	adds	r6, #1
 8005fd0:	e7ee      	b.n	8005fb0 <__libc_init_array+0xc>
 8005fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd6:	4798      	blx	r3
 8005fd8:	3601      	adds	r6, #1
 8005fda:	e7f2      	b.n	8005fc2 <__libc_init_array+0x1e>
 8005fdc:	08009d4c 	.word	0x08009d4c
 8005fe0:	08009d4c 	.word	0x08009d4c
 8005fe4:	08009d4c 	.word	0x08009d4c
 8005fe8:	08009d50 	.word	0x08009d50

08005fec <__retarget_lock_init_recursive>:
 8005fec:	4770      	bx	lr

08005fee <__retarget_lock_acquire_recursive>:
 8005fee:	4770      	bx	lr

08005ff0 <__retarget_lock_release_recursive>:
 8005ff0:	4770      	bx	lr
	...

08005ff4 <nanf>:
 8005ff4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005ffc <nanf+0x8>
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	7fc00000 	.word	0x7fc00000

08006000 <quorem>:
 8006000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	6903      	ldr	r3, [r0, #16]
 8006006:	690c      	ldr	r4, [r1, #16]
 8006008:	42a3      	cmp	r3, r4
 800600a:	4607      	mov	r7, r0
 800600c:	db7e      	blt.n	800610c <quorem+0x10c>
 800600e:	3c01      	subs	r4, #1
 8006010:	f101 0814 	add.w	r8, r1, #20
 8006014:	00a3      	lsls	r3, r4, #2
 8006016:	f100 0514 	add.w	r5, r0, #20
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800602a:	3301      	adds	r3, #1
 800602c:	429a      	cmp	r2, r3
 800602e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006032:	fbb2 f6f3 	udiv	r6, r2, r3
 8006036:	d32e      	bcc.n	8006096 <quorem+0x96>
 8006038:	f04f 0a00 	mov.w	sl, #0
 800603c:	46c4      	mov	ip, r8
 800603e:	46ae      	mov	lr, r5
 8006040:	46d3      	mov	fp, sl
 8006042:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006046:	b298      	uxth	r0, r3
 8006048:	fb06 a000 	mla	r0, r6, r0, sl
 800604c:	0c02      	lsrs	r2, r0, #16
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	fb06 2303 	mla	r3, r6, r3, r2
 8006054:	f8de 2000 	ldr.w	r2, [lr]
 8006058:	b280      	uxth	r0, r0
 800605a:	b292      	uxth	r2, r2
 800605c:	1a12      	subs	r2, r2, r0
 800605e:	445a      	add	r2, fp
 8006060:	f8de 0000 	ldr.w	r0, [lr]
 8006064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006068:	b29b      	uxth	r3, r3
 800606a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800606e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006072:	b292      	uxth	r2, r2
 8006074:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006078:	45e1      	cmp	r9, ip
 800607a:	f84e 2b04 	str.w	r2, [lr], #4
 800607e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006082:	d2de      	bcs.n	8006042 <quorem+0x42>
 8006084:	9b00      	ldr	r3, [sp, #0]
 8006086:	58eb      	ldr	r3, [r5, r3]
 8006088:	b92b      	cbnz	r3, 8006096 <quorem+0x96>
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	3b04      	subs	r3, #4
 800608e:	429d      	cmp	r5, r3
 8006090:	461a      	mov	r2, r3
 8006092:	d32f      	bcc.n	80060f4 <quorem+0xf4>
 8006094:	613c      	str	r4, [r7, #16]
 8006096:	4638      	mov	r0, r7
 8006098:	f001 f9b0 	bl	80073fc <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	db25      	blt.n	80060ec <quorem+0xec>
 80060a0:	4629      	mov	r1, r5
 80060a2:	2000      	movs	r0, #0
 80060a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80060a8:	f8d1 c000 	ldr.w	ip, [r1]
 80060ac:	fa1f fe82 	uxth.w	lr, r2
 80060b0:	fa1f f38c 	uxth.w	r3, ip
 80060b4:	eba3 030e 	sub.w	r3, r3, lr
 80060b8:	4403      	add	r3, r0
 80060ba:	0c12      	lsrs	r2, r2, #16
 80060bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ca:	45c1      	cmp	r9, r8
 80060cc:	f841 3b04 	str.w	r3, [r1], #4
 80060d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060d4:	d2e6      	bcs.n	80060a4 <quorem+0xa4>
 80060d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060de:	b922      	cbnz	r2, 80060ea <quorem+0xea>
 80060e0:	3b04      	subs	r3, #4
 80060e2:	429d      	cmp	r5, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	d30b      	bcc.n	8006100 <quorem+0x100>
 80060e8:	613c      	str	r4, [r7, #16]
 80060ea:	3601      	adds	r6, #1
 80060ec:	4630      	mov	r0, r6
 80060ee:	b003      	add	sp, #12
 80060f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	3b04      	subs	r3, #4
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	d1cb      	bne.n	8006094 <quorem+0x94>
 80060fc:	3c01      	subs	r4, #1
 80060fe:	e7c6      	b.n	800608e <quorem+0x8e>
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	3b04      	subs	r3, #4
 8006104:	2a00      	cmp	r2, #0
 8006106:	d1ef      	bne.n	80060e8 <quorem+0xe8>
 8006108:	3c01      	subs	r4, #1
 800610a:	e7ea      	b.n	80060e2 <quorem+0xe2>
 800610c:	2000      	movs	r0, #0
 800610e:	e7ee      	b.n	80060ee <quorem+0xee>

08006110 <_dtoa_r>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	69c7      	ldr	r7, [r0, #28]
 8006116:	b099      	sub	sp, #100	@ 0x64
 8006118:	ed8d 0b04 	vstr	d0, [sp, #16]
 800611c:	ec55 4b10 	vmov	r4, r5, d0
 8006120:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006122:	9109      	str	r1, [sp, #36]	@ 0x24
 8006124:	4683      	mov	fp, r0
 8006126:	920e      	str	r2, [sp, #56]	@ 0x38
 8006128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800612a:	b97f      	cbnz	r7, 800614c <_dtoa_r+0x3c>
 800612c:	2010      	movs	r0, #16
 800612e:	f000 fdf3 	bl	8006d18 <malloc>
 8006132:	4602      	mov	r2, r0
 8006134:	f8cb 001c 	str.w	r0, [fp, #28]
 8006138:	b920      	cbnz	r0, 8006144 <_dtoa_r+0x34>
 800613a:	4ba5      	ldr	r3, [pc, #660]	@ (80063d0 <_dtoa_r+0x2c0>)
 800613c:	21ef      	movs	r1, #239	@ 0xef
 800613e:	48a5      	ldr	r0, [pc, #660]	@ (80063d4 <_dtoa_r+0x2c4>)
 8006140:	f002 fdee 	bl	8008d20 <__assert_func>
 8006144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006148:	6007      	str	r7, [r0, #0]
 800614a:	60c7      	str	r7, [r0, #12]
 800614c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	b159      	cbz	r1, 800616c <_dtoa_r+0x5c>
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	604a      	str	r2, [r1, #4]
 8006158:	2301      	movs	r3, #1
 800615a:	4093      	lsls	r3, r2
 800615c:	608b      	str	r3, [r1, #8]
 800615e:	4658      	mov	r0, fp
 8006160:	f000 fed0 	bl	8006f04 <_Bfree>
 8006164:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	1e2b      	subs	r3, r5, #0
 800616e:	bfb9      	ittee	lt
 8006170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006174:	9305      	strlt	r3, [sp, #20]
 8006176:	2300      	movge	r3, #0
 8006178:	6033      	strge	r3, [r6, #0]
 800617a:	9f05      	ldr	r7, [sp, #20]
 800617c:	4b96      	ldr	r3, [pc, #600]	@ (80063d8 <_dtoa_r+0x2c8>)
 800617e:	bfbc      	itt	lt
 8006180:	2201      	movlt	r2, #1
 8006182:	6032      	strlt	r2, [r6, #0]
 8006184:	43bb      	bics	r3, r7
 8006186:	d112      	bne.n	80061ae <_dtoa_r+0x9e>
 8006188:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800618a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006194:	4323      	orrs	r3, r4
 8006196:	f000 8543 	beq.w	8006c20 <_dtoa_r+0xb10>
 800619a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800619c:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 80063ec <_dtoa_r+0x2dc>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8545 	beq.w	8006c30 <_dtoa_r+0xb20>
 80061a6:	f10a 0303 	add.w	r3, sl, #3
 80061aa:	f000 bd3f 	b.w	8006c2c <_dtoa_r+0xb1c>
 80061ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80061b2:	2200      	movs	r2, #0
 80061b4:	ec51 0b17 	vmov	r0, r1, d7
 80061b8:	2300      	movs	r3, #0
 80061ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80061be:	f7fa fc63 	bl	8000a88 <__aeabi_dcmpeq>
 80061c2:	4680      	mov	r8, r0
 80061c4:	b158      	cbz	r0, 80061de <_dtoa_r+0xce>
 80061c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061c8:	2301      	movs	r3, #1
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061ce:	b113      	cbz	r3, 80061d6 <_dtoa_r+0xc6>
 80061d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061d2:	4b82      	ldr	r3, [pc, #520]	@ (80063dc <_dtoa_r+0x2cc>)
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	f8df a218 	ldr.w	sl, [pc, #536]	@ 80063f0 <_dtoa_r+0x2e0>
 80061da:	f000 bd29 	b.w	8006c30 <_dtoa_r+0xb20>
 80061de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061e2:	aa16      	add	r2, sp, #88	@ 0x58
 80061e4:	a917      	add	r1, sp, #92	@ 0x5c
 80061e6:	4658      	mov	r0, fp
 80061e8:	f001 fa28 	bl	800763c <__d2b>
 80061ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061f0:	4681      	mov	r9, r0
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d077      	beq.n	80062e6 <_dtoa_r+0x1d6>
 80061f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80061fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800620c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006210:	4619      	mov	r1, r3
 8006212:	2200      	movs	r2, #0
 8006214:	4b72      	ldr	r3, [pc, #456]	@ (80063e0 <_dtoa_r+0x2d0>)
 8006216:	f7fa f817 	bl	8000248 <__aeabi_dsub>
 800621a:	a367      	add	r3, pc, #412	@ (adr r3, 80063b8 <_dtoa_r+0x2a8>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa f9ca 	bl	80005b8 <__aeabi_dmul>
 8006224:	a366      	add	r3, pc, #408	@ (adr r3, 80063c0 <_dtoa_r+0x2b0>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7fa f80f 	bl	800024c <__adddf3>
 800622e:	4604      	mov	r4, r0
 8006230:	4630      	mov	r0, r6
 8006232:	460d      	mov	r5, r1
 8006234:	f7fa f956 	bl	80004e4 <__aeabi_i2d>
 8006238:	a363      	add	r3, pc, #396	@ (adr r3, 80063c8 <_dtoa_r+0x2b8>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f9bb 	bl	80005b8 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7f9 ffff 	bl	800024c <__adddf3>
 800624e:	4604      	mov	r4, r0
 8006250:	460d      	mov	r5, r1
 8006252:	f7fa fc61 	bl	8000b18 <__aeabi_d2iz>
 8006256:	2200      	movs	r2, #0
 8006258:	4607      	mov	r7, r0
 800625a:	2300      	movs	r3, #0
 800625c:	4620      	mov	r0, r4
 800625e:	4629      	mov	r1, r5
 8006260:	f7fa fc1c 	bl	8000a9c <__aeabi_dcmplt>
 8006264:	b140      	cbz	r0, 8006278 <_dtoa_r+0x168>
 8006266:	4638      	mov	r0, r7
 8006268:	f7fa f93c 	bl	80004e4 <__aeabi_i2d>
 800626c:	4622      	mov	r2, r4
 800626e:	462b      	mov	r3, r5
 8006270:	f7fa fc0a 	bl	8000a88 <__aeabi_dcmpeq>
 8006274:	b900      	cbnz	r0, 8006278 <_dtoa_r+0x168>
 8006276:	3f01      	subs	r7, #1
 8006278:	2f16      	cmp	r7, #22
 800627a:	d851      	bhi.n	8006320 <_dtoa_r+0x210>
 800627c:	4b59      	ldr	r3, [pc, #356]	@ (80063e4 <_dtoa_r+0x2d4>)
 800627e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800628a:	f7fa fc07 	bl	8000a9c <__aeabi_dcmplt>
 800628e:	2800      	cmp	r0, #0
 8006290:	d048      	beq.n	8006324 <_dtoa_r+0x214>
 8006292:	3f01      	subs	r7, #1
 8006294:	2300      	movs	r3, #0
 8006296:	9312      	str	r3, [sp, #72]	@ 0x48
 8006298:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800629a:	1b9b      	subs	r3, r3, r6
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	bf44      	itt	mi
 80062a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80062a4:	2300      	movmi	r3, #0
 80062a6:	9208      	str	r2, [sp, #32]
 80062a8:	bf54      	ite	pl
 80062aa:	f04f 0800 	movpl.w	r8, #0
 80062ae:	9308      	strmi	r3, [sp, #32]
 80062b0:	2f00      	cmp	r7, #0
 80062b2:	db39      	blt.n	8006328 <_dtoa_r+0x218>
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80062b8:	443b      	add	r3, r7
 80062ba:	9308      	str	r3, [sp, #32]
 80062bc:	2300      	movs	r3, #0
 80062be:	930a      	str	r3, [sp, #40]	@ 0x28
 80062c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d861      	bhi.n	800638a <_dtoa_r+0x27a>
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	bfc4      	itt	gt
 80062ca:	3b04      	subgt	r3, #4
 80062cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80062ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d0:	f1a3 0302 	sub.w	r3, r3, #2
 80062d4:	bfcc      	ite	gt
 80062d6:	2400      	movgt	r4, #0
 80062d8:	2401      	movle	r4, #1
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d861      	bhi.n	80063a2 <_dtoa_r+0x292>
 80062de:	e8df f003 	tbb	[pc, r3]
 80062e2:	5250      	.short	0x5250
 80062e4:	2a35      	.short	0x2a35
 80062e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062ea:	441e      	add	r6, r3
 80062ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	bfc1      	itttt	gt
 80062f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80062f8:	409f      	lslgt	r7, r3
 80062fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80062fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006302:	bfd6      	itet	le
 8006304:	f1c3 0320 	rsble	r3, r3, #32
 8006308:	ea47 0003 	orrgt.w	r0, r7, r3
 800630c:	fa04 f003 	lslle.w	r0, r4, r3
 8006310:	f7fa f8d8 	bl	80004c4 <__aeabi_ui2d>
 8006314:	2201      	movs	r2, #1
 8006316:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800631a:	3e01      	subs	r6, #1
 800631c:	9214      	str	r2, [sp, #80]	@ 0x50
 800631e:	e777      	b.n	8006210 <_dtoa_r+0x100>
 8006320:	2301      	movs	r3, #1
 8006322:	e7b8      	b.n	8006296 <_dtoa_r+0x186>
 8006324:	9012      	str	r0, [sp, #72]	@ 0x48
 8006326:	e7b7      	b.n	8006298 <_dtoa_r+0x188>
 8006328:	427b      	negs	r3, r7
 800632a:	930a      	str	r3, [sp, #40]	@ 0x28
 800632c:	2300      	movs	r3, #0
 800632e:	eba8 0807 	sub.w	r8, r8, r7
 8006332:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006334:	e7c4      	b.n	80062c0 <_dtoa_r+0x1b0>
 8006336:	2301      	movs	r3, #1
 8006338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800633a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	bfb8      	it	lt
 8006348:	2301      	movlt	r3, #1
 800634a:	e006      	b.n	800635a <_dtoa_r+0x24a>
 800634c:	2301      	movs	r3, #1
 800634e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006352:	2b00      	cmp	r3, #0
 8006354:	dd28      	ble.n	80063a8 <_dtoa_r+0x298>
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	f8db 001c 	ldr.w	r0, [fp, #28]
 800635e:	2100      	movs	r1, #0
 8006360:	2204      	movs	r2, #4
 8006362:	f102 0514 	add.w	r5, r2, #20
 8006366:	429d      	cmp	r5, r3
 8006368:	d923      	bls.n	80063b2 <_dtoa_r+0x2a2>
 800636a:	6041      	str	r1, [r0, #4]
 800636c:	4658      	mov	r0, fp
 800636e:	f000 fd89 	bl	8006e84 <_Balloc>
 8006372:	4682      	mov	sl, r0
 8006374:	2800      	cmp	r0, #0
 8006376:	d13d      	bne.n	80063f4 <_dtoa_r+0x2e4>
 8006378:	4b1b      	ldr	r3, [pc, #108]	@ (80063e8 <_dtoa_r+0x2d8>)
 800637a:	4602      	mov	r2, r0
 800637c:	f240 11af 	movw	r1, #431	@ 0x1af
 8006380:	e6dd      	b.n	800613e <_dtoa_r+0x2e>
 8006382:	2300      	movs	r3, #0
 8006384:	e7e3      	b.n	800634e <_dtoa_r+0x23e>
 8006386:	2300      	movs	r3, #0
 8006388:	e7d6      	b.n	8006338 <_dtoa_r+0x228>
 800638a:	2401      	movs	r4, #1
 800638c:	2300      	movs	r3, #0
 800638e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006390:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	2312      	movs	r3, #18
 800639e:	920e      	str	r2, [sp, #56]	@ 0x38
 80063a0:	e7db      	b.n	800635a <_dtoa_r+0x24a>
 80063a2:	2301      	movs	r3, #1
 80063a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063a6:	e7f4      	b.n	8006392 <_dtoa_r+0x282>
 80063a8:	2301      	movs	r3, #1
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	9303      	str	r3, [sp, #12]
 80063ae:	461a      	mov	r2, r3
 80063b0:	e7f5      	b.n	800639e <_dtoa_r+0x28e>
 80063b2:	3101      	adds	r1, #1
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	e7d4      	b.n	8006362 <_dtoa_r+0x252>
 80063b8:	636f4361 	.word	0x636f4361
 80063bc:	3fd287a7 	.word	0x3fd287a7
 80063c0:	8b60c8b3 	.word	0x8b60c8b3
 80063c4:	3fc68a28 	.word	0x3fc68a28
 80063c8:	509f79fb 	.word	0x509f79fb
 80063cc:	3fd34413 	.word	0x3fd34413
 80063d0:	0800995e 	.word	0x0800995e
 80063d4:	08009975 	.word	0x08009975
 80063d8:	7ff00000 	.word	0x7ff00000
 80063dc:	08009929 	.word	0x08009929
 80063e0:	3ff80000 	.word	0x3ff80000
 80063e4:	08009b28 	.word	0x08009b28
 80063e8:	080099ce 	.word	0x080099ce
 80063ec:	0800995a 	.word	0x0800995a
 80063f0:	08009928 	.word	0x08009928
 80063f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063f8:	6018      	str	r0, [r3, #0]
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	2b0e      	cmp	r3, #14
 80063fe:	f200 80a1 	bhi.w	8006544 <_dtoa_r+0x434>
 8006402:	2c00      	cmp	r4, #0
 8006404:	f000 809e 	beq.w	8006544 <_dtoa_r+0x434>
 8006408:	2f00      	cmp	r7, #0
 800640a:	dd33      	ble.n	8006474 <_dtoa_r+0x364>
 800640c:	4b9c      	ldr	r3, [pc, #624]	@ (8006680 <_dtoa_r+0x570>)
 800640e:	f007 020f 	and.w	r2, r7, #15
 8006412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006416:	ed93 7b00 	vldr	d7, [r3]
 800641a:	05f8      	lsls	r0, r7, #23
 800641c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006420:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006424:	d516      	bpl.n	8006454 <_dtoa_r+0x344>
 8006426:	4b97      	ldr	r3, [pc, #604]	@ (8006684 <_dtoa_r+0x574>)
 8006428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800642c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006430:	f7fa f9ec 	bl	800080c <__aeabi_ddiv>
 8006434:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006438:	f004 040f 	and.w	r4, r4, #15
 800643c:	2603      	movs	r6, #3
 800643e:	4d91      	ldr	r5, [pc, #580]	@ (8006684 <_dtoa_r+0x574>)
 8006440:	b954      	cbnz	r4, 8006458 <_dtoa_r+0x348>
 8006442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800644a:	f7fa f9df 	bl	800080c <__aeabi_ddiv>
 800644e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006452:	e028      	b.n	80064a6 <_dtoa_r+0x396>
 8006454:	2602      	movs	r6, #2
 8006456:	e7f2      	b.n	800643e <_dtoa_r+0x32e>
 8006458:	07e1      	lsls	r1, r4, #31
 800645a:	d508      	bpl.n	800646e <_dtoa_r+0x35e>
 800645c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006460:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006464:	f7fa f8a8 	bl	80005b8 <__aeabi_dmul>
 8006468:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800646c:	3601      	adds	r6, #1
 800646e:	1064      	asrs	r4, r4, #1
 8006470:	3508      	adds	r5, #8
 8006472:	e7e5      	b.n	8006440 <_dtoa_r+0x330>
 8006474:	f000 80af 	beq.w	80065d6 <_dtoa_r+0x4c6>
 8006478:	427c      	negs	r4, r7
 800647a:	4b81      	ldr	r3, [pc, #516]	@ (8006680 <_dtoa_r+0x570>)
 800647c:	4d81      	ldr	r5, [pc, #516]	@ (8006684 <_dtoa_r+0x574>)
 800647e:	f004 020f 	and.w	r2, r4, #15
 8006482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800648e:	f7fa f893 	bl	80005b8 <__aeabi_dmul>
 8006492:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006496:	1124      	asrs	r4, r4, #4
 8006498:	2300      	movs	r3, #0
 800649a:	2602      	movs	r6, #2
 800649c:	2c00      	cmp	r4, #0
 800649e:	f040 808f 	bne.w	80065c0 <_dtoa_r+0x4b0>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1d3      	bne.n	800644e <_dtoa_r+0x33e>
 80064a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8094 	beq.w	80065da <_dtoa_r+0x4ca>
 80064b2:	4b75      	ldr	r3, [pc, #468]	@ (8006688 <_dtoa_r+0x578>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	4620      	mov	r0, r4
 80064b8:	4629      	mov	r1, r5
 80064ba:	f7fa faef 	bl	8000a9c <__aeabi_dcmplt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f000 808b 	beq.w	80065da <_dtoa_r+0x4ca>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8087 	beq.w	80065da <_dtoa_r+0x4ca>
 80064cc:	9b00      	ldr	r3, [sp, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	dd34      	ble.n	800653c <_dtoa_r+0x42c>
 80064d2:	1e7b      	subs	r3, r7, #1
 80064d4:	9306      	str	r3, [sp, #24]
 80064d6:	4620      	mov	r0, r4
 80064d8:	4b6c      	ldr	r3, [pc, #432]	@ (800668c <_dtoa_r+0x57c>)
 80064da:	2200      	movs	r2, #0
 80064dc:	4629      	mov	r1, r5
 80064de:	f7fa f86b 	bl	80005b8 <__aeabi_dmul>
 80064e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064e6:	9c00      	ldr	r4, [sp, #0]
 80064e8:	3601      	adds	r6, #1
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7f9 fffa 	bl	80004e4 <__aeabi_i2d>
 80064f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f4:	f7fa f860 	bl	80005b8 <__aeabi_dmul>
 80064f8:	4b65      	ldr	r3, [pc, #404]	@ (8006690 <_dtoa_r+0x580>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	f7f9 fea6 	bl	800024c <__adddf3>
 8006500:	4605      	mov	r5, r0
 8006502:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006506:	2c00      	cmp	r4, #0
 8006508:	d16a      	bne.n	80065e0 <_dtoa_r+0x4d0>
 800650a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800650e:	4b61      	ldr	r3, [pc, #388]	@ (8006694 <_dtoa_r+0x584>)
 8006510:	2200      	movs	r2, #0
 8006512:	f7f9 fe99 	bl	8000248 <__aeabi_dsub>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800651e:	462a      	mov	r2, r5
 8006520:	4633      	mov	r3, r6
 8006522:	f7fa fad9 	bl	8000ad8 <__aeabi_dcmpgt>
 8006526:	2800      	cmp	r0, #0
 8006528:	f040 8287 	bne.w	8006a3a <_dtoa_r+0x92a>
 800652c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006530:	462a      	mov	r2, r5
 8006532:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006536:	f7fa fab1 	bl	8000a9c <__aeabi_dcmplt>
 800653a:	bb38      	cbnz	r0, 800658c <_dtoa_r+0x47c>
 800653c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006540:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006544:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006546:	2b00      	cmp	r3, #0
 8006548:	f2c0 8158 	blt.w	80067fc <_dtoa_r+0x6ec>
 800654c:	2f0e      	cmp	r7, #14
 800654e:	f300 8155 	bgt.w	80067fc <_dtoa_r+0x6ec>
 8006552:	4b4b      	ldr	r3, [pc, #300]	@ (8006680 <_dtoa_r+0x570>)
 8006554:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006558:	ed93 7b00 	vldr	d7, [r3]
 800655c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800655e:	2b00      	cmp	r3, #0
 8006560:	ed8d 7b00 	vstr	d7, [sp]
 8006564:	f280 80e5 	bge.w	8006732 <_dtoa_r+0x622>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f300 80e1 	bgt.w	8006732 <_dtoa_r+0x622>
 8006570:	d10c      	bne.n	800658c <_dtoa_r+0x47c>
 8006572:	4b48      	ldr	r3, [pc, #288]	@ (8006694 <_dtoa_r+0x584>)
 8006574:	2200      	movs	r2, #0
 8006576:	ec51 0b17 	vmov	r0, r1, d7
 800657a:	f7fa f81d 	bl	80005b8 <__aeabi_dmul>
 800657e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006582:	f7fa fa9f 	bl	8000ac4 <__aeabi_dcmpge>
 8006586:	2800      	cmp	r0, #0
 8006588:	f000 8255 	beq.w	8006a36 <_dtoa_r+0x926>
 800658c:	2400      	movs	r4, #0
 800658e:	4625      	mov	r5, r4
 8006590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006592:	43db      	mvns	r3, r3
 8006594:	9306      	str	r3, [sp, #24]
 8006596:	4656      	mov	r6, sl
 8006598:	2700      	movs	r7, #0
 800659a:	4621      	mov	r1, r4
 800659c:	4658      	mov	r0, fp
 800659e:	f000 fcb1 	bl	8006f04 <_Bfree>
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	f000 80bd 	beq.w	8006722 <_dtoa_r+0x612>
 80065a8:	b12f      	cbz	r7, 80065b6 <_dtoa_r+0x4a6>
 80065aa:	42af      	cmp	r7, r5
 80065ac:	d003      	beq.n	80065b6 <_dtoa_r+0x4a6>
 80065ae:	4639      	mov	r1, r7
 80065b0:	4658      	mov	r0, fp
 80065b2:	f000 fca7 	bl	8006f04 <_Bfree>
 80065b6:	4629      	mov	r1, r5
 80065b8:	4658      	mov	r0, fp
 80065ba:	f000 fca3 	bl	8006f04 <_Bfree>
 80065be:	e0b0      	b.n	8006722 <_dtoa_r+0x612>
 80065c0:	07e2      	lsls	r2, r4, #31
 80065c2:	d505      	bpl.n	80065d0 <_dtoa_r+0x4c0>
 80065c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065c8:	f7f9 fff6 	bl	80005b8 <__aeabi_dmul>
 80065cc:	3601      	adds	r6, #1
 80065ce:	2301      	movs	r3, #1
 80065d0:	1064      	asrs	r4, r4, #1
 80065d2:	3508      	adds	r5, #8
 80065d4:	e762      	b.n	800649c <_dtoa_r+0x38c>
 80065d6:	2602      	movs	r6, #2
 80065d8:	e765      	b.n	80064a6 <_dtoa_r+0x396>
 80065da:	9c03      	ldr	r4, [sp, #12]
 80065dc:	9706      	str	r7, [sp, #24]
 80065de:	e784      	b.n	80064ea <_dtoa_r+0x3da>
 80065e0:	4b27      	ldr	r3, [pc, #156]	@ (8006680 <_dtoa_r+0x570>)
 80065e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065ec:	4454      	add	r4, sl
 80065ee:	2900      	cmp	r1, #0
 80065f0:	d054      	beq.n	800669c <_dtoa_r+0x58c>
 80065f2:	4929      	ldr	r1, [pc, #164]	@ (8006698 <_dtoa_r+0x588>)
 80065f4:	2000      	movs	r0, #0
 80065f6:	f7fa f909 	bl	800080c <__aeabi_ddiv>
 80065fa:	4633      	mov	r3, r6
 80065fc:	462a      	mov	r2, r5
 80065fe:	f7f9 fe23 	bl	8000248 <__aeabi_dsub>
 8006602:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006606:	4656      	mov	r6, sl
 8006608:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800660c:	f7fa fa84 	bl	8000b18 <__aeabi_d2iz>
 8006610:	4605      	mov	r5, r0
 8006612:	f7f9 ff67 	bl	80004e4 <__aeabi_i2d>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661e:	f7f9 fe13 	bl	8000248 <__aeabi_dsub>
 8006622:	3530      	adds	r5, #48	@ 0x30
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800662c:	f806 5b01 	strb.w	r5, [r6], #1
 8006630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006634:	f7fa fa32 	bl	8000a9c <__aeabi_dcmplt>
 8006638:	2800      	cmp	r0, #0
 800663a:	d172      	bne.n	8006722 <_dtoa_r+0x612>
 800663c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006640:	4911      	ldr	r1, [pc, #68]	@ (8006688 <_dtoa_r+0x578>)
 8006642:	2000      	movs	r0, #0
 8006644:	f7f9 fe00 	bl	8000248 <__aeabi_dsub>
 8006648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800664c:	f7fa fa26 	bl	8000a9c <__aeabi_dcmplt>
 8006650:	2800      	cmp	r0, #0
 8006652:	f040 80b4 	bne.w	80067be <_dtoa_r+0x6ae>
 8006656:	42a6      	cmp	r6, r4
 8006658:	f43f af70 	beq.w	800653c <_dtoa_r+0x42c>
 800665c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006660:	4b0a      	ldr	r3, [pc, #40]	@ (800668c <_dtoa_r+0x57c>)
 8006662:	2200      	movs	r2, #0
 8006664:	f7f9 ffa8 	bl	80005b8 <__aeabi_dmul>
 8006668:	4b08      	ldr	r3, [pc, #32]	@ (800668c <_dtoa_r+0x57c>)
 800666a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800666e:	2200      	movs	r2, #0
 8006670:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006674:	f7f9 ffa0 	bl	80005b8 <__aeabi_dmul>
 8006678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800667c:	e7c4      	b.n	8006608 <_dtoa_r+0x4f8>
 800667e:	bf00      	nop
 8006680:	08009b28 	.word	0x08009b28
 8006684:	08009b00 	.word	0x08009b00
 8006688:	3ff00000 	.word	0x3ff00000
 800668c:	40240000 	.word	0x40240000
 8006690:	401c0000 	.word	0x401c0000
 8006694:	40140000 	.word	0x40140000
 8006698:	3fe00000 	.word	0x3fe00000
 800669c:	4631      	mov	r1, r6
 800669e:	4628      	mov	r0, r5
 80066a0:	f7f9 ff8a 	bl	80005b8 <__aeabi_dmul>
 80066a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066a8:	9415      	str	r4, [sp, #84]	@ 0x54
 80066aa:	4656      	mov	r6, sl
 80066ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066b0:	f7fa fa32 	bl	8000b18 <__aeabi_d2iz>
 80066b4:	4605      	mov	r5, r0
 80066b6:	f7f9 ff15 	bl	80004e4 <__aeabi_i2d>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c2:	f7f9 fdc1 	bl	8000248 <__aeabi_dsub>
 80066c6:	3530      	adds	r5, #48	@ 0x30
 80066c8:	f806 5b01 	strb.w	r5, [r6], #1
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	42a6      	cmp	r6, r4
 80066d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	d124      	bne.n	8006726 <_dtoa_r+0x616>
 80066dc:	4bab      	ldr	r3, [pc, #684]	@ (800698c <_dtoa_r+0x87c>)
 80066de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066e2:	f7f9 fdb3 	bl	800024c <__adddf3>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ee:	f7fa f9f3 	bl	8000ad8 <__aeabi_dcmpgt>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d163      	bne.n	80067be <_dtoa_r+0x6ae>
 80066f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066fa:	49a4      	ldr	r1, [pc, #656]	@ (800698c <_dtoa_r+0x87c>)
 80066fc:	2000      	movs	r0, #0
 80066fe:	f7f9 fda3 	bl	8000248 <__aeabi_dsub>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800670a:	f7fa f9c7 	bl	8000a9c <__aeabi_dcmplt>
 800670e:	2800      	cmp	r0, #0
 8006710:	f43f af14 	beq.w	800653c <_dtoa_r+0x42c>
 8006714:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006716:	1e73      	subs	r3, r6, #1
 8006718:	9315      	str	r3, [sp, #84]	@ 0x54
 800671a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800671e:	2b30      	cmp	r3, #48	@ 0x30
 8006720:	d0f8      	beq.n	8006714 <_dtoa_r+0x604>
 8006722:	9f06      	ldr	r7, [sp, #24]
 8006724:	e03b      	b.n	800679e <_dtoa_r+0x68e>
 8006726:	4b9a      	ldr	r3, [pc, #616]	@ (8006990 <_dtoa_r+0x880>)
 8006728:	f7f9 ff46 	bl	80005b8 <__aeabi_dmul>
 800672c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006730:	e7bc      	b.n	80066ac <_dtoa_r+0x59c>
 8006732:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006736:	4656      	mov	r6, sl
 8006738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800673c:	4620      	mov	r0, r4
 800673e:	4629      	mov	r1, r5
 8006740:	f7fa f864 	bl	800080c <__aeabi_ddiv>
 8006744:	f7fa f9e8 	bl	8000b18 <__aeabi_d2iz>
 8006748:	4680      	mov	r8, r0
 800674a:	f7f9 fecb 	bl	80004e4 <__aeabi_i2d>
 800674e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006752:	f7f9 ff31 	bl	80005b8 <__aeabi_dmul>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4620      	mov	r0, r4
 800675c:	4629      	mov	r1, r5
 800675e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006762:	f7f9 fd71 	bl	8000248 <__aeabi_dsub>
 8006766:	f806 4b01 	strb.w	r4, [r6], #1
 800676a:	9d03      	ldr	r5, [sp, #12]
 800676c:	eba6 040a 	sub.w	r4, r6, sl
 8006770:	42a5      	cmp	r5, r4
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	d134      	bne.n	80067e2 <_dtoa_r+0x6d2>
 8006778:	f7f9 fd68 	bl	800024c <__adddf3>
 800677c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006780:	4604      	mov	r4, r0
 8006782:	460d      	mov	r5, r1
 8006784:	f7fa f9a8 	bl	8000ad8 <__aeabi_dcmpgt>
 8006788:	b9c0      	cbnz	r0, 80067bc <_dtoa_r+0x6ac>
 800678a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7fa f979 	bl	8000a88 <__aeabi_dcmpeq>
 8006796:	b110      	cbz	r0, 800679e <_dtoa_r+0x68e>
 8006798:	f018 0f01 	tst.w	r8, #1
 800679c:	d10e      	bne.n	80067bc <_dtoa_r+0x6ac>
 800679e:	4649      	mov	r1, r9
 80067a0:	4658      	mov	r0, fp
 80067a2:	f000 fbaf 	bl	8006f04 <_Bfree>
 80067a6:	2300      	movs	r3, #0
 80067a8:	7033      	strb	r3, [r6, #0]
 80067aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067ac:	3701      	adds	r7, #1
 80067ae:	601f      	str	r7, [r3, #0]
 80067b0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 823c 	beq.w	8006c30 <_dtoa_r+0xb20>
 80067b8:	601e      	str	r6, [r3, #0]
 80067ba:	e239      	b.n	8006c30 <_dtoa_r+0xb20>
 80067bc:	9706      	str	r7, [sp, #24]
 80067be:	4633      	mov	r3, r6
 80067c0:	461e      	mov	r6, r3
 80067c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067c6:	2a39      	cmp	r2, #57	@ 0x39
 80067c8:	d107      	bne.n	80067da <_dtoa_r+0x6ca>
 80067ca:	459a      	cmp	sl, r3
 80067cc:	d1f8      	bne.n	80067c0 <_dtoa_r+0x6b0>
 80067ce:	9a06      	ldr	r2, [sp, #24]
 80067d0:	3201      	adds	r2, #1
 80067d2:	9206      	str	r2, [sp, #24]
 80067d4:	2230      	movs	r2, #48	@ 0x30
 80067d6:	f88a 2000 	strb.w	r2, [sl]
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	3201      	adds	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e79f      	b.n	8006722 <_dtoa_r+0x612>
 80067e2:	4b6b      	ldr	r3, [pc, #428]	@ (8006990 <_dtoa_r+0x880>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	f7f9 fee7 	bl	80005b8 <__aeabi_dmul>
 80067ea:	2200      	movs	r2, #0
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	460d      	mov	r5, r1
 80067f2:	f7fa f949 	bl	8000a88 <__aeabi_dcmpeq>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d09e      	beq.n	8006738 <_dtoa_r+0x628>
 80067fa:	e7d0      	b.n	800679e <_dtoa_r+0x68e>
 80067fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067fe:	2a00      	cmp	r2, #0
 8006800:	f000 80e1 	beq.w	80069c6 <_dtoa_r+0x8b6>
 8006804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006806:	2a01      	cmp	r2, #1
 8006808:	f300 80c4 	bgt.w	8006994 <_dtoa_r+0x884>
 800680c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800680e:	2a00      	cmp	r2, #0
 8006810:	f000 80b7 	beq.w	8006982 <_dtoa_r+0x872>
 8006814:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006818:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800681a:	4646      	mov	r6, r8
 800681c:	9a08      	ldr	r2, [sp, #32]
 800681e:	2101      	movs	r1, #1
 8006820:	441a      	add	r2, r3
 8006822:	4658      	mov	r0, fp
 8006824:	4498      	add	r8, r3
 8006826:	9208      	str	r2, [sp, #32]
 8006828:	f000 fc6a 	bl	8007100 <__i2b>
 800682c:	4605      	mov	r5, r0
 800682e:	b15e      	cbz	r6, 8006848 <_dtoa_r+0x738>
 8006830:	9b08      	ldr	r3, [sp, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	dd08      	ble.n	8006848 <_dtoa_r+0x738>
 8006836:	42b3      	cmp	r3, r6
 8006838:	9a08      	ldr	r2, [sp, #32]
 800683a:	bfa8      	it	ge
 800683c:	4633      	movge	r3, r6
 800683e:	eba8 0803 	sub.w	r8, r8, r3
 8006842:	1af6      	subs	r6, r6, r3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	9308      	str	r3, [sp, #32]
 8006848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800684a:	b1f3      	cbz	r3, 800688a <_dtoa_r+0x77a>
 800684c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 80bd 	beq.w	80069ce <_dtoa_r+0x8be>
 8006854:	b18c      	cbz	r4, 800687a <_dtoa_r+0x76a>
 8006856:	4629      	mov	r1, r5
 8006858:	4622      	mov	r2, r4
 800685a:	4658      	mov	r0, fp
 800685c:	f000 fd08 	bl	8007270 <__pow5mult>
 8006860:	464a      	mov	r2, r9
 8006862:	4601      	mov	r1, r0
 8006864:	4605      	mov	r5, r0
 8006866:	4658      	mov	r0, fp
 8006868:	f000 fc60 	bl	800712c <__multiply>
 800686c:	4649      	mov	r1, r9
 800686e:	9006      	str	r0, [sp, #24]
 8006870:	4658      	mov	r0, fp
 8006872:	f000 fb47 	bl	8006f04 <_Bfree>
 8006876:	9b06      	ldr	r3, [sp, #24]
 8006878:	4699      	mov	r9, r3
 800687a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800687c:	1b1a      	subs	r2, r3, r4
 800687e:	d004      	beq.n	800688a <_dtoa_r+0x77a>
 8006880:	4649      	mov	r1, r9
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fcf4 	bl	8007270 <__pow5mult>
 8006888:	4681      	mov	r9, r0
 800688a:	2101      	movs	r1, #1
 800688c:	4658      	mov	r0, fp
 800688e:	f000 fc37 	bl	8007100 <__i2b>
 8006892:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006894:	4604      	mov	r4, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 81ce 	beq.w	8006c38 <_dtoa_r+0xb28>
 800689c:	461a      	mov	r2, r3
 800689e:	4601      	mov	r1, r0
 80068a0:	4658      	mov	r0, fp
 80068a2:	f000 fce5 	bl	8007270 <__pow5mult>
 80068a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	4604      	mov	r4, r0
 80068ac:	f300 8095 	bgt.w	80069da <_dtoa_r+0x8ca>
 80068b0:	9b04      	ldr	r3, [sp, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f040 808d 	bne.w	80069d2 <_dtoa_r+0x8c2>
 80068b8:	9b05      	ldr	r3, [sp, #20]
 80068ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8089 	bne.w	80069d6 <_dtoa_r+0x8c6>
 80068c4:	9b05      	ldr	r3, [sp, #20]
 80068c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068ca:	0d1b      	lsrs	r3, r3, #20
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	b12b      	cbz	r3, 80068dc <_dtoa_r+0x7cc>
 80068d0:	9b08      	ldr	r3, [sp, #32]
 80068d2:	3301      	adds	r3, #1
 80068d4:	9308      	str	r3, [sp, #32]
 80068d6:	f108 0801 	add.w	r8, r8, #1
 80068da:	2301      	movs	r3, #1
 80068dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80068de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 81af 	beq.w	8006c44 <_dtoa_r+0xb34>
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068ec:	6918      	ldr	r0, [r3, #16]
 80068ee:	f000 fbbb 	bl	8007068 <__hi0bits>
 80068f2:	f1c0 0020 	rsb	r0, r0, #32
 80068f6:	9b08      	ldr	r3, [sp, #32]
 80068f8:	4418      	add	r0, r3
 80068fa:	f010 001f 	ands.w	r0, r0, #31
 80068fe:	d077      	beq.n	80069f0 <_dtoa_r+0x8e0>
 8006900:	f1c0 0320 	rsb	r3, r0, #32
 8006904:	2b04      	cmp	r3, #4
 8006906:	dd6b      	ble.n	80069e0 <_dtoa_r+0x8d0>
 8006908:	9b08      	ldr	r3, [sp, #32]
 800690a:	f1c0 001c 	rsb	r0, r0, #28
 800690e:	4403      	add	r3, r0
 8006910:	4480      	add	r8, r0
 8006912:	4406      	add	r6, r0
 8006914:	9308      	str	r3, [sp, #32]
 8006916:	f1b8 0f00 	cmp.w	r8, #0
 800691a:	dd05      	ble.n	8006928 <_dtoa_r+0x818>
 800691c:	4649      	mov	r1, r9
 800691e:	4642      	mov	r2, r8
 8006920:	4658      	mov	r0, fp
 8006922:	f000 fcff 	bl	8007324 <__lshift>
 8006926:	4681      	mov	r9, r0
 8006928:	9b08      	ldr	r3, [sp, #32]
 800692a:	2b00      	cmp	r3, #0
 800692c:	dd05      	ble.n	800693a <_dtoa_r+0x82a>
 800692e:	4621      	mov	r1, r4
 8006930:	461a      	mov	r2, r3
 8006932:	4658      	mov	r0, fp
 8006934:	f000 fcf6 	bl	8007324 <__lshift>
 8006938:	4604      	mov	r4, r0
 800693a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800693c:	2b00      	cmp	r3, #0
 800693e:	d059      	beq.n	80069f4 <_dtoa_r+0x8e4>
 8006940:	4621      	mov	r1, r4
 8006942:	4648      	mov	r0, r9
 8006944:	f000 fd5a 	bl	80073fc <__mcmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	da53      	bge.n	80069f4 <_dtoa_r+0x8e4>
 800694c:	1e7b      	subs	r3, r7, #1
 800694e:	9306      	str	r3, [sp, #24]
 8006950:	4649      	mov	r1, r9
 8006952:	2300      	movs	r3, #0
 8006954:	220a      	movs	r2, #10
 8006956:	4658      	mov	r0, fp
 8006958:	f000 faf6 	bl	8006f48 <__multadd>
 800695c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800695e:	4681      	mov	r9, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8171 	beq.w	8006c48 <_dtoa_r+0xb38>
 8006966:	2300      	movs	r3, #0
 8006968:	4629      	mov	r1, r5
 800696a:	220a      	movs	r2, #10
 800696c:	4658      	mov	r0, fp
 800696e:	f000 faeb 	bl	8006f48 <__multadd>
 8006972:	9b00      	ldr	r3, [sp, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	4605      	mov	r5, r0
 8006978:	dc67      	bgt.n	8006a4a <_dtoa_r+0x93a>
 800697a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697c:	2b02      	cmp	r3, #2
 800697e:	dc41      	bgt.n	8006a04 <_dtoa_r+0x8f4>
 8006980:	e063      	b.n	8006a4a <_dtoa_r+0x93a>
 8006982:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006984:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006988:	e746      	b.n	8006818 <_dtoa_r+0x708>
 800698a:	bf00      	nop
 800698c:	3fe00000 	.word	0x3fe00000
 8006990:	40240000 	.word	0x40240000
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	1e5c      	subs	r4, r3, #1
 8006998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800699a:	42a3      	cmp	r3, r4
 800699c:	db09      	blt.n	80069b2 <_dtoa_r+0x8a2>
 800699e:	1b1c      	subs	r4, r3, r4
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f6bf af39 	bge.w	800681a <_dtoa_r+0x70a>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	eba8 0603 	sub.w	r6, r8, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	e734      	b.n	800681c <_dtoa_r+0x70c>
 80069b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80069b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80069b8:	1ae3      	subs	r3, r4, r3
 80069ba:	441a      	add	r2, r3
 80069bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	4646      	mov	r6, r8
 80069c2:	2400      	movs	r4, #0
 80069c4:	e72a      	b.n	800681c <_dtoa_r+0x70c>
 80069c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069c8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069ca:	4646      	mov	r6, r8
 80069cc:	e72f      	b.n	800682e <_dtoa_r+0x71e>
 80069ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069d0:	e756      	b.n	8006880 <_dtoa_r+0x770>
 80069d2:	2300      	movs	r3, #0
 80069d4:	e782      	b.n	80068dc <_dtoa_r+0x7cc>
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	e780      	b.n	80068dc <_dtoa_r+0x7cc>
 80069da:	2300      	movs	r3, #0
 80069dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80069de:	e782      	b.n	80068e6 <_dtoa_r+0x7d6>
 80069e0:	d099      	beq.n	8006916 <_dtoa_r+0x806>
 80069e2:	9a08      	ldr	r2, [sp, #32]
 80069e4:	331c      	adds	r3, #28
 80069e6:	441a      	add	r2, r3
 80069e8:	4498      	add	r8, r3
 80069ea:	441e      	add	r6, r3
 80069ec:	9208      	str	r2, [sp, #32]
 80069ee:	e792      	b.n	8006916 <_dtoa_r+0x806>
 80069f0:	4603      	mov	r3, r0
 80069f2:	e7f6      	b.n	80069e2 <_dtoa_r+0x8d2>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	9706      	str	r7, [sp, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	dc20      	bgt.n	8006a3e <_dtoa_r+0x92e>
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	dd1e      	ble.n	8006a42 <_dtoa_r+0x932>
 8006a04:	9b00      	ldr	r3, [sp, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f47f adc2 	bne.w	8006590 <_dtoa_r+0x480>
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	2205      	movs	r2, #5
 8006a10:	4658      	mov	r0, fp
 8006a12:	f000 fa99 	bl	8006f48 <__multadd>
 8006a16:	4601      	mov	r1, r0
 8006a18:	4604      	mov	r4, r0
 8006a1a:	4648      	mov	r0, r9
 8006a1c:	f000 fcee 	bl	80073fc <__mcmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f77f adb5 	ble.w	8006590 <_dtoa_r+0x480>
 8006a26:	4656      	mov	r6, sl
 8006a28:	2331      	movs	r3, #49	@ 0x31
 8006a2a:	f806 3b01 	strb.w	r3, [r6], #1
 8006a2e:	9b06      	ldr	r3, [sp, #24]
 8006a30:	3301      	adds	r3, #1
 8006a32:	9306      	str	r3, [sp, #24]
 8006a34:	e5b0      	b.n	8006598 <_dtoa_r+0x488>
 8006a36:	9c03      	ldr	r4, [sp, #12]
 8006a38:	9706      	str	r7, [sp, #24]
 8006a3a:	4625      	mov	r5, r4
 8006a3c:	e7f3      	b.n	8006a26 <_dtoa_r+0x916>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8103 	beq.w	8006c50 <_dtoa_r+0xb40>
 8006a4a:	2e00      	cmp	r6, #0
 8006a4c:	dd05      	ble.n	8006a5a <_dtoa_r+0x94a>
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4632      	mov	r2, r6
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 fc66 	bl	8007324 <__lshift>
 8006a58:	4605      	mov	r5, r0
 8006a5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d05a      	beq.n	8006b16 <_dtoa_r+0xa06>
 8006a60:	6869      	ldr	r1, [r5, #4]
 8006a62:	4658      	mov	r0, fp
 8006a64:	f000 fa0e 	bl	8006e84 <_Balloc>
 8006a68:	4606      	mov	r6, r0
 8006a6a:	b928      	cbnz	r0, 8006a78 <_dtoa_r+0x968>
 8006a6c:	4b83      	ldr	r3, [pc, #524]	@ (8006c7c <_dtoa_r+0xb6c>)
 8006a6e:	4602      	mov	r2, r0
 8006a70:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a74:	f7ff bb63 	b.w	800613e <_dtoa_r+0x2e>
 8006a78:	692a      	ldr	r2, [r5, #16]
 8006a7a:	3202      	adds	r2, #2
 8006a7c:	0092      	lsls	r2, r2, #2
 8006a7e:	f105 010c 	add.w	r1, r5, #12
 8006a82:	300c      	adds	r0, #12
 8006a84:	f002 f934 	bl	8008cf0 <memcpy>
 8006a88:	2201      	movs	r2, #1
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	f000 fc49 	bl	8007324 <__lshift>
 8006a92:	f10a 0301 	add.w	r3, sl, #1
 8006a96:	9303      	str	r3, [sp, #12]
 8006a98:	9b00      	ldr	r3, [sp, #0]
 8006a9a:	4453      	add	r3, sl
 8006a9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	462f      	mov	r7, r5
 8006aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	9b03      	ldr	r3, [sp, #12]
 8006aac:	4621      	mov	r1, r4
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4648      	mov	r0, r9
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	f7ff faa4 	bl	8006000 <quorem>
 8006ab8:	4639      	mov	r1, r7
 8006aba:	9004      	str	r0, [sp, #16]
 8006abc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ac0:	4648      	mov	r0, r9
 8006ac2:	f000 fc9b 	bl	80073fc <__mcmp>
 8006ac6:	462a      	mov	r2, r5
 8006ac8:	9008      	str	r0, [sp, #32]
 8006aca:	4621      	mov	r1, r4
 8006acc:	4658      	mov	r0, fp
 8006ace:	f000 fcb1 	bl	8007434 <__mdiff>
 8006ad2:	68c2      	ldr	r2, [r0, #12]
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	bb02      	cbnz	r2, 8006b1a <_dtoa_r+0xa0a>
 8006ad8:	4601      	mov	r1, r0
 8006ada:	4648      	mov	r0, r9
 8006adc:	f000 fc8e 	bl	80073fc <__mcmp>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4658      	mov	r0, fp
 8006ae6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ae8:	f000 fa0c 	bl	8006f04 <_Bfree>
 8006aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006af0:	9e03      	ldr	r6, [sp, #12]
 8006af2:	ea42 0103 	orr.w	r1, r2, r3
 8006af6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af8:	4319      	orrs	r1, r3
 8006afa:	d110      	bne.n	8006b1e <_dtoa_r+0xa0e>
 8006afc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b00:	d029      	beq.n	8006b56 <_dtoa_r+0xa46>
 8006b02:	9b08      	ldr	r3, [sp, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	dd02      	ble.n	8006b0e <_dtoa_r+0x9fe>
 8006b08:	9b04      	ldr	r3, [sp, #16]
 8006b0a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	f883 8000 	strb.w	r8, [r3]
 8006b14:	e541      	b.n	800659a <_dtoa_r+0x48a>
 8006b16:	4628      	mov	r0, r5
 8006b18:	e7bb      	b.n	8006a92 <_dtoa_r+0x982>
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	e7e1      	b.n	8006ae2 <_dtoa_r+0x9d2>
 8006b1e:	9b08      	ldr	r3, [sp, #32]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	db04      	blt.n	8006b2e <_dtoa_r+0xa1e>
 8006b24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b26:	430b      	orrs	r3, r1
 8006b28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	d120      	bne.n	8006b70 <_dtoa_r+0xa60>
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	dded      	ble.n	8006b0e <_dtoa_r+0x9fe>
 8006b32:	4649      	mov	r1, r9
 8006b34:	2201      	movs	r2, #1
 8006b36:	4658      	mov	r0, fp
 8006b38:	f000 fbf4 	bl	8007324 <__lshift>
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4681      	mov	r9, r0
 8006b40:	f000 fc5c 	bl	80073fc <__mcmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	dc03      	bgt.n	8006b50 <_dtoa_r+0xa40>
 8006b48:	d1e1      	bne.n	8006b0e <_dtoa_r+0x9fe>
 8006b4a:	f018 0f01 	tst.w	r8, #1
 8006b4e:	d0de      	beq.n	8006b0e <_dtoa_r+0x9fe>
 8006b50:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b54:	d1d8      	bne.n	8006b08 <_dtoa_r+0x9f8>
 8006b56:	9a00      	ldr	r2, [sp, #0]
 8006b58:	2339      	movs	r3, #57	@ 0x39
 8006b5a:	7013      	strb	r3, [r2, #0]
 8006b5c:	4633      	mov	r3, r6
 8006b5e:	461e      	mov	r6, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b66:	2a39      	cmp	r2, #57	@ 0x39
 8006b68:	d051      	beq.n	8006c0e <_dtoa_r+0xafe>
 8006b6a:	3201      	adds	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e514      	b.n	800659a <_dtoa_r+0x48a>
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	dd07      	ble.n	8006b84 <_dtoa_r+0xa74>
 8006b74:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b78:	d0ed      	beq.n	8006b56 <_dtoa_r+0xa46>
 8006b7a:	9a00      	ldr	r2, [sp, #0]
 8006b7c:	f108 0301 	add.w	r3, r8, #1
 8006b80:	7013      	strb	r3, [r2, #0]
 8006b82:	e50a      	b.n	800659a <_dtoa_r+0x48a>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b88:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d028      	beq.n	8006be2 <_dtoa_r+0xad2>
 8006b90:	4649      	mov	r1, r9
 8006b92:	2300      	movs	r3, #0
 8006b94:	220a      	movs	r2, #10
 8006b96:	4658      	mov	r0, fp
 8006b98:	f000 f9d6 	bl	8006f48 <__multadd>
 8006b9c:	42af      	cmp	r7, r5
 8006b9e:	4681      	mov	r9, r0
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	f04f 020a 	mov.w	r2, #10
 8006ba8:	4639      	mov	r1, r7
 8006baa:	4658      	mov	r0, fp
 8006bac:	d107      	bne.n	8006bbe <_dtoa_r+0xaae>
 8006bae:	f000 f9cb 	bl	8006f48 <__multadd>
 8006bb2:	4607      	mov	r7, r0
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	e775      	b.n	8006aaa <_dtoa_r+0x99a>
 8006bbe:	f000 f9c3 	bl	8006f48 <__multadd>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	220a      	movs	r2, #10
 8006bca:	4658      	mov	r0, fp
 8006bcc:	f000 f9bc 	bl	8006f48 <__multadd>
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	e7f0      	b.n	8006bb6 <_dtoa_r+0xaa6>
 8006bd4:	9b00      	ldr	r3, [sp, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfcc      	ite	gt
 8006bda:	461e      	movgt	r6, r3
 8006bdc:	2601      	movle	r6, #1
 8006bde:	4456      	add	r6, sl
 8006be0:	2700      	movs	r7, #0
 8006be2:	4649      	mov	r1, r9
 8006be4:	2201      	movs	r2, #1
 8006be6:	4658      	mov	r0, fp
 8006be8:	f000 fb9c 	bl	8007324 <__lshift>
 8006bec:	4621      	mov	r1, r4
 8006bee:	4681      	mov	r9, r0
 8006bf0:	f000 fc04 	bl	80073fc <__mcmp>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	dcb1      	bgt.n	8006b5c <_dtoa_r+0xa4c>
 8006bf8:	d102      	bne.n	8006c00 <_dtoa_r+0xaf0>
 8006bfa:	f018 0f01 	tst.w	r8, #1
 8006bfe:	d1ad      	bne.n	8006b5c <_dtoa_r+0xa4c>
 8006c00:	4633      	mov	r3, r6
 8006c02:	461e      	mov	r6, r3
 8006c04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c08:	2a30      	cmp	r2, #48	@ 0x30
 8006c0a:	d0fa      	beq.n	8006c02 <_dtoa_r+0xaf2>
 8006c0c:	e4c5      	b.n	800659a <_dtoa_r+0x48a>
 8006c0e:	459a      	cmp	sl, r3
 8006c10:	d1a5      	bne.n	8006b5e <_dtoa_r+0xa4e>
 8006c12:	9b06      	ldr	r3, [sp, #24]
 8006c14:	3301      	adds	r3, #1
 8006c16:	9306      	str	r3, [sp, #24]
 8006c18:	2331      	movs	r3, #49	@ 0x31
 8006c1a:	f88a 3000 	strb.w	r3, [sl]
 8006c1e:	e4bc      	b.n	800659a <_dtoa_r+0x48a>
 8006c20:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c22:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c80 <_dtoa_r+0xb70>
 8006c26:	b11b      	cbz	r3, 8006c30 <_dtoa_r+0xb20>
 8006c28:	f10a 0308 	add.w	r3, sl, #8
 8006c2c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	4650      	mov	r0, sl
 8006c32:	b019      	add	sp, #100	@ 0x64
 8006c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	f77f ae38 	ble.w	80068b0 <_dtoa_r+0x7a0>
 8006c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c44:	2001      	movs	r0, #1
 8006c46:	e656      	b.n	80068f6 <_dtoa_r+0x7e6>
 8006c48:	9b00      	ldr	r3, [sp, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f77f aed7 	ble.w	80069fe <_dtoa_r+0x8ee>
 8006c50:	4656      	mov	r6, sl
 8006c52:	4621      	mov	r1, r4
 8006c54:	4648      	mov	r0, r9
 8006c56:	f7ff f9d3 	bl	8006000 <quorem>
 8006c5a:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c5e:	f806 8b01 	strb.w	r8, [r6], #1
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	eba6 020a 	sub.w	r2, r6, sl
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	ddb3      	ble.n	8006bd4 <_dtoa_r+0xac4>
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	2300      	movs	r3, #0
 8006c70:	220a      	movs	r2, #10
 8006c72:	4658      	mov	r0, fp
 8006c74:	f000 f968 	bl	8006f48 <__multadd>
 8006c78:	4681      	mov	r9, r0
 8006c7a:	e7ea      	b.n	8006c52 <_dtoa_r+0xb42>
 8006c7c:	080099ce 	.word	0x080099ce
 8006c80:	08009951 	.word	0x08009951

08006c84 <_free_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4605      	mov	r5, r0
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	d041      	beq.n	8006d10 <_free_r+0x8c>
 8006c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c90:	1f0c      	subs	r4, r1, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bfb8      	it	lt
 8006c96:	18e4      	addlt	r4, r4, r3
 8006c98:	f000 f8e8 	bl	8006e6c <__malloc_lock>
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d14 <_free_r+0x90>)
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	b933      	cbnz	r3, 8006cb0 <_free_r+0x2c>
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	6014      	str	r4, [r2, #0]
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cac:	f000 b8e4 	b.w	8006e78 <__malloc_unlock>
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d908      	bls.n	8006cc6 <_free_r+0x42>
 8006cb4:	6820      	ldr	r0, [r4, #0]
 8006cb6:	1821      	adds	r1, r4, r0
 8006cb8:	428b      	cmp	r3, r1
 8006cba:	bf01      	itttt	eq
 8006cbc:	6819      	ldreq	r1, [r3, #0]
 8006cbe:	685b      	ldreq	r3, [r3, #4]
 8006cc0:	1809      	addeq	r1, r1, r0
 8006cc2:	6021      	streq	r1, [r4, #0]
 8006cc4:	e7ed      	b.n	8006ca2 <_free_r+0x1e>
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b10b      	cbz	r3, 8006cd0 <_free_r+0x4c>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d9fa      	bls.n	8006cc6 <_free_r+0x42>
 8006cd0:	6811      	ldr	r1, [r2, #0]
 8006cd2:	1850      	adds	r0, r2, r1
 8006cd4:	42a0      	cmp	r0, r4
 8006cd6:	d10b      	bne.n	8006cf0 <_free_r+0x6c>
 8006cd8:	6820      	ldr	r0, [r4, #0]
 8006cda:	4401      	add	r1, r0
 8006cdc:	1850      	adds	r0, r2, r1
 8006cde:	4283      	cmp	r3, r0
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	d1e0      	bne.n	8006ca6 <_free_r+0x22>
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	4408      	add	r0, r1
 8006cec:	6010      	str	r0, [r2, #0]
 8006cee:	e7da      	b.n	8006ca6 <_free_r+0x22>
 8006cf0:	d902      	bls.n	8006cf8 <_free_r+0x74>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	602b      	str	r3, [r5, #0]
 8006cf6:	e7d6      	b.n	8006ca6 <_free_r+0x22>
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	1821      	adds	r1, r4, r0
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf04      	itt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	bf04      	itt	eq
 8006d08:	1809      	addeq	r1, r1, r0
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	6054      	str	r4, [r2, #4]
 8006d0e:	e7ca      	b.n	8006ca6 <_free_r+0x22>
 8006d10:	bd38      	pop	{r3, r4, r5, pc}
 8006d12:	bf00      	nop
 8006d14:	20000500 	.word	0x20000500

08006d18 <malloc>:
 8006d18:	4b02      	ldr	r3, [pc, #8]	@ (8006d24 <malloc+0xc>)
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	f000 b825 	b.w	8006d6c <_malloc_r>
 8006d22:	bf00      	nop
 8006d24:	20000018 	.word	0x20000018

08006d28 <sbrk_aligned>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8006d68 <sbrk_aligned+0x40>)
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	6831      	ldr	r1, [r6, #0]
 8006d30:	4605      	mov	r5, r0
 8006d32:	b911      	cbnz	r1, 8006d3a <sbrk_aligned+0x12>
 8006d34:	f001 ffcc 	bl	8008cd0 <_sbrk_r>
 8006d38:	6030      	str	r0, [r6, #0]
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f001 ffc7 	bl	8008cd0 <_sbrk_r>
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	d103      	bne.n	8006d4e <sbrk_aligned+0x26>
 8006d46:	f04f 34ff 	mov.w	r4, #4294967295
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
 8006d4e:	1cc4      	adds	r4, r0, #3
 8006d50:	f024 0403 	bic.w	r4, r4, #3
 8006d54:	42a0      	cmp	r0, r4
 8006d56:	d0f8      	beq.n	8006d4a <sbrk_aligned+0x22>
 8006d58:	1a21      	subs	r1, r4, r0
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f001 ffb8 	bl	8008cd0 <_sbrk_r>
 8006d60:	3001      	adds	r0, #1
 8006d62:	d1f2      	bne.n	8006d4a <sbrk_aligned+0x22>
 8006d64:	e7ef      	b.n	8006d46 <sbrk_aligned+0x1e>
 8006d66:	bf00      	nop
 8006d68:	200004fc 	.word	0x200004fc

08006d6c <_malloc_r>:
 8006d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	1ccd      	adds	r5, r1, #3
 8006d72:	f025 0503 	bic.w	r5, r5, #3
 8006d76:	3508      	adds	r5, #8
 8006d78:	2d0c      	cmp	r5, #12
 8006d7a:	bf38      	it	cc
 8006d7c:	250c      	movcc	r5, #12
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	4606      	mov	r6, r0
 8006d82:	db01      	blt.n	8006d88 <_malloc_r+0x1c>
 8006d84:	42a9      	cmp	r1, r5
 8006d86:	d904      	bls.n	8006d92 <_malloc_r+0x26>
 8006d88:	230c      	movs	r3, #12
 8006d8a:	6033      	str	r3, [r6, #0]
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e68 <_malloc_r+0xfc>
 8006d96:	f000 f869 	bl	8006e6c <__malloc_lock>
 8006d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d9e:	461c      	mov	r4, r3
 8006da0:	bb44      	cbnz	r4, 8006df4 <_malloc_r+0x88>
 8006da2:	4629      	mov	r1, r5
 8006da4:	4630      	mov	r0, r6
 8006da6:	f7ff ffbf 	bl	8006d28 <sbrk_aligned>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	4604      	mov	r4, r0
 8006dae:	d158      	bne.n	8006e62 <_malloc_r+0xf6>
 8006db0:	f8d8 4000 	ldr.w	r4, [r8]
 8006db4:	4627      	mov	r7, r4
 8006db6:	2f00      	cmp	r7, #0
 8006db8:	d143      	bne.n	8006e42 <_malloc_r+0xd6>
 8006dba:	2c00      	cmp	r4, #0
 8006dbc:	d04b      	beq.n	8006e56 <_malloc_r+0xea>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	eb04 0903 	add.w	r9, r4, r3
 8006dc8:	f001 ff82 	bl	8008cd0 <_sbrk_r>
 8006dcc:	4581      	cmp	r9, r0
 8006dce:	d142      	bne.n	8006e56 <_malloc_r+0xea>
 8006dd0:	6821      	ldr	r1, [r4, #0]
 8006dd2:	1a6d      	subs	r5, r5, r1
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff ffa6 	bl	8006d28 <sbrk_aligned>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d03a      	beq.n	8006e56 <_malloc_r+0xea>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	442b      	add	r3, r5
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	f8d8 3000 	ldr.w	r3, [r8]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	bb62      	cbnz	r2, 8006e48 <_malloc_r+0xdc>
 8006dee:	f8c8 7000 	str.w	r7, [r8]
 8006df2:	e00f      	b.n	8006e14 <_malloc_r+0xa8>
 8006df4:	6822      	ldr	r2, [r4, #0]
 8006df6:	1b52      	subs	r2, r2, r5
 8006df8:	d420      	bmi.n	8006e3c <_malloc_r+0xd0>
 8006dfa:	2a0b      	cmp	r2, #11
 8006dfc:	d917      	bls.n	8006e2e <_malloc_r+0xc2>
 8006dfe:	1961      	adds	r1, r4, r5
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	6025      	str	r5, [r4, #0]
 8006e04:	bf18      	it	ne
 8006e06:	6059      	strne	r1, [r3, #4]
 8006e08:	6863      	ldr	r3, [r4, #4]
 8006e0a:	bf08      	it	eq
 8006e0c:	f8c8 1000 	streq.w	r1, [r8]
 8006e10:	5162      	str	r2, [r4, r5]
 8006e12:	604b      	str	r3, [r1, #4]
 8006e14:	4630      	mov	r0, r6
 8006e16:	f000 f82f 	bl	8006e78 <__malloc_unlock>
 8006e1a:	f104 000b 	add.w	r0, r4, #11
 8006e1e:	1d23      	adds	r3, r4, #4
 8006e20:	f020 0007 	bic.w	r0, r0, #7
 8006e24:	1ac2      	subs	r2, r0, r3
 8006e26:	bf1c      	itt	ne
 8006e28:	1a1b      	subne	r3, r3, r0
 8006e2a:	50a3      	strne	r3, [r4, r2]
 8006e2c:	e7af      	b.n	8006d8e <_malloc_r+0x22>
 8006e2e:	6862      	ldr	r2, [r4, #4]
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	bf0c      	ite	eq
 8006e34:	f8c8 2000 	streq.w	r2, [r8]
 8006e38:	605a      	strne	r2, [r3, #4]
 8006e3a:	e7eb      	b.n	8006e14 <_malloc_r+0xa8>
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	6864      	ldr	r4, [r4, #4]
 8006e40:	e7ae      	b.n	8006da0 <_malloc_r+0x34>
 8006e42:	463c      	mov	r4, r7
 8006e44:	687f      	ldr	r7, [r7, #4]
 8006e46:	e7b6      	b.n	8006db6 <_malloc_r+0x4a>
 8006e48:	461a      	mov	r2, r3
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d1fb      	bne.n	8006e48 <_malloc_r+0xdc>
 8006e50:	2300      	movs	r3, #0
 8006e52:	6053      	str	r3, [r2, #4]
 8006e54:	e7de      	b.n	8006e14 <_malloc_r+0xa8>
 8006e56:	230c      	movs	r3, #12
 8006e58:	6033      	str	r3, [r6, #0]
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f000 f80c 	bl	8006e78 <__malloc_unlock>
 8006e60:	e794      	b.n	8006d8c <_malloc_r+0x20>
 8006e62:	6005      	str	r5, [r0, #0]
 8006e64:	e7d6      	b.n	8006e14 <_malloc_r+0xa8>
 8006e66:	bf00      	nop
 8006e68:	20000500 	.word	0x20000500

08006e6c <__malloc_lock>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	@ (8006e74 <__malloc_lock+0x8>)
 8006e6e:	f7ff b8be 	b.w	8005fee <__retarget_lock_acquire_recursive>
 8006e72:	bf00      	nop
 8006e74:	200004f8 	.word	0x200004f8

08006e78 <__malloc_unlock>:
 8006e78:	4801      	ldr	r0, [pc, #4]	@ (8006e80 <__malloc_unlock+0x8>)
 8006e7a:	f7ff b8b9 	b.w	8005ff0 <__retarget_lock_release_recursive>
 8006e7e:	bf00      	nop
 8006e80:	200004f8 	.word	0x200004f8

08006e84 <_Balloc>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	69c6      	ldr	r6, [r0, #28]
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	b976      	cbnz	r6, 8006eac <_Balloc+0x28>
 8006e8e:	2010      	movs	r0, #16
 8006e90:	f7ff ff42 	bl	8006d18 <malloc>
 8006e94:	4602      	mov	r2, r0
 8006e96:	61e0      	str	r0, [r4, #28]
 8006e98:	b920      	cbnz	r0, 8006ea4 <_Balloc+0x20>
 8006e9a:	4b18      	ldr	r3, [pc, #96]	@ (8006efc <_Balloc+0x78>)
 8006e9c:	4818      	ldr	r0, [pc, #96]	@ (8006f00 <_Balloc+0x7c>)
 8006e9e:	216b      	movs	r1, #107	@ 0x6b
 8006ea0:	f001 ff3e 	bl	8008d20 <__assert_func>
 8006ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ea8:	6006      	str	r6, [r0, #0]
 8006eaa:	60c6      	str	r6, [r0, #12]
 8006eac:	69e6      	ldr	r6, [r4, #28]
 8006eae:	68f3      	ldr	r3, [r6, #12]
 8006eb0:	b183      	cbz	r3, 8006ed4 <_Balloc+0x50>
 8006eb2:	69e3      	ldr	r3, [r4, #28]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006eba:	b9b8      	cbnz	r0, 8006eec <_Balloc+0x68>
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	fa01 f605 	lsl.w	r6, r1, r5
 8006ec2:	1d72      	adds	r2, r6, #5
 8006ec4:	0092      	lsls	r2, r2, #2
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f001 ff48 	bl	8008d5c <_calloc_r>
 8006ecc:	b160      	cbz	r0, 8006ee8 <_Balloc+0x64>
 8006ece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ed2:	e00e      	b.n	8006ef2 <_Balloc+0x6e>
 8006ed4:	2221      	movs	r2, #33	@ 0x21
 8006ed6:	2104      	movs	r1, #4
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f001 ff3f 	bl	8008d5c <_calloc_r>
 8006ede:	69e3      	ldr	r3, [r4, #28]
 8006ee0:	60f0      	str	r0, [r6, #12]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e4      	bne.n	8006eb2 <_Balloc+0x2e>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	6802      	ldr	r2, [r0, #0]
 8006eee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ef8:	e7f7      	b.n	8006eea <_Balloc+0x66>
 8006efa:	bf00      	nop
 8006efc:	0800995e 	.word	0x0800995e
 8006f00:	080099df 	.word	0x080099df

08006f04 <_Bfree>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	69c6      	ldr	r6, [r0, #28]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	b976      	cbnz	r6, 8006f2c <_Bfree+0x28>
 8006f0e:	2010      	movs	r0, #16
 8006f10:	f7ff ff02 	bl	8006d18 <malloc>
 8006f14:	4602      	mov	r2, r0
 8006f16:	61e8      	str	r0, [r5, #28]
 8006f18:	b920      	cbnz	r0, 8006f24 <_Bfree+0x20>
 8006f1a:	4b09      	ldr	r3, [pc, #36]	@ (8006f40 <_Bfree+0x3c>)
 8006f1c:	4809      	ldr	r0, [pc, #36]	@ (8006f44 <_Bfree+0x40>)
 8006f1e:	218f      	movs	r1, #143	@ 0x8f
 8006f20:	f001 fefe 	bl	8008d20 <__assert_func>
 8006f24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f28:	6006      	str	r6, [r0, #0]
 8006f2a:	60c6      	str	r6, [r0, #12]
 8006f2c:	b13c      	cbz	r4, 8006f3e <_Bfree+0x3a>
 8006f2e:	69eb      	ldr	r3, [r5, #28]
 8006f30:	6862      	ldr	r2, [r4, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f38:	6021      	str	r1, [r4, #0]
 8006f3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	0800995e 	.word	0x0800995e
 8006f44:	080099df 	.word	0x080099df

08006f48 <__multadd>:
 8006f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4c:	690d      	ldr	r5, [r1, #16]
 8006f4e:	4607      	mov	r7, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	461e      	mov	r6, r3
 8006f54:	f101 0c14 	add.w	ip, r1, #20
 8006f58:	2000      	movs	r0, #0
 8006f5a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f5e:	b299      	uxth	r1, r3
 8006f60:	fb02 6101 	mla	r1, r2, r1, r6
 8006f64:	0c1e      	lsrs	r6, r3, #16
 8006f66:	0c0b      	lsrs	r3, r1, #16
 8006f68:	fb02 3306 	mla	r3, r2, r6, r3
 8006f6c:	b289      	uxth	r1, r1
 8006f6e:	3001      	adds	r0, #1
 8006f70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f74:	4285      	cmp	r5, r0
 8006f76:	f84c 1b04 	str.w	r1, [ip], #4
 8006f7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f7e:	dcec      	bgt.n	8006f5a <__multadd+0x12>
 8006f80:	b30e      	cbz	r6, 8006fc6 <__multadd+0x7e>
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	dc19      	bgt.n	8006fbc <__multadd+0x74>
 8006f88:	6861      	ldr	r1, [r4, #4]
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	f7ff ff79 	bl	8006e84 <_Balloc>
 8006f92:	4680      	mov	r8, r0
 8006f94:	b928      	cbnz	r0, 8006fa2 <__multadd+0x5a>
 8006f96:	4602      	mov	r2, r0
 8006f98:	4b0c      	ldr	r3, [pc, #48]	@ (8006fcc <__multadd+0x84>)
 8006f9a:	480d      	ldr	r0, [pc, #52]	@ (8006fd0 <__multadd+0x88>)
 8006f9c:	21ba      	movs	r1, #186	@ 0xba
 8006f9e:	f001 febf 	bl	8008d20 <__assert_func>
 8006fa2:	6922      	ldr	r2, [r4, #16]
 8006fa4:	3202      	adds	r2, #2
 8006fa6:	f104 010c 	add.w	r1, r4, #12
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	300c      	adds	r0, #12
 8006fae:	f001 fe9f 	bl	8008cf0 <memcpy>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff ffa5 	bl	8006f04 <_Bfree>
 8006fba:	4644      	mov	r4, r8
 8006fbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	615e      	str	r6, [r3, #20]
 8006fc4:	6125      	str	r5, [r4, #16]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fcc:	080099ce 	.word	0x080099ce
 8006fd0:	080099df 	.word	0x080099df

08006fd4 <__s2b>:
 8006fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd8:	460c      	mov	r4, r1
 8006fda:	4615      	mov	r5, r2
 8006fdc:	461f      	mov	r7, r3
 8006fde:	2209      	movs	r2, #9
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe8:	2100      	movs	r1, #0
 8006fea:	2201      	movs	r2, #1
 8006fec:	429a      	cmp	r2, r3
 8006fee:	db09      	blt.n	8007004 <__s2b+0x30>
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7ff ff47 	bl	8006e84 <_Balloc>
 8006ff6:	b940      	cbnz	r0, 800700a <__s2b+0x36>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	4b19      	ldr	r3, [pc, #100]	@ (8007060 <__s2b+0x8c>)
 8006ffc:	4819      	ldr	r0, [pc, #100]	@ (8007064 <__s2b+0x90>)
 8006ffe:	21d3      	movs	r1, #211	@ 0xd3
 8007000:	f001 fe8e 	bl	8008d20 <__assert_func>
 8007004:	0052      	lsls	r2, r2, #1
 8007006:	3101      	adds	r1, #1
 8007008:	e7f0      	b.n	8006fec <__s2b+0x18>
 800700a:	9b08      	ldr	r3, [sp, #32]
 800700c:	6143      	str	r3, [r0, #20]
 800700e:	2d09      	cmp	r5, #9
 8007010:	f04f 0301 	mov.w	r3, #1
 8007014:	6103      	str	r3, [r0, #16]
 8007016:	dd16      	ble.n	8007046 <__s2b+0x72>
 8007018:	f104 0909 	add.w	r9, r4, #9
 800701c:	46c8      	mov	r8, r9
 800701e:	442c      	add	r4, r5
 8007020:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007024:	4601      	mov	r1, r0
 8007026:	3b30      	subs	r3, #48	@ 0x30
 8007028:	220a      	movs	r2, #10
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff ff8c 	bl	8006f48 <__multadd>
 8007030:	45a0      	cmp	r8, r4
 8007032:	d1f5      	bne.n	8007020 <__s2b+0x4c>
 8007034:	f1a5 0408 	sub.w	r4, r5, #8
 8007038:	444c      	add	r4, r9
 800703a:	1b2d      	subs	r5, r5, r4
 800703c:	1963      	adds	r3, r4, r5
 800703e:	42bb      	cmp	r3, r7
 8007040:	db04      	blt.n	800704c <__s2b+0x78>
 8007042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007046:	340a      	adds	r4, #10
 8007048:	2509      	movs	r5, #9
 800704a:	e7f6      	b.n	800703a <__s2b+0x66>
 800704c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007050:	4601      	mov	r1, r0
 8007052:	3b30      	subs	r3, #48	@ 0x30
 8007054:	220a      	movs	r2, #10
 8007056:	4630      	mov	r0, r6
 8007058:	f7ff ff76 	bl	8006f48 <__multadd>
 800705c:	e7ee      	b.n	800703c <__s2b+0x68>
 800705e:	bf00      	nop
 8007060:	080099ce 	.word	0x080099ce
 8007064:	080099df 	.word	0x080099df

08007068 <__hi0bits>:
 8007068:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800706c:	4603      	mov	r3, r0
 800706e:	bf36      	itet	cc
 8007070:	0403      	lslcc	r3, r0, #16
 8007072:	2000      	movcs	r0, #0
 8007074:	2010      	movcc	r0, #16
 8007076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800707a:	bf3c      	itt	cc
 800707c:	021b      	lslcc	r3, r3, #8
 800707e:	3008      	addcc	r0, #8
 8007080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007084:	bf3c      	itt	cc
 8007086:	011b      	lslcc	r3, r3, #4
 8007088:	3004      	addcc	r0, #4
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800708e:	bf3c      	itt	cc
 8007090:	009b      	lslcc	r3, r3, #2
 8007092:	3002      	addcc	r0, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	db05      	blt.n	80070a4 <__hi0bits+0x3c>
 8007098:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800709c:	f100 0001 	add.w	r0, r0, #1
 80070a0:	bf08      	it	eq
 80070a2:	2020      	moveq	r0, #32
 80070a4:	4770      	bx	lr

080070a6 <__lo0bits>:
 80070a6:	6803      	ldr	r3, [r0, #0]
 80070a8:	4602      	mov	r2, r0
 80070aa:	f013 0007 	ands.w	r0, r3, #7
 80070ae:	d00b      	beq.n	80070c8 <__lo0bits+0x22>
 80070b0:	07d9      	lsls	r1, r3, #31
 80070b2:	d421      	bmi.n	80070f8 <__lo0bits+0x52>
 80070b4:	0798      	lsls	r0, r3, #30
 80070b6:	bf49      	itett	mi
 80070b8:	085b      	lsrmi	r3, r3, #1
 80070ba:	089b      	lsrpl	r3, r3, #2
 80070bc:	2001      	movmi	r0, #1
 80070be:	6013      	strmi	r3, [r2, #0]
 80070c0:	bf5c      	itt	pl
 80070c2:	6013      	strpl	r3, [r2, #0]
 80070c4:	2002      	movpl	r0, #2
 80070c6:	4770      	bx	lr
 80070c8:	b299      	uxth	r1, r3
 80070ca:	b909      	cbnz	r1, 80070d0 <__lo0bits+0x2a>
 80070cc:	0c1b      	lsrs	r3, r3, #16
 80070ce:	2010      	movs	r0, #16
 80070d0:	b2d9      	uxtb	r1, r3
 80070d2:	b909      	cbnz	r1, 80070d8 <__lo0bits+0x32>
 80070d4:	3008      	adds	r0, #8
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	0719      	lsls	r1, r3, #28
 80070da:	bf04      	itt	eq
 80070dc:	091b      	lsreq	r3, r3, #4
 80070de:	3004      	addeq	r0, #4
 80070e0:	0799      	lsls	r1, r3, #30
 80070e2:	bf04      	itt	eq
 80070e4:	089b      	lsreq	r3, r3, #2
 80070e6:	3002      	addeq	r0, #2
 80070e8:	07d9      	lsls	r1, r3, #31
 80070ea:	d403      	bmi.n	80070f4 <__lo0bits+0x4e>
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f100 0001 	add.w	r0, r0, #1
 80070f2:	d003      	beq.n	80070fc <__lo0bits+0x56>
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	4770      	bx	lr
 80070f8:	2000      	movs	r0, #0
 80070fa:	4770      	bx	lr
 80070fc:	2020      	movs	r0, #32
 80070fe:	4770      	bx	lr

08007100 <__i2b>:
 8007100:	b510      	push	{r4, lr}
 8007102:	460c      	mov	r4, r1
 8007104:	2101      	movs	r1, #1
 8007106:	f7ff febd 	bl	8006e84 <_Balloc>
 800710a:	4602      	mov	r2, r0
 800710c:	b928      	cbnz	r0, 800711a <__i2b+0x1a>
 800710e:	4b05      	ldr	r3, [pc, #20]	@ (8007124 <__i2b+0x24>)
 8007110:	4805      	ldr	r0, [pc, #20]	@ (8007128 <__i2b+0x28>)
 8007112:	f240 1145 	movw	r1, #325	@ 0x145
 8007116:	f001 fe03 	bl	8008d20 <__assert_func>
 800711a:	2301      	movs	r3, #1
 800711c:	6144      	str	r4, [r0, #20]
 800711e:	6103      	str	r3, [r0, #16]
 8007120:	bd10      	pop	{r4, pc}
 8007122:	bf00      	nop
 8007124:	080099ce 	.word	0x080099ce
 8007128:	080099df 	.word	0x080099df

0800712c <__multiply>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	4617      	mov	r7, r2
 8007132:	690a      	ldr	r2, [r1, #16]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	bfa8      	it	ge
 800713a:	463b      	movge	r3, r7
 800713c:	4689      	mov	r9, r1
 800713e:	bfa4      	itt	ge
 8007140:	460f      	movge	r7, r1
 8007142:	4699      	movge	r9, r3
 8007144:	693d      	ldr	r5, [r7, #16]
 8007146:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	eb05 060a 	add.w	r6, r5, sl
 8007152:	42b3      	cmp	r3, r6
 8007154:	b085      	sub	sp, #20
 8007156:	bfb8      	it	lt
 8007158:	3101      	addlt	r1, #1
 800715a:	f7ff fe93 	bl	8006e84 <_Balloc>
 800715e:	b930      	cbnz	r0, 800716e <__multiply+0x42>
 8007160:	4602      	mov	r2, r0
 8007162:	4b41      	ldr	r3, [pc, #260]	@ (8007268 <__multiply+0x13c>)
 8007164:	4841      	ldr	r0, [pc, #260]	@ (800726c <__multiply+0x140>)
 8007166:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800716a:	f001 fdd9 	bl	8008d20 <__assert_func>
 800716e:	f100 0414 	add.w	r4, r0, #20
 8007172:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007176:	4623      	mov	r3, r4
 8007178:	2200      	movs	r2, #0
 800717a:	4573      	cmp	r3, lr
 800717c:	d320      	bcc.n	80071c0 <__multiply+0x94>
 800717e:	f107 0814 	add.w	r8, r7, #20
 8007182:	f109 0114 	add.w	r1, r9, #20
 8007186:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800718a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800718e:	9302      	str	r3, [sp, #8]
 8007190:	1beb      	subs	r3, r5, r7
 8007192:	3b15      	subs	r3, #21
 8007194:	f023 0303 	bic.w	r3, r3, #3
 8007198:	3304      	adds	r3, #4
 800719a:	3715      	adds	r7, #21
 800719c:	42bd      	cmp	r5, r7
 800719e:	bf38      	it	cc
 80071a0:	2304      	movcc	r3, #4
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	9b02      	ldr	r3, [sp, #8]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	428b      	cmp	r3, r1
 80071aa:	d80c      	bhi.n	80071c6 <__multiply+0x9a>
 80071ac:	2e00      	cmp	r6, #0
 80071ae:	dd03      	ble.n	80071b8 <__multiply+0x8c>
 80071b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d055      	beq.n	8007264 <__multiply+0x138>
 80071b8:	6106      	str	r6, [r0, #16]
 80071ba:	b005      	add	sp, #20
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	f843 2b04 	str.w	r2, [r3], #4
 80071c4:	e7d9      	b.n	800717a <__multiply+0x4e>
 80071c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80071ca:	f1ba 0f00 	cmp.w	sl, #0
 80071ce:	d01f      	beq.n	8007210 <__multiply+0xe4>
 80071d0:	46c4      	mov	ip, r8
 80071d2:	46a1      	mov	r9, r4
 80071d4:	2700      	movs	r7, #0
 80071d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071da:	f8d9 3000 	ldr.w	r3, [r9]
 80071de:	fa1f fb82 	uxth.w	fp, r2
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80071e8:	443b      	add	r3, r7
 80071ea:	f8d9 7000 	ldr.w	r7, [r9]
 80071ee:	0c12      	lsrs	r2, r2, #16
 80071f0:	0c3f      	lsrs	r7, r7, #16
 80071f2:	fb0a 7202 	mla	r2, sl, r2, r7
 80071f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007200:	4565      	cmp	r5, ip
 8007202:	f849 3b04 	str.w	r3, [r9], #4
 8007206:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800720a:	d8e4      	bhi.n	80071d6 <__multiply+0xaa>
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	50e7      	str	r7, [r4, r3]
 8007210:	9b03      	ldr	r3, [sp, #12]
 8007212:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007216:	3104      	adds	r1, #4
 8007218:	f1b9 0f00 	cmp.w	r9, #0
 800721c:	d020      	beq.n	8007260 <__multiply+0x134>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	4647      	mov	r7, r8
 8007222:	46a4      	mov	ip, r4
 8007224:	f04f 0a00 	mov.w	sl, #0
 8007228:	f8b7 b000 	ldrh.w	fp, [r7]
 800722c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007230:	fb09 220b 	mla	r2, r9, fp, r2
 8007234:	4452      	add	r2, sl
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800723c:	f84c 3b04 	str.w	r3, [ip], #4
 8007240:	f857 3b04 	ldr.w	r3, [r7], #4
 8007244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007248:	f8bc 3000 	ldrh.w	r3, [ip]
 800724c:	fb09 330a 	mla	r3, r9, sl, r3
 8007250:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007254:	42bd      	cmp	r5, r7
 8007256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800725a:	d8e5      	bhi.n	8007228 <__multiply+0xfc>
 800725c:	9a01      	ldr	r2, [sp, #4]
 800725e:	50a3      	str	r3, [r4, r2]
 8007260:	3404      	adds	r4, #4
 8007262:	e79f      	b.n	80071a4 <__multiply+0x78>
 8007264:	3e01      	subs	r6, #1
 8007266:	e7a1      	b.n	80071ac <__multiply+0x80>
 8007268:	080099ce 	.word	0x080099ce
 800726c:	080099df 	.word	0x080099df

08007270 <__pow5mult>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4615      	mov	r5, r2
 8007276:	f012 0203 	ands.w	r2, r2, #3
 800727a:	4607      	mov	r7, r0
 800727c:	460e      	mov	r6, r1
 800727e:	d007      	beq.n	8007290 <__pow5mult+0x20>
 8007280:	4c25      	ldr	r4, [pc, #148]	@ (8007318 <__pow5mult+0xa8>)
 8007282:	3a01      	subs	r2, #1
 8007284:	2300      	movs	r3, #0
 8007286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800728a:	f7ff fe5d 	bl	8006f48 <__multadd>
 800728e:	4606      	mov	r6, r0
 8007290:	10ad      	asrs	r5, r5, #2
 8007292:	d03d      	beq.n	8007310 <__pow5mult+0xa0>
 8007294:	69fc      	ldr	r4, [r7, #28]
 8007296:	b97c      	cbnz	r4, 80072b8 <__pow5mult+0x48>
 8007298:	2010      	movs	r0, #16
 800729a:	f7ff fd3d 	bl	8006d18 <malloc>
 800729e:	4602      	mov	r2, r0
 80072a0:	61f8      	str	r0, [r7, #28]
 80072a2:	b928      	cbnz	r0, 80072b0 <__pow5mult+0x40>
 80072a4:	4b1d      	ldr	r3, [pc, #116]	@ (800731c <__pow5mult+0xac>)
 80072a6:	481e      	ldr	r0, [pc, #120]	@ (8007320 <__pow5mult+0xb0>)
 80072a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072ac:	f001 fd38 	bl	8008d20 <__assert_func>
 80072b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b4:	6004      	str	r4, [r0, #0]
 80072b6:	60c4      	str	r4, [r0, #12]
 80072b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c0:	b94c      	cbnz	r4, 80072d6 <__pow5mult+0x66>
 80072c2:	f240 2171 	movw	r1, #625	@ 0x271
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7ff ff1a 	bl	8007100 <__i2b>
 80072cc:	2300      	movs	r3, #0
 80072ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80072d2:	4604      	mov	r4, r0
 80072d4:	6003      	str	r3, [r0, #0]
 80072d6:	f04f 0900 	mov.w	r9, #0
 80072da:	07eb      	lsls	r3, r5, #31
 80072dc:	d50a      	bpl.n	80072f4 <__pow5mult+0x84>
 80072de:	4631      	mov	r1, r6
 80072e0:	4622      	mov	r2, r4
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ff22 	bl	800712c <__multiply>
 80072e8:	4631      	mov	r1, r6
 80072ea:	4680      	mov	r8, r0
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff fe09 	bl	8006f04 <_Bfree>
 80072f2:	4646      	mov	r6, r8
 80072f4:	106d      	asrs	r5, r5, #1
 80072f6:	d00b      	beq.n	8007310 <__pow5mult+0xa0>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	b938      	cbnz	r0, 800730c <__pow5mult+0x9c>
 80072fc:	4622      	mov	r2, r4
 80072fe:	4621      	mov	r1, r4
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff ff13 	bl	800712c <__multiply>
 8007306:	6020      	str	r0, [r4, #0]
 8007308:	f8c0 9000 	str.w	r9, [r0]
 800730c:	4604      	mov	r4, r0
 800730e:	e7e4      	b.n	80072da <__pow5mult+0x6a>
 8007310:	4630      	mov	r0, r6
 8007312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007316:	bf00      	nop
 8007318:	08009af4 	.word	0x08009af4
 800731c:	0800995e 	.word	0x0800995e
 8007320:	080099df 	.word	0x080099df

08007324 <__lshift>:
 8007324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	6849      	ldr	r1, [r1, #4]
 800732c:	6923      	ldr	r3, [r4, #16]
 800732e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	4607      	mov	r7, r0
 8007336:	4691      	mov	r9, r2
 8007338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800733c:	f108 0601 	add.w	r6, r8, #1
 8007340:	42b3      	cmp	r3, r6
 8007342:	db0b      	blt.n	800735c <__lshift+0x38>
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff fd9d 	bl	8006e84 <_Balloc>
 800734a:	4605      	mov	r5, r0
 800734c:	b948      	cbnz	r0, 8007362 <__lshift+0x3e>
 800734e:	4602      	mov	r2, r0
 8007350:	4b28      	ldr	r3, [pc, #160]	@ (80073f4 <__lshift+0xd0>)
 8007352:	4829      	ldr	r0, [pc, #164]	@ (80073f8 <__lshift+0xd4>)
 8007354:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007358:	f001 fce2 	bl	8008d20 <__assert_func>
 800735c:	3101      	adds	r1, #1
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	e7ee      	b.n	8007340 <__lshift+0x1c>
 8007362:	2300      	movs	r3, #0
 8007364:	f100 0114 	add.w	r1, r0, #20
 8007368:	f100 0210 	add.w	r2, r0, #16
 800736c:	4618      	mov	r0, r3
 800736e:	4553      	cmp	r3, sl
 8007370:	db33      	blt.n	80073da <__lshift+0xb6>
 8007372:	6920      	ldr	r0, [r4, #16]
 8007374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007378:	f104 0314 	add.w	r3, r4, #20
 800737c:	f019 091f 	ands.w	r9, r9, #31
 8007380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007388:	d02b      	beq.n	80073e2 <__lshift+0xbe>
 800738a:	f1c9 0e20 	rsb	lr, r9, #32
 800738e:	468a      	mov	sl, r1
 8007390:	2200      	movs	r2, #0
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	fa00 f009 	lsl.w	r0, r0, r9
 8007398:	4310      	orrs	r0, r2
 800739a:	f84a 0b04 	str.w	r0, [sl], #4
 800739e:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a2:	459c      	cmp	ip, r3
 80073a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073a8:	d8f3      	bhi.n	8007392 <__lshift+0x6e>
 80073aa:	ebac 0304 	sub.w	r3, ip, r4
 80073ae:	3b15      	subs	r3, #21
 80073b0:	f023 0303 	bic.w	r3, r3, #3
 80073b4:	3304      	adds	r3, #4
 80073b6:	f104 0015 	add.w	r0, r4, #21
 80073ba:	4560      	cmp	r0, ip
 80073bc:	bf88      	it	hi
 80073be:	2304      	movhi	r3, #4
 80073c0:	50ca      	str	r2, [r1, r3]
 80073c2:	b10a      	cbz	r2, 80073c8 <__lshift+0xa4>
 80073c4:	f108 0602 	add.w	r6, r8, #2
 80073c8:	3e01      	subs	r6, #1
 80073ca:	4638      	mov	r0, r7
 80073cc:	612e      	str	r6, [r5, #16]
 80073ce:	4621      	mov	r1, r4
 80073d0:	f7ff fd98 	bl	8006f04 <_Bfree>
 80073d4:	4628      	mov	r0, r5
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	f842 0f04 	str.w	r0, [r2, #4]!
 80073de:	3301      	adds	r3, #1
 80073e0:	e7c5      	b.n	800736e <__lshift+0x4a>
 80073e2:	3904      	subs	r1, #4
 80073e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80073ec:	459c      	cmp	ip, r3
 80073ee:	d8f9      	bhi.n	80073e4 <__lshift+0xc0>
 80073f0:	e7ea      	b.n	80073c8 <__lshift+0xa4>
 80073f2:	bf00      	nop
 80073f4:	080099ce 	.word	0x080099ce
 80073f8:	080099df 	.word	0x080099df

080073fc <__mcmp>:
 80073fc:	690a      	ldr	r2, [r1, #16]
 80073fe:	4603      	mov	r3, r0
 8007400:	6900      	ldr	r0, [r0, #16]
 8007402:	1a80      	subs	r0, r0, r2
 8007404:	b530      	push	{r4, r5, lr}
 8007406:	d10e      	bne.n	8007426 <__mcmp+0x2a>
 8007408:	3314      	adds	r3, #20
 800740a:	3114      	adds	r1, #20
 800740c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007410:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007414:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007418:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800741c:	4295      	cmp	r5, r2
 800741e:	d003      	beq.n	8007428 <__mcmp+0x2c>
 8007420:	d205      	bcs.n	800742e <__mcmp+0x32>
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	bd30      	pop	{r4, r5, pc}
 8007428:	42a3      	cmp	r3, r4
 800742a:	d3f3      	bcc.n	8007414 <__mcmp+0x18>
 800742c:	e7fb      	b.n	8007426 <__mcmp+0x2a>
 800742e:	2001      	movs	r0, #1
 8007430:	e7f9      	b.n	8007426 <__mcmp+0x2a>
	...

08007434 <__mdiff>:
 8007434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	4689      	mov	r9, r1
 800743a:	4606      	mov	r6, r0
 800743c:	4611      	mov	r1, r2
 800743e:	4648      	mov	r0, r9
 8007440:	4614      	mov	r4, r2
 8007442:	f7ff ffdb 	bl	80073fc <__mcmp>
 8007446:	1e05      	subs	r5, r0, #0
 8007448:	d112      	bne.n	8007470 <__mdiff+0x3c>
 800744a:	4629      	mov	r1, r5
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fd19 	bl	8006e84 <_Balloc>
 8007452:	4602      	mov	r2, r0
 8007454:	b928      	cbnz	r0, 8007462 <__mdiff+0x2e>
 8007456:	4b3f      	ldr	r3, [pc, #252]	@ (8007554 <__mdiff+0x120>)
 8007458:	f240 2137 	movw	r1, #567	@ 0x237
 800745c:	483e      	ldr	r0, [pc, #248]	@ (8007558 <__mdiff+0x124>)
 800745e:	f001 fc5f 	bl	8008d20 <__assert_func>
 8007462:	2301      	movs	r3, #1
 8007464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007468:	4610      	mov	r0, r2
 800746a:	b003      	add	sp, #12
 800746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007470:	bfbc      	itt	lt
 8007472:	464b      	movlt	r3, r9
 8007474:	46a1      	movlt	r9, r4
 8007476:	4630      	mov	r0, r6
 8007478:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800747c:	bfba      	itte	lt
 800747e:	461c      	movlt	r4, r3
 8007480:	2501      	movlt	r5, #1
 8007482:	2500      	movge	r5, #0
 8007484:	f7ff fcfe 	bl	8006e84 <_Balloc>
 8007488:	4602      	mov	r2, r0
 800748a:	b918      	cbnz	r0, 8007494 <__mdiff+0x60>
 800748c:	4b31      	ldr	r3, [pc, #196]	@ (8007554 <__mdiff+0x120>)
 800748e:	f240 2145 	movw	r1, #581	@ 0x245
 8007492:	e7e3      	b.n	800745c <__mdiff+0x28>
 8007494:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007498:	6926      	ldr	r6, [r4, #16]
 800749a:	60c5      	str	r5, [r0, #12]
 800749c:	f109 0310 	add.w	r3, r9, #16
 80074a0:	f109 0514 	add.w	r5, r9, #20
 80074a4:	f104 0e14 	add.w	lr, r4, #20
 80074a8:	f100 0b14 	add.w	fp, r0, #20
 80074ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	46d9      	mov	r9, fp
 80074b8:	f04f 0c00 	mov.w	ip, #0
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	fa1f f38a 	uxth.w	r3, sl
 80074cc:	4619      	mov	r1, r3
 80074ce:	b283      	uxth	r3, r0
 80074d0:	1acb      	subs	r3, r1, r3
 80074d2:	0c00      	lsrs	r0, r0, #16
 80074d4:	4463      	add	r3, ip
 80074d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074de:	b29b      	uxth	r3, r3
 80074e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074e4:	4576      	cmp	r6, lr
 80074e6:	f849 3b04 	str.w	r3, [r9], #4
 80074ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074ee:	d8e5      	bhi.n	80074bc <__mdiff+0x88>
 80074f0:	1b33      	subs	r3, r6, r4
 80074f2:	3b15      	subs	r3, #21
 80074f4:	f023 0303 	bic.w	r3, r3, #3
 80074f8:	3415      	adds	r4, #21
 80074fa:	3304      	adds	r3, #4
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	bf38      	it	cc
 8007500:	2304      	movcc	r3, #4
 8007502:	441d      	add	r5, r3
 8007504:	445b      	add	r3, fp
 8007506:	461e      	mov	r6, r3
 8007508:	462c      	mov	r4, r5
 800750a:	4544      	cmp	r4, r8
 800750c:	d30e      	bcc.n	800752c <__mdiff+0xf8>
 800750e:	f108 0103 	add.w	r1, r8, #3
 8007512:	1b49      	subs	r1, r1, r5
 8007514:	f021 0103 	bic.w	r1, r1, #3
 8007518:	3d03      	subs	r5, #3
 800751a:	45a8      	cmp	r8, r5
 800751c:	bf38      	it	cc
 800751e:	2100      	movcc	r1, #0
 8007520:	440b      	add	r3, r1
 8007522:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007526:	b191      	cbz	r1, 800754e <__mdiff+0x11a>
 8007528:	6117      	str	r7, [r2, #16]
 800752a:	e79d      	b.n	8007468 <__mdiff+0x34>
 800752c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007530:	46e6      	mov	lr, ip
 8007532:	0c08      	lsrs	r0, r1, #16
 8007534:	fa1c fc81 	uxtah	ip, ip, r1
 8007538:	4471      	add	r1, lr
 800753a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800753e:	b289      	uxth	r1, r1
 8007540:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007544:	f846 1b04 	str.w	r1, [r6], #4
 8007548:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800754c:	e7dd      	b.n	800750a <__mdiff+0xd6>
 800754e:	3f01      	subs	r7, #1
 8007550:	e7e7      	b.n	8007522 <__mdiff+0xee>
 8007552:	bf00      	nop
 8007554:	080099ce 	.word	0x080099ce
 8007558:	080099df 	.word	0x080099df

0800755c <__ulp>:
 800755c:	b082      	sub	sp, #8
 800755e:	ed8d 0b00 	vstr	d0, [sp]
 8007562:	9a01      	ldr	r2, [sp, #4]
 8007564:	4b0f      	ldr	r3, [pc, #60]	@ (80075a4 <__ulp+0x48>)
 8007566:	4013      	ands	r3, r2
 8007568:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800756c:	2b00      	cmp	r3, #0
 800756e:	dc08      	bgt.n	8007582 <__ulp+0x26>
 8007570:	425b      	negs	r3, r3
 8007572:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007576:	ea4f 5223 	mov.w	r2, r3, asr #20
 800757a:	da04      	bge.n	8007586 <__ulp+0x2a>
 800757c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007580:	4113      	asrs	r3, r2
 8007582:	2200      	movs	r2, #0
 8007584:	e008      	b.n	8007598 <__ulp+0x3c>
 8007586:	f1a2 0314 	sub.w	r3, r2, #20
 800758a:	2b1e      	cmp	r3, #30
 800758c:	bfda      	itte	le
 800758e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007592:	40da      	lsrle	r2, r3
 8007594:	2201      	movgt	r2, #1
 8007596:	2300      	movs	r3, #0
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	ec41 0b10 	vmov	d0, r0, r1
 80075a0:	b002      	add	sp, #8
 80075a2:	4770      	bx	lr
 80075a4:	7ff00000 	.word	0x7ff00000

080075a8 <__b2d>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	6906      	ldr	r6, [r0, #16]
 80075ae:	f100 0814 	add.w	r8, r0, #20
 80075b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80075b6:	1f37      	subs	r7, r6, #4
 80075b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80075bc:	4610      	mov	r0, r2
 80075be:	f7ff fd53 	bl	8007068 <__hi0bits>
 80075c2:	f1c0 0320 	rsb	r3, r0, #32
 80075c6:	280a      	cmp	r0, #10
 80075c8:	600b      	str	r3, [r1, #0]
 80075ca:	491b      	ldr	r1, [pc, #108]	@ (8007638 <__b2d+0x90>)
 80075cc:	dc15      	bgt.n	80075fa <__b2d+0x52>
 80075ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80075d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80075d6:	45b8      	cmp	r8, r7
 80075d8:	ea43 0501 	orr.w	r5, r3, r1
 80075dc:	bf34      	ite	cc
 80075de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80075e2:	2300      	movcs	r3, #0
 80075e4:	3015      	adds	r0, #21
 80075e6:	fa02 f000 	lsl.w	r0, r2, r0
 80075ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80075ee:	4303      	orrs	r3, r0
 80075f0:	461c      	mov	r4, r3
 80075f2:	ec45 4b10 	vmov	d0, r4, r5
 80075f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075fa:	45b8      	cmp	r8, r7
 80075fc:	bf3a      	itte	cc
 80075fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007602:	f1a6 0708 	subcc.w	r7, r6, #8
 8007606:	2300      	movcs	r3, #0
 8007608:	380b      	subs	r0, #11
 800760a:	d012      	beq.n	8007632 <__b2d+0x8a>
 800760c:	f1c0 0120 	rsb	r1, r0, #32
 8007610:	fa23 f401 	lsr.w	r4, r3, r1
 8007614:	4082      	lsls	r2, r0
 8007616:	4322      	orrs	r2, r4
 8007618:	4547      	cmp	r7, r8
 800761a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800761e:	bf8c      	ite	hi
 8007620:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007624:	2200      	movls	r2, #0
 8007626:	4083      	lsls	r3, r0
 8007628:	40ca      	lsrs	r2, r1
 800762a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800762e:	4313      	orrs	r3, r2
 8007630:	e7de      	b.n	80075f0 <__b2d+0x48>
 8007632:	ea42 0501 	orr.w	r5, r2, r1
 8007636:	e7db      	b.n	80075f0 <__b2d+0x48>
 8007638:	3ff00000 	.word	0x3ff00000

0800763c <__d2b>:
 800763c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007640:	460f      	mov	r7, r1
 8007642:	2101      	movs	r1, #1
 8007644:	ec59 8b10 	vmov	r8, r9, d0
 8007648:	4616      	mov	r6, r2
 800764a:	f7ff fc1b 	bl	8006e84 <_Balloc>
 800764e:	4604      	mov	r4, r0
 8007650:	b930      	cbnz	r0, 8007660 <__d2b+0x24>
 8007652:	4602      	mov	r2, r0
 8007654:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <__d2b+0xa8>)
 8007656:	4824      	ldr	r0, [pc, #144]	@ (80076e8 <__d2b+0xac>)
 8007658:	f240 310f 	movw	r1, #783	@ 0x30f
 800765c:	f001 fb60 	bl	8008d20 <__assert_func>
 8007660:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007668:	b10d      	cbz	r5, 800766e <__d2b+0x32>
 800766a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	f1b8 0300 	subs.w	r3, r8, #0
 8007674:	d023      	beq.n	80076be <__d2b+0x82>
 8007676:	4668      	mov	r0, sp
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	f7ff fd14 	bl	80070a6 <__lo0bits>
 800767e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007682:	b1d0      	cbz	r0, 80076ba <__d2b+0x7e>
 8007684:	f1c0 0320 	rsb	r3, r0, #32
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	430b      	orrs	r3, r1
 800768e:	40c2      	lsrs	r2, r0
 8007690:	6163      	str	r3, [r4, #20]
 8007692:	9201      	str	r2, [sp, #4]
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	61a3      	str	r3, [r4, #24]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf0c      	ite	eq
 800769c:	2201      	moveq	r2, #1
 800769e:	2202      	movne	r2, #2
 80076a0:	6122      	str	r2, [r4, #16]
 80076a2:	b1a5      	cbz	r5, 80076ce <__d2b+0x92>
 80076a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80076a8:	4405      	add	r5, r0
 80076aa:	603d      	str	r5, [r7, #0]
 80076ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80076b0:	6030      	str	r0, [r6, #0]
 80076b2:	4620      	mov	r0, r4
 80076b4:	b003      	add	sp, #12
 80076b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076ba:	6161      	str	r1, [r4, #20]
 80076bc:	e7ea      	b.n	8007694 <__d2b+0x58>
 80076be:	a801      	add	r0, sp, #4
 80076c0:	f7ff fcf1 	bl	80070a6 <__lo0bits>
 80076c4:	9b01      	ldr	r3, [sp, #4]
 80076c6:	6163      	str	r3, [r4, #20]
 80076c8:	3020      	adds	r0, #32
 80076ca:	2201      	movs	r2, #1
 80076cc:	e7e8      	b.n	80076a0 <__d2b+0x64>
 80076ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80076d6:	6038      	str	r0, [r7, #0]
 80076d8:	6918      	ldr	r0, [r3, #16]
 80076da:	f7ff fcc5 	bl	8007068 <__hi0bits>
 80076de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076e2:	e7e5      	b.n	80076b0 <__d2b+0x74>
 80076e4:	080099ce 	.word	0x080099ce
 80076e8:	080099df 	.word	0x080099df

080076ec <__ratio>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	b085      	sub	sp, #20
 80076f2:	e9cd 1000 	strd	r1, r0, [sp]
 80076f6:	a902      	add	r1, sp, #8
 80076f8:	f7ff ff56 	bl	80075a8 <__b2d>
 80076fc:	9800      	ldr	r0, [sp, #0]
 80076fe:	a903      	add	r1, sp, #12
 8007700:	ec55 4b10 	vmov	r4, r5, d0
 8007704:	f7ff ff50 	bl	80075a8 <__b2d>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	6919      	ldr	r1, [r3, #16]
 800770c:	9b00      	ldr	r3, [sp, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	1ac9      	subs	r1, r1, r3
 8007712:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	ec5b ab10 	vmov	sl, fp, d0
 800771c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfce      	itee	gt
 8007724:	462a      	movgt	r2, r5
 8007726:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800772a:	465a      	movle	r2, fp
 800772c:	462f      	mov	r7, r5
 800772e:	46d9      	mov	r9, fp
 8007730:	bfcc      	ite	gt
 8007732:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007736:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800773a:	464b      	mov	r3, r9
 800773c:	4652      	mov	r2, sl
 800773e:	4620      	mov	r0, r4
 8007740:	4639      	mov	r1, r7
 8007742:	f7f9 f863 	bl	800080c <__aeabi_ddiv>
 8007746:	ec41 0b10 	vmov	d0, r0, r1
 800774a:	b005      	add	sp, #20
 800774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007750 <__copybits>:
 8007750:	3901      	subs	r1, #1
 8007752:	b570      	push	{r4, r5, r6, lr}
 8007754:	1149      	asrs	r1, r1, #5
 8007756:	6914      	ldr	r4, [r2, #16]
 8007758:	3101      	adds	r1, #1
 800775a:	f102 0314 	add.w	r3, r2, #20
 800775e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007762:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007766:	1f05      	subs	r5, r0, #4
 8007768:	42a3      	cmp	r3, r4
 800776a:	d30c      	bcc.n	8007786 <__copybits+0x36>
 800776c:	1aa3      	subs	r3, r4, r2
 800776e:	3b11      	subs	r3, #17
 8007770:	f023 0303 	bic.w	r3, r3, #3
 8007774:	3211      	adds	r2, #17
 8007776:	42a2      	cmp	r2, r4
 8007778:	bf88      	it	hi
 800777a:	2300      	movhi	r3, #0
 800777c:	4418      	add	r0, r3
 800777e:	2300      	movs	r3, #0
 8007780:	4288      	cmp	r0, r1
 8007782:	d305      	bcc.n	8007790 <__copybits+0x40>
 8007784:	bd70      	pop	{r4, r5, r6, pc}
 8007786:	f853 6b04 	ldr.w	r6, [r3], #4
 800778a:	f845 6f04 	str.w	r6, [r5, #4]!
 800778e:	e7eb      	b.n	8007768 <__copybits+0x18>
 8007790:	f840 3b04 	str.w	r3, [r0], #4
 8007794:	e7f4      	b.n	8007780 <__copybits+0x30>

08007796 <__any_on>:
 8007796:	f100 0214 	add.w	r2, r0, #20
 800779a:	6900      	ldr	r0, [r0, #16]
 800779c:	114b      	asrs	r3, r1, #5
 800779e:	4298      	cmp	r0, r3
 80077a0:	b510      	push	{r4, lr}
 80077a2:	db11      	blt.n	80077c8 <__any_on+0x32>
 80077a4:	dd0a      	ble.n	80077bc <__any_on+0x26>
 80077a6:	f011 011f 	ands.w	r1, r1, #31
 80077aa:	d007      	beq.n	80077bc <__any_on+0x26>
 80077ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077b0:	fa24 f001 	lsr.w	r0, r4, r1
 80077b4:	fa00 f101 	lsl.w	r1, r0, r1
 80077b8:	428c      	cmp	r4, r1
 80077ba:	d10b      	bne.n	80077d4 <__any_on+0x3e>
 80077bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d803      	bhi.n	80077cc <__any_on+0x36>
 80077c4:	2000      	movs	r0, #0
 80077c6:	bd10      	pop	{r4, pc}
 80077c8:	4603      	mov	r3, r0
 80077ca:	e7f7      	b.n	80077bc <__any_on+0x26>
 80077cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077d0:	2900      	cmp	r1, #0
 80077d2:	d0f5      	beq.n	80077c0 <__any_on+0x2a>
 80077d4:	2001      	movs	r0, #1
 80077d6:	e7f6      	b.n	80077c6 <__any_on+0x30>

080077d8 <sulp>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	4604      	mov	r4, r0
 80077dc:	460d      	mov	r5, r1
 80077de:	ec45 4b10 	vmov	d0, r4, r5
 80077e2:	4616      	mov	r6, r2
 80077e4:	f7ff feba 	bl	800755c <__ulp>
 80077e8:	ec51 0b10 	vmov	r0, r1, d0
 80077ec:	b17e      	cbz	r6, 800780e <sulp+0x36>
 80077ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80077f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dd09      	ble.n	800780e <sulp+0x36>
 80077fa:	051b      	lsls	r3, r3, #20
 80077fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007800:	2400      	movs	r4, #0
 8007802:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007806:	4622      	mov	r2, r4
 8007808:	462b      	mov	r3, r5
 800780a:	f7f8 fed5 	bl	80005b8 <__aeabi_dmul>
 800780e:	ec41 0b10 	vmov	d0, r0, r1
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	0000      	movs	r0, r0
	...

08007818 <_strtod_l>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	b09f      	sub	sp, #124	@ 0x7c
 800781e:	460c      	mov	r4, r1
 8007820:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007822:	2200      	movs	r2, #0
 8007824:	921a      	str	r2, [sp, #104]	@ 0x68
 8007826:	9005      	str	r0, [sp, #20]
 8007828:	f04f 0a00 	mov.w	sl, #0
 800782c:	f04f 0b00 	mov.w	fp, #0
 8007830:	460a      	mov	r2, r1
 8007832:	9219      	str	r2, [sp, #100]	@ 0x64
 8007834:	7811      	ldrb	r1, [r2, #0]
 8007836:	292b      	cmp	r1, #43	@ 0x2b
 8007838:	d04a      	beq.n	80078d0 <_strtod_l+0xb8>
 800783a:	d838      	bhi.n	80078ae <_strtod_l+0x96>
 800783c:	290d      	cmp	r1, #13
 800783e:	d832      	bhi.n	80078a6 <_strtod_l+0x8e>
 8007840:	2908      	cmp	r1, #8
 8007842:	d832      	bhi.n	80078aa <_strtod_l+0x92>
 8007844:	2900      	cmp	r1, #0
 8007846:	d03b      	beq.n	80078c0 <_strtod_l+0xa8>
 8007848:	2200      	movs	r2, #0
 800784a:	920e      	str	r2, [sp, #56]	@ 0x38
 800784c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800784e:	782a      	ldrb	r2, [r5, #0]
 8007850:	2a30      	cmp	r2, #48	@ 0x30
 8007852:	f040 80b2 	bne.w	80079ba <_strtod_l+0x1a2>
 8007856:	786a      	ldrb	r2, [r5, #1]
 8007858:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800785c:	2a58      	cmp	r2, #88	@ 0x58
 800785e:	d16e      	bne.n	800793e <_strtod_l+0x126>
 8007860:	9302      	str	r3, [sp, #8]
 8007862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	ab1a      	add	r3, sp, #104	@ 0x68
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	4a8f      	ldr	r2, [pc, #572]	@ (8007aa8 <_strtod_l+0x290>)
 800786c:	9805      	ldr	r0, [sp, #20]
 800786e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007870:	a919      	add	r1, sp, #100	@ 0x64
 8007872:	f001 faef 	bl	8008e54 <__gethex>
 8007876:	f010 060f 	ands.w	r6, r0, #15
 800787a:	4604      	mov	r4, r0
 800787c:	d005      	beq.n	800788a <_strtod_l+0x72>
 800787e:	2e06      	cmp	r6, #6
 8007880:	d128      	bne.n	80078d4 <_strtod_l+0xbc>
 8007882:	3501      	adds	r5, #1
 8007884:	2300      	movs	r3, #0
 8007886:	9519      	str	r5, [sp, #100]	@ 0x64
 8007888:	930e      	str	r3, [sp, #56]	@ 0x38
 800788a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 858e 	bne.w	80083ae <_strtod_l+0xb96>
 8007892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007894:	b1cb      	cbz	r3, 80078ca <_strtod_l+0xb2>
 8007896:	4652      	mov	r2, sl
 8007898:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800789c:	ec43 2b10 	vmov	d0, r2, r3
 80078a0:	b01f      	add	sp, #124	@ 0x7c
 80078a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a6:	2920      	cmp	r1, #32
 80078a8:	d1ce      	bne.n	8007848 <_strtod_l+0x30>
 80078aa:	3201      	adds	r2, #1
 80078ac:	e7c1      	b.n	8007832 <_strtod_l+0x1a>
 80078ae:	292d      	cmp	r1, #45	@ 0x2d
 80078b0:	d1ca      	bne.n	8007848 <_strtod_l+0x30>
 80078b2:	2101      	movs	r1, #1
 80078b4:	910e      	str	r1, [sp, #56]	@ 0x38
 80078b6:	1c51      	adds	r1, r2, #1
 80078b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80078ba:	7852      	ldrb	r2, [r2, #1]
 80078bc:	2a00      	cmp	r2, #0
 80078be:	d1c5      	bne.n	800784c <_strtod_l+0x34>
 80078c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80078c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 8570 	bne.w	80083aa <_strtod_l+0xb92>
 80078ca:	4652      	mov	r2, sl
 80078cc:	465b      	mov	r3, fp
 80078ce:	e7e5      	b.n	800789c <_strtod_l+0x84>
 80078d0:	2100      	movs	r1, #0
 80078d2:	e7ef      	b.n	80078b4 <_strtod_l+0x9c>
 80078d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078d6:	b13a      	cbz	r2, 80078e8 <_strtod_l+0xd0>
 80078d8:	2135      	movs	r1, #53	@ 0x35
 80078da:	a81c      	add	r0, sp, #112	@ 0x70
 80078dc:	f7ff ff38 	bl	8007750 <__copybits>
 80078e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078e2:	9805      	ldr	r0, [sp, #20]
 80078e4:	f7ff fb0e 	bl	8006f04 <_Bfree>
 80078e8:	3e01      	subs	r6, #1
 80078ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80078ec:	2e04      	cmp	r6, #4
 80078ee:	d806      	bhi.n	80078fe <_strtod_l+0xe6>
 80078f0:	e8df f006 	tbb	[pc, r6]
 80078f4:	201d0314 	.word	0x201d0314
 80078f8:	14          	.byte	0x14
 80078f9:	00          	.byte	0x00
 80078fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80078fe:	05e1      	lsls	r1, r4, #23
 8007900:	bf48      	it	mi
 8007902:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800790a:	0d1b      	lsrs	r3, r3, #20
 800790c:	051b      	lsls	r3, r3, #20
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1bb      	bne.n	800788a <_strtod_l+0x72>
 8007912:	f7fe fb41 	bl	8005f98 <__errno>
 8007916:	2322      	movs	r3, #34	@ 0x22
 8007918:	6003      	str	r3, [r0, #0]
 800791a:	e7b6      	b.n	800788a <_strtod_l+0x72>
 800791c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007920:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007924:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007928:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800792c:	e7e7      	b.n	80078fe <_strtod_l+0xe6>
 800792e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007ab0 <_strtod_l+0x298>
 8007932:	e7e4      	b.n	80078fe <_strtod_l+0xe6>
 8007934:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007938:	f04f 3aff 	mov.w	sl, #4294967295
 800793c:	e7df      	b.n	80078fe <_strtod_l+0xe6>
 800793e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	9219      	str	r2, [sp, #100]	@ 0x64
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b30      	cmp	r3, #48	@ 0x30
 8007948:	d0f9      	beq.n	800793e <_strtod_l+0x126>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d09d      	beq.n	800788a <_strtod_l+0x72>
 800794e:	2301      	movs	r3, #1
 8007950:	2700      	movs	r7, #0
 8007952:	9308      	str	r3, [sp, #32]
 8007954:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007956:	930c      	str	r3, [sp, #48]	@ 0x30
 8007958:	970b      	str	r7, [sp, #44]	@ 0x2c
 800795a:	46b9      	mov	r9, r7
 800795c:	220a      	movs	r2, #10
 800795e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007960:	7805      	ldrb	r5, [r0, #0]
 8007962:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007966:	b2d9      	uxtb	r1, r3
 8007968:	2909      	cmp	r1, #9
 800796a:	d928      	bls.n	80079be <_strtod_l+0x1a6>
 800796c:	494f      	ldr	r1, [pc, #316]	@ (8007aac <_strtod_l+0x294>)
 800796e:	2201      	movs	r2, #1
 8007970:	f001 f97a 	bl	8008c68 <strncmp>
 8007974:	2800      	cmp	r0, #0
 8007976:	d032      	beq.n	80079de <_strtod_l+0x1c6>
 8007978:	2000      	movs	r0, #0
 800797a:	462a      	mov	r2, r5
 800797c:	900a      	str	r0, [sp, #40]	@ 0x28
 800797e:	464d      	mov	r5, r9
 8007980:	4603      	mov	r3, r0
 8007982:	2a65      	cmp	r2, #101	@ 0x65
 8007984:	d001      	beq.n	800798a <_strtod_l+0x172>
 8007986:	2a45      	cmp	r2, #69	@ 0x45
 8007988:	d114      	bne.n	80079b4 <_strtod_l+0x19c>
 800798a:	b91d      	cbnz	r5, 8007994 <_strtod_l+0x17c>
 800798c:	9a08      	ldr	r2, [sp, #32]
 800798e:	4302      	orrs	r2, r0
 8007990:	d096      	beq.n	80078c0 <_strtod_l+0xa8>
 8007992:	2500      	movs	r5, #0
 8007994:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007996:	1c62      	adds	r2, r4, #1
 8007998:	9219      	str	r2, [sp, #100]	@ 0x64
 800799a:	7862      	ldrb	r2, [r4, #1]
 800799c:	2a2b      	cmp	r2, #43	@ 0x2b
 800799e:	d07a      	beq.n	8007a96 <_strtod_l+0x27e>
 80079a0:	2a2d      	cmp	r2, #45	@ 0x2d
 80079a2:	d07e      	beq.n	8007aa2 <_strtod_l+0x28a>
 80079a4:	f04f 0c00 	mov.w	ip, #0
 80079a8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80079ac:	2909      	cmp	r1, #9
 80079ae:	f240 8085 	bls.w	8007abc <_strtod_l+0x2a4>
 80079b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80079b4:	f04f 0800 	mov.w	r8, #0
 80079b8:	e0a5      	b.n	8007b06 <_strtod_l+0x2ee>
 80079ba:	2300      	movs	r3, #0
 80079bc:	e7c8      	b.n	8007950 <_strtod_l+0x138>
 80079be:	f1b9 0f08 	cmp.w	r9, #8
 80079c2:	bfd8      	it	le
 80079c4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80079c6:	f100 0001 	add.w	r0, r0, #1
 80079ca:	bfda      	itte	le
 80079cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80079d0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80079d2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80079d6:	f109 0901 	add.w	r9, r9, #1
 80079da:	9019      	str	r0, [sp, #100]	@ 0x64
 80079dc:	e7bf      	b.n	800795e <_strtod_l+0x146>
 80079de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80079e4:	785a      	ldrb	r2, [r3, #1]
 80079e6:	f1b9 0f00 	cmp.w	r9, #0
 80079ea:	d03b      	beq.n	8007a64 <_strtod_l+0x24c>
 80079ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80079ee:	464d      	mov	r5, r9
 80079f0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80079f4:	2b09      	cmp	r3, #9
 80079f6:	d912      	bls.n	8007a1e <_strtod_l+0x206>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7c2      	b.n	8007982 <_strtod_l+0x16a>
 80079fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a02:	785a      	ldrb	r2, [r3, #1]
 8007a04:	3001      	adds	r0, #1
 8007a06:	2a30      	cmp	r2, #48	@ 0x30
 8007a08:	d0f8      	beq.n	80079fc <_strtod_l+0x1e4>
 8007a0a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	f200 84d2 	bhi.w	80083b8 <_strtod_l+0xba0>
 8007a14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a16:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a18:	2000      	movs	r0, #0
 8007a1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	3a30      	subs	r2, #48	@ 0x30
 8007a20:	f100 0301 	add.w	r3, r0, #1
 8007a24:	d018      	beq.n	8007a58 <_strtod_l+0x240>
 8007a26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a28:	4419      	add	r1, r3
 8007a2a:	910a      	str	r1, [sp, #40]	@ 0x28
 8007a2c:	462e      	mov	r6, r5
 8007a2e:	f04f 0e0a 	mov.w	lr, #10
 8007a32:	1c71      	adds	r1, r6, #1
 8007a34:	eba1 0c05 	sub.w	ip, r1, r5
 8007a38:	4563      	cmp	r3, ip
 8007a3a:	dc15      	bgt.n	8007a68 <_strtod_l+0x250>
 8007a3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007a40:	182b      	adds	r3, r5, r0
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	f105 0501 	add.w	r5, r5, #1
 8007a48:	4405      	add	r5, r0
 8007a4a:	dc1a      	bgt.n	8007a82 <_strtod_l+0x26a>
 8007a4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a4e:	230a      	movs	r3, #10
 8007a50:	fb03 2301 	mla	r3, r3, r1, r2
 8007a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a56:	2300      	movs	r3, #0
 8007a58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a5a:	1c51      	adds	r1, r2, #1
 8007a5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a5e:	7852      	ldrb	r2, [r2, #1]
 8007a60:	4618      	mov	r0, r3
 8007a62:	e7c5      	b.n	80079f0 <_strtod_l+0x1d8>
 8007a64:	4648      	mov	r0, r9
 8007a66:	e7ce      	b.n	8007a06 <_strtod_l+0x1ee>
 8007a68:	2e08      	cmp	r6, #8
 8007a6a:	dc05      	bgt.n	8007a78 <_strtod_l+0x260>
 8007a6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007a6e:	fb0e f606 	mul.w	r6, lr, r6
 8007a72:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007a74:	460e      	mov	r6, r1
 8007a76:	e7dc      	b.n	8007a32 <_strtod_l+0x21a>
 8007a78:	2910      	cmp	r1, #16
 8007a7a:	bfd8      	it	le
 8007a7c:	fb0e f707 	mulle.w	r7, lr, r7
 8007a80:	e7f8      	b.n	8007a74 <_strtod_l+0x25c>
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	bfdc      	itt	le
 8007a86:	230a      	movle	r3, #10
 8007a88:	fb03 2707 	mlale	r7, r3, r7, r2
 8007a8c:	e7e3      	b.n	8007a56 <_strtod_l+0x23e>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a92:	2301      	movs	r3, #1
 8007a94:	e77a      	b.n	800798c <_strtod_l+0x174>
 8007a96:	f04f 0c00 	mov.w	ip, #0
 8007a9a:	1ca2      	adds	r2, r4, #2
 8007a9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a9e:	78a2      	ldrb	r2, [r4, #2]
 8007aa0:	e782      	b.n	80079a8 <_strtod_l+0x190>
 8007aa2:	f04f 0c01 	mov.w	ip, #1
 8007aa6:	e7f8      	b.n	8007a9a <_strtod_l+0x282>
 8007aa8:	08009c04 	.word	0x08009c04
 8007aac:	08009a39 	.word	0x08009a39
 8007ab0:	7ff00000 	.word	0x7ff00000
 8007ab4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ab6:	1c51      	adds	r1, r2, #1
 8007ab8:	9119      	str	r1, [sp, #100]	@ 0x64
 8007aba:	7852      	ldrb	r2, [r2, #1]
 8007abc:	2a30      	cmp	r2, #48	@ 0x30
 8007abe:	d0f9      	beq.n	8007ab4 <_strtod_l+0x29c>
 8007ac0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007ac4:	2908      	cmp	r1, #8
 8007ac6:	f63f af75 	bhi.w	80079b4 <_strtod_l+0x19c>
 8007aca:	3a30      	subs	r2, #48	@ 0x30
 8007acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ace:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ad0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007ad2:	f04f 080a 	mov.w	r8, #10
 8007ad6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ad8:	1c56      	adds	r6, r2, #1
 8007ada:	9619      	str	r6, [sp, #100]	@ 0x64
 8007adc:	7852      	ldrb	r2, [r2, #1]
 8007ade:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ae2:	f1be 0f09 	cmp.w	lr, #9
 8007ae6:	d939      	bls.n	8007b5c <_strtod_l+0x344>
 8007ae8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007aea:	1a76      	subs	r6, r6, r1
 8007aec:	2e08      	cmp	r6, #8
 8007aee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007af2:	dc03      	bgt.n	8007afc <_strtod_l+0x2e4>
 8007af4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007af6:	4588      	cmp	r8, r1
 8007af8:	bfa8      	it	ge
 8007afa:	4688      	movge	r8, r1
 8007afc:	f1bc 0f00 	cmp.w	ip, #0
 8007b00:	d001      	beq.n	8007b06 <_strtod_l+0x2ee>
 8007b02:	f1c8 0800 	rsb	r8, r8, #0
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	d14e      	bne.n	8007ba8 <_strtod_l+0x390>
 8007b0a:	9908      	ldr	r1, [sp, #32]
 8007b0c:	4301      	orrs	r1, r0
 8007b0e:	f47f aebc 	bne.w	800788a <_strtod_l+0x72>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f47f aed4 	bne.w	80078c0 <_strtod_l+0xa8>
 8007b18:	2a69      	cmp	r2, #105	@ 0x69
 8007b1a:	d028      	beq.n	8007b6e <_strtod_l+0x356>
 8007b1c:	dc25      	bgt.n	8007b6a <_strtod_l+0x352>
 8007b1e:	2a49      	cmp	r2, #73	@ 0x49
 8007b20:	d025      	beq.n	8007b6e <_strtod_l+0x356>
 8007b22:	2a4e      	cmp	r2, #78	@ 0x4e
 8007b24:	f47f aecc 	bne.w	80078c0 <_strtod_l+0xa8>
 8007b28:	499a      	ldr	r1, [pc, #616]	@ (8007d94 <_strtod_l+0x57c>)
 8007b2a:	a819      	add	r0, sp, #100	@ 0x64
 8007b2c:	f001 fbb4 	bl	8009298 <__match>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f43f aec5 	beq.w	80078c0 <_strtod_l+0xa8>
 8007b36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b28      	cmp	r3, #40	@ 0x28
 8007b3c:	d12e      	bne.n	8007b9c <_strtod_l+0x384>
 8007b3e:	4996      	ldr	r1, [pc, #600]	@ (8007d98 <_strtod_l+0x580>)
 8007b40:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b42:	a819      	add	r0, sp, #100	@ 0x64
 8007b44:	f001 fbbc 	bl	80092c0 <__hexnan>
 8007b48:	2805      	cmp	r0, #5
 8007b4a:	d127      	bne.n	8007b9c <_strtod_l+0x384>
 8007b4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007b52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007b56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007b5a:	e696      	b.n	800788a <_strtod_l+0x72>
 8007b5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b5e:	fb08 2101 	mla	r1, r8, r1, r2
 8007b62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007b66:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b68:	e7b5      	b.n	8007ad6 <_strtod_l+0x2be>
 8007b6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8007b6c:	e7da      	b.n	8007b24 <_strtod_l+0x30c>
 8007b6e:	498b      	ldr	r1, [pc, #556]	@ (8007d9c <_strtod_l+0x584>)
 8007b70:	a819      	add	r0, sp, #100	@ 0x64
 8007b72:	f001 fb91 	bl	8009298 <__match>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f43f aea2 	beq.w	80078c0 <_strtod_l+0xa8>
 8007b7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b7e:	4988      	ldr	r1, [pc, #544]	@ (8007da0 <_strtod_l+0x588>)
 8007b80:	3b01      	subs	r3, #1
 8007b82:	a819      	add	r0, sp, #100	@ 0x64
 8007b84:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b86:	f001 fb87 	bl	8009298 <__match>
 8007b8a:	b910      	cbnz	r0, 8007b92 <_strtod_l+0x37a>
 8007b8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b8e:	3301      	adds	r3, #1
 8007b90:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b92:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007db0 <_strtod_l+0x598>
 8007b96:	f04f 0a00 	mov.w	sl, #0
 8007b9a:	e676      	b.n	800788a <_strtod_l+0x72>
 8007b9c:	4881      	ldr	r0, [pc, #516]	@ (8007da4 <_strtod_l+0x58c>)
 8007b9e:	f001 f8b7 	bl	8008d10 <nan>
 8007ba2:	ec5b ab10 	vmov	sl, fp, d0
 8007ba6:	e670      	b.n	800788a <_strtod_l+0x72>
 8007ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007baa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007bac:	eba8 0303 	sub.w	r3, r8, r3
 8007bb0:	f1b9 0f00 	cmp.w	r9, #0
 8007bb4:	bf08      	it	eq
 8007bb6:	46a9      	moveq	r9, r5
 8007bb8:	2d10      	cmp	r5, #16
 8007bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bbc:	462c      	mov	r4, r5
 8007bbe:	bfa8      	it	ge
 8007bc0:	2410      	movge	r4, #16
 8007bc2:	f7f8 fc7f 	bl	80004c4 <__aeabi_ui2d>
 8007bc6:	2d09      	cmp	r5, #9
 8007bc8:	4682      	mov	sl, r0
 8007bca:	468b      	mov	fp, r1
 8007bcc:	dc13      	bgt.n	8007bf6 <_strtod_l+0x3de>
 8007bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f43f ae5a 	beq.w	800788a <_strtod_l+0x72>
 8007bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd8:	dd78      	ble.n	8007ccc <_strtod_l+0x4b4>
 8007bda:	2b16      	cmp	r3, #22
 8007bdc:	dc5f      	bgt.n	8007c9e <_strtod_l+0x486>
 8007bde:	4972      	ldr	r1, [pc, #456]	@ (8007da8 <_strtod_l+0x590>)
 8007be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be8:	4652      	mov	r2, sl
 8007bea:	465b      	mov	r3, fp
 8007bec:	f7f8 fce4 	bl	80005b8 <__aeabi_dmul>
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	468b      	mov	fp, r1
 8007bf4:	e649      	b.n	800788a <_strtod_l+0x72>
 8007bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8007da8 <_strtod_l+0x590>)
 8007bf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007c00:	f7f8 fcda 	bl	80005b8 <__aeabi_dmul>
 8007c04:	4682      	mov	sl, r0
 8007c06:	4638      	mov	r0, r7
 8007c08:	468b      	mov	fp, r1
 8007c0a:	f7f8 fc5b 	bl	80004c4 <__aeabi_ui2d>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4650      	mov	r0, sl
 8007c14:	4659      	mov	r1, fp
 8007c16:	f7f8 fb19 	bl	800024c <__adddf3>
 8007c1a:	2d0f      	cmp	r5, #15
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	468b      	mov	fp, r1
 8007c20:	ddd5      	ble.n	8007bce <_strtod_l+0x3b6>
 8007c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c24:	1b2c      	subs	r4, r5, r4
 8007c26:	441c      	add	r4, r3
 8007c28:	2c00      	cmp	r4, #0
 8007c2a:	f340 8093 	ble.w	8007d54 <_strtod_l+0x53c>
 8007c2e:	f014 030f 	ands.w	r3, r4, #15
 8007c32:	d00a      	beq.n	8007c4a <_strtod_l+0x432>
 8007c34:	495c      	ldr	r1, [pc, #368]	@ (8007da8 <_strtod_l+0x590>)
 8007c36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c3a:	4652      	mov	r2, sl
 8007c3c:	465b      	mov	r3, fp
 8007c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c42:	f7f8 fcb9 	bl	80005b8 <__aeabi_dmul>
 8007c46:	4682      	mov	sl, r0
 8007c48:	468b      	mov	fp, r1
 8007c4a:	f034 040f 	bics.w	r4, r4, #15
 8007c4e:	d073      	beq.n	8007d38 <_strtod_l+0x520>
 8007c50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007c54:	dd49      	ble.n	8007cea <_strtod_l+0x4d2>
 8007c56:	2400      	movs	r4, #0
 8007c58:	46a0      	mov	r8, r4
 8007c5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c5c:	46a1      	mov	r9, r4
 8007c5e:	9a05      	ldr	r2, [sp, #20]
 8007c60:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007db0 <_strtod_l+0x598>
 8007c64:	2322      	movs	r3, #34	@ 0x22
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	f04f 0a00 	mov.w	sl, #0
 8007c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f43f ae0b 	beq.w	800788a <_strtod_l+0x72>
 8007c74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c76:	9805      	ldr	r0, [sp, #20]
 8007c78:	f7ff f944 	bl	8006f04 <_Bfree>
 8007c7c:	9805      	ldr	r0, [sp, #20]
 8007c7e:	4649      	mov	r1, r9
 8007c80:	f7ff f940 	bl	8006f04 <_Bfree>
 8007c84:	9805      	ldr	r0, [sp, #20]
 8007c86:	4641      	mov	r1, r8
 8007c88:	f7ff f93c 	bl	8006f04 <_Bfree>
 8007c8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c8e:	9805      	ldr	r0, [sp, #20]
 8007c90:	f7ff f938 	bl	8006f04 <_Bfree>
 8007c94:	9805      	ldr	r0, [sp, #20]
 8007c96:	4621      	mov	r1, r4
 8007c98:	f7ff f934 	bl	8006f04 <_Bfree>
 8007c9c:	e5f5      	b.n	800788a <_strtod_l+0x72>
 8007c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ca0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	dbbc      	blt.n	8007c22 <_strtod_l+0x40a>
 8007ca8:	4c3f      	ldr	r4, [pc, #252]	@ (8007da8 <_strtod_l+0x590>)
 8007caa:	f1c5 050f 	rsb	r5, r5, #15
 8007cae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	465b      	mov	r3, fp
 8007cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cba:	f7f8 fc7d 	bl	80005b8 <__aeabi_dmul>
 8007cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc0:	1b5d      	subs	r5, r3, r5
 8007cc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007cc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007cca:	e78f      	b.n	8007bec <_strtod_l+0x3d4>
 8007ccc:	3316      	adds	r3, #22
 8007cce:	dba8      	blt.n	8007c22 <_strtod_l+0x40a>
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd2:	eba3 0808 	sub.w	r8, r3, r8
 8007cd6:	4b34      	ldr	r3, [pc, #208]	@ (8007da8 <_strtod_l+0x590>)
 8007cd8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007cdc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	f7f8 fd92 	bl	800080c <__aeabi_ddiv>
 8007ce8:	e782      	b.n	8007bf0 <_strtod_l+0x3d8>
 8007cea:	2300      	movs	r3, #0
 8007cec:	4f2f      	ldr	r7, [pc, #188]	@ (8007dac <_strtod_l+0x594>)
 8007cee:	1124      	asrs	r4, r4, #4
 8007cf0:	4650      	mov	r0, sl
 8007cf2:	4659      	mov	r1, fp
 8007cf4:	461e      	mov	r6, r3
 8007cf6:	2c01      	cmp	r4, #1
 8007cf8:	dc21      	bgt.n	8007d3e <_strtod_l+0x526>
 8007cfa:	b10b      	cbz	r3, 8007d00 <_strtod_l+0x4e8>
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	468b      	mov	fp, r1
 8007d00:	492a      	ldr	r1, [pc, #168]	@ (8007dac <_strtod_l+0x594>)
 8007d02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007d06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d12:	f7f8 fc51 	bl	80005b8 <__aeabi_dmul>
 8007d16:	4b26      	ldr	r3, [pc, #152]	@ (8007db0 <_strtod_l+0x598>)
 8007d18:	460a      	mov	r2, r1
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	4925      	ldr	r1, [pc, #148]	@ (8007db4 <_strtod_l+0x59c>)
 8007d1e:	428b      	cmp	r3, r1
 8007d20:	4682      	mov	sl, r0
 8007d22:	d898      	bhi.n	8007c56 <_strtod_l+0x43e>
 8007d24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007d28:	428b      	cmp	r3, r1
 8007d2a:	bf86      	itte	hi
 8007d2c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007db8 <_strtod_l+0x5a0>
 8007d30:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9308      	str	r3, [sp, #32]
 8007d3c:	e076      	b.n	8007e2c <_strtod_l+0x614>
 8007d3e:	07e2      	lsls	r2, r4, #31
 8007d40:	d504      	bpl.n	8007d4c <_strtod_l+0x534>
 8007d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d46:	f7f8 fc37 	bl	80005b8 <__aeabi_dmul>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	3601      	adds	r6, #1
 8007d4e:	1064      	asrs	r4, r4, #1
 8007d50:	3708      	adds	r7, #8
 8007d52:	e7d0      	b.n	8007cf6 <_strtod_l+0x4de>
 8007d54:	d0f0      	beq.n	8007d38 <_strtod_l+0x520>
 8007d56:	4264      	negs	r4, r4
 8007d58:	f014 020f 	ands.w	r2, r4, #15
 8007d5c:	d00a      	beq.n	8007d74 <_strtod_l+0x55c>
 8007d5e:	4b12      	ldr	r3, [pc, #72]	@ (8007da8 <_strtod_l+0x590>)
 8007d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d64:	4650      	mov	r0, sl
 8007d66:	4659      	mov	r1, fp
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f7f8 fd4e 	bl	800080c <__aeabi_ddiv>
 8007d70:	4682      	mov	sl, r0
 8007d72:	468b      	mov	fp, r1
 8007d74:	1124      	asrs	r4, r4, #4
 8007d76:	d0df      	beq.n	8007d38 <_strtod_l+0x520>
 8007d78:	2c1f      	cmp	r4, #31
 8007d7a:	dd1f      	ble.n	8007dbc <_strtod_l+0x5a4>
 8007d7c:	2400      	movs	r4, #0
 8007d7e:	46a0      	mov	r8, r4
 8007d80:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d82:	46a1      	mov	r9, r4
 8007d84:	9a05      	ldr	r2, [sp, #20]
 8007d86:	2322      	movs	r3, #34	@ 0x22
 8007d88:	f04f 0a00 	mov.w	sl, #0
 8007d8c:	f04f 0b00 	mov.w	fp, #0
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	e76b      	b.n	8007c6c <_strtod_l+0x454>
 8007d94:	08009925 	.word	0x08009925
 8007d98:	08009bf0 	.word	0x08009bf0
 8007d9c:	0800991d 	.word	0x0800991d
 8007da0:	08009954 	.word	0x08009954
 8007da4:	08009a8f 	.word	0x08009a8f
 8007da8:	08009b28 	.word	0x08009b28
 8007dac:	08009b00 	.word	0x08009b00
 8007db0:	7ff00000 	.word	0x7ff00000
 8007db4:	7ca00000 	.word	0x7ca00000
 8007db8:	7fefffff 	.word	0x7fefffff
 8007dbc:	f014 0310 	ands.w	r3, r4, #16
 8007dc0:	bf18      	it	ne
 8007dc2:	236a      	movne	r3, #106	@ 0x6a
 8007dc4:	4ea9      	ldr	r6, [pc, #676]	@ (800806c <_strtod_l+0x854>)
 8007dc6:	9308      	str	r3, [sp, #32]
 8007dc8:	4650      	mov	r0, sl
 8007dca:	4659      	mov	r1, fp
 8007dcc:	2300      	movs	r3, #0
 8007dce:	07e7      	lsls	r7, r4, #31
 8007dd0:	d504      	bpl.n	8007ddc <_strtod_l+0x5c4>
 8007dd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dd6:	f7f8 fbef 	bl	80005b8 <__aeabi_dmul>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	1064      	asrs	r4, r4, #1
 8007dde:	f106 0608 	add.w	r6, r6, #8
 8007de2:	d1f4      	bne.n	8007dce <_strtod_l+0x5b6>
 8007de4:	b10b      	cbz	r3, 8007dea <_strtod_l+0x5d2>
 8007de6:	4682      	mov	sl, r0
 8007de8:	468b      	mov	fp, r1
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	b1b3      	cbz	r3, 8007e1c <_strtod_l+0x604>
 8007dee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007df2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	4659      	mov	r1, fp
 8007dfa:	dd0f      	ble.n	8007e1c <_strtod_l+0x604>
 8007dfc:	2b1f      	cmp	r3, #31
 8007dfe:	dd56      	ble.n	8007eae <_strtod_l+0x696>
 8007e00:	2b34      	cmp	r3, #52	@ 0x34
 8007e02:	bfde      	ittt	le
 8007e04:	f04f 33ff 	movle.w	r3, #4294967295
 8007e08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007e0c:	4093      	lslle	r3, r2
 8007e0e:	f04f 0a00 	mov.w	sl, #0
 8007e12:	bfcc      	ite	gt
 8007e14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007e18:	ea03 0b01 	andle.w	fp, r3, r1
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4650      	mov	r0, sl
 8007e22:	4659      	mov	r1, fp
 8007e24:	f7f8 fe30 	bl	8000a88 <__aeabi_dcmpeq>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d1a7      	bne.n	8007d7c <_strtod_l+0x564>
 8007e2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e32:	9805      	ldr	r0, [sp, #20]
 8007e34:	462b      	mov	r3, r5
 8007e36:	464a      	mov	r2, r9
 8007e38:	f7ff f8cc 	bl	8006fd4 <__s2b>
 8007e3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f43f af09 	beq.w	8007c56 <_strtod_l+0x43e>
 8007e44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	eba3 0308 	sub.w	r3, r3, r8
 8007e4e:	bfa8      	it	ge
 8007e50:	2300      	movge	r3, #0
 8007e52:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e54:	2400      	movs	r4, #0
 8007e56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007e5c:	46a0      	mov	r8, r4
 8007e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e60:	9805      	ldr	r0, [sp, #20]
 8007e62:	6859      	ldr	r1, [r3, #4]
 8007e64:	f7ff f80e 	bl	8006e84 <_Balloc>
 8007e68:	4681      	mov	r9, r0
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f43f aef7 	beq.w	8007c5e <_strtod_l+0x446>
 8007e70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	3202      	adds	r2, #2
 8007e76:	f103 010c 	add.w	r1, r3, #12
 8007e7a:	0092      	lsls	r2, r2, #2
 8007e7c:	300c      	adds	r0, #12
 8007e7e:	f000 ff37 	bl	8008cf0 <memcpy>
 8007e82:	ec4b ab10 	vmov	d0, sl, fp
 8007e86:	9805      	ldr	r0, [sp, #20]
 8007e88:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e8a:	a91b      	add	r1, sp, #108	@ 0x6c
 8007e8c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e90:	f7ff fbd4 	bl	800763c <__d2b>
 8007e94:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f43f aee1 	beq.w	8007c5e <_strtod_l+0x446>
 8007e9c:	9805      	ldr	r0, [sp, #20]
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	f7ff f92e 	bl	8007100 <__i2b>
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	b948      	cbnz	r0, 8007ebc <_strtod_l+0x6a4>
 8007ea8:	f04f 0800 	mov.w	r8, #0
 8007eac:	e6d7      	b.n	8007c5e <_strtod_l+0x446>
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	ea03 0a0a 	and.w	sl, r3, sl
 8007eba:	e7af      	b.n	8007e1c <_strtod_l+0x604>
 8007ebc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007ebe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	bfab      	itete	ge
 8007ec4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007ec6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007ec8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007eca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007ecc:	bfac      	ite	ge
 8007ece:	18ef      	addge	r7, r5, r3
 8007ed0:	1b5e      	sublt	r6, r3, r5
 8007ed2:	9b08      	ldr	r3, [sp, #32]
 8007ed4:	1aed      	subs	r5, r5, r3
 8007ed6:	4415      	add	r5, r2
 8007ed8:	4b65      	ldr	r3, [pc, #404]	@ (8008070 <_strtod_l+0x858>)
 8007eda:	3d01      	subs	r5, #1
 8007edc:	429d      	cmp	r5, r3
 8007ede:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ee2:	da50      	bge.n	8007f86 <_strtod_l+0x76e>
 8007ee4:	1b5b      	subs	r3, r3, r5
 8007ee6:	2b1f      	cmp	r3, #31
 8007ee8:	eba2 0203 	sub.w	r2, r2, r3
 8007eec:	f04f 0101 	mov.w	r1, #1
 8007ef0:	dc3d      	bgt.n	8007f6e <_strtod_l+0x756>
 8007ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9310      	str	r3, [sp, #64]	@ 0x40
 8007efc:	18bd      	adds	r5, r7, r2
 8007efe:	9b08      	ldr	r3, [sp, #32]
 8007f00:	42af      	cmp	r7, r5
 8007f02:	4416      	add	r6, r2
 8007f04:	441e      	add	r6, r3
 8007f06:	463b      	mov	r3, r7
 8007f08:	bfa8      	it	ge
 8007f0a:	462b      	movge	r3, r5
 8007f0c:	42b3      	cmp	r3, r6
 8007f0e:	bfa8      	it	ge
 8007f10:	4633      	movge	r3, r6
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bfc2      	ittt	gt
 8007f16:	1aed      	subgt	r5, r5, r3
 8007f18:	1af6      	subgt	r6, r6, r3
 8007f1a:	1aff      	subgt	r7, r7, r3
 8007f1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd16      	ble.n	8007f50 <_strtod_l+0x738>
 8007f22:	4641      	mov	r1, r8
 8007f24:	9805      	ldr	r0, [sp, #20]
 8007f26:	461a      	mov	r2, r3
 8007f28:	f7ff f9a2 	bl	8007270 <__pow5mult>
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d0ba      	beq.n	8007ea8 <_strtod_l+0x690>
 8007f32:	4601      	mov	r1, r0
 8007f34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f36:	9805      	ldr	r0, [sp, #20]
 8007f38:	f7ff f8f8 	bl	800712c <__multiply>
 8007f3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f43f ae8d 	beq.w	8007c5e <_strtod_l+0x446>
 8007f44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f46:	9805      	ldr	r0, [sp, #20]
 8007f48:	f7fe ffdc 	bl	8006f04 <_Bfree>
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	dc1d      	bgt.n	8007f90 <_strtod_l+0x778>
 8007f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dd23      	ble.n	8007fa2 <_strtod_l+0x78a>
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007f5e:	9805      	ldr	r0, [sp, #20]
 8007f60:	f7ff f986 	bl	8007270 <__pow5mult>
 8007f64:	4681      	mov	r9, r0
 8007f66:	b9e0      	cbnz	r0, 8007fa2 <_strtod_l+0x78a>
 8007f68:	f04f 0900 	mov.w	r9, #0
 8007f6c:	e677      	b.n	8007c5e <_strtod_l+0x446>
 8007f6e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f72:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f76:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007f7a:	35e2      	adds	r5, #226	@ 0xe2
 8007f7c:	fa01 f305 	lsl.w	r3, r1, r5
 8007f80:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f82:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f84:	e7ba      	b.n	8007efc <_strtod_l+0x6e4>
 8007f86:	2300      	movs	r3, #0
 8007f88:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f8e:	e7b5      	b.n	8007efc <_strtod_l+0x6e4>
 8007f90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f92:	9805      	ldr	r0, [sp, #20]
 8007f94:	462a      	mov	r2, r5
 8007f96:	f7ff f9c5 	bl	8007324 <__lshift>
 8007f9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d1d9      	bne.n	8007f54 <_strtod_l+0x73c>
 8007fa0:	e65d      	b.n	8007c5e <_strtod_l+0x446>
 8007fa2:	2e00      	cmp	r6, #0
 8007fa4:	dd07      	ble.n	8007fb6 <_strtod_l+0x79e>
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	9805      	ldr	r0, [sp, #20]
 8007faa:	4632      	mov	r2, r6
 8007fac:	f7ff f9ba 	bl	8007324 <__lshift>
 8007fb0:	4681      	mov	r9, r0
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0d8      	beq.n	8007f68 <_strtod_l+0x750>
 8007fb6:	2f00      	cmp	r7, #0
 8007fb8:	dd08      	ble.n	8007fcc <_strtod_l+0x7b4>
 8007fba:	4641      	mov	r1, r8
 8007fbc:	9805      	ldr	r0, [sp, #20]
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	f7ff f9b0 	bl	8007324 <__lshift>
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f43f ae49 	beq.w	8007c5e <_strtod_l+0x446>
 8007fcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fce:	9805      	ldr	r0, [sp, #20]
 8007fd0:	464a      	mov	r2, r9
 8007fd2:	f7ff fa2f 	bl	8007434 <__mdiff>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f43f ae40 	beq.w	8007c5e <_strtod_l+0x446>
 8007fde:	68c3      	ldr	r3, [r0, #12]
 8007fe0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60c3      	str	r3, [r0, #12]
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	f7ff fa08 	bl	80073fc <__mcmp>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	da45      	bge.n	800807c <_strtod_l+0x864>
 8007ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ff2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ff6:	d16b      	bne.n	80080d0 <_strtod_l+0x8b8>
 8007ff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d167      	bne.n	80080d0 <_strtod_l+0x8b8>
 8008000:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008004:	0d1b      	lsrs	r3, r3, #20
 8008006:	051b      	lsls	r3, r3, #20
 8008008:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800800c:	d960      	bls.n	80080d0 <_strtod_l+0x8b8>
 800800e:	6963      	ldr	r3, [r4, #20]
 8008010:	b913      	cbnz	r3, 8008018 <_strtod_l+0x800>
 8008012:	6923      	ldr	r3, [r4, #16]
 8008014:	2b01      	cmp	r3, #1
 8008016:	dd5b      	ble.n	80080d0 <_strtod_l+0x8b8>
 8008018:	4621      	mov	r1, r4
 800801a:	2201      	movs	r2, #1
 800801c:	9805      	ldr	r0, [sp, #20]
 800801e:	f7ff f981 	bl	8007324 <__lshift>
 8008022:	4641      	mov	r1, r8
 8008024:	4604      	mov	r4, r0
 8008026:	f7ff f9e9 	bl	80073fc <__mcmp>
 800802a:	2800      	cmp	r0, #0
 800802c:	dd50      	ble.n	80080d0 <_strtod_l+0x8b8>
 800802e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008032:	9a08      	ldr	r2, [sp, #32]
 8008034:	0d1b      	lsrs	r3, r3, #20
 8008036:	051b      	lsls	r3, r3, #20
 8008038:	2a00      	cmp	r2, #0
 800803a:	d06a      	beq.n	8008112 <_strtod_l+0x8fa>
 800803c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008040:	d867      	bhi.n	8008112 <_strtod_l+0x8fa>
 8008042:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008046:	f67f ae9d 	bls.w	8007d84 <_strtod_l+0x56c>
 800804a:	4b0a      	ldr	r3, [pc, #40]	@ (8008074 <_strtod_l+0x85c>)
 800804c:	4650      	mov	r0, sl
 800804e:	4659      	mov	r1, fp
 8008050:	2200      	movs	r2, #0
 8008052:	f7f8 fab1 	bl	80005b8 <__aeabi_dmul>
 8008056:	4b08      	ldr	r3, [pc, #32]	@ (8008078 <_strtod_l+0x860>)
 8008058:	400b      	ands	r3, r1
 800805a:	4682      	mov	sl, r0
 800805c:	468b      	mov	fp, r1
 800805e:	2b00      	cmp	r3, #0
 8008060:	f47f ae08 	bne.w	8007c74 <_strtod_l+0x45c>
 8008064:	9a05      	ldr	r2, [sp, #20]
 8008066:	2322      	movs	r3, #34	@ 0x22
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	e603      	b.n	8007c74 <_strtod_l+0x45c>
 800806c:	08009c18 	.word	0x08009c18
 8008070:	fffffc02 	.word	0xfffffc02
 8008074:	39500000 	.word	0x39500000
 8008078:	7ff00000 	.word	0x7ff00000
 800807c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008080:	d165      	bne.n	800814e <_strtod_l+0x936>
 8008082:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008088:	b35a      	cbz	r2, 80080e2 <_strtod_l+0x8ca>
 800808a:	4a9f      	ldr	r2, [pc, #636]	@ (8008308 <_strtod_l+0xaf0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d12b      	bne.n	80080e8 <_strtod_l+0x8d0>
 8008090:	9b08      	ldr	r3, [sp, #32]
 8008092:	4651      	mov	r1, sl
 8008094:	b303      	cbz	r3, 80080d8 <_strtod_l+0x8c0>
 8008096:	4b9d      	ldr	r3, [pc, #628]	@ (800830c <_strtod_l+0xaf4>)
 8008098:	465a      	mov	r2, fp
 800809a:	4013      	ands	r3, r2
 800809c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80080a0:	f04f 32ff 	mov.w	r2, #4294967295
 80080a4:	d81b      	bhi.n	80080de <_strtod_l+0x8c6>
 80080a6:	0d1b      	lsrs	r3, r3, #20
 80080a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	4299      	cmp	r1, r3
 80080b2:	d119      	bne.n	80080e8 <_strtod_l+0x8d0>
 80080b4:	4b96      	ldr	r3, [pc, #600]	@ (8008310 <_strtod_l+0xaf8>)
 80080b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d102      	bne.n	80080c2 <_strtod_l+0x8aa>
 80080bc:	3101      	adds	r1, #1
 80080be:	f43f adce 	beq.w	8007c5e <_strtod_l+0x446>
 80080c2:	4b92      	ldr	r3, [pc, #584]	@ (800830c <_strtod_l+0xaf4>)
 80080c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080c6:	401a      	ands	r2, r3
 80080c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80080cc:	f04f 0a00 	mov.w	sl, #0
 80080d0:	9b08      	ldr	r3, [sp, #32]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1b9      	bne.n	800804a <_strtod_l+0x832>
 80080d6:	e5cd      	b.n	8007c74 <_strtod_l+0x45c>
 80080d8:	f04f 33ff 	mov.w	r3, #4294967295
 80080dc:	e7e8      	b.n	80080b0 <_strtod_l+0x898>
 80080de:	4613      	mov	r3, r2
 80080e0:	e7e6      	b.n	80080b0 <_strtod_l+0x898>
 80080e2:	ea53 030a 	orrs.w	r3, r3, sl
 80080e6:	d0a2      	beq.n	800802e <_strtod_l+0x816>
 80080e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080ea:	b1db      	cbz	r3, 8008124 <_strtod_l+0x90c>
 80080ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080ee:	4213      	tst	r3, r2
 80080f0:	d0ee      	beq.n	80080d0 <_strtod_l+0x8b8>
 80080f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080f4:	9a08      	ldr	r2, [sp, #32]
 80080f6:	4650      	mov	r0, sl
 80080f8:	4659      	mov	r1, fp
 80080fa:	b1bb      	cbz	r3, 800812c <_strtod_l+0x914>
 80080fc:	f7ff fb6c 	bl	80077d8 <sulp>
 8008100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008104:	ec53 2b10 	vmov	r2, r3, d0
 8008108:	f7f8 f8a0 	bl	800024c <__adddf3>
 800810c:	4682      	mov	sl, r0
 800810e:	468b      	mov	fp, r1
 8008110:	e7de      	b.n	80080d0 <_strtod_l+0x8b8>
 8008112:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008116:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800811a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800811e:	f04f 3aff 	mov.w	sl, #4294967295
 8008122:	e7d5      	b.n	80080d0 <_strtod_l+0x8b8>
 8008124:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008126:	ea13 0f0a 	tst.w	r3, sl
 800812a:	e7e1      	b.n	80080f0 <_strtod_l+0x8d8>
 800812c:	f7ff fb54 	bl	80077d8 <sulp>
 8008130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008134:	ec53 2b10 	vmov	r2, r3, d0
 8008138:	f7f8 f886 	bl	8000248 <__aeabi_dsub>
 800813c:	2200      	movs	r2, #0
 800813e:	2300      	movs	r3, #0
 8008140:	4682      	mov	sl, r0
 8008142:	468b      	mov	fp, r1
 8008144:	f7f8 fca0 	bl	8000a88 <__aeabi_dcmpeq>
 8008148:	2800      	cmp	r0, #0
 800814a:	d0c1      	beq.n	80080d0 <_strtod_l+0x8b8>
 800814c:	e61a      	b.n	8007d84 <_strtod_l+0x56c>
 800814e:	4641      	mov	r1, r8
 8008150:	4620      	mov	r0, r4
 8008152:	f7ff facb 	bl	80076ec <__ratio>
 8008156:	ec57 6b10 	vmov	r6, r7, d0
 800815a:	2200      	movs	r2, #0
 800815c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008160:	4630      	mov	r0, r6
 8008162:	4639      	mov	r1, r7
 8008164:	f7f8 fca4 	bl	8000ab0 <__aeabi_dcmple>
 8008168:	2800      	cmp	r0, #0
 800816a:	d06f      	beq.n	800824c <_strtod_l+0xa34>
 800816c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d17a      	bne.n	8008268 <_strtod_l+0xa50>
 8008172:	f1ba 0f00 	cmp.w	sl, #0
 8008176:	d158      	bne.n	800822a <_strtod_l+0xa12>
 8008178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800817a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800817e:	2b00      	cmp	r3, #0
 8008180:	d15a      	bne.n	8008238 <_strtod_l+0xa20>
 8008182:	4b64      	ldr	r3, [pc, #400]	@ (8008314 <_strtod_l+0xafc>)
 8008184:	2200      	movs	r2, #0
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 fc87 	bl	8000a9c <__aeabi_dcmplt>
 800818e:	2800      	cmp	r0, #0
 8008190:	d159      	bne.n	8008246 <_strtod_l+0xa2e>
 8008192:	4630      	mov	r0, r6
 8008194:	4639      	mov	r1, r7
 8008196:	4b60      	ldr	r3, [pc, #384]	@ (8008318 <_strtod_l+0xb00>)
 8008198:	2200      	movs	r2, #0
 800819a:	f7f8 fa0d 	bl	80005b8 <__aeabi_dmul>
 800819e:	4606      	mov	r6, r0
 80081a0:	460f      	mov	r7, r1
 80081a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80081a6:	9606      	str	r6, [sp, #24]
 80081a8:	9307      	str	r3, [sp, #28]
 80081aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081ae:	4d57      	ldr	r5, [pc, #348]	@ (800830c <_strtod_l+0xaf4>)
 80081b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b6:	401d      	ands	r5, r3
 80081b8:	4b58      	ldr	r3, [pc, #352]	@ (800831c <_strtod_l+0xb04>)
 80081ba:	429d      	cmp	r5, r3
 80081bc:	f040 80b2 	bne.w	8008324 <_strtod_l+0xb0c>
 80081c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80081c6:	ec4b ab10 	vmov	d0, sl, fp
 80081ca:	f7ff f9c7 	bl	800755c <__ulp>
 80081ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081d2:	ec51 0b10 	vmov	r0, r1, d0
 80081d6:	f7f8 f9ef 	bl	80005b8 <__aeabi_dmul>
 80081da:	4652      	mov	r2, sl
 80081dc:	465b      	mov	r3, fp
 80081de:	f7f8 f835 	bl	800024c <__adddf3>
 80081e2:	460b      	mov	r3, r1
 80081e4:	4949      	ldr	r1, [pc, #292]	@ (800830c <_strtod_l+0xaf4>)
 80081e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008320 <_strtod_l+0xb08>)
 80081e8:	4019      	ands	r1, r3
 80081ea:	4291      	cmp	r1, r2
 80081ec:	4682      	mov	sl, r0
 80081ee:	d942      	bls.n	8008276 <_strtod_l+0xa5e>
 80081f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081f2:	4b47      	ldr	r3, [pc, #284]	@ (8008310 <_strtod_l+0xaf8>)
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d103      	bne.n	8008200 <_strtod_l+0x9e8>
 80081f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081fa:	3301      	adds	r3, #1
 80081fc:	f43f ad2f 	beq.w	8007c5e <_strtod_l+0x446>
 8008200:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008310 <_strtod_l+0xaf8>
 8008204:	f04f 3aff 	mov.w	sl, #4294967295
 8008208:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800820a:	9805      	ldr	r0, [sp, #20]
 800820c:	f7fe fe7a 	bl	8006f04 <_Bfree>
 8008210:	9805      	ldr	r0, [sp, #20]
 8008212:	4649      	mov	r1, r9
 8008214:	f7fe fe76 	bl	8006f04 <_Bfree>
 8008218:	9805      	ldr	r0, [sp, #20]
 800821a:	4641      	mov	r1, r8
 800821c:	f7fe fe72 	bl	8006f04 <_Bfree>
 8008220:	9805      	ldr	r0, [sp, #20]
 8008222:	4621      	mov	r1, r4
 8008224:	f7fe fe6e 	bl	8006f04 <_Bfree>
 8008228:	e619      	b.n	8007e5e <_strtod_l+0x646>
 800822a:	f1ba 0f01 	cmp.w	sl, #1
 800822e:	d103      	bne.n	8008238 <_strtod_l+0xa20>
 8008230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008232:	2b00      	cmp	r3, #0
 8008234:	f43f ada6 	beq.w	8007d84 <_strtod_l+0x56c>
 8008238:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80082e8 <_strtod_l+0xad0>
 800823c:	4f35      	ldr	r7, [pc, #212]	@ (8008314 <_strtod_l+0xafc>)
 800823e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008242:	2600      	movs	r6, #0
 8008244:	e7b1      	b.n	80081aa <_strtod_l+0x992>
 8008246:	4f34      	ldr	r7, [pc, #208]	@ (8008318 <_strtod_l+0xb00>)
 8008248:	2600      	movs	r6, #0
 800824a:	e7aa      	b.n	80081a2 <_strtod_l+0x98a>
 800824c:	4b32      	ldr	r3, [pc, #200]	@ (8008318 <_strtod_l+0xb00>)
 800824e:	4630      	mov	r0, r6
 8008250:	4639      	mov	r1, r7
 8008252:	2200      	movs	r2, #0
 8008254:	f7f8 f9b0 	bl	80005b8 <__aeabi_dmul>
 8008258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d09f      	beq.n	80081a2 <_strtod_l+0x98a>
 8008262:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008266:	e7a0      	b.n	80081aa <_strtod_l+0x992>
 8008268:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80082f0 <_strtod_l+0xad8>
 800826c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008270:	ec57 6b17 	vmov	r6, r7, d7
 8008274:	e799      	b.n	80081aa <_strtod_l+0x992>
 8008276:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1c1      	bne.n	8008208 <_strtod_l+0x9f0>
 8008284:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008288:	0d1b      	lsrs	r3, r3, #20
 800828a:	051b      	lsls	r3, r3, #20
 800828c:	429d      	cmp	r5, r3
 800828e:	d1bb      	bne.n	8008208 <_strtod_l+0x9f0>
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f001 f962 	bl	800955c <__aeabi_d2lz>
 8008298:	f7f8 f960 	bl	800055c <__aeabi_l2d>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4630      	mov	r0, r6
 80082a2:	4639      	mov	r1, r7
 80082a4:	f7f7 ffd0 	bl	8000248 <__aeabi_dsub>
 80082a8:	460b      	mov	r3, r1
 80082aa:	4602      	mov	r2, r0
 80082ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80082b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80082b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082b6:	ea46 060a 	orr.w	r6, r6, sl
 80082ba:	431e      	orrs	r6, r3
 80082bc:	d06f      	beq.n	800839e <_strtod_l+0xb86>
 80082be:	a30e      	add	r3, pc, #56	@ (adr r3, 80082f8 <_strtod_l+0xae0>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f8 fbea 	bl	8000a9c <__aeabi_dcmplt>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	f47f acd3 	bne.w	8007c74 <_strtod_l+0x45c>
 80082ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8008300 <_strtod_l+0xae8>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082d8:	f7f8 fbfe 	bl	8000ad8 <__aeabi_dcmpgt>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d093      	beq.n	8008208 <_strtod_l+0x9f0>
 80082e0:	e4c8      	b.n	8007c74 <_strtod_l+0x45c>
 80082e2:	bf00      	nop
 80082e4:	f3af 8000 	nop.w
 80082e8:	00000000 	.word	0x00000000
 80082ec:	bff00000 	.word	0xbff00000
 80082f0:	00000000 	.word	0x00000000
 80082f4:	3ff00000 	.word	0x3ff00000
 80082f8:	94a03595 	.word	0x94a03595
 80082fc:	3fdfffff 	.word	0x3fdfffff
 8008300:	35afe535 	.word	0x35afe535
 8008304:	3fe00000 	.word	0x3fe00000
 8008308:	000fffff 	.word	0x000fffff
 800830c:	7ff00000 	.word	0x7ff00000
 8008310:	7fefffff 	.word	0x7fefffff
 8008314:	3ff00000 	.word	0x3ff00000
 8008318:	3fe00000 	.word	0x3fe00000
 800831c:	7fe00000 	.word	0x7fe00000
 8008320:	7c9fffff 	.word	0x7c9fffff
 8008324:	9b08      	ldr	r3, [sp, #32]
 8008326:	b323      	cbz	r3, 8008372 <_strtod_l+0xb5a>
 8008328:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800832c:	d821      	bhi.n	8008372 <_strtod_l+0xb5a>
 800832e:	a328      	add	r3, pc, #160	@ (adr r3, 80083d0 <_strtod_l+0xbb8>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	f7f8 fbba 	bl	8000ab0 <__aeabi_dcmple>
 800833c:	b1a0      	cbz	r0, 8008368 <_strtod_l+0xb50>
 800833e:	4639      	mov	r1, r7
 8008340:	4630      	mov	r0, r6
 8008342:	f7f8 fc11 	bl	8000b68 <__aeabi_d2uiz>
 8008346:	2801      	cmp	r0, #1
 8008348:	bf38      	it	cc
 800834a:	2001      	movcc	r0, #1
 800834c:	f7f8 f8ba 	bl	80004c4 <__aeabi_ui2d>
 8008350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	b9fb      	cbnz	r3, 8008398 <_strtod_l+0xb80>
 8008358:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800835c:	9014      	str	r0, [sp, #80]	@ 0x50
 800835e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008360:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008364:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008368:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800836a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800836e:	1b5b      	subs	r3, r3, r5
 8008370:	9311      	str	r3, [sp, #68]	@ 0x44
 8008372:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008376:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800837a:	f7ff f8ef 	bl	800755c <__ulp>
 800837e:	4650      	mov	r0, sl
 8008380:	ec53 2b10 	vmov	r2, r3, d0
 8008384:	4659      	mov	r1, fp
 8008386:	f7f8 f917 	bl	80005b8 <__aeabi_dmul>
 800838a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800838e:	f7f7 ff5d 	bl	800024c <__adddf3>
 8008392:	4682      	mov	sl, r0
 8008394:	468b      	mov	fp, r1
 8008396:	e770      	b.n	800827a <_strtod_l+0xa62>
 8008398:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800839c:	e7e0      	b.n	8008360 <_strtod_l+0xb48>
 800839e:	a30e      	add	r3, pc, #56	@ (adr r3, 80083d8 <_strtod_l+0xbc0>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f8 fb7a 	bl	8000a9c <__aeabi_dcmplt>
 80083a8:	e798      	b.n	80082dc <_strtod_l+0xac4>
 80083aa:	2300      	movs	r3, #0
 80083ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80083ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80083b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	f7ff ba6d 	b.w	8007892 <_strtod_l+0x7a>
 80083b8:	2a65      	cmp	r2, #101	@ 0x65
 80083ba:	f43f ab68 	beq.w	8007a8e <_strtod_l+0x276>
 80083be:	2a45      	cmp	r2, #69	@ 0x45
 80083c0:	f43f ab65 	beq.w	8007a8e <_strtod_l+0x276>
 80083c4:	2301      	movs	r3, #1
 80083c6:	f7ff bba0 	b.w	8007b0a <_strtod_l+0x2f2>
 80083ca:	bf00      	nop
 80083cc:	f3af 8000 	nop.w
 80083d0:	ffc00000 	.word	0xffc00000
 80083d4:	41dfffff 	.word	0x41dfffff
 80083d8:	94a03595 	.word	0x94a03595
 80083dc:	3fcfffff 	.word	0x3fcfffff

080083e0 <_strtod_r>:
 80083e0:	4b01      	ldr	r3, [pc, #4]	@ (80083e8 <_strtod_r+0x8>)
 80083e2:	f7ff ba19 	b.w	8007818 <_strtod_l>
 80083e6:	bf00      	nop
 80083e8:	20000068 	.word	0x20000068

080083ec <_strtol_l.isra.0>:
 80083ec:	2b24      	cmp	r3, #36	@ 0x24
 80083ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f2:	4686      	mov	lr, r0
 80083f4:	4690      	mov	r8, r2
 80083f6:	d801      	bhi.n	80083fc <_strtol_l.isra.0+0x10>
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d106      	bne.n	800840a <_strtol_l.isra.0+0x1e>
 80083fc:	f7fd fdcc 	bl	8005f98 <__errno>
 8008400:	2316      	movs	r3, #22
 8008402:	6003      	str	r3, [r0, #0]
 8008404:	2000      	movs	r0, #0
 8008406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840a:	4834      	ldr	r0, [pc, #208]	@ (80084dc <_strtol_l.isra.0+0xf0>)
 800840c:	460d      	mov	r5, r1
 800840e:	462a      	mov	r2, r5
 8008410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008414:	5d06      	ldrb	r6, [r0, r4]
 8008416:	f016 0608 	ands.w	r6, r6, #8
 800841a:	d1f8      	bne.n	800840e <_strtol_l.isra.0+0x22>
 800841c:	2c2d      	cmp	r4, #45	@ 0x2d
 800841e:	d110      	bne.n	8008442 <_strtol_l.isra.0+0x56>
 8008420:	782c      	ldrb	r4, [r5, #0]
 8008422:	2601      	movs	r6, #1
 8008424:	1c95      	adds	r5, r2, #2
 8008426:	f033 0210 	bics.w	r2, r3, #16
 800842a:	d115      	bne.n	8008458 <_strtol_l.isra.0+0x6c>
 800842c:	2c30      	cmp	r4, #48	@ 0x30
 800842e:	d10d      	bne.n	800844c <_strtol_l.isra.0+0x60>
 8008430:	782a      	ldrb	r2, [r5, #0]
 8008432:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008436:	2a58      	cmp	r2, #88	@ 0x58
 8008438:	d108      	bne.n	800844c <_strtol_l.isra.0+0x60>
 800843a:	786c      	ldrb	r4, [r5, #1]
 800843c:	3502      	adds	r5, #2
 800843e:	2310      	movs	r3, #16
 8008440:	e00a      	b.n	8008458 <_strtol_l.isra.0+0x6c>
 8008442:	2c2b      	cmp	r4, #43	@ 0x2b
 8008444:	bf04      	itt	eq
 8008446:	782c      	ldrbeq	r4, [r5, #0]
 8008448:	1c95      	addeq	r5, r2, #2
 800844a:	e7ec      	b.n	8008426 <_strtol_l.isra.0+0x3a>
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f6      	bne.n	800843e <_strtol_l.isra.0+0x52>
 8008450:	2c30      	cmp	r4, #48	@ 0x30
 8008452:	bf14      	ite	ne
 8008454:	230a      	movne	r3, #10
 8008456:	2308      	moveq	r3, #8
 8008458:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800845c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008460:	2200      	movs	r2, #0
 8008462:	fbbc f9f3 	udiv	r9, ip, r3
 8008466:	4610      	mov	r0, r2
 8008468:	fb03 ca19 	mls	sl, r3, r9, ip
 800846c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008470:	2f09      	cmp	r7, #9
 8008472:	d80f      	bhi.n	8008494 <_strtol_l.isra.0+0xa8>
 8008474:	463c      	mov	r4, r7
 8008476:	42a3      	cmp	r3, r4
 8008478:	dd1b      	ble.n	80084b2 <_strtol_l.isra.0+0xc6>
 800847a:	1c57      	adds	r7, r2, #1
 800847c:	d007      	beq.n	800848e <_strtol_l.isra.0+0xa2>
 800847e:	4581      	cmp	r9, r0
 8008480:	d314      	bcc.n	80084ac <_strtol_l.isra.0+0xc0>
 8008482:	d101      	bne.n	8008488 <_strtol_l.isra.0+0x9c>
 8008484:	45a2      	cmp	sl, r4
 8008486:	db11      	blt.n	80084ac <_strtol_l.isra.0+0xc0>
 8008488:	fb00 4003 	mla	r0, r0, r3, r4
 800848c:	2201      	movs	r2, #1
 800848e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008492:	e7eb      	b.n	800846c <_strtol_l.isra.0+0x80>
 8008494:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008498:	2f19      	cmp	r7, #25
 800849a:	d801      	bhi.n	80084a0 <_strtol_l.isra.0+0xb4>
 800849c:	3c37      	subs	r4, #55	@ 0x37
 800849e:	e7ea      	b.n	8008476 <_strtol_l.isra.0+0x8a>
 80084a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80084a4:	2f19      	cmp	r7, #25
 80084a6:	d804      	bhi.n	80084b2 <_strtol_l.isra.0+0xc6>
 80084a8:	3c57      	subs	r4, #87	@ 0x57
 80084aa:	e7e4      	b.n	8008476 <_strtol_l.isra.0+0x8a>
 80084ac:	f04f 32ff 	mov.w	r2, #4294967295
 80084b0:	e7ed      	b.n	800848e <_strtol_l.isra.0+0xa2>
 80084b2:	1c53      	adds	r3, r2, #1
 80084b4:	d108      	bne.n	80084c8 <_strtol_l.isra.0+0xdc>
 80084b6:	2322      	movs	r3, #34	@ 0x22
 80084b8:	f8ce 3000 	str.w	r3, [lr]
 80084bc:	4660      	mov	r0, ip
 80084be:	f1b8 0f00 	cmp.w	r8, #0
 80084c2:	d0a0      	beq.n	8008406 <_strtol_l.isra.0+0x1a>
 80084c4:	1e69      	subs	r1, r5, #1
 80084c6:	e006      	b.n	80084d6 <_strtol_l.isra.0+0xea>
 80084c8:	b106      	cbz	r6, 80084cc <_strtol_l.isra.0+0xe0>
 80084ca:	4240      	negs	r0, r0
 80084cc:	f1b8 0f00 	cmp.w	r8, #0
 80084d0:	d099      	beq.n	8008406 <_strtol_l.isra.0+0x1a>
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	d1f6      	bne.n	80084c4 <_strtol_l.isra.0+0xd8>
 80084d6:	f8c8 1000 	str.w	r1, [r8]
 80084da:	e794      	b.n	8008406 <_strtol_l.isra.0+0x1a>
 80084dc:	08009c41 	.word	0x08009c41

080084e0 <_strtol_r>:
 80084e0:	f7ff bf84 	b.w	80083ec <_strtol_l.isra.0>

080084e4 <__ssputs_r>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	688e      	ldr	r6, [r1, #8]
 80084ea:	461f      	mov	r7, r3
 80084ec:	42be      	cmp	r6, r7
 80084ee:	680b      	ldr	r3, [r1, #0]
 80084f0:	4682      	mov	sl, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	4690      	mov	r8, r2
 80084f6:	d82d      	bhi.n	8008554 <__ssputs_r+0x70>
 80084f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008500:	d026      	beq.n	8008550 <__ssputs_r+0x6c>
 8008502:	6965      	ldr	r5, [r4, #20]
 8008504:	6909      	ldr	r1, [r1, #16]
 8008506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800850a:	eba3 0901 	sub.w	r9, r3, r1
 800850e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008512:	1c7b      	adds	r3, r7, #1
 8008514:	444b      	add	r3, r9
 8008516:	106d      	asrs	r5, r5, #1
 8008518:	429d      	cmp	r5, r3
 800851a:	bf38      	it	cc
 800851c:	461d      	movcc	r5, r3
 800851e:	0553      	lsls	r3, r2, #21
 8008520:	d527      	bpl.n	8008572 <__ssputs_r+0x8e>
 8008522:	4629      	mov	r1, r5
 8008524:	f7fe fc22 	bl	8006d6c <_malloc_r>
 8008528:	4606      	mov	r6, r0
 800852a:	b360      	cbz	r0, 8008586 <__ssputs_r+0xa2>
 800852c:	6921      	ldr	r1, [r4, #16]
 800852e:	464a      	mov	r2, r9
 8008530:	f000 fbde 	bl	8008cf0 <memcpy>
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800853a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800853e:	81a3      	strh	r3, [r4, #12]
 8008540:	6126      	str	r6, [r4, #16]
 8008542:	6165      	str	r5, [r4, #20]
 8008544:	444e      	add	r6, r9
 8008546:	eba5 0509 	sub.w	r5, r5, r9
 800854a:	6026      	str	r6, [r4, #0]
 800854c:	60a5      	str	r5, [r4, #8]
 800854e:	463e      	mov	r6, r7
 8008550:	42be      	cmp	r6, r7
 8008552:	d900      	bls.n	8008556 <__ssputs_r+0x72>
 8008554:	463e      	mov	r6, r7
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	4632      	mov	r2, r6
 800855a:	4641      	mov	r1, r8
 800855c:	f000 fb6a 	bl	8008c34 <memmove>
 8008560:	68a3      	ldr	r3, [r4, #8]
 8008562:	1b9b      	subs	r3, r3, r6
 8008564:	60a3      	str	r3, [r4, #8]
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	4433      	add	r3, r6
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	2000      	movs	r0, #0
 800856e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008572:	462a      	mov	r2, r5
 8008574:	f000 ff51 	bl	800941a <_realloc_r>
 8008578:	4606      	mov	r6, r0
 800857a:	2800      	cmp	r0, #0
 800857c:	d1e0      	bne.n	8008540 <__ssputs_r+0x5c>
 800857e:	6921      	ldr	r1, [r4, #16]
 8008580:	4650      	mov	r0, sl
 8008582:	f7fe fb7f 	bl	8006c84 <_free_r>
 8008586:	230c      	movs	r3, #12
 8008588:	f8ca 3000 	str.w	r3, [sl]
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	e7e9      	b.n	800856e <__ssputs_r+0x8a>
	...

0800859c <_svfiprintf_r>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	4698      	mov	r8, r3
 80085a2:	898b      	ldrh	r3, [r1, #12]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	b09d      	sub	sp, #116	@ 0x74
 80085a8:	4607      	mov	r7, r0
 80085aa:	460d      	mov	r5, r1
 80085ac:	4614      	mov	r4, r2
 80085ae:	d510      	bpl.n	80085d2 <_svfiprintf_r+0x36>
 80085b0:	690b      	ldr	r3, [r1, #16]
 80085b2:	b973      	cbnz	r3, 80085d2 <_svfiprintf_r+0x36>
 80085b4:	2140      	movs	r1, #64	@ 0x40
 80085b6:	f7fe fbd9 	bl	8006d6c <_malloc_r>
 80085ba:	6028      	str	r0, [r5, #0]
 80085bc:	6128      	str	r0, [r5, #16]
 80085be:	b930      	cbnz	r0, 80085ce <_svfiprintf_r+0x32>
 80085c0:	230c      	movs	r3, #12
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	b01d      	add	sp, #116	@ 0x74
 80085ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ce:	2340      	movs	r3, #64	@ 0x40
 80085d0:	616b      	str	r3, [r5, #20]
 80085d2:	2300      	movs	r3, #0
 80085d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d6:	2320      	movs	r3, #32
 80085d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e0:	2330      	movs	r3, #48	@ 0x30
 80085e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008780 <_svfiprintf_r+0x1e4>
 80085e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ea:	f04f 0901 	mov.w	r9, #1
 80085ee:	4623      	mov	r3, r4
 80085f0:	469a      	mov	sl, r3
 80085f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f6:	b10a      	cbz	r2, 80085fc <_svfiprintf_r+0x60>
 80085f8:	2a25      	cmp	r2, #37	@ 0x25
 80085fa:	d1f9      	bne.n	80085f0 <_svfiprintf_r+0x54>
 80085fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008600:	d00b      	beq.n	800861a <_svfiprintf_r+0x7e>
 8008602:	465b      	mov	r3, fp
 8008604:	4622      	mov	r2, r4
 8008606:	4629      	mov	r1, r5
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff ff6b 	bl	80084e4 <__ssputs_r>
 800860e:	3001      	adds	r0, #1
 8008610:	f000 80a7 	beq.w	8008762 <_svfiprintf_r+0x1c6>
 8008614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008616:	445a      	add	r2, fp
 8008618:	9209      	str	r2, [sp, #36]	@ 0x24
 800861a:	f89a 3000 	ldrb.w	r3, [sl]
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 809f 	beq.w	8008762 <_svfiprintf_r+0x1c6>
 8008624:	2300      	movs	r3, #0
 8008626:	f04f 32ff 	mov.w	r2, #4294967295
 800862a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862e:	f10a 0a01 	add.w	sl, sl, #1
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	9307      	str	r3, [sp, #28]
 8008636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800863a:	931a      	str	r3, [sp, #104]	@ 0x68
 800863c:	4654      	mov	r4, sl
 800863e:	2205      	movs	r2, #5
 8008640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008644:	484e      	ldr	r0, [pc, #312]	@ (8008780 <_svfiprintf_r+0x1e4>)
 8008646:	f7f7 fda3 	bl	8000190 <memchr>
 800864a:	9a04      	ldr	r2, [sp, #16]
 800864c:	b9d8      	cbnz	r0, 8008686 <_svfiprintf_r+0xea>
 800864e:	06d0      	lsls	r0, r2, #27
 8008650:	bf44      	itt	mi
 8008652:	2320      	movmi	r3, #32
 8008654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008658:	0711      	lsls	r1, r2, #28
 800865a:	bf44      	itt	mi
 800865c:	232b      	movmi	r3, #43	@ 0x2b
 800865e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008662:	f89a 3000 	ldrb.w	r3, [sl]
 8008666:	2b2a      	cmp	r3, #42	@ 0x2a
 8008668:	d015      	beq.n	8008696 <_svfiprintf_r+0xfa>
 800866a:	9a07      	ldr	r2, [sp, #28]
 800866c:	4654      	mov	r4, sl
 800866e:	2000      	movs	r0, #0
 8008670:	f04f 0c0a 	mov.w	ip, #10
 8008674:	4621      	mov	r1, r4
 8008676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800867a:	3b30      	subs	r3, #48	@ 0x30
 800867c:	2b09      	cmp	r3, #9
 800867e:	d94b      	bls.n	8008718 <_svfiprintf_r+0x17c>
 8008680:	b1b0      	cbz	r0, 80086b0 <_svfiprintf_r+0x114>
 8008682:	9207      	str	r2, [sp, #28]
 8008684:	e014      	b.n	80086b0 <_svfiprintf_r+0x114>
 8008686:	eba0 0308 	sub.w	r3, r0, r8
 800868a:	fa09 f303 	lsl.w	r3, r9, r3
 800868e:	4313      	orrs	r3, r2
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	46a2      	mov	sl, r4
 8008694:	e7d2      	b.n	800863c <_svfiprintf_r+0xa0>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	1d19      	adds	r1, r3, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	9103      	str	r1, [sp, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bfbb      	ittet	lt
 80086a2:	425b      	neglt	r3, r3
 80086a4:	f042 0202 	orrlt.w	r2, r2, #2
 80086a8:	9307      	strge	r3, [sp, #28]
 80086aa:	9307      	strlt	r3, [sp, #28]
 80086ac:	bfb8      	it	lt
 80086ae:	9204      	strlt	r2, [sp, #16]
 80086b0:	7823      	ldrb	r3, [r4, #0]
 80086b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80086b4:	d10a      	bne.n	80086cc <_svfiprintf_r+0x130>
 80086b6:	7863      	ldrb	r3, [r4, #1]
 80086b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086ba:	d132      	bne.n	8008722 <_svfiprintf_r+0x186>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	9203      	str	r2, [sp, #12]
 80086c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086c8:	3402      	adds	r4, #2
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008790 <_svfiprintf_r+0x1f4>
 80086d0:	7821      	ldrb	r1, [r4, #0]
 80086d2:	2203      	movs	r2, #3
 80086d4:	4650      	mov	r0, sl
 80086d6:	f7f7 fd5b 	bl	8000190 <memchr>
 80086da:	b138      	cbz	r0, 80086ec <_svfiprintf_r+0x150>
 80086dc:	9b04      	ldr	r3, [sp, #16]
 80086de:	eba0 000a 	sub.w	r0, r0, sl
 80086e2:	2240      	movs	r2, #64	@ 0x40
 80086e4:	4082      	lsls	r2, r0
 80086e6:	4313      	orrs	r3, r2
 80086e8:	3401      	adds	r4, #1
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f0:	4824      	ldr	r0, [pc, #144]	@ (8008784 <_svfiprintf_r+0x1e8>)
 80086f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086f6:	2206      	movs	r2, #6
 80086f8:	f7f7 fd4a 	bl	8000190 <memchr>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d036      	beq.n	800876e <_svfiprintf_r+0x1d2>
 8008700:	4b21      	ldr	r3, [pc, #132]	@ (8008788 <_svfiprintf_r+0x1ec>)
 8008702:	bb1b      	cbnz	r3, 800874c <_svfiprintf_r+0x1b0>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	3307      	adds	r3, #7
 8008708:	f023 0307 	bic.w	r3, r3, #7
 800870c:	3308      	adds	r3, #8
 800870e:	9303      	str	r3, [sp, #12]
 8008710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008712:	4433      	add	r3, r6
 8008714:	9309      	str	r3, [sp, #36]	@ 0x24
 8008716:	e76a      	b.n	80085ee <_svfiprintf_r+0x52>
 8008718:	fb0c 3202 	mla	r2, ip, r2, r3
 800871c:	460c      	mov	r4, r1
 800871e:	2001      	movs	r0, #1
 8008720:	e7a8      	b.n	8008674 <_svfiprintf_r+0xd8>
 8008722:	2300      	movs	r3, #0
 8008724:	3401      	adds	r4, #1
 8008726:	9305      	str	r3, [sp, #20]
 8008728:	4619      	mov	r1, r3
 800872a:	f04f 0c0a 	mov.w	ip, #10
 800872e:	4620      	mov	r0, r4
 8008730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008734:	3a30      	subs	r2, #48	@ 0x30
 8008736:	2a09      	cmp	r2, #9
 8008738:	d903      	bls.n	8008742 <_svfiprintf_r+0x1a6>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0c6      	beq.n	80086cc <_svfiprintf_r+0x130>
 800873e:	9105      	str	r1, [sp, #20]
 8008740:	e7c4      	b.n	80086cc <_svfiprintf_r+0x130>
 8008742:	fb0c 2101 	mla	r1, ip, r1, r2
 8008746:	4604      	mov	r4, r0
 8008748:	2301      	movs	r3, #1
 800874a:	e7f0      	b.n	800872e <_svfiprintf_r+0x192>
 800874c:	ab03      	add	r3, sp, #12
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	462a      	mov	r2, r5
 8008752:	4b0e      	ldr	r3, [pc, #56]	@ (800878c <_svfiprintf_r+0x1f0>)
 8008754:	a904      	add	r1, sp, #16
 8008756:	4638      	mov	r0, r7
 8008758:	f7fc fbd6 	bl	8004f08 <_printf_float>
 800875c:	1c42      	adds	r2, r0, #1
 800875e:	4606      	mov	r6, r0
 8008760:	d1d6      	bne.n	8008710 <_svfiprintf_r+0x174>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	065b      	lsls	r3, r3, #25
 8008766:	f53f af2d 	bmi.w	80085c4 <_svfiprintf_r+0x28>
 800876a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800876c:	e72c      	b.n	80085c8 <_svfiprintf_r+0x2c>
 800876e:	ab03      	add	r3, sp, #12
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	462a      	mov	r2, r5
 8008774:	4b05      	ldr	r3, [pc, #20]	@ (800878c <_svfiprintf_r+0x1f0>)
 8008776:	a904      	add	r1, sp, #16
 8008778:	4638      	mov	r0, r7
 800877a:	f7fc fe5d 	bl	8005438 <_printf_i>
 800877e:	e7ed      	b.n	800875c <_svfiprintf_r+0x1c0>
 8008780:	08009a3b 	.word	0x08009a3b
 8008784:	08009a45 	.word	0x08009a45
 8008788:	08004f09 	.word	0x08004f09
 800878c:	080084e5 	.word	0x080084e5
 8008790:	08009a41 	.word	0x08009a41

08008794 <__sfputc_r>:
 8008794:	6893      	ldr	r3, [r2, #8]
 8008796:	3b01      	subs	r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	b410      	push	{r4}
 800879c:	6093      	str	r3, [r2, #8]
 800879e:	da08      	bge.n	80087b2 <__sfputc_r+0x1e>
 80087a0:	6994      	ldr	r4, [r2, #24]
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	db01      	blt.n	80087aa <__sfputc_r+0x16>
 80087a6:	290a      	cmp	r1, #10
 80087a8:	d103      	bne.n	80087b2 <__sfputc_r+0x1e>
 80087aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ae:	f7fd bb0c 	b.w	8005dca <__swbuf_r>
 80087b2:	6813      	ldr	r3, [r2, #0]
 80087b4:	1c58      	adds	r0, r3, #1
 80087b6:	6010      	str	r0, [r2, #0]
 80087b8:	7019      	strb	r1, [r3, #0]
 80087ba:	4608      	mov	r0, r1
 80087bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <__sfputs_r>:
 80087c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c4:	4606      	mov	r6, r0
 80087c6:	460f      	mov	r7, r1
 80087c8:	4614      	mov	r4, r2
 80087ca:	18d5      	adds	r5, r2, r3
 80087cc:	42ac      	cmp	r4, r5
 80087ce:	d101      	bne.n	80087d4 <__sfputs_r+0x12>
 80087d0:	2000      	movs	r0, #0
 80087d2:	e007      	b.n	80087e4 <__sfputs_r+0x22>
 80087d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d8:	463a      	mov	r2, r7
 80087da:	4630      	mov	r0, r6
 80087dc:	f7ff ffda 	bl	8008794 <__sfputc_r>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d1f3      	bne.n	80087cc <__sfputs_r+0xa>
 80087e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087e8 <_vfiprintf_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	460d      	mov	r5, r1
 80087ee:	b09d      	sub	sp, #116	@ 0x74
 80087f0:	4614      	mov	r4, r2
 80087f2:	4698      	mov	r8, r3
 80087f4:	4606      	mov	r6, r0
 80087f6:	b118      	cbz	r0, 8008800 <_vfiprintf_r+0x18>
 80087f8:	6a03      	ldr	r3, [r0, #32]
 80087fa:	b90b      	cbnz	r3, 8008800 <_vfiprintf_r+0x18>
 80087fc:	f7fd f9da 	bl	8005bb4 <__sinit>
 8008800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008802:	07d9      	lsls	r1, r3, #31
 8008804:	d405      	bmi.n	8008812 <_vfiprintf_r+0x2a>
 8008806:	89ab      	ldrh	r3, [r5, #12]
 8008808:	059a      	lsls	r2, r3, #22
 800880a:	d402      	bmi.n	8008812 <_vfiprintf_r+0x2a>
 800880c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800880e:	f7fd fbee 	bl	8005fee <__retarget_lock_acquire_recursive>
 8008812:	89ab      	ldrh	r3, [r5, #12]
 8008814:	071b      	lsls	r3, r3, #28
 8008816:	d501      	bpl.n	800881c <_vfiprintf_r+0x34>
 8008818:	692b      	ldr	r3, [r5, #16]
 800881a:	b99b      	cbnz	r3, 8008844 <_vfiprintf_r+0x5c>
 800881c:	4629      	mov	r1, r5
 800881e:	4630      	mov	r0, r6
 8008820:	f7fd fb12 	bl	8005e48 <__swsetup_r>
 8008824:	b170      	cbz	r0, 8008844 <_vfiprintf_r+0x5c>
 8008826:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008828:	07dc      	lsls	r4, r3, #31
 800882a:	d504      	bpl.n	8008836 <_vfiprintf_r+0x4e>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	b01d      	add	sp, #116	@ 0x74
 8008832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	0598      	lsls	r0, r3, #22
 800883a:	d4f7      	bmi.n	800882c <_vfiprintf_r+0x44>
 800883c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800883e:	f7fd fbd7 	bl	8005ff0 <__retarget_lock_release_recursive>
 8008842:	e7f3      	b.n	800882c <_vfiprintf_r+0x44>
 8008844:	2300      	movs	r3, #0
 8008846:	9309      	str	r3, [sp, #36]	@ 0x24
 8008848:	2320      	movs	r3, #32
 800884a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800884e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008852:	2330      	movs	r3, #48	@ 0x30
 8008854:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a04 <_vfiprintf_r+0x21c>
 8008858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800885c:	f04f 0901 	mov.w	r9, #1
 8008860:	4623      	mov	r3, r4
 8008862:	469a      	mov	sl, r3
 8008864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008868:	b10a      	cbz	r2, 800886e <_vfiprintf_r+0x86>
 800886a:	2a25      	cmp	r2, #37	@ 0x25
 800886c:	d1f9      	bne.n	8008862 <_vfiprintf_r+0x7a>
 800886e:	ebba 0b04 	subs.w	fp, sl, r4
 8008872:	d00b      	beq.n	800888c <_vfiprintf_r+0xa4>
 8008874:	465b      	mov	r3, fp
 8008876:	4622      	mov	r2, r4
 8008878:	4629      	mov	r1, r5
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ffa1 	bl	80087c2 <__sfputs_r>
 8008880:	3001      	adds	r0, #1
 8008882:	f000 80a7 	beq.w	80089d4 <_vfiprintf_r+0x1ec>
 8008886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008888:	445a      	add	r2, fp
 800888a:	9209      	str	r2, [sp, #36]	@ 0x24
 800888c:	f89a 3000 	ldrb.w	r3, [sl]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 809f 	beq.w	80089d4 <_vfiprintf_r+0x1ec>
 8008896:	2300      	movs	r3, #0
 8008898:	f04f 32ff 	mov.w	r2, #4294967295
 800889c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a0:	f10a 0a01 	add.w	sl, sl, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	9307      	str	r3, [sp, #28]
 80088a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80088ae:	4654      	mov	r4, sl
 80088b0:	2205      	movs	r2, #5
 80088b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b6:	4853      	ldr	r0, [pc, #332]	@ (8008a04 <_vfiprintf_r+0x21c>)
 80088b8:	f7f7 fc6a 	bl	8000190 <memchr>
 80088bc:	9a04      	ldr	r2, [sp, #16]
 80088be:	b9d8      	cbnz	r0, 80088f8 <_vfiprintf_r+0x110>
 80088c0:	06d1      	lsls	r1, r2, #27
 80088c2:	bf44      	itt	mi
 80088c4:	2320      	movmi	r3, #32
 80088c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ca:	0713      	lsls	r3, r2, #28
 80088cc:	bf44      	itt	mi
 80088ce:	232b      	movmi	r3, #43	@ 0x2b
 80088d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d4:	f89a 3000 	ldrb.w	r3, [sl]
 80088d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088da:	d015      	beq.n	8008908 <_vfiprintf_r+0x120>
 80088dc:	9a07      	ldr	r2, [sp, #28]
 80088de:	4654      	mov	r4, sl
 80088e0:	2000      	movs	r0, #0
 80088e2:	f04f 0c0a 	mov.w	ip, #10
 80088e6:	4621      	mov	r1, r4
 80088e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ec:	3b30      	subs	r3, #48	@ 0x30
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d94b      	bls.n	800898a <_vfiprintf_r+0x1a2>
 80088f2:	b1b0      	cbz	r0, 8008922 <_vfiprintf_r+0x13a>
 80088f4:	9207      	str	r2, [sp, #28]
 80088f6:	e014      	b.n	8008922 <_vfiprintf_r+0x13a>
 80088f8:	eba0 0308 	sub.w	r3, r0, r8
 80088fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008900:	4313      	orrs	r3, r2
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	46a2      	mov	sl, r4
 8008906:	e7d2      	b.n	80088ae <_vfiprintf_r+0xc6>
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	1d19      	adds	r1, r3, #4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	9103      	str	r1, [sp, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfbb      	ittet	lt
 8008914:	425b      	neglt	r3, r3
 8008916:	f042 0202 	orrlt.w	r2, r2, #2
 800891a:	9307      	strge	r3, [sp, #28]
 800891c:	9307      	strlt	r3, [sp, #28]
 800891e:	bfb8      	it	lt
 8008920:	9204      	strlt	r2, [sp, #16]
 8008922:	7823      	ldrb	r3, [r4, #0]
 8008924:	2b2e      	cmp	r3, #46	@ 0x2e
 8008926:	d10a      	bne.n	800893e <_vfiprintf_r+0x156>
 8008928:	7863      	ldrb	r3, [r4, #1]
 800892a:	2b2a      	cmp	r3, #42	@ 0x2a
 800892c:	d132      	bne.n	8008994 <_vfiprintf_r+0x1ac>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	9203      	str	r2, [sp, #12]
 8008936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800893a:	3402      	adds	r4, #2
 800893c:	9305      	str	r3, [sp, #20]
 800893e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a14 <_vfiprintf_r+0x22c>
 8008942:	7821      	ldrb	r1, [r4, #0]
 8008944:	2203      	movs	r2, #3
 8008946:	4650      	mov	r0, sl
 8008948:	f7f7 fc22 	bl	8000190 <memchr>
 800894c:	b138      	cbz	r0, 800895e <_vfiprintf_r+0x176>
 800894e:	9b04      	ldr	r3, [sp, #16]
 8008950:	eba0 000a 	sub.w	r0, r0, sl
 8008954:	2240      	movs	r2, #64	@ 0x40
 8008956:	4082      	lsls	r2, r0
 8008958:	4313      	orrs	r3, r2
 800895a:	3401      	adds	r4, #1
 800895c:	9304      	str	r3, [sp, #16]
 800895e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008962:	4829      	ldr	r0, [pc, #164]	@ (8008a08 <_vfiprintf_r+0x220>)
 8008964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008968:	2206      	movs	r2, #6
 800896a:	f7f7 fc11 	bl	8000190 <memchr>
 800896e:	2800      	cmp	r0, #0
 8008970:	d03f      	beq.n	80089f2 <_vfiprintf_r+0x20a>
 8008972:	4b26      	ldr	r3, [pc, #152]	@ (8008a0c <_vfiprintf_r+0x224>)
 8008974:	bb1b      	cbnz	r3, 80089be <_vfiprintf_r+0x1d6>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	3307      	adds	r3, #7
 800897a:	f023 0307 	bic.w	r3, r3, #7
 800897e:	3308      	adds	r3, #8
 8008980:	9303      	str	r3, [sp, #12]
 8008982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008984:	443b      	add	r3, r7
 8008986:	9309      	str	r3, [sp, #36]	@ 0x24
 8008988:	e76a      	b.n	8008860 <_vfiprintf_r+0x78>
 800898a:	fb0c 3202 	mla	r2, ip, r2, r3
 800898e:	460c      	mov	r4, r1
 8008990:	2001      	movs	r0, #1
 8008992:	e7a8      	b.n	80088e6 <_vfiprintf_r+0xfe>
 8008994:	2300      	movs	r3, #0
 8008996:	3401      	adds	r4, #1
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	4619      	mov	r1, r3
 800899c:	f04f 0c0a 	mov.w	ip, #10
 80089a0:	4620      	mov	r0, r4
 80089a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a6:	3a30      	subs	r2, #48	@ 0x30
 80089a8:	2a09      	cmp	r2, #9
 80089aa:	d903      	bls.n	80089b4 <_vfiprintf_r+0x1cc>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0c6      	beq.n	800893e <_vfiprintf_r+0x156>
 80089b0:	9105      	str	r1, [sp, #20]
 80089b2:	e7c4      	b.n	800893e <_vfiprintf_r+0x156>
 80089b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b8:	4604      	mov	r4, r0
 80089ba:	2301      	movs	r3, #1
 80089bc:	e7f0      	b.n	80089a0 <_vfiprintf_r+0x1b8>
 80089be:	ab03      	add	r3, sp, #12
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	462a      	mov	r2, r5
 80089c4:	4b12      	ldr	r3, [pc, #72]	@ (8008a10 <_vfiprintf_r+0x228>)
 80089c6:	a904      	add	r1, sp, #16
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7fc fa9d 	bl	8004f08 <_printf_float>
 80089ce:	4607      	mov	r7, r0
 80089d0:	1c78      	adds	r0, r7, #1
 80089d2:	d1d6      	bne.n	8008982 <_vfiprintf_r+0x19a>
 80089d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089d6:	07d9      	lsls	r1, r3, #31
 80089d8:	d405      	bmi.n	80089e6 <_vfiprintf_r+0x1fe>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	059a      	lsls	r2, r3, #22
 80089de:	d402      	bmi.n	80089e6 <_vfiprintf_r+0x1fe>
 80089e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089e2:	f7fd fb05 	bl	8005ff0 <__retarget_lock_release_recursive>
 80089e6:	89ab      	ldrh	r3, [r5, #12]
 80089e8:	065b      	lsls	r3, r3, #25
 80089ea:	f53f af1f 	bmi.w	800882c <_vfiprintf_r+0x44>
 80089ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089f0:	e71e      	b.n	8008830 <_vfiprintf_r+0x48>
 80089f2:	ab03      	add	r3, sp, #12
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	462a      	mov	r2, r5
 80089f8:	4b05      	ldr	r3, [pc, #20]	@ (8008a10 <_vfiprintf_r+0x228>)
 80089fa:	a904      	add	r1, sp, #16
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7fc fd1b 	bl	8005438 <_printf_i>
 8008a02:	e7e4      	b.n	80089ce <_vfiprintf_r+0x1e6>
 8008a04:	08009a3b 	.word	0x08009a3b
 8008a08:	08009a45 	.word	0x08009a45
 8008a0c:	08004f09 	.word	0x08004f09
 8008a10:	080087c3 	.word	0x080087c3
 8008a14:	08009a41 	.word	0x08009a41

08008a18 <__sflush_r>:
 8008a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	0716      	lsls	r6, r2, #28
 8008a22:	4605      	mov	r5, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	d454      	bmi.n	8008ad2 <__sflush_r+0xba>
 8008a28:	684b      	ldr	r3, [r1, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	dc02      	bgt.n	8008a34 <__sflush_r+0x1c>
 8008a2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd48      	ble.n	8008ac6 <__sflush_r+0xae>
 8008a34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	d045      	beq.n	8008ac6 <__sflush_r+0xae>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a40:	682f      	ldr	r7, [r5, #0]
 8008a42:	6a21      	ldr	r1, [r4, #32]
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	d030      	beq.n	8008aaa <__sflush_r+0x92>
 8008a48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	0759      	lsls	r1, r3, #29
 8008a4e:	d505      	bpl.n	8008a5c <__sflush_r+0x44>
 8008a50:	6863      	ldr	r3, [r4, #4]
 8008a52:	1ad2      	subs	r2, r2, r3
 8008a54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a56:	b10b      	cbz	r3, 8008a5c <__sflush_r+0x44>
 8008a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a60:	6a21      	ldr	r1, [r4, #32]
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b0      	blx	r6
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	d106      	bne.n	8008a7a <__sflush_r+0x62>
 8008a6c:	6829      	ldr	r1, [r5, #0]
 8008a6e:	291d      	cmp	r1, #29
 8008a70:	d82b      	bhi.n	8008aca <__sflush_r+0xb2>
 8008a72:	4a2a      	ldr	r2, [pc, #168]	@ (8008b1c <__sflush_r+0x104>)
 8008a74:	40ca      	lsrs	r2, r1
 8008a76:	07d6      	lsls	r6, r2, #31
 8008a78:	d527      	bpl.n	8008aca <__sflush_r+0xb2>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6062      	str	r2, [r4, #4]
 8008a7e:	04d9      	lsls	r1, r3, #19
 8008a80:	6922      	ldr	r2, [r4, #16]
 8008a82:	6022      	str	r2, [r4, #0]
 8008a84:	d504      	bpl.n	8008a90 <__sflush_r+0x78>
 8008a86:	1c42      	adds	r2, r0, #1
 8008a88:	d101      	bne.n	8008a8e <__sflush_r+0x76>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b903      	cbnz	r3, 8008a90 <__sflush_r+0x78>
 8008a8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a92:	602f      	str	r7, [r5, #0]
 8008a94:	b1b9      	cbz	r1, 8008ac6 <__sflush_r+0xae>
 8008a96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a9a:	4299      	cmp	r1, r3
 8008a9c:	d002      	beq.n	8008aa4 <__sflush_r+0x8c>
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f7fe f8f0 	bl	8006c84 <_free_r>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aa8:	e00d      	b.n	8008ac6 <__sflush_r+0xae>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b0      	blx	r6
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	1c50      	adds	r0, r2, #1
 8008ab4:	d1c9      	bne.n	8008a4a <__sflush_r+0x32>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0c6      	beq.n	8008a4a <__sflush_r+0x32>
 8008abc:	2b1d      	cmp	r3, #29
 8008abe:	d001      	beq.n	8008ac4 <__sflush_r+0xac>
 8008ac0:	2b16      	cmp	r3, #22
 8008ac2:	d11e      	bne.n	8008b02 <__sflush_r+0xea>
 8008ac4:	602f      	str	r7, [r5, #0]
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e022      	b.n	8008b10 <__sflush_r+0xf8>
 8008aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ace:	b21b      	sxth	r3, r3
 8008ad0:	e01b      	b.n	8008b0a <__sflush_r+0xf2>
 8008ad2:	690f      	ldr	r7, [r1, #16]
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	d0f6      	beq.n	8008ac6 <__sflush_r+0xae>
 8008ad8:	0793      	lsls	r3, r2, #30
 8008ada:	680e      	ldr	r6, [r1, #0]
 8008adc:	bf08      	it	eq
 8008ade:	694b      	ldreq	r3, [r1, #20]
 8008ae0:	600f      	str	r7, [r1, #0]
 8008ae2:	bf18      	it	ne
 8008ae4:	2300      	movne	r3, #0
 8008ae6:	eba6 0807 	sub.w	r8, r6, r7
 8008aea:	608b      	str	r3, [r1, #8]
 8008aec:	f1b8 0f00 	cmp.w	r8, #0
 8008af0:	dde9      	ble.n	8008ac6 <__sflush_r+0xae>
 8008af2:	6a21      	ldr	r1, [r4, #32]
 8008af4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008af6:	4643      	mov	r3, r8
 8008af8:	463a      	mov	r2, r7
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b0      	blx	r6
 8008afe:	2800      	cmp	r0, #0
 8008b00:	dc08      	bgt.n	8008b14 <__sflush_r+0xfc>
 8008b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b14:	4407      	add	r7, r0
 8008b16:	eba8 0800 	sub.w	r8, r8, r0
 8008b1a:	e7e7      	b.n	8008aec <__sflush_r+0xd4>
 8008b1c:	20400001 	.word	0x20400001

08008b20 <_fflush_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b913      	cbnz	r3, 8008b30 <_fflush_r+0x10>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	b118      	cbz	r0, 8008b3a <_fflush_r+0x1a>
 8008b32:	6a03      	ldr	r3, [r0, #32]
 8008b34:	b90b      	cbnz	r3, 8008b3a <_fflush_r+0x1a>
 8008b36:	f7fd f83d 	bl	8005bb4 <__sinit>
 8008b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f3      	beq.n	8008b2a <_fflush_r+0xa>
 8008b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b44:	07d0      	lsls	r0, r2, #31
 8008b46:	d404      	bmi.n	8008b52 <_fflush_r+0x32>
 8008b48:	0599      	lsls	r1, r3, #22
 8008b4a:	d402      	bmi.n	8008b52 <_fflush_r+0x32>
 8008b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b4e:	f7fd fa4e 	bl	8005fee <__retarget_lock_acquire_recursive>
 8008b52:	4628      	mov	r0, r5
 8008b54:	4621      	mov	r1, r4
 8008b56:	f7ff ff5f 	bl	8008a18 <__sflush_r>
 8008b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b5c:	07da      	lsls	r2, r3, #31
 8008b5e:	4605      	mov	r5, r0
 8008b60:	d4e4      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	059b      	lsls	r3, r3, #22
 8008b66:	d4e1      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b6a:	f7fd fa41 	bl	8005ff0 <__retarget_lock_release_recursive>
 8008b6e:	e7dd      	b.n	8008b2c <_fflush_r+0xc>

08008b70 <__swhatbuf_r>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	460c      	mov	r4, r1
 8008b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b78:	2900      	cmp	r1, #0
 8008b7a:	b096      	sub	sp, #88	@ 0x58
 8008b7c:	4615      	mov	r5, r2
 8008b7e:	461e      	mov	r6, r3
 8008b80:	da0d      	bge.n	8008b9e <__swhatbuf_r+0x2e>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b88:	f04f 0100 	mov.w	r1, #0
 8008b8c:	bf14      	ite	ne
 8008b8e:	2340      	movne	r3, #64	@ 0x40
 8008b90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b94:	2000      	movs	r0, #0
 8008b96:	6031      	str	r1, [r6, #0]
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	b016      	add	sp, #88	@ 0x58
 8008b9c:	bd70      	pop	{r4, r5, r6, pc}
 8008b9e:	466a      	mov	r2, sp
 8008ba0:	f000 f874 	bl	8008c8c <_fstat_r>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	dbec      	blt.n	8008b82 <__swhatbuf_r+0x12>
 8008ba8:	9901      	ldr	r1, [sp, #4]
 8008baa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bb2:	4259      	negs	r1, r3
 8008bb4:	4159      	adcs	r1, r3
 8008bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bba:	e7eb      	b.n	8008b94 <__swhatbuf_r+0x24>

08008bbc <__smakebuf_r>:
 8008bbc:	898b      	ldrh	r3, [r1, #12]
 8008bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc0:	079d      	lsls	r5, r3, #30
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	d507      	bpl.n	8008bd8 <__smakebuf_r+0x1c>
 8008bc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	6123      	str	r3, [r4, #16]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	6163      	str	r3, [r4, #20]
 8008bd4:	b003      	add	sp, #12
 8008bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd8:	ab01      	add	r3, sp, #4
 8008bda:	466a      	mov	r2, sp
 8008bdc:	f7ff ffc8 	bl	8008b70 <__swhatbuf_r>
 8008be0:	9f00      	ldr	r7, [sp, #0]
 8008be2:	4605      	mov	r5, r0
 8008be4:	4639      	mov	r1, r7
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7fe f8c0 	bl	8006d6c <_malloc_r>
 8008bec:	b948      	cbnz	r0, 8008c02 <__smakebuf_r+0x46>
 8008bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf2:	059a      	lsls	r2, r3, #22
 8008bf4:	d4ee      	bmi.n	8008bd4 <__smakebuf_r+0x18>
 8008bf6:	f023 0303 	bic.w	r3, r3, #3
 8008bfa:	f043 0302 	orr.w	r3, r3, #2
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	e7e2      	b.n	8008bc8 <__smakebuf_r+0xc>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	6020      	str	r0, [r4, #0]
 8008c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c12:	b15b      	cbz	r3, 8008c2c <__smakebuf_r+0x70>
 8008c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f000 f849 	bl	8008cb0 <_isatty_r>
 8008c1e:	b128      	cbz	r0, 8008c2c <__smakebuf_r+0x70>
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	f023 0303 	bic.w	r3, r3, #3
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	431d      	orrs	r5, r3
 8008c30:	81a5      	strh	r5, [r4, #12]
 8008c32:	e7cf      	b.n	8008bd4 <__smakebuf_r+0x18>

08008c34 <memmove>:
 8008c34:	4288      	cmp	r0, r1
 8008c36:	b510      	push	{r4, lr}
 8008c38:	eb01 0402 	add.w	r4, r1, r2
 8008c3c:	d902      	bls.n	8008c44 <memmove+0x10>
 8008c3e:	4284      	cmp	r4, r0
 8008c40:	4623      	mov	r3, r4
 8008c42:	d807      	bhi.n	8008c54 <memmove+0x20>
 8008c44:	1e43      	subs	r3, r0, #1
 8008c46:	42a1      	cmp	r1, r4
 8008c48:	d008      	beq.n	8008c5c <memmove+0x28>
 8008c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c52:	e7f8      	b.n	8008c46 <memmove+0x12>
 8008c54:	4402      	add	r2, r0
 8008c56:	4601      	mov	r1, r0
 8008c58:	428a      	cmp	r2, r1
 8008c5a:	d100      	bne.n	8008c5e <memmove+0x2a>
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c66:	e7f7      	b.n	8008c58 <memmove+0x24>

08008c68 <strncmp>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	b16a      	cbz	r2, 8008c88 <strncmp+0x20>
 8008c6c:	3901      	subs	r1, #1
 8008c6e:	1884      	adds	r4, r0, r2
 8008c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d103      	bne.n	8008c84 <strncmp+0x1c>
 8008c7c:	42a0      	cmp	r0, r4
 8008c7e:	d001      	beq.n	8008c84 <strncmp+0x1c>
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	d1f5      	bne.n	8008c70 <strncmp+0x8>
 8008c84:	1ad0      	subs	r0, r2, r3
 8008c86:	bd10      	pop	{r4, pc}
 8008c88:	4610      	mov	r0, r2
 8008c8a:	e7fc      	b.n	8008c86 <strncmp+0x1e>

08008c8c <_fstat_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	@ (8008cac <_fstat_r+0x20>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	f7fc f835 	bl	8004d08 <_fstat>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d102      	bne.n	8008ca8 <_fstat_r+0x1c>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b103      	cbz	r3, 8008ca8 <_fstat_r+0x1c>
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	200004f4 	.word	0x200004f4

08008cb0 <_isatty_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d06      	ldr	r5, [pc, #24]	@ (8008ccc <_isatty_r+0x1c>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7fc f829 	bl	8004d12 <_isatty>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_isatty_r+0x1a>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_isatty_r+0x1a>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	200004f4 	.word	0x200004f4

08008cd0 <_sbrk_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d06      	ldr	r5, [pc, #24]	@ (8008cec <_sbrk_r+0x1c>)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	f7fc f81e 	bl	8004d1c <_sbrk>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d102      	bne.n	8008cea <_sbrk_r+0x1a>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	b103      	cbz	r3, 8008cea <_sbrk_r+0x1a>
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	bd38      	pop	{r3, r4, r5, pc}
 8008cec:	200004f4 	.word	0x200004f4

08008cf0 <memcpy>:
 8008cf0:	440a      	add	r2, r1
 8008cf2:	4291      	cmp	r1, r2
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d100      	bne.n	8008cfc <memcpy+0xc>
 8008cfa:	4770      	bx	lr
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d06:	4291      	cmp	r1, r2
 8008d08:	d1f9      	bne.n	8008cfe <memcpy+0xe>
 8008d0a:	bd10      	pop	{r4, pc}
 8008d0c:	0000      	movs	r0, r0
	...

08008d10 <nan>:
 8008d10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d18 <nan+0x8>
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	00000000 	.word	0x00000000
 8008d1c:	7ff80000 	.word	0x7ff80000

08008d20 <__assert_func>:
 8008d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d22:	4614      	mov	r4, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b09      	ldr	r3, [pc, #36]	@ (8008d4c <__assert_func+0x2c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	68d8      	ldr	r0, [r3, #12]
 8008d2e:	b14c      	cbz	r4, 8008d44 <__assert_func+0x24>
 8008d30:	4b07      	ldr	r3, [pc, #28]	@ (8008d50 <__assert_func+0x30>)
 8008d32:	9100      	str	r1, [sp, #0]
 8008d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d38:	4906      	ldr	r1, [pc, #24]	@ (8008d54 <__assert_func+0x34>)
 8008d3a:	462b      	mov	r3, r5
 8008d3c:	f000 fba8 	bl	8009490 <fiprintf>
 8008d40:	f000 fbb8 	bl	80094b4 <abort>
 8008d44:	4b04      	ldr	r3, [pc, #16]	@ (8008d58 <__assert_func+0x38>)
 8008d46:	461c      	mov	r4, r3
 8008d48:	e7f3      	b.n	8008d32 <__assert_func+0x12>
 8008d4a:	bf00      	nop
 8008d4c:	20000018 	.word	0x20000018
 8008d50:	08009a54 	.word	0x08009a54
 8008d54:	08009a61 	.word	0x08009a61
 8008d58:	08009a8f 	.word	0x08009a8f

08008d5c <_calloc_r>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	fba1 5402 	umull	r5, r4, r1, r2
 8008d62:	b934      	cbnz	r4, 8008d72 <_calloc_r+0x16>
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7fe f801 	bl	8006d6c <_malloc_r>
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	b928      	cbnz	r0, 8008d7a <_calloc_r+0x1e>
 8008d6e:	4630      	mov	r0, r6
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
 8008d72:	220c      	movs	r2, #12
 8008d74:	6002      	str	r2, [r0, #0]
 8008d76:	2600      	movs	r6, #0
 8008d78:	e7f9      	b.n	8008d6e <_calloc_r+0x12>
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7fd f8b9 	bl	8005ef4 <memset>
 8008d82:	e7f4      	b.n	8008d6e <_calloc_r+0x12>

08008d84 <rshift>:
 8008d84:	6903      	ldr	r3, [r0, #16]
 8008d86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d92:	f100 0414 	add.w	r4, r0, #20
 8008d96:	dd45      	ble.n	8008e24 <rshift+0xa0>
 8008d98:	f011 011f 	ands.w	r1, r1, #31
 8008d9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008da0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008da4:	d10c      	bne.n	8008dc0 <rshift+0x3c>
 8008da6:	f100 0710 	add.w	r7, r0, #16
 8008daa:	4629      	mov	r1, r5
 8008dac:	42b1      	cmp	r1, r6
 8008dae:	d334      	bcc.n	8008e1a <rshift+0x96>
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	1eea      	subs	r2, r5, #3
 8008db6:	4296      	cmp	r6, r2
 8008db8:	bf38      	it	cc
 8008dba:	2300      	movcc	r3, #0
 8008dbc:	4423      	add	r3, r4
 8008dbe:	e015      	b.n	8008dec <rshift+0x68>
 8008dc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008dc4:	f1c1 0820 	rsb	r8, r1, #32
 8008dc8:	40cf      	lsrs	r7, r1
 8008dca:	f105 0e04 	add.w	lr, r5, #4
 8008dce:	46a1      	mov	r9, r4
 8008dd0:	4576      	cmp	r6, lr
 8008dd2:	46f4      	mov	ip, lr
 8008dd4:	d815      	bhi.n	8008e02 <rshift+0x7e>
 8008dd6:	1a9a      	subs	r2, r3, r2
 8008dd8:	0092      	lsls	r2, r2, #2
 8008dda:	3a04      	subs	r2, #4
 8008ddc:	3501      	adds	r5, #1
 8008dde:	42ae      	cmp	r6, r5
 8008de0:	bf38      	it	cc
 8008de2:	2200      	movcc	r2, #0
 8008de4:	18a3      	adds	r3, r4, r2
 8008de6:	50a7      	str	r7, [r4, r2]
 8008de8:	b107      	cbz	r7, 8008dec <rshift+0x68>
 8008dea:	3304      	adds	r3, #4
 8008dec:	1b1a      	subs	r2, r3, r4
 8008dee:	42a3      	cmp	r3, r4
 8008df0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008df4:	bf08      	it	eq
 8008df6:	2300      	moveq	r3, #0
 8008df8:	6102      	str	r2, [r0, #16]
 8008dfa:	bf08      	it	eq
 8008dfc:	6143      	streq	r3, [r0, #20]
 8008dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e02:	f8dc c000 	ldr.w	ip, [ip]
 8008e06:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e0a:	ea4c 0707 	orr.w	r7, ip, r7
 8008e0e:	f849 7b04 	str.w	r7, [r9], #4
 8008e12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e16:	40cf      	lsrs	r7, r1
 8008e18:	e7da      	b.n	8008dd0 <rshift+0x4c>
 8008e1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e22:	e7c3      	b.n	8008dac <rshift+0x28>
 8008e24:	4623      	mov	r3, r4
 8008e26:	e7e1      	b.n	8008dec <rshift+0x68>

08008e28 <__hexdig_fun>:
 8008e28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e2c:	2b09      	cmp	r3, #9
 8008e2e:	d802      	bhi.n	8008e36 <__hexdig_fun+0xe>
 8008e30:	3820      	subs	r0, #32
 8008e32:	b2c0      	uxtb	r0, r0
 8008e34:	4770      	bx	lr
 8008e36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e3a:	2b05      	cmp	r3, #5
 8008e3c:	d801      	bhi.n	8008e42 <__hexdig_fun+0x1a>
 8008e3e:	3847      	subs	r0, #71	@ 0x47
 8008e40:	e7f7      	b.n	8008e32 <__hexdig_fun+0xa>
 8008e42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d801      	bhi.n	8008e4e <__hexdig_fun+0x26>
 8008e4a:	3827      	subs	r0, #39	@ 0x27
 8008e4c:	e7f1      	b.n	8008e32 <__hexdig_fun+0xa>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	4770      	bx	lr
	...

08008e54 <__gethex>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	468a      	mov	sl, r1
 8008e5c:	9302      	str	r3, [sp, #8]
 8008e5e:	680b      	ldr	r3, [r1, #0]
 8008e60:	9001      	str	r0, [sp, #4]
 8008e62:	4690      	mov	r8, r2
 8008e64:	1c9c      	adds	r4, r3, #2
 8008e66:	46a1      	mov	r9, r4
 8008e68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e6c:	2830      	cmp	r0, #48	@ 0x30
 8008e6e:	d0fa      	beq.n	8008e66 <__gethex+0x12>
 8008e70:	eba9 0303 	sub.w	r3, r9, r3
 8008e74:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e78:	f7ff ffd6 	bl	8008e28 <__hexdig_fun>
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d168      	bne.n	8008f54 <__gethex+0x100>
 8008e82:	49a0      	ldr	r1, [pc, #640]	@ (8009104 <__gethex+0x2b0>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	4648      	mov	r0, r9
 8008e88:	f7ff feee 	bl	8008c68 <strncmp>
 8008e8c:	4607      	mov	r7, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d167      	bne.n	8008f62 <__gethex+0x10e>
 8008e92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e96:	4626      	mov	r6, r4
 8008e98:	f7ff ffc6 	bl	8008e28 <__hexdig_fun>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d062      	beq.n	8008f66 <__gethex+0x112>
 8008ea0:	4623      	mov	r3, r4
 8008ea2:	7818      	ldrb	r0, [r3, #0]
 8008ea4:	2830      	cmp	r0, #48	@ 0x30
 8008ea6:	4699      	mov	r9, r3
 8008ea8:	f103 0301 	add.w	r3, r3, #1
 8008eac:	d0f9      	beq.n	8008ea2 <__gethex+0x4e>
 8008eae:	f7ff ffbb 	bl	8008e28 <__hexdig_fun>
 8008eb2:	fab0 f580 	clz	r5, r0
 8008eb6:	096d      	lsrs	r5, r5, #5
 8008eb8:	f04f 0b01 	mov.w	fp, #1
 8008ebc:	464a      	mov	r2, r9
 8008ebe:	4616      	mov	r6, r2
 8008ec0:	3201      	adds	r2, #1
 8008ec2:	7830      	ldrb	r0, [r6, #0]
 8008ec4:	f7ff ffb0 	bl	8008e28 <__hexdig_fun>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d1f8      	bne.n	8008ebe <__gethex+0x6a>
 8008ecc:	498d      	ldr	r1, [pc, #564]	@ (8009104 <__gethex+0x2b0>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f7ff fec9 	bl	8008c68 <strncmp>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d13f      	bne.n	8008f5a <__gethex+0x106>
 8008eda:	b944      	cbnz	r4, 8008eee <__gethex+0x9a>
 8008edc:	1c74      	adds	r4, r6, #1
 8008ede:	4622      	mov	r2, r4
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	3201      	adds	r2, #1
 8008ee4:	7830      	ldrb	r0, [r6, #0]
 8008ee6:	f7ff ff9f 	bl	8008e28 <__hexdig_fun>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d1f8      	bne.n	8008ee0 <__gethex+0x8c>
 8008eee:	1ba4      	subs	r4, r4, r6
 8008ef0:	00a7      	lsls	r7, r4, #2
 8008ef2:	7833      	ldrb	r3, [r6, #0]
 8008ef4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ef8:	2b50      	cmp	r3, #80	@ 0x50
 8008efa:	d13e      	bne.n	8008f7a <__gethex+0x126>
 8008efc:	7873      	ldrb	r3, [r6, #1]
 8008efe:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f00:	d033      	beq.n	8008f6a <__gethex+0x116>
 8008f02:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f04:	d034      	beq.n	8008f70 <__gethex+0x11c>
 8008f06:	1c71      	adds	r1, r6, #1
 8008f08:	2400      	movs	r4, #0
 8008f0a:	7808      	ldrb	r0, [r1, #0]
 8008f0c:	f7ff ff8c 	bl	8008e28 <__hexdig_fun>
 8008f10:	1e43      	subs	r3, r0, #1
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b18      	cmp	r3, #24
 8008f16:	d830      	bhi.n	8008f7a <__gethex+0x126>
 8008f18:	f1a0 0210 	sub.w	r2, r0, #16
 8008f1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f20:	f7ff ff82 	bl	8008e28 <__hexdig_fun>
 8008f24:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f28:	fa5f fc8c 	uxtb.w	ip, ip
 8008f2c:	f1bc 0f18 	cmp.w	ip, #24
 8008f30:	f04f 030a 	mov.w	r3, #10
 8008f34:	d91e      	bls.n	8008f74 <__gethex+0x120>
 8008f36:	b104      	cbz	r4, 8008f3a <__gethex+0xe6>
 8008f38:	4252      	negs	r2, r2
 8008f3a:	4417      	add	r7, r2
 8008f3c:	f8ca 1000 	str.w	r1, [sl]
 8008f40:	b1ed      	cbz	r5, 8008f7e <__gethex+0x12a>
 8008f42:	f1bb 0f00 	cmp.w	fp, #0
 8008f46:	bf0c      	ite	eq
 8008f48:	2506      	moveq	r5, #6
 8008f4a:	2500      	movne	r5, #0
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	b005      	add	sp, #20
 8008f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f54:	2500      	movs	r5, #0
 8008f56:	462c      	mov	r4, r5
 8008f58:	e7b0      	b.n	8008ebc <__gethex+0x68>
 8008f5a:	2c00      	cmp	r4, #0
 8008f5c:	d1c7      	bne.n	8008eee <__gethex+0x9a>
 8008f5e:	4627      	mov	r7, r4
 8008f60:	e7c7      	b.n	8008ef2 <__gethex+0x9e>
 8008f62:	464e      	mov	r6, r9
 8008f64:	462f      	mov	r7, r5
 8008f66:	2501      	movs	r5, #1
 8008f68:	e7c3      	b.n	8008ef2 <__gethex+0x9e>
 8008f6a:	2400      	movs	r4, #0
 8008f6c:	1cb1      	adds	r1, r6, #2
 8008f6e:	e7cc      	b.n	8008f0a <__gethex+0xb6>
 8008f70:	2401      	movs	r4, #1
 8008f72:	e7fb      	b.n	8008f6c <__gethex+0x118>
 8008f74:	fb03 0002 	mla	r0, r3, r2, r0
 8008f78:	e7ce      	b.n	8008f18 <__gethex+0xc4>
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	e7de      	b.n	8008f3c <__gethex+0xe8>
 8008f7e:	eba6 0309 	sub.w	r3, r6, r9
 8008f82:	3b01      	subs	r3, #1
 8008f84:	4629      	mov	r1, r5
 8008f86:	2b07      	cmp	r3, #7
 8008f88:	dc0a      	bgt.n	8008fa0 <__gethex+0x14c>
 8008f8a:	9801      	ldr	r0, [sp, #4]
 8008f8c:	f7fd ff7a 	bl	8006e84 <_Balloc>
 8008f90:	4604      	mov	r4, r0
 8008f92:	b940      	cbnz	r0, 8008fa6 <__gethex+0x152>
 8008f94:	4b5c      	ldr	r3, [pc, #368]	@ (8009108 <__gethex+0x2b4>)
 8008f96:	4602      	mov	r2, r0
 8008f98:	21e4      	movs	r1, #228	@ 0xe4
 8008f9a:	485c      	ldr	r0, [pc, #368]	@ (800910c <__gethex+0x2b8>)
 8008f9c:	f7ff fec0 	bl	8008d20 <__assert_func>
 8008fa0:	3101      	adds	r1, #1
 8008fa2:	105b      	asrs	r3, r3, #1
 8008fa4:	e7ef      	b.n	8008f86 <__gethex+0x132>
 8008fa6:	f100 0a14 	add.w	sl, r0, #20
 8008faa:	2300      	movs	r3, #0
 8008fac:	4655      	mov	r5, sl
 8008fae:	469b      	mov	fp, r3
 8008fb0:	45b1      	cmp	r9, r6
 8008fb2:	d337      	bcc.n	8009024 <__gethex+0x1d0>
 8008fb4:	f845 bb04 	str.w	fp, [r5], #4
 8008fb8:	eba5 050a 	sub.w	r5, r5, sl
 8008fbc:	10ad      	asrs	r5, r5, #2
 8008fbe:	6125      	str	r5, [r4, #16]
 8008fc0:	4658      	mov	r0, fp
 8008fc2:	f7fe f851 	bl	8007068 <__hi0bits>
 8008fc6:	016d      	lsls	r5, r5, #5
 8008fc8:	f8d8 6000 	ldr.w	r6, [r8]
 8008fcc:	1a2d      	subs	r5, r5, r0
 8008fce:	42b5      	cmp	r5, r6
 8008fd0:	dd54      	ble.n	800907c <__gethex+0x228>
 8008fd2:	1bad      	subs	r5, r5, r6
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f7fe fbdd 	bl	8007796 <__any_on>
 8008fdc:	4681      	mov	r9, r0
 8008fde:	b178      	cbz	r0, 8009000 <__gethex+0x1ac>
 8008fe0:	1e6b      	subs	r3, r5, #1
 8008fe2:	1159      	asrs	r1, r3, #5
 8008fe4:	f003 021f 	and.w	r2, r3, #31
 8008fe8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008fec:	f04f 0901 	mov.w	r9, #1
 8008ff0:	fa09 f202 	lsl.w	r2, r9, r2
 8008ff4:	420a      	tst	r2, r1
 8008ff6:	d003      	beq.n	8009000 <__gethex+0x1ac>
 8008ff8:	454b      	cmp	r3, r9
 8008ffa:	dc36      	bgt.n	800906a <__gethex+0x216>
 8008ffc:	f04f 0902 	mov.w	r9, #2
 8009000:	4629      	mov	r1, r5
 8009002:	4620      	mov	r0, r4
 8009004:	f7ff febe 	bl	8008d84 <rshift>
 8009008:	442f      	add	r7, r5
 800900a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800900e:	42bb      	cmp	r3, r7
 8009010:	da42      	bge.n	8009098 <__gethex+0x244>
 8009012:	9801      	ldr	r0, [sp, #4]
 8009014:	4621      	mov	r1, r4
 8009016:	f7fd ff75 	bl	8006f04 <_Bfree>
 800901a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800901c:	2300      	movs	r3, #0
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	25a3      	movs	r5, #163	@ 0xa3
 8009022:	e793      	b.n	8008f4c <__gethex+0xf8>
 8009024:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009028:	2a2e      	cmp	r2, #46	@ 0x2e
 800902a:	d012      	beq.n	8009052 <__gethex+0x1fe>
 800902c:	2b20      	cmp	r3, #32
 800902e:	d104      	bne.n	800903a <__gethex+0x1e6>
 8009030:	f845 bb04 	str.w	fp, [r5], #4
 8009034:	f04f 0b00 	mov.w	fp, #0
 8009038:	465b      	mov	r3, fp
 800903a:	7830      	ldrb	r0, [r6, #0]
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	f7ff fef3 	bl	8008e28 <__hexdig_fun>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	f000 000f 	and.w	r0, r0, #15
 8009048:	4098      	lsls	r0, r3
 800904a:	ea4b 0b00 	orr.w	fp, fp, r0
 800904e:	3304      	adds	r3, #4
 8009050:	e7ae      	b.n	8008fb0 <__gethex+0x15c>
 8009052:	45b1      	cmp	r9, r6
 8009054:	d8ea      	bhi.n	800902c <__gethex+0x1d8>
 8009056:	492b      	ldr	r1, [pc, #172]	@ (8009104 <__gethex+0x2b0>)
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	4630      	mov	r0, r6
 800905e:	f7ff fe03 	bl	8008c68 <strncmp>
 8009062:	9b03      	ldr	r3, [sp, #12]
 8009064:	2800      	cmp	r0, #0
 8009066:	d1e1      	bne.n	800902c <__gethex+0x1d8>
 8009068:	e7a2      	b.n	8008fb0 <__gethex+0x15c>
 800906a:	1ea9      	subs	r1, r5, #2
 800906c:	4620      	mov	r0, r4
 800906e:	f7fe fb92 	bl	8007796 <__any_on>
 8009072:	2800      	cmp	r0, #0
 8009074:	d0c2      	beq.n	8008ffc <__gethex+0x1a8>
 8009076:	f04f 0903 	mov.w	r9, #3
 800907a:	e7c1      	b.n	8009000 <__gethex+0x1ac>
 800907c:	da09      	bge.n	8009092 <__gethex+0x23e>
 800907e:	1b75      	subs	r5, r6, r5
 8009080:	4621      	mov	r1, r4
 8009082:	9801      	ldr	r0, [sp, #4]
 8009084:	462a      	mov	r2, r5
 8009086:	f7fe f94d 	bl	8007324 <__lshift>
 800908a:	1b7f      	subs	r7, r7, r5
 800908c:	4604      	mov	r4, r0
 800908e:	f100 0a14 	add.w	sl, r0, #20
 8009092:	f04f 0900 	mov.w	r9, #0
 8009096:	e7b8      	b.n	800900a <__gethex+0x1b6>
 8009098:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800909c:	42bd      	cmp	r5, r7
 800909e:	dd6f      	ble.n	8009180 <__gethex+0x32c>
 80090a0:	1bed      	subs	r5, r5, r7
 80090a2:	42ae      	cmp	r6, r5
 80090a4:	dc34      	bgt.n	8009110 <__gethex+0x2bc>
 80090a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d022      	beq.n	80090f4 <__gethex+0x2a0>
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d024      	beq.n	80090fc <__gethex+0x2a8>
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d115      	bne.n	80090e2 <__gethex+0x28e>
 80090b6:	42ae      	cmp	r6, r5
 80090b8:	d113      	bne.n	80090e2 <__gethex+0x28e>
 80090ba:	2e01      	cmp	r6, #1
 80090bc:	d10b      	bne.n	80090d6 <__gethex+0x282>
 80090be:	9a02      	ldr	r2, [sp, #8]
 80090c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	2301      	movs	r3, #1
 80090c8:	6123      	str	r3, [r4, #16]
 80090ca:	f8ca 3000 	str.w	r3, [sl]
 80090ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090d0:	2562      	movs	r5, #98	@ 0x62
 80090d2:	601c      	str	r4, [r3, #0]
 80090d4:	e73a      	b.n	8008f4c <__gethex+0xf8>
 80090d6:	1e71      	subs	r1, r6, #1
 80090d8:	4620      	mov	r0, r4
 80090da:	f7fe fb5c 	bl	8007796 <__any_on>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d1ed      	bne.n	80090be <__gethex+0x26a>
 80090e2:	9801      	ldr	r0, [sp, #4]
 80090e4:	4621      	mov	r1, r4
 80090e6:	f7fd ff0d 	bl	8006f04 <_Bfree>
 80090ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090ec:	2300      	movs	r3, #0
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	2550      	movs	r5, #80	@ 0x50
 80090f2:	e72b      	b.n	8008f4c <__gethex+0xf8>
 80090f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1f3      	bne.n	80090e2 <__gethex+0x28e>
 80090fa:	e7e0      	b.n	80090be <__gethex+0x26a>
 80090fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1dd      	bne.n	80090be <__gethex+0x26a>
 8009102:	e7ee      	b.n	80090e2 <__gethex+0x28e>
 8009104:	08009a39 	.word	0x08009a39
 8009108:	080099ce 	.word	0x080099ce
 800910c:	08009a90 	.word	0x08009a90
 8009110:	1e6f      	subs	r7, r5, #1
 8009112:	f1b9 0f00 	cmp.w	r9, #0
 8009116:	d130      	bne.n	800917a <__gethex+0x326>
 8009118:	b127      	cbz	r7, 8009124 <__gethex+0x2d0>
 800911a:	4639      	mov	r1, r7
 800911c:	4620      	mov	r0, r4
 800911e:	f7fe fb3a 	bl	8007796 <__any_on>
 8009122:	4681      	mov	r9, r0
 8009124:	117a      	asrs	r2, r7, #5
 8009126:	2301      	movs	r3, #1
 8009128:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800912c:	f007 071f 	and.w	r7, r7, #31
 8009130:	40bb      	lsls	r3, r7
 8009132:	4213      	tst	r3, r2
 8009134:	4629      	mov	r1, r5
 8009136:	4620      	mov	r0, r4
 8009138:	bf18      	it	ne
 800913a:	f049 0902 	orrne.w	r9, r9, #2
 800913e:	f7ff fe21 	bl	8008d84 <rshift>
 8009142:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009146:	1b76      	subs	r6, r6, r5
 8009148:	2502      	movs	r5, #2
 800914a:	f1b9 0f00 	cmp.w	r9, #0
 800914e:	d047      	beq.n	80091e0 <__gethex+0x38c>
 8009150:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d015      	beq.n	8009184 <__gethex+0x330>
 8009158:	2b03      	cmp	r3, #3
 800915a:	d017      	beq.n	800918c <__gethex+0x338>
 800915c:	2b01      	cmp	r3, #1
 800915e:	d109      	bne.n	8009174 <__gethex+0x320>
 8009160:	f019 0f02 	tst.w	r9, #2
 8009164:	d006      	beq.n	8009174 <__gethex+0x320>
 8009166:	f8da 3000 	ldr.w	r3, [sl]
 800916a:	ea49 0903 	orr.w	r9, r9, r3
 800916e:	f019 0f01 	tst.w	r9, #1
 8009172:	d10e      	bne.n	8009192 <__gethex+0x33e>
 8009174:	f045 0510 	orr.w	r5, r5, #16
 8009178:	e032      	b.n	80091e0 <__gethex+0x38c>
 800917a:	f04f 0901 	mov.w	r9, #1
 800917e:	e7d1      	b.n	8009124 <__gethex+0x2d0>
 8009180:	2501      	movs	r5, #1
 8009182:	e7e2      	b.n	800914a <__gethex+0x2f6>
 8009184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009186:	f1c3 0301 	rsb	r3, r3, #1
 800918a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800918c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0f0      	beq.n	8009174 <__gethex+0x320>
 8009192:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009196:	f104 0314 	add.w	r3, r4, #20
 800919a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800919e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091a2:	f04f 0c00 	mov.w	ip, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091b0:	d01b      	beq.n	80091ea <__gethex+0x396>
 80091b2:	3201      	adds	r2, #1
 80091b4:	6002      	str	r2, [r0, #0]
 80091b6:	2d02      	cmp	r5, #2
 80091b8:	f104 0314 	add.w	r3, r4, #20
 80091bc:	d13c      	bne.n	8009238 <__gethex+0x3e4>
 80091be:	f8d8 2000 	ldr.w	r2, [r8]
 80091c2:	3a01      	subs	r2, #1
 80091c4:	42b2      	cmp	r2, r6
 80091c6:	d109      	bne.n	80091dc <__gethex+0x388>
 80091c8:	1171      	asrs	r1, r6, #5
 80091ca:	2201      	movs	r2, #1
 80091cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091d0:	f006 061f 	and.w	r6, r6, #31
 80091d4:	fa02 f606 	lsl.w	r6, r2, r6
 80091d8:	421e      	tst	r6, r3
 80091da:	d13a      	bne.n	8009252 <__gethex+0x3fe>
 80091dc:	f045 0520 	orr.w	r5, r5, #32
 80091e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091e2:	601c      	str	r4, [r3, #0]
 80091e4:	9b02      	ldr	r3, [sp, #8]
 80091e6:	601f      	str	r7, [r3, #0]
 80091e8:	e6b0      	b.n	8008f4c <__gethex+0xf8>
 80091ea:	4299      	cmp	r1, r3
 80091ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80091f0:	d8d9      	bhi.n	80091a6 <__gethex+0x352>
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	459b      	cmp	fp, r3
 80091f6:	db17      	blt.n	8009228 <__gethex+0x3d4>
 80091f8:	6861      	ldr	r1, [r4, #4]
 80091fa:	9801      	ldr	r0, [sp, #4]
 80091fc:	3101      	adds	r1, #1
 80091fe:	f7fd fe41 	bl	8006e84 <_Balloc>
 8009202:	4681      	mov	r9, r0
 8009204:	b918      	cbnz	r0, 800920e <__gethex+0x3ba>
 8009206:	4b1a      	ldr	r3, [pc, #104]	@ (8009270 <__gethex+0x41c>)
 8009208:	4602      	mov	r2, r0
 800920a:	2184      	movs	r1, #132	@ 0x84
 800920c:	e6c5      	b.n	8008f9a <__gethex+0x146>
 800920e:	6922      	ldr	r2, [r4, #16]
 8009210:	3202      	adds	r2, #2
 8009212:	f104 010c 	add.w	r1, r4, #12
 8009216:	0092      	lsls	r2, r2, #2
 8009218:	300c      	adds	r0, #12
 800921a:	f7ff fd69 	bl	8008cf0 <memcpy>
 800921e:	4621      	mov	r1, r4
 8009220:	9801      	ldr	r0, [sp, #4]
 8009222:	f7fd fe6f 	bl	8006f04 <_Bfree>
 8009226:	464c      	mov	r4, r9
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009230:	6122      	str	r2, [r4, #16]
 8009232:	2201      	movs	r2, #1
 8009234:	615a      	str	r2, [r3, #20]
 8009236:	e7be      	b.n	80091b6 <__gethex+0x362>
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	455a      	cmp	r2, fp
 800923c:	dd0b      	ble.n	8009256 <__gethex+0x402>
 800923e:	2101      	movs	r1, #1
 8009240:	4620      	mov	r0, r4
 8009242:	f7ff fd9f 	bl	8008d84 <rshift>
 8009246:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800924a:	3701      	adds	r7, #1
 800924c:	42bb      	cmp	r3, r7
 800924e:	f6ff aee0 	blt.w	8009012 <__gethex+0x1be>
 8009252:	2501      	movs	r5, #1
 8009254:	e7c2      	b.n	80091dc <__gethex+0x388>
 8009256:	f016 061f 	ands.w	r6, r6, #31
 800925a:	d0fa      	beq.n	8009252 <__gethex+0x3fe>
 800925c:	4453      	add	r3, sl
 800925e:	f1c6 0620 	rsb	r6, r6, #32
 8009262:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009266:	f7fd feff 	bl	8007068 <__hi0bits>
 800926a:	42b0      	cmp	r0, r6
 800926c:	dbe7      	blt.n	800923e <__gethex+0x3ea>
 800926e:	e7f0      	b.n	8009252 <__gethex+0x3fe>
 8009270:	080099ce 	.word	0x080099ce

08009274 <L_shift>:
 8009274:	f1c2 0208 	rsb	r2, r2, #8
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	f1c2 0620 	rsb	r6, r2, #32
 8009280:	6843      	ldr	r3, [r0, #4]
 8009282:	6804      	ldr	r4, [r0, #0]
 8009284:	fa03 f506 	lsl.w	r5, r3, r6
 8009288:	432c      	orrs	r4, r5
 800928a:	40d3      	lsrs	r3, r2
 800928c:	6004      	str	r4, [r0, #0]
 800928e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009292:	4288      	cmp	r0, r1
 8009294:	d3f4      	bcc.n	8009280 <L_shift+0xc>
 8009296:	bd70      	pop	{r4, r5, r6, pc}

08009298 <__match>:
 8009298:	b530      	push	{r4, r5, lr}
 800929a:	6803      	ldr	r3, [r0, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a2:	b914      	cbnz	r4, 80092aa <__match+0x12>
 80092a4:	6003      	str	r3, [r0, #0]
 80092a6:	2001      	movs	r0, #1
 80092a8:	bd30      	pop	{r4, r5, pc}
 80092aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092b2:	2d19      	cmp	r5, #25
 80092b4:	bf98      	it	ls
 80092b6:	3220      	addls	r2, #32
 80092b8:	42a2      	cmp	r2, r4
 80092ba:	d0f0      	beq.n	800929e <__match+0x6>
 80092bc:	2000      	movs	r0, #0
 80092be:	e7f3      	b.n	80092a8 <__match+0x10>

080092c0 <__hexnan>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	680b      	ldr	r3, [r1, #0]
 80092c6:	6801      	ldr	r1, [r0, #0]
 80092c8:	115e      	asrs	r6, r3, #5
 80092ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092ce:	f013 031f 	ands.w	r3, r3, #31
 80092d2:	b087      	sub	sp, #28
 80092d4:	bf18      	it	ne
 80092d6:	3604      	addne	r6, #4
 80092d8:	2500      	movs	r5, #0
 80092da:	1f37      	subs	r7, r6, #4
 80092dc:	4682      	mov	sl, r0
 80092de:	4690      	mov	r8, r2
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80092e6:	46b9      	mov	r9, r7
 80092e8:	463c      	mov	r4, r7
 80092ea:	9502      	str	r5, [sp, #8]
 80092ec:	46ab      	mov	fp, r5
 80092ee:	784a      	ldrb	r2, [r1, #1]
 80092f0:	1c4b      	adds	r3, r1, #1
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	b342      	cbz	r2, 8009348 <__hexnan+0x88>
 80092f6:	4610      	mov	r0, r2
 80092f8:	9105      	str	r1, [sp, #20]
 80092fa:	9204      	str	r2, [sp, #16]
 80092fc:	f7ff fd94 	bl	8008e28 <__hexdig_fun>
 8009300:	2800      	cmp	r0, #0
 8009302:	d151      	bne.n	80093a8 <__hexnan+0xe8>
 8009304:	9a04      	ldr	r2, [sp, #16]
 8009306:	9905      	ldr	r1, [sp, #20]
 8009308:	2a20      	cmp	r2, #32
 800930a:	d818      	bhi.n	800933e <__hexnan+0x7e>
 800930c:	9b02      	ldr	r3, [sp, #8]
 800930e:	459b      	cmp	fp, r3
 8009310:	dd13      	ble.n	800933a <__hexnan+0x7a>
 8009312:	454c      	cmp	r4, r9
 8009314:	d206      	bcs.n	8009324 <__hexnan+0x64>
 8009316:	2d07      	cmp	r5, #7
 8009318:	dc04      	bgt.n	8009324 <__hexnan+0x64>
 800931a:	462a      	mov	r2, r5
 800931c:	4649      	mov	r1, r9
 800931e:	4620      	mov	r0, r4
 8009320:	f7ff ffa8 	bl	8009274 <L_shift>
 8009324:	4544      	cmp	r4, r8
 8009326:	d952      	bls.n	80093ce <__hexnan+0x10e>
 8009328:	2300      	movs	r3, #0
 800932a:	f1a4 0904 	sub.w	r9, r4, #4
 800932e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009332:	f8cd b008 	str.w	fp, [sp, #8]
 8009336:	464c      	mov	r4, r9
 8009338:	461d      	mov	r5, r3
 800933a:	9903      	ldr	r1, [sp, #12]
 800933c:	e7d7      	b.n	80092ee <__hexnan+0x2e>
 800933e:	2a29      	cmp	r2, #41	@ 0x29
 8009340:	d157      	bne.n	80093f2 <__hexnan+0x132>
 8009342:	3102      	adds	r1, #2
 8009344:	f8ca 1000 	str.w	r1, [sl]
 8009348:	f1bb 0f00 	cmp.w	fp, #0
 800934c:	d051      	beq.n	80093f2 <__hexnan+0x132>
 800934e:	454c      	cmp	r4, r9
 8009350:	d206      	bcs.n	8009360 <__hexnan+0xa0>
 8009352:	2d07      	cmp	r5, #7
 8009354:	dc04      	bgt.n	8009360 <__hexnan+0xa0>
 8009356:	462a      	mov	r2, r5
 8009358:	4649      	mov	r1, r9
 800935a:	4620      	mov	r0, r4
 800935c:	f7ff ff8a 	bl	8009274 <L_shift>
 8009360:	4544      	cmp	r4, r8
 8009362:	d936      	bls.n	80093d2 <__hexnan+0x112>
 8009364:	f1a8 0204 	sub.w	r2, r8, #4
 8009368:	4623      	mov	r3, r4
 800936a:	f853 1b04 	ldr.w	r1, [r3], #4
 800936e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009372:	429f      	cmp	r7, r3
 8009374:	d2f9      	bcs.n	800936a <__hexnan+0xaa>
 8009376:	1b3b      	subs	r3, r7, r4
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	3304      	adds	r3, #4
 800937e:	3401      	adds	r4, #1
 8009380:	3e03      	subs	r6, #3
 8009382:	42b4      	cmp	r4, r6
 8009384:	bf88      	it	hi
 8009386:	2304      	movhi	r3, #4
 8009388:	4443      	add	r3, r8
 800938a:	2200      	movs	r2, #0
 800938c:	f843 2b04 	str.w	r2, [r3], #4
 8009390:	429f      	cmp	r7, r3
 8009392:	d2fb      	bcs.n	800938c <__hexnan+0xcc>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	b91b      	cbnz	r3, 80093a0 <__hexnan+0xe0>
 8009398:	4547      	cmp	r7, r8
 800939a:	d128      	bne.n	80093ee <__hexnan+0x12e>
 800939c:	2301      	movs	r3, #1
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	2005      	movs	r0, #5
 80093a2:	b007      	add	sp, #28
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	3501      	adds	r5, #1
 80093aa:	2d08      	cmp	r5, #8
 80093ac:	f10b 0b01 	add.w	fp, fp, #1
 80093b0:	dd06      	ble.n	80093c0 <__hexnan+0x100>
 80093b2:	4544      	cmp	r4, r8
 80093b4:	d9c1      	bls.n	800933a <__hexnan+0x7a>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80093bc:	2501      	movs	r5, #1
 80093be:	3c04      	subs	r4, #4
 80093c0:	6822      	ldr	r2, [r4, #0]
 80093c2:	f000 000f 	and.w	r0, r0, #15
 80093c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093ca:	6020      	str	r0, [r4, #0]
 80093cc:	e7b5      	b.n	800933a <__hexnan+0x7a>
 80093ce:	2508      	movs	r5, #8
 80093d0:	e7b3      	b.n	800933a <__hexnan+0x7a>
 80093d2:	9b01      	ldr	r3, [sp, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0dd      	beq.n	8009394 <__hexnan+0xd4>
 80093d8:	f1c3 0320 	rsb	r3, r3, #32
 80093dc:	f04f 32ff 	mov.w	r2, #4294967295
 80093e0:	40da      	lsrs	r2, r3
 80093e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093e6:	4013      	ands	r3, r2
 80093e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80093ec:	e7d2      	b.n	8009394 <__hexnan+0xd4>
 80093ee:	3f04      	subs	r7, #4
 80093f0:	e7d0      	b.n	8009394 <__hexnan+0xd4>
 80093f2:	2004      	movs	r0, #4
 80093f4:	e7d5      	b.n	80093a2 <__hexnan+0xe2>

080093f6 <__ascii_mbtowc>:
 80093f6:	b082      	sub	sp, #8
 80093f8:	b901      	cbnz	r1, 80093fc <__ascii_mbtowc+0x6>
 80093fa:	a901      	add	r1, sp, #4
 80093fc:	b142      	cbz	r2, 8009410 <__ascii_mbtowc+0x1a>
 80093fe:	b14b      	cbz	r3, 8009414 <__ascii_mbtowc+0x1e>
 8009400:	7813      	ldrb	r3, [r2, #0]
 8009402:	600b      	str	r3, [r1, #0]
 8009404:	7812      	ldrb	r2, [r2, #0]
 8009406:	1e10      	subs	r0, r2, #0
 8009408:	bf18      	it	ne
 800940a:	2001      	movne	r0, #1
 800940c:	b002      	add	sp, #8
 800940e:	4770      	bx	lr
 8009410:	4610      	mov	r0, r2
 8009412:	e7fb      	b.n	800940c <__ascii_mbtowc+0x16>
 8009414:	f06f 0001 	mvn.w	r0, #1
 8009418:	e7f8      	b.n	800940c <__ascii_mbtowc+0x16>

0800941a <_realloc_r>:
 800941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	4607      	mov	r7, r0
 8009420:	4614      	mov	r4, r2
 8009422:	460d      	mov	r5, r1
 8009424:	b921      	cbnz	r1, 8009430 <_realloc_r+0x16>
 8009426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800942a:	4611      	mov	r1, r2
 800942c:	f7fd bc9e 	b.w	8006d6c <_malloc_r>
 8009430:	b92a      	cbnz	r2, 800943e <_realloc_r+0x24>
 8009432:	f7fd fc27 	bl	8006c84 <_free_r>
 8009436:	4625      	mov	r5, r4
 8009438:	4628      	mov	r0, r5
 800943a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800943e:	f000 f840 	bl	80094c2 <_malloc_usable_size_r>
 8009442:	4284      	cmp	r4, r0
 8009444:	4606      	mov	r6, r0
 8009446:	d802      	bhi.n	800944e <_realloc_r+0x34>
 8009448:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800944c:	d8f4      	bhi.n	8009438 <_realloc_r+0x1e>
 800944e:	4621      	mov	r1, r4
 8009450:	4638      	mov	r0, r7
 8009452:	f7fd fc8b 	bl	8006d6c <_malloc_r>
 8009456:	4680      	mov	r8, r0
 8009458:	b908      	cbnz	r0, 800945e <_realloc_r+0x44>
 800945a:	4645      	mov	r5, r8
 800945c:	e7ec      	b.n	8009438 <_realloc_r+0x1e>
 800945e:	42b4      	cmp	r4, r6
 8009460:	4622      	mov	r2, r4
 8009462:	4629      	mov	r1, r5
 8009464:	bf28      	it	cs
 8009466:	4632      	movcs	r2, r6
 8009468:	f7ff fc42 	bl	8008cf0 <memcpy>
 800946c:	4629      	mov	r1, r5
 800946e:	4638      	mov	r0, r7
 8009470:	f7fd fc08 	bl	8006c84 <_free_r>
 8009474:	e7f1      	b.n	800945a <_realloc_r+0x40>

08009476 <__ascii_wctomb>:
 8009476:	4603      	mov	r3, r0
 8009478:	4608      	mov	r0, r1
 800947a:	b141      	cbz	r1, 800948e <__ascii_wctomb+0x18>
 800947c:	2aff      	cmp	r2, #255	@ 0xff
 800947e:	d904      	bls.n	800948a <__ascii_wctomb+0x14>
 8009480:	228a      	movs	r2, #138	@ 0x8a
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	f04f 30ff 	mov.w	r0, #4294967295
 8009488:	4770      	bx	lr
 800948a:	700a      	strb	r2, [r1, #0]
 800948c:	2001      	movs	r0, #1
 800948e:	4770      	bx	lr

08009490 <fiprintf>:
 8009490:	b40e      	push	{r1, r2, r3}
 8009492:	b503      	push	{r0, r1, lr}
 8009494:	4601      	mov	r1, r0
 8009496:	ab03      	add	r3, sp, #12
 8009498:	4805      	ldr	r0, [pc, #20]	@ (80094b0 <fiprintf+0x20>)
 800949a:	f853 2b04 	ldr.w	r2, [r3], #4
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	f7ff f9a1 	bl	80087e8 <_vfiprintf_r>
 80094a6:	b002      	add	sp, #8
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	20000018 	.word	0x20000018

080094b4 <abort>:
 80094b4:	b508      	push	{r3, lr}
 80094b6:	2006      	movs	r0, #6
 80094b8:	f000 f834 	bl	8009524 <raise>
 80094bc:	2001      	movs	r0, #1
 80094be:	f7fb fc0a 	bl	8004cd6 <_exit>

080094c2 <_malloc_usable_size_r>:
 80094c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c6:	1f18      	subs	r0, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	bfbc      	itt	lt
 80094cc:	580b      	ldrlt	r3, [r1, r0]
 80094ce:	18c0      	addlt	r0, r0, r3
 80094d0:	4770      	bx	lr

080094d2 <_raise_r>:
 80094d2:	291f      	cmp	r1, #31
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4605      	mov	r5, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	d904      	bls.n	80094e6 <_raise_r+0x14>
 80094dc:	2316      	movs	r3, #22
 80094de:	6003      	str	r3, [r0, #0]
 80094e0:	f04f 30ff 	mov.w	r0, #4294967295
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094e8:	b112      	cbz	r2, 80094f0 <_raise_r+0x1e>
 80094ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094ee:	b94b      	cbnz	r3, 8009504 <_raise_r+0x32>
 80094f0:	4628      	mov	r0, r5
 80094f2:	f000 f831 	bl	8009558 <_getpid_r>
 80094f6:	4622      	mov	r2, r4
 80094f8:	4601      	mov	r1, r0
 80094fa:	4628      	mov	r0, r5
 80094fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009500:	f000 b818 	b.w	8009534 <_kill_r>
 8009504:	2b01      	cmp	r3, #1
 8009506:	d00a      	beq.n	800951e <_raise_r+0x4c>
 8009508:	1c59      	adds	r1, r3, #1
 800950a:	d103      	bne.n	8009514 <_raise_r+0x42>
 800950c:	2316      	movs	r3, #22
 800950e:	6003      	str	r3, [r0, #0]
 8009510:	2001      	movs	r0, #1
 8009512:	e7e7      	b.n	80094e4 <_raise_r+0x12>
 8009514:	2100      	movs	r1, #0
 8009516:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800951a:	4620      	mov	r0, r4
 800951c:	4798      	blx	r3
 800951e:	2000      	movs	r0, #0
 8009520:	e7e0      	b.n	80094e4 <_raise_r+0x12>
	...

08009524 <raise>:
 8009524:	4b02      	ldr	r3, [pc, #8]	@ (8009530 <raise+0xc>)
 8009526:	4601      	mov	r1, r0
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f7ff bfd2 	b.w	80094d2 <_raise_r>
 800952e:	bf00      	nop
 8009530:	20000018 	.word	0x20000018

08009534 <_kill_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d07      	ldr	r5, [pc, #28]	@ (8009554 <_kill_r+0x20>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	602b      	str	r3, [r5, #0]
 8009542:	f7fb fbc0 	bl	8004cc6 <_kill>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	d102      	bne.n	8009550 <_kill_r+0x1c>
 800954a:	682b      	ldr	r3, [r5, #0]
 800954c:	b103      	cbz	r3, 8009550 <_kill_r+0x1c>
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	bd38      	pop	{r3, r4, r5, pc}
 8009552:	bf00      	nop
 8009554:	200004f4 	.word	0x200004f4

08009558 <_getpid_r>:
 8009558:	f7fb bbb3 	b.w	8004cc2 <_getpid>

0800955c <__aeabi_d2lz>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	2200      	movs	r2, #0
 8009560:	2300      	movs	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	460d      	mov	r5, r1
 8009566:	f7f7 fa99 	bl	8000a9c <__aeabi_dcmplt>
 800956a:	b928      	cbnz	r0, 8009578 <__aeabi_d2lz+0x1c>
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009574:	f000 b80a 	b.w	800958c <__aeabi_d2ulz>
 8009578:	4620      	mov	r0, r4
 800957a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800957e:	f000 f805 	bl	800958c <__aeabi_d2ulz>
 8009582:	4240      	negs	r0, r0
 8009584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009588:	bd38      	pop	{r3, r4, r5, pc}
 800958a:	bf00      	nop

0800958c <__aeabi_d2ulz>:
 800958c:	b5d0      	push	{r4, r6, r7, lr}
 800958e:	4b0c      	ldr	r3, [pc, #48]	@ (80095c0 <__aeabi_d2ulz+0x34>)
 8009590:	2200      	movs	r2, #0
 8009592:	4606      	mov	r6, r0
 8009594:	460f      	mov	r7, r1
 8009596:	f7f7 f80f 	bl	80005b8 <__aeabi_dmul>
 800959a:	f7f7 fae5 	bl	8000b68 <__aeabi_d2uiz>
 800959e:	4604      	mov	r4, r0
 80095a0:	f7f6 ff90 	bl	80004c4 <__aeabi_ui2d>
 80095a4:	4b07      	ldr	r3, [pc, #28]	@ (80095c4 <__aeabi_d2ulz+0x38>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	f7f7 f806 	bl	80005b8 <__aeabi_dmul>
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f6 fe48 	bl	8000248 <__aeabi_dsub>
 80095b8:	f7f7 fad6 	bl	8000b68 <__aeabi_d2uiz>
 80095bc:	4621      	mov	r1, r4
 80095be:	bdd0      	pop	{r4, r6, r7, pc}
 80095c0:	3df00000 	.word	0x3df00000
 80095c4:	41f00000 	.word	0x41f00000

080095c8 <__udivmoddi4>:
 80095c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095cc:	9d08      	ldr	r5, [sp, #32]
 80095ce:	460e      	mov	r6, r1
 80095d0:	4604      	mov	r4, r0
 80095d2:	460f      	mov	r7, r1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d14a      	bne.n	800966e <__udivmoddi4+0xa6>
 80095d8:	4694      	mov	ip, r2
 80095da:	458c      	cmp	ip, r1
 80095dc:	fab2 f282 	clz	r2, r2
 80095e0:	d960      	bls.n	80096a4 <__udivmoddi4+0xdc>
 80095e2:	b142      	cbz	r2, 80095f6 <__udivmoddi4+0x2e>
 80095e4:	f1c2 0320 	rsb	r3, r2, #32
 80095e8:	4097      	lsls	r7, r2
 80095ea:	fa20 f303 	lsr.w	r3, r0, r3
 80095ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80095f2:	431f      	orrs	r7, r3
 80095f4:	4094      	lsls	r4, r2
 80095f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80095fa:	fa1f f68c 	uxth.w	r6, ip
 80095fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8009602:	0c23      	lsrs	r3, r4, #16
 8009604:	fb0e 7711 	mls	r7, lr, r1, r7
 8009608:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800960c:	fb01 f006 	mul.w	r0, r1, r6
 8009610:	4298      	cmp	r0, r3
 8009612:	d90a      	bls.n	800962a <__udivmoddi4+0x62>
 8009614:	eb1c 0303 	adds.w	r3, ip, r3
 8009618:	f101 37ff 	add.w	r7, r1, #4294967295
 800961c:	f080 8115 	bcs.w	800984a <__udivmoddi4+0x282>
 8009620:	4298      	cmp	r0, r3
 8009622:	f240 8112 	bls.w	800984a <__udivmoddi4+0x282>
 8009626:	3902      	subs	r1, #2
 8009628:	4463      	add	r3, ip
 800962a:	1a1b      	subs	r3, r3, r0
 800962c:	b2a4      	uxth	r4, r4
 800962e:	fbb3 f0fe 	udiv	r0, r3, lr
 8009632:	fb0e 3310 	mls	r3, lr, r0, r3
 8009636:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800963a:	fb00 f606 	mul.w	r6, r0, r6
 800963e:	42a6      	cmp	r6, r4
 8009640:	d90a      	bls.n	8009658 <__udivmoddi4+0x90>
 8009642:	eb1c 0404 	adds.w	r4, ip, r4
 8009646:	f100 33ff 	add.w	r3, r0, #4294967295
 800964a:	f080 8100 	bcs.w	800984e <__udivmoddi4+0x286>
 800964e:	42a6      	cmp	r6, r4
 8009650:	f240 80fd 	bls.w	800984e <__udivmoddi4+0x286>
 8009654:	4464      	add	r4, ip
 8009656:	3802      	subs	r0, #2
 8009658:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800965c:	1ba4      	subs	r4, r4, r6
 800965e:	2100      	movs	r1, #0
 8009660:	b11d      	cbz	r5, 800966a <__udivmoddi4+0xa2>
 8009662:	40d4      	lsrs	r4, r2
 8009664:	2300      	movs	r3, #0
 8009666:	e9c5 4300 	strd	r4, r3, [r5]
 800966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966e:	428b      	cmp	r3, r1
 8009670:	d905      	bls.n	800967e <__udivmoddi4+0xb6>
 8009672:	b10d      	cbz	r5, 8009678 <__udivmoddi4+0xb0>
 8009674:	e9c5 0100 	strd	r0, r1, [r5]
 8009678:	2100      	movs	r1, #0
 800967a:	4608      	mov	r0, r1
 800967c:	e7f5      	b.n	800966a <__udivmoddi4+0xa2>
 800967e:	fab3 f183 	clz	r1, r3
 8009682:	2900      	cmp	r1, #0
 8009684:	d146      	bne.n	8009714 <__udivmoddi4+0x14c>
 8009686:	42b3      	cmp	r3, r6
 8009688:	d302      	bcc.n	8009690 <__udivmoddi4+0xc8>
 800968a:	4282      	cmp	r2, r0
 800968c:	f200 80f5 	bhi.w	800987a <__udivmoddi4+0x2b2>
 8009690:	1a84      	subs	r4, r0, r2
 8009692:	eb66 0203 	sbc.w	r2, r6, r3
 8009696:	2001      	movs	r0, #1
 8009698:	4617      	mov	r7, r2
 800969a:	2d00      	cmp	r5, #0
 800969c:	d0e5      	beq.n	800966a <__udivmoddi4+0xa2>
 800969e:	e9c5 4700 	strd	r4, r7, [r5]
 80096a2:	e7e2      	b.n	800966a <__udivmoddi4+0xa2>
 80096a4:	2a00      	cmp	r2, #0
 80096a6:	f040 8093 	bne.w	80097d0 <__udivmoddi4+0x208>
 80096aa:	eba1 030c 	sub.w	r3, r1, ip
 80096ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80096b2:	fa1f fe8c 	uxth.w	lr, ip
 80096b6:	2101      	movs	r1, #1
 80096b8:	fbb3 f6f7 	udiv	r6, r3, r7
 80096bc:	fb07 3016 	mls	r0, r7, r6, r3
 80096c0:	0c23      	lsrs	r3, r4, #16
 80096c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096c6:	fb0e f006 	mul.w	r0, lr, r6
 80096ca:	4298      	cmp	r0, r3
 80096cc:	d908      	bls.n	80096e0 <__udivmoddi4+0x118>
 80096ce:	eb1c 0303 	adds.w	r3, ip, r3
 80096d2:	f106 38ff 	add.w	r8, r6, #4294967295
 80096d6:	d202      	bcs.n	80096de <__udivmoddi4+0x116>
 80096d8:	4298      	cmp	r0, r3
 80096da:	f200 80d0 	bhi.w	800987e <__udivmoddi4+0x2b6>
 80096de:	4646      	mov	r6, r8
 80096e0:	1a1b      	subs	r3, r3, r0
 80096e2:	b2a4      	uxth	r4, r4
 80096e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80096e8:	fb07 3310 	mls	r3, r7, r0, r3
 80096ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80096f0:	fb0e fe00 	mul.w	lr, lr, r0
 80096f4:	45a6      	cmp	lr, r4
 80096f6:	d908      	bls.n	800970a <__udivmoddi4+0x142>
 80096f8:	eb1c 0404 	adds.w	r4, ip, r4
 80096fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009700:	d202      	bcs.n	8009708 <__udivmoddi4+0x140>
 8009702:	45a6      	cmp	lr, r4
 8009704:	f200 80b6 	bhi.w	8009874 <__udivmoddi4+0x2ac>
 8009708:	4618      	mov	r0, r3
 800970a:	eba4 040e 	sub.w	r4, r4, lr
 800970e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8009712:	e7a5      	b.n	8009660 <__udivmoddi4+0x98>
 8009714:	f1c1 0720 	rsb	r7, r1, #32
 8009718:	408b      	lsls	r3, r1
 800971a:	fa22 fc07 	lsr.w	ip, r2, r7
 800971e:	ea4c 0c03 	orr.w	ip, ip, r3
 8009722:	fa06 fe01 	lsl.w	lr, r6, r1
 8009726:	fa20 f407 	lsr.w	r4, r0, r7
 800972a:	fa26 f307 	lsr.w	r3, r6, r7
 800972e:	ea44 040e 	orr.w	r4, r4, lr
 8009732:	fa00 f801 	lsl.w	r8, r0, r1
 8009736:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800973a:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800973e:	fbb3 fef0 	udiv	lr, r3, r0
 8009742:	fa1f f68c 	uxth.w	r6, ip
 8009746:	fb00 331e 	mls	r3, r0, lr, r3
 800974a:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800974e:	fb0e f906 	mul.w	r9, lr, r6
 8009752:	4599      	cmp	r9, r3
 8009754:	fa02 f201 	lsl.w	r2, r2, r1
 8009758:	d90b      	bls.n	8009772 <__udivmoddi4+0x1aa>
 800975a:	eb1c 0303 	adds.w	r3, ip, r3
 800975e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8009762:	f080 8085 	bcs.w	8009870 <__udivmoddi4+0x2a8>
 8009766:	4599      	cmp	r9, r3
 8009768:	f240 8082 	bls.w	8009870 <__udivmoddi4+0x2a8>
 800976c:	f1ae 0e02 	sub.w	lr, lr, #2
 8009770:	4463      	add	r3, ip
 8009772:	eba3 0909 	sub.w	r9, r3, r9
 8009776:	b2a4      	uxth	r4, r4
 8009778:	fbb9 f3f0 	udiv	r3, r9, r0
 800977c:	fb00 9913 	mls	r9, r0, r3, r9
 8009780:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8009784:	fb03 f606 	mul.w	r6, r3, r6
 8009788:	42a6      	cmp	r6, r4
 800978a:	d908      	bls.n	800979e <__udivmoddi4+0x1d6>
 800978c:	eb1c 0404 	adds.w	r4, ip, r4
 8009790:	f103 30ff 	add.w	r0, r3, #4294967295
 8009794:	d268      	bcs.n	8009868 <__udivmoddi4+0x2a0>
 8009796:	42a6      	cmp	r6, r4
 8009798:	d966      	bls.n	8009868 <__udivmoddi4+0x2a0>
 800979a:	3b02      	subs	r3, #2
 800979c:	4464      	add	r4, ip
 800979e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80097a2:	1ba4      	subs	r4, r4, r6
 80097a4:	fba0 e602 	umull	lr, r6, r0, r2
 80097a8:	42b4      	cmp	r4, r6
 80097aa:	4673      	mov	r3, lr
 80097ac:	46b1      	mov	r9, r6
 80097ae:	d352      	bcc.n	8009856 <__udivmoddi4+0x28e>
 80097b0:	d04f      	beq.n	8009852 <__udivmoddi4+0x28a>
 80097b2:	b15d      	cbz	r5, 80097cc <__udivmoddi4+0x204>
 80097b4:	ebb8 0203 	subs.w	r2, r8, r3
 80097b8:	eb64 0409 	sbc.w	r4, r4, r9
 80097bc:	fa04 f707 	lsl.w	r7, r4, r7
 80097c0:	fa22 f301 	lsr.w	r3, r2, r1
 80097c4:	431f      	orrs	r7, r3
 80097c6:	40cc      	lsrs	r4, r1
 80097c8:	e9c5 7400 	strd	r7, r4, [r5]
 80097cc:	2100      	movs	r1, #0
 80097ce:	e74c      	b.n	800966a <__udivmoddi4+0xa2>
 80097d0:	f1c2 0120 	rsb	r1, r2, #32
 80097d4:	fa20 f301 	lsr.w	r3, r0, r1
 80097d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80097dc:	fa26 f101 	lsr.w	r1, r6, r1
 80097e0:	4096      	lsls	r6, r2
 80097e2:	4333      	orrs	r3, r6
 80097e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80097e8:	fa1f fe8c 	uxth.w	lr, ip
 80097ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80097f0:	fb07 1610 	mls	r6, r7, r0, r1
 80097f4:	0c19      	lsrs	r1, r3, #16
 80097f6:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80097fa:	fb00 f60e 	mul.w	r6, r0, lr
 80097fe:	428e      	cmp	r6, r1
 8009800:	fa04 f402 	lsl.w	r4, r4, r2
 8009804:	d908      	bls.n	8009818 <__udivmoddi4+0x250>
 8009806:	eb1c 0101 	adds.w	r1, ip, r1
 800980a:	f100 38ff 	add.w	r8, r0, #4294967295
 800980e:	d22d      	bcs.n	800986c <__udivmoddi4+0x2a4>
 8009810:	428e      	cmp	r6, r1
 8009812:	d92b      	bls.n	800986c <__udivmoddi4+0x2a4>
 8009814:	3802      	subs	r0, #2
 8009816:	4461      	add	r1, ip
 8009818:	1b89      	subs	r1, r1, r6
 800981a:	b29b      	uxth	r3, r3
 800981c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009820:	fb07 1116 	mls	r1, r7, r6, r1
 8009824:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009828:	fb06 f10e 	mul.w	r1, r6, lr
 800982c:	4299      	cmp	r1, r3
 800982e:	d908      	bls.n	8009842 <__udivmoddi4+0x27a>
 8009830:	eb1c 0303 	adds.w	r3, ip, r3
 8009834:	f106 38ff 	add.w	r8, r6, #4294967295
 8009838:	d214      	bcs.n	8009864 <__udivmoddi4+0x29c>
 800983a:	4299      	cmp	r1, r3
 800983c:	d912      	bls.n	8009864 <__udivmoddi4+0x29c>
 800983e:	3e02      	subs	r6, #2
 8009840:	4463      	add	r3, ip
 8009842:	1a5b      	subs	r3, r3, r1
 8009844:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8009848:	e736      	b.n	80096b8 <__udivmoddi4+0xf0>
 800984a:	4639      	mov	r1, r7
 800984c:	e6ed      	b.n	800962a <__udivmoddi4+0x62>
 800984e:	4618      	mov	r0, r3
 8009850:	e702      	b.n	8009658 <__udivmoddi4+0x90>
 8009852:	45f0      	cmp	r8, lr
 8009854:	d2ad      	bcs.n	80097b2 <__udivmoddi4+0x1ea>
 8009856:	ebbe 0302 	subs.w	r3, lr, r2
 800985a:	eb66 060c 	sbc.w	r6, r6, ip
 800985e:	3801      	subs	r0, #1
 8009860:	46b1      	mov	r9, r6
 8009862:	e7a6      	b.n	80097b2 <__udivmoddi4+0x1ea>
 8009864:	4646      	mov	r6, r8
 8009866:	e7ec      	b.n	8009842 <__udivmoddi4+0x27a>
 8009868:	4603      	mov	r3, r0
 800986a:	e798      	b.n	800979e <__udivmoddi4+0x1d6>
 800986c:	4640      	mov	r0, r8
 800986e:	e7d3      	b.n	8009818 <__udivmoddi4+0x250>
 8009870:	46d6      	mov	lr, sl
 8009872:	e77e      	b.n	8009772 <__udivmoddi4+0x1aa>
 8009874:	4464      	add	r4, ip
 8009876:	3802      	subs	r0, #2
 8009878:	e747      	b.n	800970a <__udivmoddi4+0x142>
 800987a:	4608      	mov	r0, r1
 800987c:	e70d      	b.n	800969a <__udivmoddi4+0xd2>
 800987e:	3e02      	subs	r6, #2
 8009880:	4463      	add	r3, ip
 8009882:	e72d      	b.n	80096e0 <__udivmoddi4+0x118>

08009884 <_init>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	bf00      	nop
 8009888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988a:	bc08      	pop	{r3}
 800988c:	469e      	mov	lr, r3
 800988e:	4770      	bx	lr

08009890 <_fini>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	bf00      	nop
 8009894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009896:	bc08      	pop	{r3}
 8009898:	469e      	mov	lr, r3
 800989a:	4770      	bx	lr
