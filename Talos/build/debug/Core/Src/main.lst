ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_SDIO_SD_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_SDIO_SD_Init:
  27              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "fatfs.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** SD_HandleTypeDef hsd;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** UART_HandleTypeDef huart1;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** static void MX_GPIO_Init(void);
  59:Core/Src/main.c **** static void MX_SDIO_SD_Init(void);
  60:Core/Src/main.c **** static void MX_SPI1_Init(void);
  61:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  62:Core/Src/main.c **** static void MX_I2C1_Init(void);
  63:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END 0 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /**
  73:Core/Src/main.c ****   * @brief  The application entry point.
  74:Core/Src/main.c ****   * @retval int
  75:Core/Src/main.c ****   */
  76:Core/Src/main.c **** int main(void)
  77:Core/Src/main.c **** {
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE END 1 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  86:Core/Src/main.c ****   HAL_Init();
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE BEGIN Init */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* USER CODE END Init */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* Configure the system clock */
  93:Core/Src/main.c ****   SystemClock_Config();
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE END SysInit */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* Initialize all configured peripherals */
 100:Core/Src/main.c ****   MX_GPIO_Init();
 101:Core/Src/main.c ****   MX_SDIO_SD_Init();
 102:Core/Src/main.c ****   MX_SPI1_Init();
 103:Core/Src/main.c ****   MX_USART1_UART_Init();
 104:Core/Src/main.c ****   MX_I2C1_Init();
 105:Core/Src/main.c ****   MX_FATFS_Init();
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 107:Core/Src/main.c ****   int16_t temp;
 108:Core/Src/main.c ****   /* USER CODE END 2 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Infinite loop */
 111:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 112:Core/Src/main.c ****   while (1)
 113:Core/Src/main.c ****   {
 114:Core/Src/main.c ****     // HAL_UART_Transmit(&huart1, (uint8_t*)"Hello World!\r\n", 14, 1000);
 115:Core/Src/main.c ****     if (HAL_I2C_IsDeviceReady(&hi2c1, 0x41 << 1, 2, 1000) == HAL_OK) {
 116:Core/Src/main.c ****       if (HAL_I2C_Master_Transmit(&hi2c1, 0x41 << 1, (uint8_t*)0xBC, 2, 1000) == HAL_OK) {
 117:Core/Src/main.c ****         uint8_t tempData[3];
 118:Core/Src/main.c ****         if (HAL_I2C_Master_Receive(&hi2c1, 0x41 << 1, &tempData, 3, 1000) == HAL_OK) {
 119:Core/Src/main.c ****           char str[25] =  "Temperature: ";
 120:Core/Src/main.c ****           temp = (int16_t)((tempData[1] << 8) | tempData[0]);
 121:Core/Src/main.c ****           float tempFloat = ((float)temp/256.0f)+25.0f;
 122:Core/Src/main.c ****           sprintf(str, "%s%.3dÂ°C\r\n", str, tempFloat);
 123:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 24, 1000);
 124:Core/Src/main.c ****         }
 125:Core/Src/main.c ****       }
 126:Core/Src/main.c ****       HAL_Delay(1000);
 127:Core/Src/main.c ****     }
 128:Core/Src/main.c ****     /* USER CODE END WHILE */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 131:Core/Src/main.c ****   }
 132:Core/Src/main.c ****   /* USER CODE END 3 */
 133:Core/Src/main.c **** }
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** /**
 136:Core/Src/main.c ****   * @brief System Clock Configuration
 137:Core/Src/main.c ****   * @retval None
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c **** void SystemClock_Config(void)
 140:Core/Src/main.c **** {
 141:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 142:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 145:Core/Src/main.c ****   */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 4


 146:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 147:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 150:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 151:Core/Src/main.c ****   */
 152:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 153:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 154:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 161:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     Error_Handler();
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 167:Core/Src/main.c ****   */
 168:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 169:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 170:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 171:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 173:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 176:Core/Src/main.c ****   {
 177:Core/Src/main.c ****     Error_Handler();
 178:Core/Src/main.c ****   }
 179:Core/Src/main.c **** }
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** /**
 182:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 183:Core/Src/main.c ****   * @param None
 184:Core/Src/main.c ****   * @retval None
 185:Core/Src/main.c ****   */
 186:Core/Src/main.c **** static void MX_I2C1_Init(void)
 187:Core/Src/main.c **** {
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 196:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 197:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 198:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 199:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 130;
 200:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 201:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 202:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 5


 203:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 204:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 205:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 206:Core/Src/main.c ****   {
 207:Core/Src/main.c ****     Error_Handler();
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   // TEMPERATURE SENSOR INIT
 212:Core/Src/main.c ****   if (HAL_I2C_IsDeviceReady(&hi2c1, 0x41 << 1, 2, 1000) != HAL_OK) {
 213:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Temperature not ready\r\n", 18, 1000);
 214:Core/Src/main.c ****     } else {
 215:Core/Src/main.c ****       HAL_I2C_Mem_Write(&hi2c1, 0x41 << 1, 0x04, 1, (uint8_t*)0x00, 1, 1000);
 216:Core/Src/main.c ****     }
 217:Core/Src/main.c ****   
 218:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c **** }
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** /**
 223:Core/Src/main.c ****   * @brief SDIO Initialization Function
 224:Core/Src/main.c ****   * @param None
 225:Core/Src/main.c ****   * @retval None
 226:Core/Src/main.c ****   */
 227:Core/Src/main.c **** static void MX_SDIO_SD_Init(void)
 228:Core/Src/main.c **** {
  28              		.loc 1 228 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* USER CODE BEGIN SDIO_Init 0 */
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* USER CODE END SDIO_Init 0 */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /* USER CODE BEGIN SDIO_Init 1 */
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* USER CODE END SDIO_Init 1 */
 237:Core/Src/main.c ****   hsd.Instance = SDIO;
  33              		.loc 1 237 3 view .LVU1
  34              		.loc 1 237 16 is_stmt 0 view .LVU2
  35 0000 054B     		ldr	r3, .L2
  36 0002 064A     		ldr	r2, .L2+4
  37 0004 1A60     		str	r2, [r3]
 238:Core/Src/main.c ****   hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
  38              		.loc 1 238 3 is_stmt 1 view .LVU3
  39              		.loc 1 238 22 is_stmt 0 view .LVU4
  40 0006 0022     		movs	r2, #0
  41 0008 5A60     		str	r2, [r3, #4]
 239:Core/Src/main.c ****   hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  42              		.loc 1 239 3 is_stmt 1 view .LVU5
  43              		.loc 1 239 24 is_stmt 0 view .LVU6
  44 000a 9A60     		str	r2, [r3, #8]
 240:Core/Src/main.c ****   hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  45              		.loc 1 240 3 is_stmt 1 view .LVU7
  46              		.loc 1 240 27 is_stmt 0 view .LVU8
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 6


  47 000c DA60     		str	r2, [r3, #12]
 241:Core/Src/main.c ****   hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  48              		.loc 1 241 3 is_stmt 1 view .LVU9
  49              		.loc 1 241 20 is_stmt 0 view .LVU10
  50 000e 1A61     		str	r2, [r3, #16]
 242:Core/Src/main.c ****   hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  51              		.loc 1 242 3 is_stmt 1 view .LVU11
  52              		.loc 1 242 32 is_stmt 0 view .LVU12
  53 0010 5A61     		str	r2, [r3, #20]
 243:Core/Src/main.c ****   hsd.Init.ClockDiv = 0;
  54              		.loc 1 243 3 is_stmt 1 view .LVU13
  55              		.loc 1 243 21 is_stmt 0 view .LVU14
  56 0012 9A61     		str	r2, [r3, #24]
 244:Core/Src/main.c ****   /* USER CODE BEGIN SDIO_Init 2 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE END SDIO_Init 2 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c **** }
  57              		.loc 1 248 1 view .LVU15
  58 0014 7047     		bx	lr
  59              	.L3:
  60 0016 00BF     		.align	2
  61              	.L2:
  62 0018 00000000 		.word	hsd
  63 001c 002C0140 		.word	1073818624
  64              		.cfi_endproc
  65              	.LFE137:
  67              		.section	.text.MX_GPIO_Init,"ax",%progbits
  68              		.align	1
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MX_GPIO_Init:
  74              	.LFB140:
 249:Core/Src/main.c **** 
 250:Core/Src/main.c **** /**
 251:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 252:Core/Src/main.c ****   * @param None
 253:Core/Src/main.c ****   * @retval None
 254:Core/Src/main.c ****   */
 255:Core/Src/main.c **** static void MX_SPI1_Init(void)
 256:Core/Src/main.c **** {
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 265:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 266:Core/Src/main.c ****   hspi1.Instance = SPI1;
 267:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 268:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 269:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 270:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 271:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 7


 272:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 273:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 274:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 275:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 276:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 277:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 278:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 279:Core/Src/main.c ****   {
 280:Core/Src/main.c ****     Error_Handler();
 281:Core/Src/main.c ****   }
 282:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 285:Core/Src/main.c **** 
 286:Core/Src/main.c **** }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** /**
 289:Core/Src/main.c ****   * @brief USART1 Initialization Function
 290:Core/Src/main.c ****   * @param None
 291:Core/Src/main.c ****   * @retval None
 292:Core/Src/main.c ****   */
 293:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 294:Core/Src/main.c **** {
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 303:Core/Src/main.c ****   huart1.Instance = USART1;
 304:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 305:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 306:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 307:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 308:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 309:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 310:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 311:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 312:Core/Src/main.c ****   {
 313:Core/Src/main.c ****     Error_Handler();
 314:Core/Src/main.c ****   }
 315:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 318:Core/Src/main.c **** 
 319:Core/Src/main.c **** }
 320:Core/Src/main.c **** 
 321:Core/Src/main.c **** /**
 322:Core/Src/main.c ****   * @brief GPIO Initialization Function
 323:Core/Src/main.c ****   * @param None
 324:Core/Src/main.c ****   * @retval None
 325:Core/Src/main.c ****   */
 326:Core/Src/main.c **** static void MX_GPIO_Init(void)
 327:Core/Src/main.c **** {
  75              		.loc 1 327 1 is_stmt 1 view -0
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 8


  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 40
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  80              		.cfi_def_cfa_offset 24
  81              		.cfi_offset 4, -24
  82              		.cfi_offset 5, -20
  83              		.cfi_offset 6, -16
  84              		.cfi_offset 7, -12
  85              		.cfi_offset 8, -8
  86              		.cfi_offset 14, -4
  87 0004 8AB0     		sub	sp, sp, #40
  88              		.cfi_def_cfa_offset 64
 328:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  89              		.loc 1 328 3 view .LVU17
  90              		.loc 1 328 20 is_stmt 0 view .LVU18
  91 0006 0024     		movs	r4, #0
  92 0008 0594     		str	r4, [sp, #20]
  93 000a 0694     		str	r4, [sp, #24]
  94 000c 0794     		str	r4, [sp, #28]
  95 000e 0894     		str	r4, [sp, #32]
  96 0010 0994     		str	r4, [sp, #36]
 329:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 330:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 333:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  97              		.loc 1 333 3 is_stmt 1 view .LVU19
  98              	.LBB4:
  99              		.loc 1 333 3 view .LVU20
 100 0012 0094     		str	r4, [sp]
 101              		.loc 1 333 3 view .LVU21
 102 0014 384B     		ldr	r3, .L6
 103 0016 1A6B     		ldr	r2, [r3, #48]
 104 0018 42F08002 		orr	r2, r2, #128
 105 001c 1A63     		str	r2, [r3, #48]
 106              		.loc 1 333 3 view .LVU22
 107 001e 1A6B     		ldr	r2, [r3, #48]
 108 0020 02F08002 		and	r2, r2, #128
 109 0024 0092     		str	r2, [sp]
 110              		.loc 1 333 3 view .LVU23
 111 0026 009A     		ldr	r2, [sp]
 112              	.LBE4:
 113              		.loc 1 333 3 view .LVU24
 334:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 114              		.loc 1 334 3 view .LVU25
 115              	.LBB5:
 116              		.loc 1 334 3 view .LVU26
 117 0028 0194     		str	r4, [sp, #4]
 118              		.loc 1 334 3 view .LVU27
 119 002a 1A6B     		ldr	r2, [r3, #48]
 120 002c 42F00402 		orr	r2, r2, #4
 121 0030 1A63     		str	r2, [r3, #48]
 122              		.loc 1 334 3 view .LVU28
 123 0032 1A6B     		ldr	r2, [r3, #48]
 124 0034 02F00402 		and	r2, r2, #4
 125 0038 0192     		str	r2, [sp, #4]
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 9


 126              		.loc 1 334 3 view .LVU29
 127 003a 019A     		ldr	r2, [sp, #4]
 128              	.LBE5:
 129              		.loc 1 334 3 view .LVU30
 335:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 130              		.loc 1 335 3 view .LVU31
 131              	.LBB6:
 132              		.loc 1 335 3 view .LVU32
 133 003c 0294     		str	r4, [sp, #8]
 134              		.loc 1 335 3 view .LVU33
 135 003e 1A6B     		ldr	r2, [r3, #48]
 136 0040 42F00102 		orr	r2, r2, #1
 137 0044 1A63     		str	r2, [r3, #48]
 138              		.loc 1 335 3 view .LVU34
 139 0046 1A6B     		ldr	r2, [r3, #48]
 140 0048 02F00102 		and	r2, r2, #1
 141 004c 0292     		str	r2, [sp, #8]
 142              		.loc 1 335 3 view .LVU35
 143 004e 029A     		ldr	r2, [sp, #8]
 144              	.LBE6:
 145              		.loc 1 335 3 view .LVU36
 336:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 146              		.loc 1 336 3 view .LVU37
 147              	.LBB7:
 148              		.loc 1 336 3 view .LVU38
 149 0050 0394     		str	r4, [sp, #12]
 150              		.loc 1 336 3 view .LVU39
 151 0052 1A6B     		ldr	r2, [r3, #48]
 152 0054 42F00802 		orr	r2, r2, #8
 153 0058 1A63     		str	r2, [r3, #48]
 154              		.loc 1 336 3 view .LVU40
 155 005a 1A6B     		ldr	r2, [r3, #48]
 156 005c 02F00802 		and	r2, r2, #8
 157 0060 0392     		str	r2, [sp, #12]
 158              		.loc 1 336 3 view .LVU41
 159 0062 039A     		ldr	r2, [sp, #12]
 160              	.LBE7:
 161              		.loc 1 336 3 view .LVU42
 337:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 162              		.loc 1 337 3 view .LVU43
 163              	.LBB8:
 164              		.loc 1 337 3 view .LVU44
 165 0064 0494     		str	r4, [sp, #16]
 166              		.loc 1 337 3 view .LVU45
 167 0066 1A6B     		ldr	r2, [r3, #48]
 168 0068 42F00202 		orr	r2, r2, #2
 169 006c 1A63     		str	r2, [r3, #48]
 170              		.loc 1 337 3 view .LVU46
 171 006e 1B6B     		ldr	r3, [r3, #48]
 172 0070 03F00203 		and	r3, r3, #2
 173 0074 0493     		str	r3, [sp, #16]
 174              		.loc 1 337 3 view .LVU47
 175 0076 049B     		ldr	r3, [sp, #16]
 176              	.LBE8:
 177              		.loc 1 337 3 view .LVU48
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 10


 340:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin, GPIO_PIN_RESET);
 178              		.loc 1 340 3 view .LVU49
 179 0078 204D     		ldr	r5, .L6+4
 180 007a 2246     		mov	r2, r4
 181 007c 8721     		movs	r1, #135
 182 007e 2846     		mov	r0, r5
 183 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 184              	.LVL0:
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 343:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin, GPIO_PIN_RESET);
 185              		.loc 1 343 3 view .LVU50
 186 0084 1E4E     		ldr	r6, .L6+8
 187 0086 2246     		mov	r2, r4
 188 0088 1C21     		movs	r1, #28
 189 008a 3046     		mov	r0, r6
 190 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 191              	.LVL1:
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /*Configure GPIO pins : PARACHUTE_Pin MOTOR_X_Pin MOTOR_Y_Pin RF_RESET_Pin */
 346:Core/Src/main.c ****   GPIO_InitStruct.Pin = PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin;
 192              		.loc 1 346 3 view .LVU51
 193              		.loc 1 346 23 is_stmt 0 view .LVU52
 194 0090 8723     		movs	r3, #135
 195 0092 0593     		str	r3, [sp, #20]
 347:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 196              		.loc 1 347 3 is_stmt 1 view .LVU53
 197              		.loc 1 347 24 is_stmt 0 view .LVU54
 198 0094 0127     		movs	r7, #1
 199 0096 0697     		str	r7, [sp, #24]
 348:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 200              		.loc 1 348 3 is_stmt 1 view .LVU55
 201              		.loc 1 348 24 is_stmt 0 view .LVU56
 202 0098 0794     		str	r4, [sp, #28]
 349:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 203              		.loc 1 349 3 is_stmt 1 view .LVU57
 204              		.loc 1 349 25 is_stmt 0 view .LVU58
 205 009a 0894     		str	r4, [sp, #32]
 350:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 206              		.loc 1 350 3 is_stmt 1 view .LVU59
 207 009c 05A9     		add	r1, sp, #20
 208 009e 2846     		mov	r0, r5
 209 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 210              	.LVL2:
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /*Configure GPIO pins : IMU_INT_Pin PRESSURE_INT_Pin */
 353:Core/Src/main.c ****   GPIO_InitStruct.Pin = IMU_INT_Pin|PRESSURE_INT_Pin;
 211              		.loc 1 353 3 view .LVU60
 212              		.loc 1 353 23 is_stmt 0 view .LVU61
 213 00a4 4823     		movs	r3, #72
 214 00a6 0593     		str	r3, [sp, #20]
 354:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 215              		.loc 1 354 3 is_stmt 1 view .LVU62
 216              		.loc 1 354 24 is_stmt 0 view .LVU63
 217 00a8 4FF00208 		mov	r8, #2
 218 00ac CDF81880 		str	r8, [sp, #24]
 355:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 11


 219              		.loc 1 355 3 is_stmt 1 view .LVU64
 220              		.loc 1 355 24 is_stmt 0 view .LVU65
 221 00b0 0794     		str	r4, [sp, #28]
 356:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 222              		.loc 1 356 3 is_stmt 1 view .LVU66
 223              		.loc 1 356 25 is_stmt 0 view .LVU67
 224 00b2 0894     		str	r4, [sp, #32]
 357:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 225              		.loc 1 357 3 is_stmt 1 view .LVU68
 226              		.loc 1 357 29 is_stmt 0 view .LVU69
 227 00b4 0F23     		movs	r3, #15
 228 00b6 0993     		str	r3, [sp, #36]
 358:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 229              		.loc 1 358 3 is_stmt 1 view .LVU70
 230 00b8 05A9     		add	r1, sp, #20
 231 00ba 2846     		mov	r0, r5
 232 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL3:
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /*Configure GPIO pin : SD_CD_Pin */
 361:Core/Src/main.c ****   GPIO_InitStruct.Pin = SD_CD_Pin;
 234              		.loc 1 361 3 view .LVU71
 235              		.loc 1 361 23 is_stmt 0 view .LVU72
 236 00c0 CDF81480 		str	r8, [sp, #20]
 362:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 237              		.loc 1 362 3 is_stmt 1 view .LVU73
 238              		.loc 1 362 24 is_stmt 0 view .LVU74
 239 00c4 0694     		str	r4, [sp, #24]
 363:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 240              		.loc 1 363 3 is_stmt 1 view .LVU75
 241              		.loc 1 363 24 is_stmt 0 view .LVU76
 242 00c6 0794     		str	r4, [sp, #28]
 364:Core/Src/main.c ****   HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 243              		.loc 1 364 3 is_stmt 1 view .LVU77
 244 00c8 05A9     		add	r1, sp, #20
 245 00ca 3046     		mov	r0, r6
 246 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 247              	.LVL4:
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /*Configure GPIO pins : CS_PRESSURE_Pin CS_GYRO_Pin CS_WIRELESS_Pin */
 367:Core/Src/main.c ****   GPIO_InitStruct.Pin = CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin;
 248              		.loc 1 367 3 view .LVU78
 249              		.loc 1 367 23 is_stmt 0 view .LVU79
 250 00d0 1C23     		movs	r3, #28
 251 00d2 0593     		str	r3, [sp, #20]
 368:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 252              		.loc 1 368 3 is_stmt 1 view .LVU80
 253              		.loc 1 368 24 is_stmt 0 view .LVU81
 254 00d4 0697     		str	r7, [sp, #24]
 369:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 255              		.loc 1 369 3 is_stmt 1 view .LVU82
 256              		.loc 1 369 24 is_stmt 0 view .LVU83
 257 00d6 0794     		str	r4, [sp, #28]
 370:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 258              		.loc 1 370 3 is_stmt 1 view .LVU84
 259              		.loc 1 370 25 is_stmt 0 view .LVU85
 260 00d8 0894     		str	r4, [sp, #32]
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 12


 371:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 261              		.loc 1 371 3 is_stmt 1 view .LVU86
 262 00da 05A9     		add	r1, sp, #20
 263 00dc 3046     		mov	r0, r6
 264 00de FFF7FEFF 		bl	HAL_GPIO_Init
 265              	.LVL5:
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /*Configure GPIO pins : PC4 ANTENNA_IRQ_Pin */
 374:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_4|ANTENNA_IRQ_Pin;
 266              		.loc 1 374 3 view .LVU87
 267              		.loc 1 374 23 is_stmt 0 view .LVU88
 268 00e2 3023     		movs	r3, #48
 269 00e4 0593     		str	r3, [sp, #20]
 375:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 270              		.loc 1 375 3 is_stmt 1 view .LVU89
 271              		.loc 1 375 24 is_stmt 0 view .LVU90
 272 00e6 0694     		str	r4, [sp, #24]
 376:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 273              		.loc 1 376 3 is_stmt 1 view .LVU91
 274              		.loc 1 376 24 is_stmt 0 view .LVU92
 275 00e8 0794     		str	r4, [sp, #28]
 377:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 276              		.loc 1 377 3 is_stmt 1 view .LVU93
 277 00ea 05A9     		add	r1, sp, #20
 278 00ec 2846     		mov	r0, r5
 279 00ee FFF7FEFF 		bl	HAL_GPIO_Init
 280              	.LVL6:
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 380:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 381:Core/Src/main.c **** }
 281              		.loc 1 381 1 is_stmt 0 view .LVU94
 282 00f2 0AB0     		add	sp, sp, #40
 283              		.cfi_def_cfa_offset 24
 284              		@ sp needed
 285 00f4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 286              	.L7:
 287              		.align	2
 288              	.L6:
 289 00f8 00380240 		.word	1073887232
 290 00fc 00080240 		.word	1073874944
 291 0100 00000240 		.word	1073872896
 292              		.cfi_endproc
 293              	.LFE140:
 295              		.section	.text.Error_Handler,"ax",%progbits
 296              		.align	1
 297              		.global	Error_Handler
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 302              	Error_Handler:
 303              	.LFB141:
 382:Core/Src/main.c **** 
 383:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c **** /* USER CODE END 4 */
 386:Core/Src/main.c **** 
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 13


 387:Core/Src/main.c **** /**
 388:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 389:Core/Src/main.c ****   * @retval None
 390:Core/Src/main.c ****   */
 391:Core/Src/main.c **** void Error_Handler(void)
 392:Core/Src/main.c **** {
 304              		.loc 1 392 1 is_stmt 1 view -0
 305              		.cfi_startproc
 306              		@ Volatile: function does not return.
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 393:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 394:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 395:Core/Src/main.c ****   __disable_irq();
 310              		.loc 1 395 3 view .LVU96
 311              	.LBB9:
 312              	.LBI9:
 313              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 14


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 15


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 16


 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 17


 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 18


 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 19


 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 20


 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 21


 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 22


 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 23


 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 24


 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 25


 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 26


 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 27


 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 28


 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 29


 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 30


 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 314              		.loc 2 960 27 view .LVU97
 315              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 316              		.loc 2 962 3 view .LVU98
 317              		.syntax unified
 318              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 319 0000 72B6     		cpsid i
 320              	@ 0 "" 2
 321              		.thumb
 322              		.syntax unified
 323              	.L9:
 324              	.LBE10:
 325              	.LBE9:
 396:Core/Src/main.c ****   while (1)
 326              		.loc 1 396 3 view .LVU99
 397:Core/Src/main.c ****   {
 398:Core/Src/main.c ****   }
 327              		.loc 1 398 3 view .LVU100
 396:Core/Src/main.c ****   while (1)
 328              		.loc 1 396 9 view .LVU101
 329 0002 FEE7     		b	.L9
 330              		.cfi_endproc
 331              	.LFE141:
 333              		.section	.text.MX_SPI1_Init,"ax",%progbits
 334              		.align	1
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 339              	MX_SPI1_Init:
 340              	.LFB138:
 256:Core/Src/main.c **** 
 341              		.loc 1 256 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345 0000 08B5     		push	{r3, lr}
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 3, -8
 348              		.cfi_offset 14, -4
 266:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 349              		.loc 1 266 3 view .LVU103
 266:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 350              		.loc 1 266 18 is_stmt 0 view .LVU104
 351 0002 0D48     		ldr	r0, .L14
 352 0004 0D4B     		ldr	r3, .L14+4
 353 0006 0360     		str	r3, [r0]
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 31


 267:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 354              		.loc 1 267 3 is_stmt 1 view .LVU105
 267:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 355              		.loc 1 267 19 is_stmt 0 view .LVU106
 356 0008 4FF48273 		mov	r3, #260
 357 000c 4360     		str	r3, [r0, #4]
 268:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 358              		.loc 1 268 3 is_stmt 1 view .LVU107
 268:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 359              		.loc 1 268 24 is_stmt 0 view .LVU108
 360 000e 0023     		movs	r3, #0
 361 0010 8360     		str	r3, [r0, #8]
 269:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 362              		.loc 1 269 3 is_stmt 1 view .LVU109
 269:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 363              		.loc 1 269 23 is_stmt 0 view .LVU110
 364 0012 C360     		str	r3, [r0, #12]
 270:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 365              		.loc 1 270 3 is_stmt 1 view .LVU111
 270:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 366              		.loc 1 270 26 is_stmt 0 view .LVU112
 367 0014 0361     		str	r3, [r0, #16]
 271:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 368              		.loc 1 271 3 is_stmt 1 view .LVU113
 271:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 369              		.loc 1 271 23 is_stmt 0 view .LVU114
 370 0016 4361     		str	r3, [r0, #20]
 272:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 371              		.loc 1 272 3 is_stmt 1 view .LVU115
 272:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 372              		.loc 1 272 18 is_stmt 0 view .LVU116
 373 0018 4FF48022 		mov	r2, #262144
 374 001c 8261     		str	r2, [r0, #24]
 273:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 375              		.loc 1 273 3 is_stmt 1 view .LVU117
 273:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 376              		.loc 1 273 32 is_stmt 0 view .LVU118
 377 001e C361     		str	r3, [r0, #28]
 274:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 378              		.loc 1 274 3 is_stmt 1 view .LVU119
 274:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 379              		.loc 1 274 23 is_stmt 0 view .LVU120
 380 0020 0362     		str	r3, [r0, #32]
 275:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 381              		.loc 1 275 3 is_stmt 1 view .LVU121
 275:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 382              		.loc 1 275 21 is_stmt 0 view .LVU122
 383 0022 4362     		str	r3, [r0, #36]
 276:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 384              		.loc 1 276 3 is_stmt 1 view .LVU123
 276:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 385              		.loc 1 276 29 is_stmt 0 view .LVU124
 386 0024 8362     		str	r3, [r0, #40]
 277:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 387              		.loc 1 277 3 is_stmt 1 view .LVU125
 277:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 388              		.loc 1 277 28 is_stmt 0 view .LVU126
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 32


 389 0026 0A23     		movs	r3, #10
 390 0028 C362     		str	r3, [r0, #44]
 278:Core/Src/main.c ****   {
 391              		.loc 1 278 3 is_stmt 1 view .LVU127
 278:Core/Src/main.c ****   {
 392              		.loc 1 278 7 is_stmt 0 view .LVU128
 393 002a FFF7FEFF 		bl	HAL_SPI_Init
 394              	.LVL7:
 278:Core/Src/main.c ****   {
 395              		.loc 1 278 6 discriminator 1 view .LVU129
 396 002e 00B9     		cbnz	r0, .L13
 286:Core/Src/main.c **** 
 397              		.loc 1 286 1 view .LVU130
 398 0030 08BD     		pop	{r3, pc}
 399              	.L13:
 280:Core/Src/main.c ****   }
 400              		.loc 1 280 5 is_stmt 1 view .LVU131
 401 0032 FFF7FEFF 		bl	Error_Handler
 402              	.LVL8:
 403              	.L15:
 404 0036 00BF     		.align	2
 405              	.L14:
 406 0038 00000000 		.word	hspi1
 407 003c 00300140 		.word	1073819648
 408              		.cfi_endproc
 409              	.LFE138:
 411              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 412              		.align	1
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 417              	MX_USART1_UART_Init:
 418              	.LFB139:
 294:Core/Src/main.c **** 
 419              		.loc 1 294 1 view -0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423 0000 08B5     		push	{r3, lr}
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 303:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 427              		.loc 1 303 3 view .LVU133
 303:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 428              		.loc 1 303 19 is_stmt 0 view .LVU134
 429 0002 0A48     		ldr	r0, .L20
 430 0004 0A4B     		ldr	r3, .L20+4
 431 0006 0360     		str	r3, [r0]
 304:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 432              		.loc 1 304 3 is_stmt 1 view .LVU135
 304:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 433              		.loc 1 304 24 is_stmt 0 view .LVU136
 434 0008 4FF4E133 		mov	r3, #115200
 435 000c 4360     		str	r3, [r0, #4]
 305:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 436              		.loc 1 305 3 is_stmt 1 view .LVU137
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 33


 305:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 437              		.loc 1 305 26 is_stmt 0 view .LVU138
 438 000e 0023     		movs	r3, #0
 439 0010 8360     		str	r3, [r0, #8]
 306:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 440              		.loc 1 306 3 is_stmt 1 view .LVU139
 306:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 441              		.loc 1 306 24 is_stmt 0 view .LVU140
 442 0012 C360     		str	r3, [r0, #12]
 307:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 443              		.loc 1 307 3 is_stmt 1 view .LVU141
 307:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 444              		.loc 1 307 22 is_stmt 0 view .LVU142
 445 0014 0361     		str	r3, [r0, #16]
 308:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 446              		.loc 1 308 3 is_stmt 1 view .LVU143
 308:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 447              		.loc 1 308 20 is_stmt 0 view .LVU144
 448 0016 0C22     		movs	r2, #12
 449 0018 4261     		str	r2, [r0, #20]
 309:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 450              		.loc 1 309 3 is_stmt 1 view .LVU145
 309:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 451              		.loc 1 309 25 is_stmt 0 view .LVU146
 452 001a 8361     		str	r3, [r0, #24]
 310:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 453              		.loc 1 310 3 is_stmt 1 view .LVU147
 310:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 454              		.loc 1 310 28 is_stmt 0 view .LVU148
 455 001c C361     		str	r3, [r0, #28]
 311:Core/Src/main.c ****   {
 456              		.loc 1 311 3 is_stmt 1 view .LVU149
 311:Core/Src/main.c ****   {
 457              		.loc 1 311 7 is_stmt 0 view .LVU150
 458 001e FFF7FEFF 		bl	HAL_UART_Init
 459              	.LVL9:
 311:Core/Src/main.c ****   {
 460              		.loc 1 311 6 discriminator 1 view .LVU151
 461 0022 00B9     		cbnz	r0, .L19
 319:Core/Src/main.c **** 
 462              		.loc 1 319 1 view .LVU152
 463 0024 08BD     		pop	{r3, pc}
 464              	.L19:
 313:Core/Src/main.c ****   }
 465              		.loc 1 313 5 is_stmt 1 view .LVU153
 466 0026 FFF7FEFF 		bl	Error_Handler
 467              	.LVL10:
 468              	.L21:
 469 002a 00BF     		.align	2
 470              	.L20:
 471 002c 00000000 		.word	huart1
 472 0030 00100140 		.word	1073811456
 473              		.cfi_endproc
 474              	.LFE139:
 476              		.section	.rodata.MX_I2C1_Init.str1.4,"aMS",%progbits,1
 477              		.align	2
 478              	.LC0:
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 34


 479 0000 54656D70 		.ascii	"Temperature not ready\015\012\000"
 479      65726174 
 479      75726520 
 479      6E6F7420 
 479      72656164 
 480              		.section	.text.MX_I2C1_Init,"ax",%progbits
 481              		.align	1
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 486              	MX_I2C1_Init:
 487              	.LFB136:
 187:Core/Src/main.c **** 
 488              		.loc 1 187 1 view -0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492 0000 00B5     		push	{lr}
 493              		.cfi_def_cfa_offset 4
 494              		.cfi_offset 14, -4
 495 0002 85B0     		sub	sp, sp, #20
 496              		.cfi_def_cfa_offset 24
 196:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 497              		.loc 1 196 3 view .LVU155
 196:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 498              		.loc 1 196 18 is_stmt 0 view .LVU156
 499 0004 1948     		ldr	r0, .L28
 500 0006 1A4B     		ldr	r3, .L28+4
 501 0008 0360     		str	r3, [r0]
 197:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 502              		.loc 1 197 3 is_stmt 1 view .LVU157
 197:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 503              		.loc 1 197 25 is_stmt 0 view .LVU158
 504 000a 1A4B     		ldr	r3, .L28+8
 505 000c 4360     		str	r3, [r0, #4]
 198:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 130;
 506              		.loc 1 198 3 is_stmt 1 view .LVU159
 198:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 130;
 507              		.loc 1 198 24 is_stmt 0 view .LVU160
 508 000e 0023     		movs	r3, #0
 509 0010 8360     		str	r3, [r0, #8]
 199:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 510              		.loc 1 199 3 is_stmt 1 view .LVU161
 199:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 511              		.loc 1 199 26 is_stmt 0 view .LVU162
 512 0012 8222     		movs	r2, #130
 513 0014 C260     		str	r2, [r0, #12]
 200:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 514              		.loc 1 200 3 is_stmt 1 view .LVU163
 200:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 515              		.loc 1 200 29 is_stmt 0 view .LVU164
 516 0016 4FF48042 		mov	r2, #16384
 517 001a 0261     		str	r2, [r0, #16]
 201:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 518              		.loc 1 201 3 is_stmt 1 view .LVU165
 201:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 519              		.loc 1 201 30 is_stmt 0 view .LVU166
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 35


 520 001c 4361     		str	r3, [r0, #20]
 202:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 521              		.loc 1 202 3 is_stmt 1 view .LVU167
 202:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 522              		.loc 1 202 26 is_stmt 0 view .LVU168
 523 001e 8361     		str	r3, [r0, #24]
 203:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 524              		.loc 1 203 3 is_stmt 1 view .LVU169
 203:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 525              		.loc 1 203 30 is_stmt 0 view .LVU170
 526 0020 C361     		str	r3, [r0, #28]
 204:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 527              		.loc 1 204 3 is_stmt 1 view .LVU171
 204:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 528              		.loc 1 204 28 is_stmt 0 view .LVU172
 529 0022 0362     		str	r3, [r0, #32]
 205:Core/Src/main.c ****   {
 530              		.loc 1 205 3 is_stmt 1 view .LVU173
 205:Core/Src/main.c ****   {
 531              		.loc 1 205 7 is_stmt 0 view .LVU174
 532 0024 FFF7FEFF 		bl	HAL_I2C_Init
 533              	.LVL11:
 205:Core/Src/main.c ****   {
 534              		.loc 1 205 6 discriminator 1 view .LVU175
 535 0028 88B9     		cbnz	r0, .L27
 212:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Temperature not ready\r\n", 18, 1000);
 536              		.loc 1 212 3 is_stmt 1 view .LVU176
 212:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Temperature not ready\r\n", 18, 1000);
 537              		.loc 1 212 7 is_stmt 0 view .LVU177
 538 002a 4FF47A73 		mov	r3, #1000
 539 002e 0222     		movs	r2, #2
 540 0030 8221     		movs	r1, #130
 541 0032 0E48     		ldr	r0, .L28
 542 0034 FFF7FEFF 		bl	HAL_I2C_IsDeviceReady
 543              	.LVL12:
 212:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Temperature not ready\r\n", 18, 1000);
 544              		.loc 1 212 6 discriminator 1 view .LVU178
 545 0038 58B1     		cbz	r0, .L24
 213:Core/Src/main.c ****     } else {
 546              		.loc 1 213 7 is_stmt 1 view .LVU179
 547 003a 4FF47A73 		mov	r3, #1000
 548 003e 1222     		movs	r2, #18
 549 0040 0D49     		ldr	r1, .L28+12
 550 0042 0E48     		ldr	r0, .L28+16
 551 0044 FFF7FEFF 		bl	HAL_UART_Transmit
 552              	.LVL13:
 553              	.L22:
 220:Core/Src/main.c **** 
 554              		.loc 1 220 1 is_stmt 0 view .LVU180
 555 0048 05B0     		add	sp, sp, #20
 556              		.cfi_remember_state
 557              		.cfi_def_cfa_offset 4
 558              		@ sp needed
 559 004a 5DF804FB 		ldr	pc, [sp], #4
 560              	.L27:
 561              		.cfi_restore_state
 207:Core/Src/main.c ****   }
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 36


 562              		.loc 1 207 5 is_stmt 1 view .LVU181
 563 004e FFF7FEFF 		bl	Error_Handler
 564              	.LVL14:
 565              	.L24:
 215:Core/Src/main.c ****     }
 566              		.loc 1 215 7 view .LVU182
 567 0052 4FF47A73 		mov	r3, #1000
 568 0056 0293     		str	r3, [sp, #8]
 569 0058 0123     		movs	r3, #1
 570 005a 0193     		str	r3, [sp, #4]
 571 005c 0022     		movs	r2, #0
 572 005e 0092     		str	r2, [sp]
 573 0060 0422     		movs	r2, #4
 574 0062 8221     		movs	r1, #130
 575 0064 0148     		ldr	r0, .L28
 576 0066 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 577              	.LVL15:
 220:Core/Src/main.c **** 
 578              		.loc 1 220 1 is_stmt 0 view .LVU183
 579 006a EDE7     		b	.L22
 580              	.L29:
 581              		.align	2
 582              	.L28:
 583 006c 00000000 		.word	hi2c1
 584 0070 00540040 		.word	1073763328
 585 0074 A0860100 		.word	100000
 586 0078 00000000 		.word	.LC0
 587 007c 00000000 		.word	huart1
 588              		.cfi_endproc
 589              	.LFE136:
 591              		.section	.text.SystemClock_Config,"ax",%progbits
 592              		.align	1
 593              		.global	SystemClock_Config
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 598              	SystemClock_Config:
 599              	.LFB135:
 140:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 600              		.loc 1 140 1 is_stmt 1 view -0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 80
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604 0000 00B5     		push	{lr}
 605              		.cfi_def_cfa_offset 4
 606              		.cfi_offset 14, -4
 607 0002 95B0     		sub	sp, sp, #84
 608              		.cfi_def_cfa_offset 88
 141:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 609              		.loc 1 141 3 view .LVU185
 141:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 610              		.loc 1 141 22 is_stmt 0 view .LVU186
 611 0004 3022     		movs	r2, #48
 612 0006 0021     		movs	r1, #0
 613 0008 08A8     		add	r0, sp, #32
 614 000a FFF7FEFF 		bl	memset
 615              	.LVL16:
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 37


 142:Core/Src/main.c **** 
 616              		.loc 1 142 3 is_stmt 1 view .LVU187
 142:Core/Src/main.c **** 
 617              		.loc 1 142 22 is_stmt 0 view .LVU188
 618 000e 0023     		movs	r3, #0
 619 0010 0393     		str	r3, [sp, #12]
 620 0012 0493     		str	r3, [sp, #16]
 621 0014 0593     		str	r3, [sp, #20]
 622 0016 0693     		str	r3, [sp, #24]
 623 0018 0793     		str	r3, [sp, #28]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 624              		.loc 1 146 3 is_stmt 1 view .LVU189
 625              	.LBB11:
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 626              		.loc 1 146 3 view .LVU190
 627 001a 0193     		str	r3, [sp, #4]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 628              		.loc 1 146 3 view .LVU191
 629 001c 1C4A     		ldr	r2, .L36
 630 001e 116C     		ldr	r1, [r2, #64]
 631 0020 41F08051 		orr	r1, r1, #268435456
 632 0024 1164     		str	r1, [r2, #64]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 633              		.loc 1 146 3 view .LVU192
 634 0026 126C     		ldr	r2, [r2, #64]
 635 0028 02F08052 		and	r2, r2, #268435456
 636 002c 0192     		str	r2, [sp, #4]
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 637              		.loc 1 146 3 view .LVU193
 638 002e 019A     		ldr	r2, [sp, #4]
 639              	.LBE11:
 146:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 640              		.loc 1 146 3 view .LVU194
 147:Core/Src/main.c **** 
 641              		.loc 1 147 3 view .LVU195
 642              	.LBB12:
 147:Core/Src/main.c **** 
 643              		.loc 1 147 3 view .LVU196
 644 0030 0293     		str	r3, [sp, #8]
 147:Core/Src/main.c **** 
 645              		.loc 1 147 3 view .LVU197
 646 0032 184A     		ldr	r2, .L36+4
 647 0034 1168     		ldr	r1, [r2]
 648 0036 41F48041 		orr	r1, r1, #16384
 649 003a 1160     		str	r1, [r2]
 147:Core/Src/main.c **** 
 650              		.loc 1 147 3 view .LVU198
 651 003c 1268     		ldr	r2, [r2]
 652 003e 02F48042 		and	r2, r2, #16384
 653 0042 0292     		str	r2, [sp, #8]
 147:Core/Src/main.c **** 
 654              		.loc 1 147 3 view .LVU199
 655 0044 029A     		ldr	r2, [sp, #8]
 656              	.LBE12:
 147:Core/Src/main.c **** 
 657              		.loc 1 147 3 view .LVU200
 152:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 38


 658              		.loc 1 152 3 view .LVU201
 152:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 659              		.loc 1 152 36 is_stmt 0 view .LVU202
 660 0046 0222     		movs	r2, #2
 661 0048 0892     		str	r2, [sp, #32]
 153:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 662              		.loc 1 153 3 is_stmt 1 view .LVU203
 153:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 663              		.loc 1 153 30 is_stmt 0 view .LVU204
 664 004a 0121     		movs	r1, #1
 665 004c 0B91     		str	r1, [sp, #44]
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 666              		.loc 1 154 3 is_stmt 1 view .LVU205
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 667              		.loc 1 154 41 is_stmt 0 view .LVU206
 668 004e 1021     		movs	r1, #16
 669 0050 0C91     		str	r1, [sp, #48]
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 670              		.loc 1 155 3 is_stmt 1 view .LVU207
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 671              		.loc 1 155 34 is_stmt 0 view .LVU208
 672 0052 0E92     		str	r2, [sp, #56]
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 673              		.loc 1 156 3 is_stmt 1 view .LVU209
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 674              		.loc 1 156 35 is_stmt 0 view .LVU210
 675 0054 0F93     		str	r3, [sp, #60]
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 676              		.loc 1 157 3 is_stmt 1 view .LVU211
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 677              		.loc 1 157 30 is_stmt 0 view .LVU212
 678 0056 1091     		str	r1, [sp, #64]
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 679              		.loc 1 158 3 is_stmt 1 view .LVU213
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 680              		.loc 1 158 30 is_stmt 0 view .LVU214
 681 0058 C023     		movs	r3, #192
 682 005a 1193     		str	r3, [sp, #68]
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 683              		.loc 1 159 3 is_stmt 1 view .LVU215
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 684              		.loc 1 159 30 is_stmt 0 view .LVU216
 685 005c 1292     		str	r2, [sp, #72]
 160:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 686              		.loc 1 160 3 is_stmt 1 view .LVU217
 160:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 687              		.loc 1 160 30 is_stmt 0 view .LVU218
 688 005e 0423     		movs	r3, #4
 689 0060 1393     		str	r3, [sp, #76]
 161:Core/Src/main.c ****   {
 690              		.loc 1 161 3 is_stmt 1 view .LVU219
 161:Core/Src/main.c ****   {
 691              		.loc 1 161 7 is_stmt 0 view .LVU220
 692 0062 08A8     		add	r0, sp, #32
 693 0064 FFF7FEFF 		bl	HAL_RCC_OscConfig
 694              	.LVL17:
 161:Core/Src/main.c ****   {
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 39


 695              		.loc 1 161 6 discriminator 1 view .LVU221
 696 0068 68B9     		cbnz	r0, .L34
 168:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 697              		.loc 1 168 3 is_stmt 1 view .LVU222
 168:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 698              		.loc 1 168 31 is_stmt 0 view .LVU223
 699 006a 0F23     		movs	r3, #15
 700 006c 0393     		str	r3, [sp, #12]
 170:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 701              		.loc 1 170 3 is_stmt 1 view .LVU224
 170:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 702              		.loc 1 170 34 is_stmt 0 view .LVU225
 703 006e 0021     		movs	r1, #0
 704 0070 0491     		str	r1, [sp, #16]
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 705              		.loc 1 171 3 is_stmt 1 view .LVU226
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 706              		.loc 1 171 35 is_stmt 0 view .LVU227
 707 0072 0591     		str	r1, [sp, #20]
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 708              		.loc 1 172 3 is_stmt 1 view .LVU228
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 709              		.loc 1 172 36 is_stmt 0 view .LVU229
 710 0074 0691     		str	r1, [sp, #24]
 173:Core/Src/main.c **** 
 711              		.loc 1 173 3 is_stmt 1 view .LVU230
 173:Core/Src/main.c **** 
 712              		.loc 1 173 36 is_stmt 0 view .LVU231
 713 0076 0791     		str	r1, [sp, #28]
 175:Core/Src/main.c ****   {
 714              		.loc 1 175 3 is_stmt 1 view .LVU232
 175:Core/Src/main.c ****   {
 715              		.loc 1 175 7 is_stmt 0 view .LVU233
 716 0078 03A8     		add	r0, sp, #12
 717 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 718              	.LVL18:
 175:Core/Src/main.c ****   {
 719              		.loc 1 175 6 discriminator 1 view .LVU234
 720 007e 20B9     		cbnz	r0, .L35
 179:Core/Src/main.c **** 
 721              		.loc 1 179 1 view .LVU235
 722 0080 15B0     		add	sp, sp, #84
 723              		.cfi_remember_state
 724              		.cfi_def_cfa_offset 4
 725              		@ sp needed
 726 0082 5DF804FB 		ldr	pc, [sp], #4
 727              	.L34:
 728              		.cfi_restore_state
 163:Core/Src/main.c ****   }
 729              		.loc 1 163 5 is_stmt 1 view .LVU236
 730 0086 FFF7FEFF 		bl	Error_Handler
 731              	.LVL19:
 732              	.L35:
 177:Core/Src/main.c ****   }
 733              		.loc 1 177 5 view .LVU237
 734 008a FFF7FEFF 		bl	Error_Handler
 735              	.LVL20:
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 40


 736              	.L37:
 737 008e 00BF     		.align	2
 738              	.L36:
 739 0090 00380240 		.word	1073887232
 740 0094 00700040 		.word	1073770496
 741              		.cfi_endproc
 742              	.LFE135:
 744              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 745              		.align	2
 746              	.LC2:
 747 0000 2573252E 		.ascii	"%s%.3d\302\260C\015\012\000"
 747      3364C2B0 
 747      430D0A00 
 748              		.global	__aeabi_f2d
 749              		.section	.text.main,"ax",%progbits
 750              		.align	1
 751              		.global	main
 752              		.syntax unified
 753              		.thumb
 754              		.thumb_func
 756              	main:
 757              	.LFB134:
  77:Core/Src/main.c **** 
 758              		.loc 1 77 1 view -0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 32
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762 0000 00B5     		push	{lr}
 763              		.cfi_def_cfa_offset 4
 764              		.cfi_offset 14, -4
 765 0002 8BB0     		sub	sp, sp, #44
 766              		.cfi_def_cfa_offset 48
  86:Core/Src/main.c **** 
 767              		.loc 1 86 3 view .LVU239
 768 0004 FFF7FEFF 		bl	HAL_Init
 769              	.LVL21:
  93:Core/Src/main.c **** 
 770              		.loc 1 93 3 view .LVU240
 771 0008 FFF7FEFF 		bl	SystemClock_Config
 772              	.LVL22:
 100:Core/Src/main.c ****   MX_SDIO_SD_Init();
 773              		.loc 1 100 3 view .LVU241
 774 000c FFF7FEFF 		bl	MX_GPIO_Init
 775              	.LVL23:
 101:Core/Src/main.c ****   MX_SPI1_Init();
 776              		.loc 1 101 3 view .LVU242
 777 0010 FFF7FEFF 		bl	MX_SDIO_SD_Init
 778              	.LVL24:
 102:Core/Src/main.c ****   MX_USART1_UART_Init();
 779              		.loc 1 102 3 view .LVU243
 780 0014 FFF7FEFF 		bl	MX_SPI1_Init
 781              	.LVL25:
 103:Core/Src/main.c ****   MX_I2C1_Init();
 782              		.loc 1 103 3 view .LVU244
 783 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 784              	.LVL26:
 104:Core/Src/main.c ****   MX_FATFS_Init();
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 41


 785              		.loc 1 104 3 view .LVU245
 786 001c FFF7FEFF 		bl	MX_I2C1_Init
 787              	.LVL27:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 788              		.loc 1 105 3 view .LVU246
 789 0020 FFF7FEFF 		bl	MX_FATFS_Init
 790              	.LVL28:
 791 0024 03E0     		b	.L39
 792              	.L40:
 126:Core/Src/main.c ****     }
 793              		.loc 1 126 7 view .LVU247
 794 0026 4FF47A70 		mov	r0, #1000
 795 002a FFF7FEFF 		bl	HAL_Delay
 796              	.LVL29:
 797              	.L39:
 107:Core/Src/main.c ****   /* USER CODE END 2 */
 798              		.loc 1 107 3 view .LVU248
 112:Core/Src/main.c ****   {
 799              		.loc 1 112 3 view .LVU249
 115:Core/Src/main.c ****       if (HAL_I2C_Master_Transmit(&hi2c1, 0x41 << 1, (uint8_t*)0xBC, 2, 1000) == HAL_OK) {
 800              		.loc 1 115 5 view .LVU250
 115:Core/Src/main.c ****       if (HAL_I2C_Master_Transmit(&hi2c1, 0x41 << 1, (uint8_t*)0xBC, 2, 1000) == HAL_OK) {
 801              		.loc 1 115 9 is_stmt 0 view .LVU251
 802 002e 4FF47A73 		mov	r3, #1000
 803 0032 0222     		movs	r2, #2
 804 0034 8221     		movs	r1, #130
 805 0036 2848     		ldr	r0, .L44
 806 0038 FFF7FEFF 		bl	HAL_I2C_IsDeviceReady
 807              	.LVL30:
 115:Core/Src/main.c ****       if (HAL_I2C_Master_Transmit(&hi2c1, 0x41 << 1, (uint8_t*)0xBC, 2, 1000) == HAL_OK) {
 808              		.loc 1 115 8 discriminator 1 view .LVU252
 809 003c 0028     		cmp	r0, #0
 810 003e F6D1     		bne	.L39
 116:Core/Src/main.c ****         uint8_t tempData[3];
 811              		.loc 1 116 7 is_stmt 1 view .LVU253
 116:Core/Src/main.c ****         uint8_t tempData[3];
 812              		.loc 1 116 11 is_stmt 0 view .LVU254
 813 0040 4FF47A73 		mov	r3, #1000
 814 0044 0093     		str	r3, [sp]
 815 0046 0223     		movs	r3, #2
 816 0048 BC22     		movs	r2, #188
 817 004a 8221     		movs	r1, #130
 818 004c 2248     		ldr	r0, .L44
 819 004e FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 820              	.LVL31:
 116:Core/Src/main.c ****         uint8_t tempData[3];
 821              		.loc 1 116 10 discriminator 1 view .LVU255
 822 0052 0028     		cmp	r0, #0
 823 0054 E7D1     		bne	.L40
 824              	.LBB13:
 117:Core/Src/main.c ****         if (HAL_I2C_Master_Receive(&hi2c1, 0x41 << 1, &tempData, 3, 1000) == HAL_OK) {
 825              		.loc 1 117 9 is_stmt 1 view .LVU256
 118:Core/Src/main.c ****           char str[25] =  "Temperature: ";
 826              		.loc 1 118 9 view .LVU257
 118:Core/Src/main.c ****           char str[25] =  "Temperature: ";
 827              		.loc 1 118 13 is_stmt 0 view .LVU258
 828 0056 4FF47A73 		mov	r3, #1000
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 42


 829 005a 0093     		str	r3, [sp]
 830 005c 0323     		movs	r3, #3
 831 005e 02AA     		add	r2, sp, #8
 832 0060 8221     		movs	r1, #130
 833 0062 1D48     		ldr	r0, .L44
 834 0064 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 835              	.LVL32:
 118:Core/Src/main.c ****           char str[25] =  "Temperature: ";
 836              		.loc 1 118 12 discriminator 1 view .LVU259
 837 0068 0028     		cmp	r0, #0
 838 006a DCD1     		bne	.L40
 839              	.LBB14:
 119:Core/Src/main.c ****           temp = (int16_t)((tempData[1] << 8) | tempData[0]);
 840              		.loc 1 119 11 is_stmt 1 view .LVU260
 119:Core/Src/main.c ****           temp = (int16_t)((tempData[1] << 8) | tempData[0]);
 841              		.loc 1 119 16 is_stmt 0 view .LVU261
 842 006c 1B4B     		ldr	r3, .L44+4
 843 006e 0DF10C0C 		add	ip, sp, #12
 844 0072 0FCB     		ldm	r3, {r0, r1, r2, r3}
 845 0074 ACE80700 		stmia	ip!, {r0, r1, r2}
 846 0078 ACF80030 		strh	r3, [ip]	@ movhi
 847 007c 0023     		movs	r3, #0
 848 007e CDF81A30 		str	r3, [sp, #26]	@ unaligned
 849 0082 CDF81E30 		str	r3, [sp, #30]	@ unaligned
 850 0086 CDF82130 		str	r3, [sp, #33]	@ unaligned
 120:Core/Src/main.c ****           float tempFloat = ((float)temp/256.0f)+25.0f;
 851              		.loc 1 120 11 is_stmt 1 view .LVU262
 120:Core/Src/main.c ****           float tempFloat = ((float)temp/256.0f)+25.0f;
 852              		.loc 1 120 37 is_stmt 0 view .LVU263
 853 008a 9DF80930 		ldrb	r3, [sp, #9]	@ zero_extendqisi2
 120:Core/Src/main.c ****           float tempFloat = ((float)temp/256.0f)+25.0f;
 854              		.loc 1 120 18 view .LVU264
 855 008e 1B02     		lsls	r3, r3, #8
 856 0090 1BB2     		sxth	r3, r3
 120:Core/Src/main.c ****           float tempFloat = ((float)temp/256.0f)+25.0f;
 857              		.loc 1 120 57 view .LVU265
 858 0092 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 120:Core/Src/main.c ****           float tempFloat = ((float)temp/256.0f)+25.0f;
 859              		.loc 1 120 16 view .LVU266
 860 0096 1343     		orrs	r3, r3, r2
 861 0098 07EE903A 		vmov	s15, r3	@ int
 862              	.LVL33:
 121:Core/Src/main.c ****           sprintf(str, "%s%.3dÂ°C\r\n", str, tempFloat);
 863              		.loc 1 121 11 is_stmt 1 view .LVU267
 121:Core/Src/main.c ****           sprintf(str, "%s%.3dÂ°C\r\n", str, tempFloat);
 864              		.loc 1 121 30 is_stmt 0 view .LVU268
 865 009c F8EEE77A 		vcvt.f32.s32	s15, s15
 866              	.LVL34:
 121:Core/Src/main.c ****           sprintf(str, "%s%.3dÂ°C\r\n", str, tempFloat);
 867              		.loc 1 121 41 view .LVU269
 868 00a0 9FED0F7A 		vldr.32	s14, .L44+8
 869 00a4 67EE877A 		vmul.f32	s15, s15, s14
 870              	.LVL35:
 122:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 24, 1000);
 871              		.loc 1 122 11 is_stmt 1 view .LVU270
 872 00a8 B3EE097A 		vmov.f32	s14, #2.5e+1
 873 00ac 77EE877A 		vadd.f32	s15, s15, s14
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 43


 874              	.LVL36:
 122:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 24, 1000);
 875              		.loc 1 122 11 is_stmt 0 view .LVU271
 876 00b0 17EE900A 		vmov	r0, s15
 877 00b4 FFF7FEFF 		bl	__aeabi_f2d
 878              	.LVL37:
 122:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 24, 1000);
 879              		.loc 1 122 11 view .LVU272
 880 00b8 CDE90001 		strd	r0, [sp]
 881 00bc 03AA     		add	r2, sp, #12
 882 00be 0949     		ldr	r1, .L44+12
 883 00c0 1046     		mov	r0, r2
 884 00c2 FFF7FEFF 		bl	sprintf
 885              	.LVL38:
 123:Core/Src/main.c ****         }
 886              		.loc 1 123 11 is_stmt 1 view .LVU273
 887 00c6 4FF47A73 		mov	r3, #1000
 888 00ca 1822     		movs	r2, #24
 889 00cc 03A9     		add	r1, sp, #12
 890 00ce 0648     		ldr	r0, .L44+16
 891 00d0 FFF7FEFF 		bl	HAL_UART_Transmit
 892              	.LVL39:
 893 00d4 A7E7     		b	.L40
 894              	.L45:
 895 00d6 00BF     		.align	2
 896              	.L44:
 897 00d8 00000000 		.word	hi2c1
 898 00dc 00000000 		.word	.LANCHOR0
 899 00e0 0000803B 		.word	998244352
 900 00e4 00000000 		.word	.LC2
 901 00e8 00000000 		.word	huart1
 902              	.LBE14:
 903              	.LBE13:
 904              		.cfi_endproc
 905              	.LFE134:
 907              		.global	huart1
 908              		.section	.bss.huart1,"aw",%nobits
 909              		.align	2
 912              	huart1:
 913 0000 00000000 		.space	72
 913      00000000 
 913      00000000 
 913      00000000 
 913      00000000 
 914              		.global	hspi1
 915              		.section	.bss.hspi1,"aw",%nobits
 916              		.align	2
 919              	hspi1:
 920 0000 00000000 		.space	88
 920      00000000 
 920      00000000 
 920      00000000 
 920      00000000 
 921              		.global	hsd
 922              		.section	.bss.hsd,"aw",%nobits
 923              		.align	2
 926              	hsd:
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 44


 927 0000 00000000 		.space	132
 927      00000000 
 927      00000000 
 927      00000000 
 927      00000000 
 928              		.global	hi2c1
 929              		.section	.bss.hi2c1,"aw",%nobits
 930              		.align	2
 933              	hi2c1:
 934 0000 00000000 		.space	84
 934      00000000 
 934      00000000 
 934      00000000 
 934      00000000 
 935              		.section	.rodata
 936              		.align	2
 937              		.set	.LANCHOR0,. + 0
 938              	.LC1:
 939 0000 54656D70 		.ascii	"Temperature: \000"
 939      65726174 
 939      7572653A 
 939      2000
 940 000e 00000000 		.space	11
 940      00000000 
 940      000000
 941              		.text
 942              	.Letext0:
 943              		.file 3 "C:/PROGRAM FILES (X86)/ARM GNU TOOLCHAIN ARM-NONE-EABI/13.3 REL1/arm-none-eabi/include/ma
 944              		.file 4 "C:/PROGRAM FILES (X86)/ARM GNU TOOLCHAIN ARM-NONE-EABI/13.3 REL1/arm-none-eabi/include/sy
 945              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 946              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 947              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 948              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 949              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 950              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 951              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 952              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_sdmmc.h"
 953              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_sd.h"
 954              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 955              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 956              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 957              		.file 17 "<built-in>"
 958              		.file 18 "FATFS/App/fatfs.h"
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:21     .text.MX_SDIO_SD_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:26     .text.MX_SDIO_SD_Init:00000000 MX_SDIO_SD_Init
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:62     .text.MX_SDIO_SD_Init:00000018 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:926    .bss.hsd:00000000 hsd
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:68     .text.MX_GPIO_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:73     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:289    .text.MX_GPIO_Init:000000f8 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:296    .text.Error_Handler:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:302    .text.Error_Handler:00000000 Error_Handler
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:334    .text.MX_SPI1_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:339    .text.MX_SPI1_Init:00000000 MX_SPI1_Init
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:406    .text.MX_SPI1_Init:00000038 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:919    .bss.hspi1:00000000 hspi1
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:412    .text.MX_USART1_UART_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:417    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:471    .text.MX_USART1_UART_Init:0000002c $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:912    .bss.huart1:00000000 huart1
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:477    .rodata.MX_I2C1_Init.str1.4:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:481    .text.MX_I2C1_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:486    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:583    .text.MX_I2C1_Init:0000006c $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:933    .bss.hi2c1:00000000 hi2c1
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:592    .text.SystemClock_Config:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:598    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:739    .text.SystemClock_Config:00000090 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:745    .rodata.main.str1.4:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:750    .text.main:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:756    .text.main:00000000 main
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:897    .text.main:000000d8 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:909    .bss.huart1:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:916    .bss.hspi1:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:923    .bss.hsd:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:930    .bss.hi2c1:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccnGYD64.s:936    .rodata:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_UART_Init
HAL_I2C_Init
HAL_I2C_IsDeviceReady
HAL_UART_Transmit
HAL_I2C_Mem_Write
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
HAL_Init
MX_FATFS_Init
HAL_Delay
HAL_I2C_Master_Transmit
HAL_I2C_Master_Receive
sprintf
