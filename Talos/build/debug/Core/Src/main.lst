ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_SDIO_SD_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_SDIO_SD_Init:
  27              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "fatfs.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** SD_HandleTypeDef hsd;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** UART_HandleTypeDef huart1;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** static void MX_GPIO_Init(void);
  59:Core/Src/main.c **** static void MX_SDIO_SD_Init(void);
  60:Core/Src/main.c **** static void MX_SPI1_Init(void);
  61:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  62:Core/Src/main.c **** static void MX_I2C1_Init(void);
  63:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END 0 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /**
  73:Core/Src/main.c ****   * @brief  The application entry point.
  74:Core/Src/main.c ****   * @retval int
  75:Core/Src/main.c ****   */
  76:Core/Src/main.c **** int main(void)
  77:Core/Src/main.c **** {
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE END 1 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  86:Core/Src/main.c ****   HAL_Init();
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE BEGIN Init */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* USER CODE END Init */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* Configure the system clock */
  93:Core/Src/main.c ****   SystemClock_Config();
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE END SysInit */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* Initialize all configured peripherals */
 100:Core/Src/main.c ****   MX_GPIO_Init();
 101:Core/Src/main.c ****   MX_SDIO_SD_Init();
 102:Core/Src/main.c ****   MX_SPI1_Init();
 103:Core/Src/main.c ****   MX_USART1_UART_Init();
 104:Core/Src/main.c ****   MX_I2C1_Init();
 105:Core/Src/main.c ****   MX_FATFS_Init();
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END 2 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Infinite loop */
 111:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 112:Core/Src/main.c ****   while (1)
 113:Core/Src/main.c ****   {
 114:Core/Src/main.c ****     // HAL_UART_Transmit(&huart1, (uint8_t*)"Hello World!\r\n", 14, 1000);
 115:Core/Src/main.c ****     if (HAL_I2C_IsDeviceReady(&hi2c1, 0x41 << 1, 2, 1000) != HAL_OK) {
 116:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Device not ready\r\n", 18, 1000);
 117:Core/Src/main.c ****     } else {
 118:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Device ready\r\n", 14, 1000);
 119:Core/Src/main.c ****       HAL_I2C_Mem_Write(&hi2c1, 0x41 << 1, 0x04, 1, (uint8_t*)0x00, 1, 1000);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****       if (HAL_I2C_Master_Transmit(&hi2c1, 0x41 << 1, (uint8_t*)0xBC, 2, 1000) != HAL_OK) {
 122:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)"Transmit failed\r\n", 17, 1000);
 123:Core/Src/main.c ****       } else {
 124:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)"Transmit success\r\n", 18, 1000);
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****         uint8_t data[2];
 127:Core/Src/main.c ****         if (HAL_I2C_Master_Receive(&hi2c1, 0x41 << 1, data, 2, 1000) != HAL_OK) {
 128:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)"Receive failed\r\n", 16, 1000);
 129:Core/Src/main.c ****         } else {
 130:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)"Receive success\r\n", 17, 1000);
 131:Core/Src/main.c ****           char str[28] =  "The temperature is: ";
 132:Core/Src/main.c ****           sprintf(str, "%s%i\r\n", str, (int)round((((uint16_t)((data[0] << 8) | data[1]))/256)+25)
 133:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 27, 1000);
 134:Core/Src/main.c ****         }
 135:Core/Src/main.c ****       }
 136:Core/Src/main.c ****       HAL_Delay(1000);
 137:Core/Src/main.c ****     }
 138:Core/Src/main.c ****     /* USER CODE END WHILE */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 141:Core/Src/main.c ****   }
 142:Core/Src/main.c ****   /* USER CODE END 3 */
 143:Core/Src/main.c **** }
 144:Core/Src/main.c **** 
 145:Core/Src/main.c **** /**
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 4


 146:Core/Src/main.c ****   * @brief System Clock Configuration
 147:Core/Src/main.c ****   * @retval None
 148:Core/Src/main.c ****   */
 149:Core/Src/main.c **** void SystemClock_Config(void)
 150:Core/Src/main.c **** {
 151:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 152:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 155:Core/Src/main.c ****   */
 156:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 160:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 161:Core/Src/main.c ****   */
 162:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 163:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 164:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 165:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 166:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 171:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 172:Core/Src/main.c ****   {
 173:Core/Src/main.c ****     Error_Handler();
 174:Core/Src/main.c ****   }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 177:Core/Src/main.c ****   */
 178:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 179:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 180:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 181:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 182:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 183:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 186:Core/Src/main.c ****   {
 187:Core/Src/main.c ****     Error_Handler();
 188:Core/Src/main.c ****   }
 189:Core/Src/main.c **** }
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** /**
 192:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 193:Core/Src/main.c ****   * @param None
 194:Core/Src/main.c ****   * @retval None
 195:Core/Src/main.c ****   */
 196:Core/Src/main.c **** static void MX_I2C1_Init(void)
 197:Core/Src/main.c **** {
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 202:Core/Src/main.c **** 
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 5


 203:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 206:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 207:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 208:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 209:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 130;
 210:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 211:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 212:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 213:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 214:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 215:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 216:Core/Src/main.c ****   {
 217:Core/Src/main.c ****     Error_Handler();
 218:Core/Src/main.c ****   }
 219:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 220:Core/Src/main.c ****   
 221:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c **** }
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** /**
 226:Core/Src/main.c ****   * @brief SDIO Initialization Function
 227:Core/Src/main.c ****   * @param None
 228:Core/Src/main.c ****   * @retval None
 229:Core/Src/main.c ****   */
 230:Core/Src/main.c **** static void MX_SDIO_SD_Init(void)
 231:Core/Src/main.c **** {
  28              		.loc 1 231 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE BEGIN SDIO_Init 0 */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* USER CODE END SDIO_Init 0 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE BEGIN SDIO_Init 1 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /* USER CODE END SDIO_Init 1 */
 240:Core/Src/main.c ****   hsd.Instance = SDIO;
  33              		.loc 1 240 3 view .LVU1
  34              		.loc 1 240 16 is_stmt 0 view .LVU2
  35 0000 054B     		ldr	r3, .L2
  36 0002 064A     		ldr	r2, .L2+4
  37 0004 1A60     		str	r2, [r3]
 241:Core/Src/main.c ****   hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
  38              		.loc 1 241 3 is_stmt 1 view .LVU3
  39              		.loc 1 241 22 is_stmt 0 view .LVU4
  40 0006 0022     		movs	r2, #0
  41 0008 5A60     		str	r2, [r3, #4]
 242:Core/Src/main.c ****   hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  42              		.loc 1 242 3 is_stmt 1 view .LVU5
  43              		.loc 1 242 24 is_stmt 0 view .LVU6
  44 000a 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 6


 243:Core/Src/main.c ****   hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  45              		.loc 1 243 3 is_stmt 1 view .LVU7
  46              		.loc 1 243 27 is_stmt 0 view .LVU8
  47 000c DA60     		str	r2, [r3, #12]
 244:Core/Src/main.c ****   hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  48              		.loc 1 244 3 is_stmt 1 view .LVU9
  49              		.loc 1 244 20 is_stmt 0 view .LVU10
  50 000e 1A61     		str	r2, [r3, #16]
 245:Core/Src/main.c ****   hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  51              		.loc 1 245 3 is_stmt 1 view .LVU11
  52              		.loc 1 245 32 is_stmt 0 view .LVU12
  53 0010 5A61     		str	r2, [r3, #20]
 246:Core/Src/main.c ****   hsd.Init.ClockDiv = 0;
  54              		.loc 1 246 3 is_stmt 1 view .LVU13
  55              		.loc 1 246 21 is_stmt 0 view .LVU14
  56 0012 9A61     		str	r2, [r3, #24]
 247:Core/Src/main.c ****   /* USER CODE BEGIN SDIO_Init 2 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE END SDIO_Init 2 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c **** }
  57              		.loc 1 251 1 view .LVU15
  58 0014 7047     		bx	lr
  59              	.L3:
  60 0016 00BF     		.align	2
  61              	.L2:
  62 0018 00000000 		.word	hsd
  63 001c 002C0140 		.word	1073818624
  64              		.cfi_endproc
  65              	.LFE137:
  67              		.section	.text.MX_GPIO_Init,"ax",%progbits
  68              		.align	1
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	MX_GPIO_Init:
  74              	.LFB140:
 252:Core/Src/main.c **** 
 253:Core/Src/main.c **** /**
 254:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 255:Core/Src/main.c ****   * @param None
 256:Core/Src/main.c ****   * @retval None
 257:Core/Src/main.c ****   */
 258:Core/Src/main.c **** static void MX_SPI1_Init(void)
 259:Core/Src/main.c **** {
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 268:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 269:Core/Src/main.c ****   hspi1.Instance = SPI1;
 270:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 271:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 7


 272:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 273:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 274:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 275:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 276:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 277:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 278:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 279:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 280:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 281:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 282:Core/Src/main.c ****   {
 283:Core/Src/main.c ****     Error_Handler();
 284:Core/Src/main.c ****   }
 285:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** }
 290:Core/Src/main.c **** 
 291:Core/Src/main.c **** /**
 292:Core/Src/main.c ****   * @brief USART1 Initialization Function
 293:Core/Src/main.c ****   * @param None
 294:Core/Src/main.c ****   * @retval None
 295:Core/Src/main.c ****   */
 296:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 297:Core/Src/main.c **** {
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 306:Core/Src/main.c ****   huart1.Instance = USART1;
 307:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 308:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 309:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 310:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 311:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 312:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 313:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 314:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 315:Core/Src/main.c ****   {
 316:Core/Src/main.c ****     Error_Handler();
 317:Core/Src/main.c ****   }
 318:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** }
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** /**
 325:Core/Src/main.c ****   * @brief GPIO Initialization Function
 326:Core/Src/main.c ****   * @param None
 327:Core/Src/main.c ****   * @retval None
 328:Core/Src/main.c ****   */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 8


 329:Core/Src/main.c **** static void MX_GPIO_Init(void)
 330:Core/Src/main.c **** {
  75              		.loc 1 330 1 is_stmt 1 view -0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 40
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  80              		.cfi_def_cfa_offset 24
  81              		.cfi_offset 4, -24
  82              		.cfi_offset 5, -20
  83              		.cfi_offset 6, -16
  84              		.cfi_offset 7, -12
  85              		.cfi_offset 8, -8
  86              		.cfi_offset 14, -4
  87 0004 8AB0     		sub	sp, sp, #40
  88              		.cfi_def_cfa_offset 64
 331:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  89              		.loc 1 331 3 view .LVU17
  90              		.loc 1 331 20 is_stmt 0 view .LVU18
  91 0006 0024     		movs	r4, #0
  92 0008 0594     		str	r4, [sp, #20]
  93 000a 0694     		str	r4, [sp, #24]
  94 000c 0794     		str	r4, [sp, #28]
  95 000e 0894     		str	r4, [sp, #32]
  96 0010 0994     		str	r4, [sp, #36]
 332:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 333:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 336:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  97              		.loc 1 336 3 is_stmt 1 view .LVU19
  98              	.LBB4:
  99              		.loc 1 336 3 view .LVU20
 100 0012 0094     		str	r4, [sp]
 101              		.loc 1 336 3 view .LVU21
 102 0014 384B     		ldr	r3, .L6
 103 0016 1A6B     		ldr	r2, [r3, #48]
 104 0018 42F08002 		orr	r2, r2, #128
 105 001c 1A63     		str	r2, [r3, #48]
 106              		.loc 1 336 3 view .LVU22
 107 001e 1A6B     		ldr	r2, [r3, #48]
 108 0020 02F08002 		and	r2, r2, #128
 109 0024 0092     		str	r2, [sp]
 110              		.loc 1 336 3 view .LVU23
 111 0026 009A     		ldr	r2, [sp]
 112              	.LBE4:
 113              		.loc 1 336 3 view .LVU24
 337:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 114              		.loc 1 337 3 view .LVU25
 115              	.LBB5:
 116              		.loc 1 337 3 view .LVU26
 117 0028 0194     		str	r4, [sp, #4]
 118              		.loc 1 337 3 view .LVU27
 119 002a 1A6B     		ldr	r2, [r3, #48]
 120 002c 42F00402 		orr	r2, r2, #4
 121 0030 1A63     		str	r2, [r3, #48]
 122              		.loc 1 337 3 view .LVU28
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 9


 123 0032 1A6B     		ldr	r2, [r3, #48]
 124 0034 02F00402 		and	r2, r2, #4
 125 0038 0192     		str	r2, [sp, #4]
 126              		.loc 1 337 3 view .LVU29
 127 003a 019A     		ldr	r2, [sp, #4]
 128              	.LBE5:
 129              		.loc 1 337 3 view .LVU30
 338:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 130              		.loc 1 338 3 view .LVU31
 131              	.LBB6:
 132              		.loc 1 338 3 view .LVU32
 133 003c 0294     		str	r4, [sp, #8]
 134              		.loc 1 338 3 view .LVU33
 135 003e 1A6B     		ldr	r2, [r3, #48]
 136 0040 42F00102 		orr	r2, r2, #1
 137 0044 1A63     		str	r2, [r3, #48]
 138              		.loc 1 338 3 view .LVU34
 139 0046 1A6B     		ldr	r2, [r3, #48]
 140 0048 02F00102 		and	r2, r2, #1
 141 004c 0292     		str	r2, [sp, #8]
 142              		.loc 1 338 3 view .LVU35
 143 004e 029A     		ldr	r2, [sp, #8]
 144              	.LBE6:
 145              		.loc 1 338 3 view .LVU36
 339:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 146              		.loc 1 339 3 view .LVU37
 147              	.LBB7:
 148              		.loc 1 339 3 view .LVU38
 149 0050 0394     		str	r4, [sp, #12]
 150              		.loc 1 339 3 view .LVU39
 151 0052 1A6B     		ldr	r2, [r3, #48]
 152 0054 42F00802 		orr	r2, r2, #8
 153 0058 1A63     		str	r2, [r3, #48]
 154              		.loc 1 339 3 view .LVU40
 155 005a 1A6B     		ldr	r2, [r3, #48]
 156 005c 02F00802 		and	r2, r2, #8
 157 0060 0392     		str	r2, [sp, #12]
 158              		.loc 1 339 3 view .LVU41
 159 0062 039A     		ldr	r2, [sp, #12]
 160              	.LBE7:
 161              		.loc 1 339 3 view .LVU42
 340:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 162              		.loc 1 340 3 view .LVU43
 163              	.LBB8:
 164              		.loc 1 340 3 view .LVU44
 165 0064 0494     		str	r4, [sp, #16]
 166              		.loc 1 340 3 view .LVU45
 167 0066 1A6B     		ldr	r2, [r3, #48]
 168 0068 42F00202 		orr	r2, r2, #2
 169 006c 1A63     		str	r2, [r3, #48]
 170              		.loc 1 340 3 view .LVU46
 171 006e 1B6B     		ldr	r3, [r3, #48]
 172 0070 03F00203 		and	r3, r3, #2
 173 0074 0493     		str	r3, [sp, #16]
 174              		.loc 1 340 3 view .LVU47
 175 0076 049B     		ldr	r3, [sp, #16]
 176              	.LBE8:
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 10


 177              		.loc 1 340 3 view .LVU48
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 343:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin, GPIO_PIN_RESET);
 178              		.loc 1 343 3 view .LVU49
 179 0078 204D     		ldr	r5, .L6+4
 180 007a 2246     		mov	r2, r4
 181 007c 8721     		movs	r1, #135
 182 007e 2846     		mov	r0, r5
 183 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 184              	.LVL0:
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 346:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin, GPIO_PIN_RESET);
 185              		.loc 1 346 3 view .LVU50
 186 0084 1E4E     		ldr	r6, .L6+8
 187 0086 2246     		mov	r2, r4
 188 0088 1C21     		movs	r1, #28
 189 008a 3046     		mov	r0, r6
 190 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 191              	.LVL1:
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /*Configure GPIO pins : PARACHUTE_Pin MOTOR_X_Pin MOTOR_Y_Pin RF_RESET_Pin */
 349:Core/Src/main.c ****   GPIO_InitStruct.Pin = PARACHUTE_Pin|MOTOR_X_Pin|MOTOR_Y_Pin|RF_RESET_Pin;
 192              		.loc 1 349 3 view .LVU51
 193              		.loc 1 349 23 is_stmt 0 view .LVU52
 194 0090 8723     		movs	r3, #135
 195 0092 0593     		str	r3, [sp, #20]
 350:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 196              		.loc 1 350 3 is_stmt 1 view .LVU53
 197              		.loc 1 350 24 is_stmt 0 view .LVU54
 198 0094 0127     		movs	r7, #1
 199 0096 0697     		str	r7, [sp, #24]
 351:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 200              		.loc 1 351 3 is_stmt 1 view .LVU55
 201              		.loc 1 351 24 is_stmt 0 view .LVU56
 202 0098 0794     		str	r4, [sp, #28]
 352:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 203              		.loc 1 352 3 is_stmt 1 view .LVU57
 204              		.loc 1 352 25 is_stmt 0 view .LVU58
 205 009a 0894     		str	r4, [sp, #32]
 353:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 206              		.loc 1 353 3 is_stmt 1 view .LVU59
 207 009c 05A9     		add	r1, sp, #20
 208 009e 2846     		mov	r0, r5
 209 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 210              	.LVL2:
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /*Configure GPIO pins : IMU_INT_Pin PRESSURE_INT_Pin */
 356:Core/Src/main.c ****   GPIO_InitStruct.Pin = IMU_INT_Pin|PRESSURE_INT_Pin;
 211              		.loc 1 356 3 view .LVU60
 212              		.loc 1 356 23 is_stmt 0 view .LVU61
 213 00a4 4823     		movs	r3, #72
 214 00a6 0593     		str	r3, [sp, #20]
 357:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 215              		.loc 1 357 3 is_stmt 1 view .LVU62
 216              		.loc 1 357 24 is_stmt 0 view .LVU63
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 11


 217 00a8 4FF00208 		mov	r8, #2
 218 00ac CDF81880 		str	r8, [sp, #24]
 358:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 219              		.loc 1 358 3 is_stmt 1 view .LVU64
 220              		.loc 1 358 24 is_stmt 0 view .LVU65
 221 00b0 0794     		str	r4, [sp, #28]
 359:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 222              		.loc 1 359 3 is_stmt 1 view .LVU66
 223              		.loc 1 359 25 is_stmt 0 view .LVU67
 224 00b2 0894     		str	r4, [sp, #32]
 360:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 225              		.loc 1 360 3 is_stmt 1 view .LVU68
 226              		.loc 1 360 29 is_stmt 0 view .LVU69
 227 00b4 0F23     		movs	r3, #15
 228 00b6 0993     		str	r3, [sp, #36]
 361:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 229              		.loc 1 361 3 is_stmt 1 view .LVU70
 230 00b8 05A9     		add	r1, sp, #20
 231 00ba 2846     		mov	r0, r5
 232 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL3:
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /*Configure GPIO pin : SD_CD_Pin */
 364:Core/Src/main.c ****   GPIO_InitStruct.Pin = SD_CD_Pin;
 234              		.loc 1 364 3 view .LVU71
 235              		.loc 1 364 23 is_stmt 0 view .LVU72
 236 00c0 CDF81480 		str	r8, [sp, #20]
 365:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 237              		.loc 1 365 3 is_stmt 1 view .LVU73
 238              		.loc 1 365 24 is_stmt 0 view .LVU74
 239 00c4 0694     		str	r4, [sp, #24]
 366:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 240              		.loc 1 366 3 is_stmt 1 view .LVU75
 241              		.loc 1 366 24 is_stmt 0 view .LVU76
 242 00c6 0794     		str	r4, [sp, #28]
 367:Core/Src/main.c ****   HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 243              		.loc 1 367 3 is_stmt 1 view .LVU77
 244 00c8 05A9     		add	r1, sp, #20
 245 00ca 3046     		mov	r0, r6
 246 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 247              	.LVL4:
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /*Configure GPIO pins : CS_PRESSURE_Pin CS_GYRO_Pin CS_WIRELESS_Pin */
 370:Core/Src/main.c ****   GPIO_InitStruct.Pin = CS_PRESSURE_Pin|CS_GYRO_Pin|CS_WIRELESS_Pin;
 248              		.loc 1 370 3 view .LVU78
 249              		.loc 1 370 23 is_stmt 0 view .LVU79
 250 00d0 1C23     		movs	r3, #28
 251 00d2 0593     		str	r3, [sp, #20]
 371:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 252              		.loc 1 371 3 is_stmt 1 view .LVU80
 253              		.loc 1 371 24 is_stmt 0 view .LVU81
 254 00d4 0697     		str	r7, [sp, #24]
 372:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 255              		.loc 1 372 3 is_stmt 1 view .LVU82
 256              		.loc 1 372 24 is_stmt 0 view .LVU83
 257 00d6 0794     		str	r4, [sp, #28]
 373:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 12


 258              		.loc 1 373 3 is_stmt 1 view .LVU84
 259              		.loc 1 373 25 is_stmt 0 view .LVU85
 260 00d8 0894     		str	r4, [sp, #32]
 374:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 261              		.loc 1 374 3 is_stmt 1 view .LVU86
 262 00da 05A9     		add	r1, sp, #20
 263 00dc 3046     		mov	r0, r6
 264 00de FFF7FEFF 		bl	HAL_GPIO_Init
 265              	.LVL5:
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /*Configure GPIO pins : PC4 ANTENNA_IRQ_Pin */
 377:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_4|ANTENNA_IRQ_Pin;
 266              		.loc 1 377 3 view .LVU87
 267              		.loc 1 377 23 is_stmt 0 view .LVU88
 268 00e2 3023     		movs	r3, #48
 269 00e4 0593     		str	r3, [sp, #20]
 378:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 270              		.loc 1 378 3 is_stmt 1 view .LVU89
 271              		.loc 1 378 24 is_stmt 0 view .LVU90
 272 00e6 0694     		str	r4, [sp, #24]
 379:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 273              		.loc 1 379 3 is_stmt 1 view .LVU91
 274              		.loc 1 379 24 is_stmt 0 view .LVU92
 275 00e8 0794     		str	r4, [sp, #28]
 380:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 276              		.loc 1 380 3 is_stmt 1 view .LVU93
 277 00ea 05A9     		add	r1, sp, #20
 278 00ec 2846     		mov	r0, r5
 279 00ee FFF7FEFF 		bl	HAL_GPIO_Init
 280              	.LVL6:
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 383:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 384:Core/Src/main.c **** }
 281              		.loc 1 384 1 is_stmt 0 view .LVU94
 282 00f2 0AB0     		add	sp, sp, #40
 283              		.cfi_def_cfa_offset 24
 284              		@ sp needed
 285 00f4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 286              	.L7:
 287              		.align	2
 288              	.L6:
 289 00f8 00380240 		.word	1073887232
 290 00fc 00080240 		.word	1073874944
 291 0100 00000240 		.word	1073872896
 292              		.cfi_endproc
 293              	.LFE140:
 295              		.section	.text.Error_Handler,"ax",%progbits
 296              		.align	1
 297              		.global	Error_Handler
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 302              	Error_Handler:
 303              	.LFB141:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** /* USER CODE BEGIN 4 */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 13


 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /* USER CODE END 4 */
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** /**
 391:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 392:Core/Src/main.c ****   * @retval None
 393:Core/Src/main.c ****   */
 394:Core/Src/main.c **** void Error_Handler(void)
 395:Core/Src/main.c **** {
 304              		.loc 1 395 1 is_stmt 1 view -0
 305              		.cfi_startproc
 306              		@ Volatile: function does not return.
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 396:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 397:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 398:Core/Src/main.c ****   __disable_irq();
 310              		.loc 1 398 3 view .LVU96
 311              	.LBB9:
 312              	.LBI9:
 313              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 14


  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 15


  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 16


 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 17


 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 18


 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 19


 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 20


 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 21


 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 22


 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 23


 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 24


 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 25


 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 26


 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 27


 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 28


 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 29


 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 30


 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 314              		.loc 2 960 27 view .LVU97
 315              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 316              		.loc 2 962 3 view .LVU98
 317              		.syntax unified
 318              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 319 0000 72B6     		cpsid i
 320              	@ 0 "" 2
 321              		.thumb
 322              		.syntax unified
 323              	.L9:
 324              	.LBE10:
 325              	.LBE9:
 399:Core/Src/main.c ****   while (1)
 326              		.loc 1 399 3 view .LVU99
 400:Core/Src/main.c ****   {
 401:Core/Src/main.c ****   }
 327              		.loc 1 401 3 view .LVU100
 399:Core/Src/main.c ****   while (1)
 328              		.loc 1 399 9 view .LVU101
 329 0002 FEE7     		b	.L9
 330              		.cfi_endproc
 331              	.LFE141:
 333              		.section	.text.MX_SPI1_Init,"ax",%progbits
 334              		.align	1
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 339              	MX_SPI1_Init:
 340              	.LFB138:
 259:Core/Src/main.c **** 
 341              		.loc 1 259 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345 0000 08B5     		push	{r3, lr}
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 3, -8
 348              		.cfi_offset 14, -4
 269:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 349              		.loc 1 269 3 view .LVU103
 269:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 350              		.loc 1 269 18 is_stmt 0 view .LVU104
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 31


 351 0002 0D48     		ldr	r0, .L14
 352 0004 0D4B     		ldr	r3, .L14+4
 353 0006 0360     		str	r3, [r0]
 270:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 354              		.loc 1 270 3 is_stmt 1 view .LVU105
 270:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 355              		.loc 1 270 19 is_stmt 0 view .LVU106
 356 0008 4FF48273 		mov	r3, #260
 357 000c 4360     		str	r3, [r0, #4]
 271:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 358              		.loc 1 271 3 is_stmt 1 view .LVU107
 271:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 359              		.loc 1 271 24 is_stmt 0 view .LVU108
 360 000e 0023     		movs	r3, #0
 361 0010 8360     		str	r3, [r0, #8]
 272:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 362              		.loc 1 272 3 is_stmt 1 view .LVU109
 272:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 363              		.loc 1 272 23 is_stmt 0 view .LVU110
 364 0012 C360     		str	r3, [r0, #12]
 273:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 365              		.loc 1 273 3 is_stmt 1 view .LVU111
 273:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 366              		.loc 1 273 26 is_stmt 0 view .LVU112
 367 0014 0361     		str	r3, [r0, #16]
 274:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 368              		.loc 1 274 3 is_stmt 1 view .LVU113
 274:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 369              		.loc 1 274 23 is_stmt 0 view .LVU114
 370 0016 4361     		str	r3, [r0, #20]
 275:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 371              		.loc 1 275 3 is_stmt 1 view .LVU115
 275:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 372              		.loc 1 275 18 is_stmt 0 view .LVU116
 373 0018 4FF48022 		mov	r2, #262144
 374 001c 8261     		str	r2, [r0, #24]
 276:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 375              		.loc 1 276 3 is_stmt 1 view .LVU117
 276:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 376              		.loc 1 276 32 is_stmt 0 view .LVU118
 377 001e C361     		str	r3, [r0, #28]
 277:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 378              		.loc 1 277 3 is_stmt 1 view .LVU119
 277:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 379              		.loc 1 277 23 is_stmt 0 view .LVU120
 380 0020 0362     		str	r3, [r0, #32]
 278:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 381              		.loc 1 278 3 is_stmt 1 view .LVU121
 278:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 382              		.loc 1 278 21 is_stmt 0 view .LVU122
 383 0022 4362     		str	r3, [r0, #36]
 279:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 384              		.loc 1 279 3 is_stmt 1 view .LVU123
 279:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 385              		.loc 1 279 29 is_stmt 0 view .LVU124
 386 0024 8362     		str	r3, [r0, #40]
 280:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 32


 387              		.loc 1 280 3 is_stmt 1 view .LVU125
 280:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 388              		.loc 1 280 28 is_stmt 0 view .LVU126
 389 0026 0A23     		movs	r3, #10
 390 0028 C362     		str	r3, [r0, #44]
 281:Core/Src/main.c ****   {
 391              		.loc 1 281 3 is_stmt 1 view .LVU127
 281:Core/Src/main.c ****   {
 392              		.loc 1 281 7 is_stmt 0 view .LVU128
 393 002a FFF7FEFF 		bl	HAL_SPI_Init
 394              	.LVL7:
 281:Core/Src/main.c ****   {
 395              		.loc 1 281 6 discriminator 1 view .LVU129
 396 002e 00B9     		cbnz	r0, .L13
 289:Core/Src/main.c **** 
 397              		.loc 1 289 1 view .LVU130
 398 0030 08BD     		pop	{r3, pc}
 399              	.L13:
 283:Core/Src/main.c ****   }
 400              		.loc 1 283 5 is_stmt 1 view .LVU131
 401 0032 FFF7FEFF 		bl	Error_Handler
 402              	.LVL8:
 403              	.L15:
 404 0036 00BF     		.align	2
 405              	.L14:
 406 0038 00000000 		.word	hspi1
 407 003c 00300140 		.word	1073819648
 408              		.cfi_endproc
 409              	.LFE138:
 411              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 412              		.align	1
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 417              	MX_USART1_UART_Init:
 418              	.LFB139:
 297:Core/Src/main.c **** 
 419              		.loc 1 297 1 view -0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423 0000 08B5     		push	{r3, lr}
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 306:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 427              		.loc 1 306 3 view .LVU133
 306:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 428              		.loc 1 306 19 is_stmt 0 view .LVU134
 429 0002 0A48     		ldr	r0, .L20
 430 0004 0A4B     		ldr	r3, .L20+4
 431 0006 0360     		str	r3, [r0]
 307:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 432              		.loc 1 307 3 is_stmt 1 view .LVU135
 307:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 433              		.loc 1 307 24 is_stmt 0 view .LVU136
 434 0008 4FF4E133 		mov	r3, #115200
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 33


 435 000c 4360     		str	r3, [r0, #4]
 308:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 436              		.loc 1 308 3 is_stmt 1 view .LVU137
 308:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 437              		.loc 1 308 26 is_stmt 0 view .LVU138
 438 000e 0023     		movs	r3, #0
 439 0010 8360     		str	r3, [r0, #8]
 309:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 440              		.loc 1 309 3 is_stmt 1 view .LVU139
 309:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 441              		.loc 1 309 24 is_stmt 0 view .LVU140
 442 0012 C360     		str	r3, [r0, #12]
 310:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 443              		.loc 1 310 3 is_stmt 1 view .LVU141
 310:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 444              		.loc 1 310 22 is_stmt 0 view .LVU142
 445 0014 0361     		str	r3, [r0, #16]
 311:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 446              		.loc 1 311 3 is_stmt 1 view .LVU143
 311:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 447              		.loc 1 311 20 is_stmt 0 view .LVU144
 448 0016 0C22     		movs	r2, #12
 449 0018 4261     		str	r2, [r0, #20]
 312:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 450              		.loc 1 312 3 is_stmt 1 view .LVU145
 312:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 451              		.loc 1 312 25 is_stmt 0 view .LVU146
 452 001a 8361     		str	r3, [r0, #24]
 313:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 453              		.loc 1 313 3 is_stmt 1 view .LVU147
 313:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 454              		.loc 1 313 28 is_stmt 0 view .LVU148
 455 001c C361     		str	r3, [r0, #28]
 314:Core/Src/main.c ****   {
 456              		.loc 1 314 3 is_stmt 1 view .LVU149
 314:Core/Src/main.c ****   {
 457              		.loc 1 314 7 is_stmt 0 view .LVU150
 458 001e FFF7FEFF 		bl	HAL_UART_Init
 459              	.LVL9:
 314:Core/Src/main.c ****   {
 460              		.loc 1 314 6 discriminator 1 view .LVU151
 461 0022 00B9     		cbnz	r0, .L19
 322:Core/Src/main.c **** 
 462              		.loc 1 322 1 view .LVU152
 463 0024 08BD     		pop	{r3, pc}
 464              	.L19:
 316:Core/Src/main.c ****   }
 465              		.loc 1 316 5 is_stmt 1 view .LVU153
 466 0026 FFF7FEFF 		bl	Error_Handler
 467              	.LVL10:
 468              	.L21:
 469 002a 00BF     		.align	2
 470              	.L20:
 471 002c 00000000 		.word	huart1
 472 0030 00100140 		.word	1073811456
 473              		.cfi_endproc
 474              	.LFE139:
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 34


 476              		.section	.text.MX_I2C1_Init,"ax",%progbits
 477              		.align	1
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 482              	MX_I2C1_Init:
 483              	.LFB136:
 197:Core/Src/main.c **** 
 484              		.loc 1 197 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488 0000 08B5     		push	{r3, lr}
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 3, -8
 491              		.cfi_offset 14, -4
 206:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 492              		.loc 1 206 3 view .LVU155
 206:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 493              		.loc 1 206 18 is_stmt 0 view .LVU156
 494 0002 0B48     		ldr	r0, .L26
 495 0004 0B4B     		ldr	r3, .L26+4
 496 0006 0360     		str	r3, [r0]
 207:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 497              		.loc 1 207 3 is_stmt 1 view .LVU157
 207:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 498              		.loc 1 207 25 is_stmt 0 view .LVU158
 499 0008 0B4B     		ldr	r3, .L26+8
 500 000a 4360     		str	r3, [r0, #4]
 208:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 130;
 501              		.loc 1 208 3 is_stmt 1 view .LVU159
 208:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 130;
 502              		.loc 1 208 24 is_stmt 0 view .LVU160
 503 000c 0023     		movs	r3, #0
 504 000e 8360     		str	r3, [r0, #8]
 209:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 505              		.loc 1 209 3 is_stmt 1 view .LVU161
 209:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 506              		.loc 1 209 26 is_stmt 0 view .LVU162
 507 0010 8222     		movs	r2, #130
 508 0012 C260     		str	r2, [r0, #12]
 210:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 509              		.loc 1 210 3 is_stmt 1 view .LVU163
 210:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 510              		.loc 1 210 29 is_stmt 0 view .LVU164
 511 0014 4FF48042 		mov	r2, #16384
 512 0018 0261     		str	r2, [r0, #16]
 211:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 513              		.loc 1 211 3 is_stmt 1 view .LVU165
 211:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 514              		.loc 1 211 30 is_stmt 0 view .LVU166
 515 001a 4361     		str	r3, [r0, #20]
 212:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 516              		.loc 1 212 3 is_stmt 1 view .LVU167
 212:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 517              		.loc 1 212 26 is_stmt 0 view .LVU168
 518 001c 8361     		str	r3, [r0, #24]
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 35


 213:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 519              		.loc 1 213 3 is_stmt 1 view .LVU169
 213:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 520              		.loc 1 213 30 is_stmt 0 view .LVU170
 521 001e C361     		str	r3, [r0, #28]
 214:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 522              		.loc 1 214 3 is_stmt 1 view .LVU171
 214:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 523              		.loc 1 214 28 is_stmt 0 view .LVU172
 524 0020 0362     		str	r3, [r0, #32]
 215:Core/Src/main.c ****   {
 525              		.loc 1 215 3 is_stmt 1 view .LVU173
 215:Core/Src/main.c ****   {
 526              		.loc 1 215 7 is_stmt 0 view .LVU174
 527 0022 FFF7FEFF 		bl	HAL_I2C_Init
 528              	.LVL11:
 215:Core/Src/main.c ****   {
 529              		.loc 1 215 6 discriminator 1 view .LVU175
 530 0026 00B9     		cbnz	r0, .L25
 223:Core/Src/main.c **** 
 531              		.loc 1 223 1 view .LVU176
 532 0028 08BD     		pop	{r3, pc}
 533              	.L25:
 217:Core/Src/main.c ****   }
 534              		.loc 1 217 5 is_stmt 1 view .LVU177
 535 002a FFF7FEFF 		bl	Error_Handler
 536              	.LVL12:
 537              	.L27:
 538 002e 00BF     		.align	2
 539              	.L26:
 540 0030 00000000 		.word	hi2c1
 541 0034 00540040 		.word	1073763328
 542 0038 A0860100 		.word	100000
 543              		.cfi_endproc
 544              	.LFE136:
 546              		.section	.text.SystemClock_Config,"ax",%progbits
 547              		.align	1
 548              		.global	SystemClock_Config
 549              		.syntax unified
 550              		.thumb
 551              		.thumb_func
 553              	SystemClock_Config:
 554              	.LFB135:
 150:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 555              		.loc 1 150 1 view -0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 80
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559 0000 00B5     		push	{lr}
 560              		.cfi_def_cfa_offset 4
 561              		.cfi_offset 14, -4
 562 0002 95B0     		sub	sp, sp, #84
 563              		.cfi_def_cfa_offset 88
 151:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 564              		.loc 1 151 3 view .LVU179
 151:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 565              		.loc 1 151 22 is_stmt 0 view .LVU180
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 36


 566 0004 3022     		movs	r2, #48
 567 0006 0021     		movs	r1, #0
 568 0008 08A8     		add	r0, sp, #32
 569 000a FFF7FEFF 		bl	memset
 570              	.LVL13:
 152:Core/Src/main.c **** 
 571              		.loc 1 152 3 is_stmt 1 view .LVU181
 152:Core/Src/main.c **** 
 572              		.loc 1 152 22 is_stmt 0 view .LVU182
 573 000e 0023     		movs	r3, #0
 574 0010 0393     		str	r3, [sp, #12]
 575 0012 0493     		str	r3, [sp, #16]
 576 0014 0593     		str	r3, [sp, #20]
 577 0016 0693     		str	r3, [sp, #24]
 578 0018 0793     		str	r3, [sp, #28]
 156:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 579              		.loc 1 156 3 is_stmt 1 view .LVU183
 580              	.LBB11:
 156:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 581              		.loc 1 156 3 view .LVU184
 582 001a 0193     		str	r3, [sp, #4]
 156:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 583              		.loc 1 156 3 view .LVU185
 584 001c 1C4A     		ldr	r2, .L34
 585 001e 116C     		ldr	r1, [r2, #64]
 586 0020 41F08051 		orr	r1, r1, #268435456
 587 0024 1164     		str	r1, [r2, #64]
 156:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 588              		.loc 1 156 3 view .LVU186
 589 0026 126C     		ldr	r2, [r2, #64]
 590 0028 02F08052 		and	r2, r2, #268435456
 591 002c 0192     		str	r2, [sp, #4]
 156:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 592              		.loc 1 156 3 view .LVU187
 593 002e 019A     		ldr	r2, [sp, #4]
 594              	.LBE11:
 156:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 595              		.loc 1 156 3 view .LVU188
 157:Core/Src/main.c **** 
 596              		.loc 1 157 3 view .LVU189
 597              	.LBB12:
 157:Core/Src/main.c **** 
 598              		.loc 1 157 3 view .LVU190
 599 0030 0293     		str	r3, [sp, #8]
 157:Core/Src/main.c **** 
 600              		.loc 1 157 3 view .LVU191
 601 0032 184A     		ldr	r2, .L34+4
 602 0034 1168     		ldr	r1, [r2]
 603 0036 41F48041 		orr	r1, r1, #16384
 604 003a 1160     		str	r1, [r2]
 157:Core/Src/main.c **** 
 605              		.loc 1 157 3 view .LVU192
 606 003c 1268     		ldr	r2, [r2]
 607 003e 02F48042 		and	r2, r2, #16384
 608 0042 0292     		str	r2, [sp, #8]
 157:Core/Src/main.c **** 
 609              		.loc 1 157 3 view .LVU193
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 37


 610 0044 029A     		ldr	r2, [sp, #8]
 611              	.LBE12:
 157:Core/Src/main.c **** 
 612              		.loc 1 157 3 view .LVU194
 162:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 613              		.loc 1 162 3 view .LVU195
 162:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 614              		.loc 1 162 36 is_stmt 0 view .LVU196
 615 0046 0222     		movs	r2, #2
 616 0048 0892     		str	r2, [sp, #32]
 163:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 617              		.loc 1 163 3 is_stmt 1 view .LVU197
 163:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 618              		.loc 1 163 30 is_stmt 0 view .LVU198
 619 004a 0121     		movs	r1, #1
 620 004c 0B91     		str	r1, [sp, #44]
 164:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 621              		.loc 1 164 3 is_stmt 1 view .LVU199
 164:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 622              		.loc 1 164 41 is_stmt 0 view .LVU200
 623 004e 1021     		movs	r1, #16
 624 0050 0C91     		str	r1, [sp, #48]
 165:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 625              		.loc 1 165 3 is_stmt 1 view .LVU201
 165:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 626              		.loc 1 165 34 is_stmt 0 view .LVU202
 627 0052 0E92     		str	r2, [sp, #56]
 166:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 628              		.loc 1 166 3 is_stmt 1 view .LVU203
 166:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 629              		.loc 1 166 35 is_stmt 0 view .LVU204
 630 0054 0F93     		str	r3, [sp, #60]
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 631              		.loc 1 167 3 is_stmt 1 view .LVU205
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 632              		.loc 1 167 30 is_stmt 0 view .LVU206
 633 0056 1091     		str	r1, [sp, #64]
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 634              		.loc 1 168 3 is_stmt 1 view .LVU207
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 635              		.loc 1 168 30 is_stmt 0 view .LVU208
 636 0058 C023     		movs	r3, #192
 637 005a 1193     		str	r3, [sp, #68]
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 638              		.loc 1 169 3 is_stmt 1 view .LVU209
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 639              		.loc 1 169 30 is_stmt 0 view .LVU210
 640 005c 1292     		str	r2, [sp, #72]
 170:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 641              		.loc 1 170 3 is_stmt 1 view .LVU211
 170:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 642              		.loc 1 170 30 is_stmt 0 view .LVU212
 643 005e 0423     		movs	r3, #4
 644 0060 1393     		str	r3, [sp, #76]
 171:Core/Src/main.c ****   {
 645              		.loc 1 171 3 is_stmt 1 view .LVU213
 171:Core/Src/main.c ****   {
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 38


 646              		.loc 1 171 7 is_stmt 0 view .LVU214
 647 0062 08A8     		add	r0, sp, #32
 648 0064 FFF7FEFF 		bl	HAL_RCC_OscConfig
 649              	.LVL14:
 171:Core/Src/main.c ****   {
 650              		.loc 1 171 6 discriminator 1 view .LVU215
 651 0068 68B9     		cbnz	r0, .L32
 178:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 652              		.loc 1 178 3 is_stmt 1 view .LVU216
 178:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 653              		.loc 1 178 31 is_stmt 0 view .LVU217
 654 006a 0F23     		movs	r3, #15
 655 006c 0393     		str	r3, [sp, #12]
 180:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 656              		.loc 1 180 3 is_stmt 1 view .LVU218
 180:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 657              		.loc 1 180 34 is_stmt 0 view .LVU219
 658 006e 0021     		movs	r1, #0
 659 0070 0491     		str	r1, [sp, #16]
 181:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 660              		.loc 1 181 3 is_stmt 1 view .LVU220
 181:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 661              		.loc 1 181 35 is_stmt 0 view .LVU221
 662 0072 0591     		str	r1, [sp, #20]
 182:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 663              		.loc 1 182 3 is_stmt 1 view .LVU222
 182:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 664              		.loc 1 182 36 is_stmt 0 view .LVU223
 665 0074 0691     		str	r1, [sp, #24]
 183:Core/Src/main.c **** 
 666              		.loc 1 183 3 is_stmt 1 view .LVU224
 183:Core/Src/main.c **** 
 667              		.loc 1 183 36 is_stmt 0 view .LVU225
 668 0076 0791     		str	r1, [sp, #28]
 185:Core/Src/main.c ****   {
 669              		.loc 1 185 3 is_stmt 1 view .LVU226
 185:Core/Src/main.c ****   {
 670              		.loc 1 185 7 is_stmt 0 view .LVU227
 671 0078 03A8     		add	r0, sp, #12
 672 007a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 673              	.LVL15:
 185:Core/Src/main.c ****   {
 674              		.loc 1 185 6 discriminator 1 view .LVU228
 675 007e 20B9     		cbnz	r0, .L33
 189:Core/Src/main.c **** 
 676              		.loc 1 189 1 view .LVU229
 677 0080 15B0     		add	sp, sp, #84
 678              		.cfi_remember_state
 679              		.cfi_def_cfa_offset 4
 680              		@ sp needed
 681 0082 5DF804FB 		ldr	pc, [sp], #4
 682              	.L32:
 683              		.cfi_restore_state
 173:Core/Src/main.c ****   }
 684              		.loc 1 173 5 is_stmt 1 view .LVU230
 685 0086 FFF7FEFF 		bl	Error_Handler
 686              	.LVL16:
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 39


 687              	.L33:
 187:Core/Src/main.c ****   }
 688              		.loc 1 187 5 view .LVU231
 689 008a FFF7FEFF 		bl	Error_Handler
 690              	.LVL17:
 691              	.L35:
 692 008e 00BF     		.align	2
 693              	.L34:
 694 0090 00380240 		.word	1073887232
 695 0094 00700040 		.word	1073770496
 696              		.cfi_endproc
 697              	.LFE135:
 699              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 700              		.align	2
 701              	.LC0:
 702 0000 44657669 		.ascii	"Device not ready\015\012\000"
 702      6365206E 
 702      6F742072 
 702      65616479 
 702      0D0A00
 703 0013 00       		.align	2
 704              	.LC1:
 705 0014 44657669 		.ascii	"Device ready\015\012\000"
 705      63652072 
 705      65616479 
 705      0D0A00
 706 0023 00       		.align	2
 707              	.LC2:
 708 0024 5472616E 		.ascii	"Transmit failed\015\012\000"
 708      736D6974 
 708      20666169 
 708      6C65640D 
 708      0A00
 709 0036 0000     		.align	2
 710              	.LC3:
 711 0038 5472616E 		.ascii	"Transmit success\015\012\000"
 711      736D6974 
 711      20737563 
 711      63657373 
 711      0D0A00
 712 004b 00       		.align	2
 713              	.LC4:
 714 004c 52656365 		.ascii	"Receive failed\015\012\000"
 714      69766520 
 714      6661696C 
 714      65640D0A 
 714      00
 715 005d 000000   		.align	2
 716              	.LC5:
 717 0060 52656365 		.ascii	"Receive success\015\012\000"
 717      69766520 
 717      73756363 
 717      6573730D 
 717      0A00
 718 0072 0000     		.align	2
 719              	.LC7:
 720 0074 25732569 		.ascii	"%s%i\015\012\000"
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 40


 720      0D0A00
 721              		.section	.text.main,"ax",%progbits
 722              		.align	1
 723              		.global	main
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 728              	main:
 729              	.LFB134:
  77:Core/Src/main.c **** 
 730              		.loc 1 77 1 view -0
 731              		.cfi_startproc
 732              		@ Volatile: function does not return.
 733              		@ args = 0, pretend = 0, frame = 32
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735 0000 00B5     		push	{lr}
 736              		.cfi_def_cfa_offset 4
 737              		.cfi_offset 14, -4
 738 0002 8DB0     		sub	sp, sp, #52
 739              		.cfi_def_cfa_offset 56
  86:Core/Src/main.c **** 
 740              		.loc 1 86 3 view .LVU233
 741 0004 FFF7FEFF 		bl	HAL_Init
 742              	.LVL18:
  93:Core/Src/main.c **** 
 743              		.loc 1 93 3 view .LVU234
 744 0008 FFF7FEFF 		bl	SystemClock_Config
 745              	.LVL19:
 100:Core/Src/main.c ****   MX_SDIO_SD_Init();
 746              		.loc 1 100 3 view .LVU235
 747 000c FFF7FEFF 		bl	MX_GPIO_Init
 748              	.LVL20:
 101:Core/Src/main.c ****   MX_SPI1_Init();
 749              		.loc 1 101 3 view .LVU236
 750 0010 FFF7FEFF 		bl	MX_SDIO_SD_Init
 751              	.LVL21:
 102:Core/Src/main.c ****   MX_USART1_UART_Init();
 752              		.loc 1 102 3 view .LVU237
 753 0014 FFF7FEFF 		bl	MX_SPI1_Init
 754              	.LVL22:
 103:Core/Src/main.c ****   MX_I2C1_Init();
 755              		.loc 1 103 3 view .LVU238
 756 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 757              	.LVL23:
 104:Core/Src/main.c ****   MX_FATFS_Init();
 758              		.loc 1 104 3 view .LVU239
 759 001c FFF7FEFF 		bl	MX_I2C1_Init
 760              	.LVL24:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 761              		.loc 1 105 3 view .LVU240
 762 0020 FFF7FEFF 		bl	MX_FATFS_Init
 763              	.LVL25:
 764 0024 06E0     		b	.L37
 765              	.L45:
 116:Core/Src/main.c ****     } else {
 766              		.loc 1 116 7 view .LVU241
 767 0026 4FF47A73 		mov	r3, #1000
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 41


 768 002a 1222     		movs	r2, #18
 769 002c 3B49     		ldr	r1, .L46
 770 002e 3C48     		ldr	r0, .L46+4
 771 0030 FFF7FEFF 		bl	HAL_UART_Transmit
 772              	.LVL26:
 773              	.L37:
 112:Core/Src/main.c ****   {
 774              		.loc 1 112 3 view .LVU242
 115:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Device not ready\r\n", 18, 1000);
 775              		.loc 1 115 5 view .LVU243
 115:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Device not ready\r\n", 18, 1000);
 776              		.loc 1 115 9 is_stmt 0 view .LVU244
 777 0034 4FF47A73 		mov	r3, #1000
 778 0038 0222     		movs	r2, #2
 779 003a 8221     		movs	r1, #130
 780 003c 3948     		ldr	r0, .L46+8
 781 003e FFF7FEFF 		bl	HAL_I2C_IsDeviceReady
 782              	.LVL27:
 115:Core/Src/main.c ****       HAL_UART_Transmit(&huart1, (uint8_t*)"Device not ready\r\n", 18, 1000);
 783              		.loc 1 115 8 discriminator 1 view .LVU245
 784 0042 0028     		cmp	r0, #0
 785 0044 EFD1     		bne	.L45
 118:Core/Src/main.c ****       HAL_I2C_Mem_Write(&hi2c1, 0x41 << 1, 0x04, 1, (uint8_t*)0x00, 1, 1000);
 786              		.loc 1 118 7 is_stmt 1 view .LVU246
 787 0046 4FF47A73 		mov	r3, #1000
 788 004a 0E22     		movs	r2, #14
 789 004c 3649     		ldr	r1, .L46+12
 790 004e 3448     		ldr	r0, .L46+4
 791 0050 FFF7FEFF 		bl	HAL_UART_Transmit
 792              	.LVL28:
 119:Core/Src/main.c **** 
 793              		.loc 1 119 7 view .LVU247
 794 0054 334C     		ldr	r4, .L46+8
 795 0056 4FF47A75 		mov	r5, #1000
 796 005a 0295     		str	r5, [sp, #8]
 797 005c 0123     		movs	r3, #1
 798 005e 0193     		str	r3, [sp, #4]
 799 0060 0022     		movs	r2, #0
 800 0062 0092     		str	r2, [sp]
 801 0064 0422     		movs	r2, #4
 802 0066 8221     		movs	r1, #130
 803 0068 2046     		mov	r0, r4
 804 006a FFF7FEFF 		bl	HAL_I2C_Mem_Write
 805              	.LVL29:
 121:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)"Transmit failed\r\n", 17, 1000);
 806              		.loc 1 121 7 view .LVU248
 121:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)"Transmit failed\r\n", 17, 1000);
 807              		.loc 1 121 11 is_stmt 0 view .LVU249
 808 006e 0095     		str	r5, [sp]
 809 0070 0223     		movs	r3, #2
 810 0072 BC22     		movs	r2, #188
 811 0074 8221     		movs	r1, #130
 812 0076 2046     		mov	r0, r4
 813 0078 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 814              	.LVL30:
 121:Core/Src/main.c ****         HAL_UART_Transmit(&huart1, (uint8_t*)"Transmit failed\r\n", 17, 1000);
 815              		.loc 1 121 10 discriminator 1 view .LVU250
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 42


 816 007c 50B1     		cbz	r0, .L40
 122:Core/Src/main.c ****       } else {
 817              		.loc 1 122 9 is_stmt 1 view .LVU251
 818 007e 2B46     		mov	r3, r5
 819 0080 1122     		movs	r2, #17
 820 0082 2A49     		ldr	r1, .L46+16
 821 0084 2648     		ldr	r0, .L46+4
 822 0086 FFF7FEFF 		bl	HAL_UART_Transmit
 823              	.LVL31:
 824              	.L41:
 136:Core/Src/main.c ****     }
 825              		.loc 1 136 7 view .LVU252
 826 008a 4FF47A70 		mov	r0, #1000
 827 008e FFF7FEFF 		bl	HAL_Delay
 828              	.LVL32:
 829 0092 CFE7     		b	.L37
 830              	.L40:
 831              	.LBB13:
 124:Core/Src/main.c **** 
 832              		.loc 1 124 9 view .LVU253
 833 0094 4FF47A73 		mov	r3, #1000
 834 0098 1222     		movs	r2, #18
 835 009a 2549     		ldr	r1, .L46+20
 836 009c 2048     		ldr	r0, .L46+4
 837 009e FFF7FEFF 		bl	HAL_UART_Transmit
 838              	.LVL33:
 126:Core/Src/main.c ****         if (HAL_I2C_Master_Receive(&hi2c1, 0x41 << 1, data, 2, 1000) != HAL_OK) {
 839              		.loc 1 126 9 view .LVU254
 127:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)"Receive failed\r\n", 16, 1000);
 840              		.loc 1 127 9 view .LVU255
 127:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)"Receive failed\r\n", 16, 1000);
 841              		.loc 1 127 13 is_stmt 0 view .LVU256
 842 00a2 4FF47A73 		mov	r3, #1000
 843 00a6 0093     		str	r3, [sp]
 844 00a8 0223     		movs	r3, #2
 845 00aa 04AA     		add	r2, sp, #16
 846 00ac 8221     		movs	r1, #130
 847 00ae 1D48     		ldr	r0, .L46+8
 848 00b0 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 849              	.LVL34:
 127:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)"Receive failed\r\n", 16, 1000);
 850              		.loc 1 127 12 discriminator 1 view .LVU257
 851 00b4 38B1     		cbz	r0, .L42
 128:Core/Src/main.c ****         } else {
 852              		.loc 1 128 11 is_stmt 1 view .LVU258
 853 00b6 4FF47A73 		mov	r3, #1000
 854 00ba 1022     		movs	r2, #16
 855 00bc 1D49     		ldr	r1, .L46+24
 856 00be 1848     		ldr	r0, .L46+4
 857 00c0 FFF7FEFF 		bl	HAL_UART_Transmit
 858              	.LVL35:
 859 00c4 E1E7     		b	.L41
 860              	.L42:
 861              	.LBB14:
 130:Core/Src/main.c ****           char str[28] =  "The temperature is: ";
 862              		.loc 1 130 11 view .LVU259
 863 00c6 164E     		ldr	r6, .L46+4
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 43


 864 00c8 4FF47A73 		mov	r3, #1000
 865 00cc 1122     		movs	r2, #17
 866 00ce 1A49     		ldr	r1, .L46+28
 867 00d0 3046     		mov	r0, r6
 868 00d2 FFF7FEFF 		bl	HAL_UART_Transmit
 869              	.LVL36:
 131:Core/Src/main.c ****           sprintf(str, "%s%i\r\n", str, (int)round((((uint16_t)((data[0] << 8) | data[1]))/256)+25)
 870              		.loc 1 131 11 view .LVU260
 131:Core/Src/main.c ****           sprintf(str, "%s%i\r\n", str, (int)round((((uint16_t)((data[0] << 8) | data[1]))/256)+25)
 871              		.loc 1 131 16 is_stmt 0 view .LVU261
 872 00d6 05AC     		add	r4, sp, #20
 873 00d8 184D     		ldr	r5, .L46+32
 874 00da 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 875 00dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 876 00de 95E80300 		ldm	r5, {r0, r1}
 877 00e2 44F8040B 		str	r0, [r4], #4
 878 00e6 2170     		strb	r1, [r4]
 879 00e8 0023     		movs	r3, #0
 880 00ea CDF82930 		str	r3, [sp, #41]	@ unaligned
 881 00ee 0B93     		str	r3, [sp, #44]	@ unaligned
 132:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 27, 1000);
 882              		.loc 1 132 11 is_stmt 1 view .LVU262
 132:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 27, 1000);
 883              		.loc 1 132 70 is_stmt 0 view .LVU263
 884 00f0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 132:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 27, 1000);
 885              		.loc 1 132 86 view .LVU264
 886 00f4 9DF81130 		ldrb	r3, [sp, #17]	@ zero_extendqisi2
 132:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 27, 1000);
 887              		.loc 1 132 54 view .LVU265
 888 00f8 43EA0223 		orr	r3, r3, r2, lsl #8
 132:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 27, 1000);
 889              		.loc 1 132 91 view .LVU266
 890 00fc 1B0A     		lsrs	r3, r3, #8
 132:Core/Src/main.c ****           HAL_UART_Transmit(&huart1, (uint8_t*)str, 27, 1000);
 891              		.loc 1 132 11 view .LVU267
 892 00fe 1933     		adds	r3, r3, #25
 893 0100 05AA     		add	r2, sp, #20
 894 0102 0F49     		ldr	r1, .L46+36
 895 0104 1046     		mov	r0, r2
 896 0106 FFF7FEFF 		bl	sprintf
 897              	.LVL37:
 133:Core/Src/main.c ****         }
 898              		.loc 1 133 11 is_stmt 1 view .LVU268
 899 010a 4FF47A73 		mov	r3, #1000
 900 010e 1B22     		movs	r2, #27
 901 0110 05A9     		add	r1, sp, #20
 902 0112 3046     		mov	r0, r6
 903 0114 FFF7FEFF 		bl	HAL_UART_Transmit
 904              	.LVL38:
 905 0118 B7E7     		b	.L41
 906              	.L47:
 907 011a 00BF     		.align	2
 908              	.L46:
 909 011c 00000000 		.word	.LC0
 910 0120 00000000 		.word	huart1
 911 0124 00000000 		.word	hi2c1
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 44


 912 0128 14000000 		.word	.LC1
 913 012c 24000000 		.word	.LC2
 914 0130 38000000 		.word	.LC3
 915 0134 4C000000 		.word	.LC4
 916 0138 60000000 		.word	.LC5
 917 013c 00000000 		.word	.LANCHOR0
 918 0140 74000000 		.word	.LC7
 919              	.LBE14:
 920              	.LBE13:
 921              		.cfi_endproc
 922              	.LFE134:
 924              		.global	huart1
 925              		.section	.bss.huart1,"aw",%nobits
 926              		.align	2
 929              	huart1:
 930 0000 00000000 		.space	72
 930      00000000 
 930      00000000 
 930      00000000 
 930      00000000 
 931              		.global	hspi1
 932              		.section	.bss.hspi1,"aw",%nobits
 933              		.align	2
 936              	hspi1:
 937 0000 00000000 		.space	88
 937      00000000 
 937      00000000 
 937      00000000 
 937      00000000 
 938              		.global	hsd
 939              		.section	.bss.hsd,"aw",%nobits
 940              		.align	2
 943              	hsd:
 944 0000 00000000 		.space	132
 944      00000000 
 944      00000000 
 944      00000000 
 944      00000000 
 945              		.global	hi2c1
 946              		.section	.bss.hi2c1,"aw",%nobits
 947              		.align	2
 950              	hi2c1:
 951 0000 00000000 		.space	84
 951      00000000 
 951      00000000 
 951      00000000 
 951      00000000 
 952              		.section	.rodata
 953              		.align	2
 954              		.set	.LANCHOR0,. + 0
 955              	.LC6:
 956 0000 54686520 		.ascii	"The temperature is: \000"
 956      74656D70 
 956      65726174 
 956      75726520 
 956      69733A20 
 957 0015 00000000 		.space	7
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 45


 957      000000
 958              		.text
 959              	.Letext0:
 960              		.file 3 "C:/PROGRAM FILES (X86)/ARM GNU TOOLCHAIN ARM-NONE-EABI/13.3 REL1/arm-none-eabi/include/ma
 961              		.file 4 "C:/PROGRAM FILES (X86)/ARM GNU TOOLCHAIN ARM-NONE-EABI/13.3 REL1/arm-none-eabi/include/sy
 962              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 963              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 964              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 965              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 966              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 967              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 968              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 969              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_sdmmc.h"
 970              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_sd.h"
 971              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 972              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 973              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 974              		.file 17 "<built-in>"
 975              		.file 18 "FATFS/App/fatfs.h"
ARM GAS  C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:21     .text.MX_SDIO_SD_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:26     .text.MX_SDIO_SD_Init:00000000 MX_SDIO_SD_Init
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:62     .text.MX_SDIO_SD_Init:00000018 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:943    .bss.hsd:00000000 hsd
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:68     .text.MX_GPIO_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:73     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:289    .text.MX_GPIO_Init:000000f8 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:296    .text.Error_Handler:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:302    .text.Error_Handler:00000000 Error_Handler
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:334    .text.MX_SPI1_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:339    .text.MX_SPI1_Init:00000000 MX_SPI1_Init
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:406    .text.MX_SPI1_Init:00000038 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:936    .bss.hspi1:00000000 hspi1
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:412    .text.MX_USART1_UART_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:417    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:471    .text.MX_USART1_UART_Init:0000002c $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:929    .bss.huart1:00000000 huart1
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:477    .text.MX_I2C1_Init:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:482    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:540    .text.MX_I2C1_Init:00000030 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:950    .bss.hi2c1:00000000 hi2c1
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:547    .text.SystemClock_Config:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:553    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:694    .text.SystemClock_Config:00000090 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:700    .rodata.main.str1.4:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:722    .text.main:00000000 $t
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:728    .text.main:00000000 main
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:909    .text.main:0000011c $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:926    .bss.huart1:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:933    .bss.hspi1:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:940    .bss.hsd:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:947    .bss.hi2c1:00000000 $d
C:\Users\Nathan\AppData\Local\Temp\ccM909Cb.s:953    .rodata:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_UART_Init
HAL_I2C_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_FATFS_Init
HAL_UART_Transmit
HAL_I2C_IsDeviceReady
HAL_I2C_Mem_Write
HAL_I2C_Master_Transmit
HAL_Delay
HAL_I2C_Master_Receive
sprintf
